
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005714  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a20  08005a20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a20  08005a20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a20  08005a20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014498  20000070  08005a98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014508  08005a98  00024508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b854  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b53  00000000  00000000  0002b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119fe  00000000  00000000  0002e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8ed  00000000  00000000  000401ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063174  00000000  00000000  0004babb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aec2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e50  00000000  00000000  000aec80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800589c 	.word	0x0800589c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800589c 	.word	0x0800589c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f20 	.word	0x20012f20
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <main>:

/*  Cabeceras de las funciones del programa */
void vTaskOne(void *pvParameters);
void vTaskTwo(void *pvParameters);

int main(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af02      	add	r7, sp, #8
	/* Activamos la unidad de punto flotante (FPU) */
	//SCB->CPACR    |= (0xF << 20);
	/* Activamos del contador de Ticks */
	//DWT->CTRL    |= (1 << 0);
	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 8000326:	f002 fcf5 	bl	8002d14 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	SEGGER_SYSVIEW_Start();
 800032a:	f004 f81d 	bl	8004368 <SEGGER_SYSVIEW_Start>

	BaseType_t xReturned;
	TaskHandle_t xHandlerTask1 = NULL;
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandlerTask2 = NULL;
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]

	xReturned = xTaskCreate(vTaskOne, /* Function that implements the task. */
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2302      	movs	r3, #2
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <main+0x84>)
 8000342:	22c8      	movs	r2, #200	; 0xc8
 8000344:	4918      	ldr	r1, [pc, #96]	; (80003a8 <main+0x88>)
 8000346:	4819      	ldr	r0, [pc, #100]	; (80003ac <main+0x8c>)
 8000348:	f000 fea8 	bl	800109c <xTaskCreate>
 800034c:	6178      	str	r0, [r7, #20]
	STACK_SIZE, /* Stack size in words, not bytes. */
	("Hola mundo desde la Tarea-1"), /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&xHandlerTask1); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d00a      	beq.n	800036a <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000358:	f383 8811 	msr	BASEPRI, r3
 800035c:	f3bf 8f6f 	isb	sy
 8000360:	f3bf 8f4f 	dsb	sy
 8000364:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000366:	bf00      	nop
 8000368:	e7fe      	b.n	8000368 <main+0x48>

	xReturned = xTaskCreate(vTaskTwo, /* Function that implements the task. */
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2302      	movs	r3, #2
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <main+0x90>)
 8000374:	22c8      	movs	r2, #200	; 0xc8
 8000376:	490f      	ldr	r1, [pc, #60]	; (80003b4 <main+0x94>)
 8000378:	480f      	ldr	r0, [pc, #60]	; (80003b8 <main+0x98>)
 800037a:	f000 fe8f 	bl	800109c <xTaskCreate>
 800037e:	6178      	str	r0, [r7, #20]
	STACK_SIZE, /* Stack size in words, not bytes. */
	("Hola mundo desde la Tarea-2"), /* Parameter passed into the task. */
	2,/* Priority at which the task is created. */
	&xHandlerTask2); /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d00a      	beq.n	800039c <main+0x7c>
        __asm volatile
 8000386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800038a:	f383 8811 	msr	BASEPRI, r3
 800038e:	f3bf 8f6f 	isb	sy
 8000392:	f3bf 8f4f 	dsb	sy
 8000396:	60fb      	str	r3, [r7, #12]
    }
 8000398:	bf00      	nop
 800039a:	e7fe      	b.n	800039a <main+0x7a>

	//STart the created tasks running
	vTaskStartScheduler();
 800039c:	f000 ffe2 	bl	8001364 <vTaskStartScheduler>

	/* Loop forever */
	while (1) {
 80003a0:	e7fe      	b.n	80003a0 <main+0x80>
 80003a2:	bf00      	nop
 80003a4:	080058b4 	.word	0x080058b4
 80003a8:	080058d0 	.word	0x080058d0
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080058d8 	.word	0x080058d8
 80003b4:	080058f4 	.word	0x080058f4
 80003b8:	080003f5 	.word	0x080003f5

080003bc <vTaskOne>:
	}
}

//Funcion que gobierna la tarea 1

void vTaskOne(void *pvParameters) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	while (1) {
		sprintf(bufferMsg, "%s\n", (char*) pvParameters);
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <vTaskOne+0x2c>)
 80003c8:	4808      	ldr	r0, [pc, #32]	; (80003ec <vTaskOne+0x30>)
 80003ca:	f004 fdf9 	bl	8004fc0 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(bufferMsg);
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <vTaskOne+0x30>)
 80003d0:	f004 fd3c 	bl	8004e4c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <vTaskOne+0x34>)
 80003d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	f3bf 8f4f 	dsb	sy
 80003e0:	f3bf 8f6f 	isb	sy
		sprintf(bufferMsg, "%s\n", (char*) pvParameters);
 80003e4:	e7ee      	b.n	80003c4 <vTaskOne+0x8>
 80003e6:	bf00      	nop
 80003e8:	080058fc 	.word	0x080058fc
 80003ec:	2000008c 	.word	0x2000008c
 80003f0:	e000ed04 	.word	0xe000ed04

080003f4 <vTaskTwo>:

	}
}

void vTaskTwo(void *pvParameters) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (1) {
		sprintf(bufferMsg, "%s\n", (char*) pvParameters);
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4908      	ldr	r1, [pc, #32]	; (8000420 <vTaskTwo+0x2c>)
 8000400:	4808      	ldr	r0, [pc, #32]	; (8000424 <vTaskTwo+0x30>)
 8000402:	f004 fddd 	bl	8004fc0 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(bufferMsg);
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <vTaskTwo+0x30>)
 8000408:	f004 fd20 	bl	8004e4c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <vTaskTwo+0x34>)
 800040e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	f3bf 8f4f 	dsb	sy
 8000418:	f3bf 8f6f 	isb	sy
		sprintf(bufferMsg, "%s\n", (char*) pvParameters);
 800041c:	e7ee      	b.n	80003fc <vTaskTwo+0x8>
 800041e:	bf00      	nop
 8000420:	080058fc 	.word	0x080058fc
 8000424:	2000008c 	.word	0x2000008c
 8000428:	e000ed04 	.word	0xe000ed04

0800042c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000430:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <LoopForever+0x6>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <LoopForever+0xe>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <LoopForever+0x16>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045a:	f004 fd67 	bl	8004f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045e:	f7ff ff5f 	bl	8000320 <main>

08000462 <LoopForever>:

LoopForever:
    b LoopForever
 8000462:	e7fe      	b.n	8000462 <LoopForever>
  ldr   r0, =_estack
 8000464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000470:	08005a28 	.word	0x08005a28
  ldr r2, =_sbss
 8000474:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000478:	20014508 	.word	0x20014508

0800047c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC_IRQHandler>

0800047e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f103 0208 	add.w	r2, r3, #8
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000496:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f103 0208 	add.w	r2, r3, #8
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	f103 0208 	add.w	r2, r3, #8
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000536:	d103      	bne.n	8000540 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00c      	b.n	800055a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3308      	adds	r3, #8
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e002      	b.n	800054e <vListInsert+0x2e>
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	429a      	cmp	r2, r3
 8000558:	d2f6      	bcs.n	8000548 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	601a      	str	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000592:	b480      	push	{r7}
 8000594:	b085      	sub	sp, #20
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	691b      	ldr	r3, [r3, #16]
 800059e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	6892      	ldr	r2, [r2, #8]
 80005a8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	6852      	ldr	r2, [r2, #4]
 80005b2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d103      	bne.n	80005c6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	681b      	ldr	r3, [r3, #0]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10a      	bne.n	8000612 <xQueueGenericReset+0x2a>
        __asm volatile
 80005fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000600:	f383 8811 	msr	BASEPRI, r3
 8000604:	f3bf 8f6f 	isb	sy
 8000608:	f3bf 8f4f 	dsb	sy
 800060c:	60bb      	str	r3, [r7, #8]
    }
 800060e:	bf00      	nop
 8000610:	e7fe      	b.n	8000610 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000612:	f002 f849 	bl	80026a8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800061e:	68f9      	ldr	r1, [r7, #12]
 8000620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000622:	fb01 f303 	mul.w	r3, r1, r3
 8000626:	441a      	add	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2200      	movs	r2, #0
 8000630:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000642:	3b01      	subs	r3, #1
 8000644:	68f9      	ldr	r1, [r7, #12]
 8000646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	441a      	add	r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	22ff      	movs	r2, #255	; 0xff
 800065e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d114      	bne.n	8000692 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01a      	beq.n	80006a6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3310      	adds	r3, #16
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f91f 	bl	80018b8 <xTaskRemoveFromEventList>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d012      	beq.n	80006a6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <xQueueGenericReset+0xcc>)
 8000682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	e009      	b.n	80006a6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3310      	adds	r3, #16
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fef1 	bl	800047e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3324      	adds	r3, #36	; 0x24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff feec 	bl	800047e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80006a6:	f002 f82f 	bl	8002708 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	e000ed04 	.word	0xe000ed04

080006b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	; 0x30
 80006bc:	af02      	add	r7, sp, #8
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10a      	bne.n	80006e2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80006cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d0:	f383 8811 	msr	BASEPRI, r3
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	61bb      	str	r3, [r7, #24]
    }
 80006de:	bf00      	nop
 80006e0:	e7fe      	b.n	80006e0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	fb02 f303 	mul.w	r3, r2, r3
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d006      	beq.n	8000700 <xQueueGenericCreate+0x48>
 80006f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d101      	bne.n	8000704 <xQueueGenericCreate+0x4c>
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <xQueueGenericCreate+0x4e>
 8000704:	2300      	movs	r3, #0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10a      	bne.n	8000720 <xQueueGenericCreate+0x68>
        __asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	617b      	str	r3, [r7, #20]
    }
 800071c:	bf00      	nop
 800071e:	e7fe      	b.n	800071e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000726:	d90a      	bls.n	800073e <xQueueGenericCreate+0x86>
        __asm volatile
 8000728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072c:	f383 8811 	msr	BASEPRI, r3
 8000730:	f3bf 8f6f 	isb	sy
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	613b      	str	r3, [r7, #16]
    }
 800073a:	bf00      	nop
 800073c:	e7fe      	b.n	800073c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	3350      	adds	r3, #80	; 0x50
 8000742:	4618      	mov	r0, r3
 8000744:	f002 f8da 	bl	80028fc <pvPortMalloc>
 8000748:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800074a:	6a3b      	ldr	r3, [r7, #32]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00d      	beq.n	800076c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3350      	adds	r3, #80	; 0x50
 8000758:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	4613      	mov	r3, r2
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 f805 	bl	8000776 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800076c:	6a3b      	ldr	r3, [r7, #32]
    }
 800076e:	4618      	mov	r0, r3
 8000770:	3728      	adds	r7, #40	; 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b084      	sub	sp, #16
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d103      	bne.n	8000792 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e002      	b.n	8000798 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	68ba      	ldr	r2, [r7, #8]
 80007a2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007a4:	2101      	movs	r1, #1
 80007a6:	69b8      	ldr	r0, [r7, #24]
 80007a8:	f7ff ff1e 	bl	80005e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	78fa      	ldrb	r2, [r7, #3]
 80007b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	68f9      	ldr	r1, [r7, #12]
 80007ba:	2073      	movs	r0, #115	; 0x73
 80007bc:	f003 fccc 	bl	8004158 <SEGGER_SYSVIEW_RecordU32x3>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80007de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10a      	bne.n	80007fa <xQueueGenericSend+0x32>
        __asm volatile
 80007e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e8:	f383 8811 	msr	BASEPRI, r3
 80007ec:	f3bf 8f6f 	isb	sy
 80007f0:	f3bf 8f4f 	dsb	sy
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80007f6:	bf00      	nop
 80007f8:	e7fe      	b.n	80007f8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d103      	bne.n	8000808 <xQueueGenericSend+0x40>
 8000800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <xQueueGenericSend+0x44>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <xQueueGenericSend+0x46>
 800080c:	2300      	movs	r3, #0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10a      	bne.n	8000828 <xQueueGenericSend+0x60>
        __asm volatile
 8000812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000816:	f383 8811 	msr	BASEPRI, r3
 800081a:	f3bf 8f6f 	isb	sy
 800081e:	f3bf 8f4f 	dsb	sy
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000824:	bf00      	nop
 8000826:	e7fe      	b.n	8000826 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d103      	bne.n	8000836 <xQueueGenericSend+0x6e>
 800082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000832:	2b01      	cmp	r3, #1
 8000834:	d101      	bne.n	800083a <xQueueGenericSend+0x72>
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <xQueueGenericSend+0x74>
 800083a:	2300      	movs	r3, #0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10a      	bne.n	8000856 <xQueueGenericSend+0x8e>
        __asm volatile
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	623b      	str	r3, [r7, #32]
    }
 8000852:	bf00      	nop
 8000854:	e7fe      	b.n	8000854 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000856:	f001 f9cf 	bl	8001bf8 <xTaskGetSchedulerState>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <xQueueGenericSend+0x9e>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <xQueueGenericSend+0xa2>
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <xQueueGenericSend+0xa4>
 800086a:	2300      	movs	r3, #0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10a      	bne.n	8000886 <xQueueGenericSend+0xbe>
        __asm volatile
 8000870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	61fb      	str	r3, [r7, #28]
    }
 8000882:	bf00      	nop
 8000884:	e7fe      	b.n	8000884 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000886:	f001 ff0f 	bl	80026a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000892:	429a      	cmp	r2, r3
 8000894:	d302      	bcc.n	800089c <xQueueGenericSend+0xd4>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d136      	bne.n	800090a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800089c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089e:	4618      	mov	r0, r3
 80008a0:	f004 f9e8 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	460b      	mov	r3, r1
 80008ae:	4601      	mov	r1, r0
 80008b0:	205a      	movs	r0, #90	; 0x5a
 80008b2:	f003 fcc7 	bl	8004244 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008bc:	f000 fa78 	bl	8000db0 <prvCopyDataToQueue>
 80008c0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d010      	beq.n	80008ec <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008cc:	3324      	adds	r3, #36	; 0x24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fff2 	bl	80018b8 <xTaskRemoveFromEventList>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d013      	beq.n	8000902 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <xQueueGenericSend+0x248>)
 80008dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	f3bf 8f4f 	dsb	sy
 80008e6:	f3bf 8f6f 	isb	sy
 80008ea:	e00a      	b.n	8000902 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80008ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <xQueueGenericSend+0x248>)
 80008f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	f3bf 8f4f 	dsb	sy
 80008fe:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000902:	f001 ff01 	bl	8002708 <vPortExitCritical>
                return pdPASS;
 8000906:	2301      	movs	r3, #1
 8000908:	e07d      	b.n	8000a06 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d110      	bne.n	8000932 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000910:	f001 fefa 	bl	8002708 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000916:	4618      	mov	r0, r3
 8000918:	f004 f9ac 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	460b      	mov	r3, r1
 8000926:	4601      	mov	r1, r0
 8000928:	205a      	movs	r0, #90	; 0x5a
 800092a:	f003 fc8b 	bl	8004244 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800092e:	2300      	movs	r3, #0
 8000930:	e069      	b.n	8000a06 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000934:	2b00      	cmp	r3, #0
 8000936:	d106      	bne.n	8000946 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f821 	bl	8001984 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000942:	2301      	movs	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000946:	f001 fedf 	bl	8002708 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800094a:	f000 fd6d 	bl	8001428 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800094e:	f001 feab 	bl	80026a8 <vPortEnterCritical>
 8000952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000958:	b25b      	sxtb	r3, r3
 800095a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800095e:	d103      	bne.n	8000968 <xQueueGenericSend+0x1a0>
 8000960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800096a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800096e:	b25b      	sxtb	r3, r3
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000974:	d103      	bne.n	800097e <xQueueGenericSend+0x1b6>
 8000976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800097e:	f001 fec3 	bl	8002708 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000982:	1d3a      	adds	r2, r7, #4
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f810 	bl	80019b0 <xTaskCheckForTimeOut>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d124      	bne.n	80009e0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000998:	f000 fb02 	bl	8000fa0 <prvIsQueueFull>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d018      	beq.n	80009d4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a4:	3310      	adds	r3, #16
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 ff32 	bl	8001814 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80009b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009b2:	f000 fa8d 	bl	8000ed0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80009b6:	f000 fd45 	bl	8001444 <xTaskResumeAll>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f47f af62 	bne.w	8000886 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <xQueueGenericSend+0x248>)
 80009c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	e758      	b.n	8000886 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80009d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009d6:	f000 fa7b 	bl	8000ed0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009da:	f000 fd33 	bl	8001444 <xTaskResumeAll>
 80009de:	e752      	b.n	8000886 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80009e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009e2:	f000 fa75 	bl	8000ed0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009e6:	f000 fd2d 	bl	8001444 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80009ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 f941 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	460b      	mov	r3, r1
 80009fc:	4601      	mov	r1, r0
 80009fe:	205a      	movs	r0, #90	; 0x5a
 8000a00:	f003 fc20 	bl	8004244 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000a04:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000ed04 	.word	0xe000ed04

08000a14 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	; 0x40
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d10a      	bne.n	8000a42 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a30:	f383 8811 	msr	BASEPRI, r3
 8000a34:	f3bf 8f6f 	isb	sy
 8000a38:	f3bf 8f4f 	dsb	sy
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000a3e:	bf00      	nop
 8000a40:	e7fe      	b.n	8000a40 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d103      	bne.n	8000a50 <xQueueGenericSendFromISR+0x3c>
 8000a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <xQueueGenericSendFromISR+0x40>
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <xQueueGenericSendFromISR+0x42>
 8000a54:	2300      	movs	r3, #0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10a      	bne.n	8000a70 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5e:	f383 8811 	msr	BASEPRI, r3
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000a6c:	bf00      	nop
 8000a6e:	e7fe      	b.n	8000a6e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d103      	bne.n	8000a7e <xQueueGenericSendFromISR+0x6a>
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d101      	bne.n	8000a82 <xQueueGenericSendFromISR+0x6e>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <xQueueGenericSendFromISR+0x70>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10a      	bne.n	8000a9e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a8c:	f383 8811 	msr	BASEPRI, r3
 8000a90:	f3bf 8f6f 	isb	sy
 8000a94:	f3bf 8f4f 	dsb	sy
 8000a98:	623b      	str	r3, [r7, #32]
    }
 8000a9a:	bf00      	nop
 8000a9c:	e7fe      	b.n	8000a9c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a9e:	f001 feed 	bl	800287c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8000aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	61fa      	str	r2, [r7, #28]
 8000ab8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000aba:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d302      	bcc.n	8000ad0 <xQueueGenericSendFromISR+0xbc>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d148      	bne.n	8000b62 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f004 f8c6 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	461a      	mov	r2, r3
 8000aee:	2060      	movs	r0, #96	; 0x60
 8000af0:	f003 fad8 	bl	80040a4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000afa:	f000 f959 	bl	8000db0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000afe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b06:	d112      	bne.n	8000b2e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d025      	beq.n	8000b5c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b12:	3324      	adds	r3, #36	; 0x24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fecf 	bl	80018b8 <xTaskRemoveFromEventList>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01d      	beq.n	8000b5c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d01a      	beq.n	8000b5c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e016      	b.n	8000b5c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000b2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b32:	2b7f      	cmp	r3, #127	; 0x7f
 8000b34:	d10a      	bne.n	8000b4c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3a:	f383 8811 	msr	BASEPRI, r3
 8000b3e:	f3bf 8f6f 	isb	sy
 8000b42:	f3bf 8f4f 	dsb	sy
 8000b46:	617b      	str	r3, [r7, #20]
    }
 8000b48:	bf00      	nop
 8000b4a:	e7fe      	b.n	8000b4a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b50:	3301      	adds	r3, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000b60:	e00b      	b.n	8000b7a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 f885 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2060      	movs	r0, #96	; 0x60
 8000b72:	f003 fa97 	bl	80040a4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000b84:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3740      	adds	r7, #64	; 0x40
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b08f      	sub	sp, #60	; 0x3c
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10a      	bne.n	8000bc0 <xQueueReceive+0x30>
        __asm volatile
 8000baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bae:	f383 8811 	msr	BASEPRI, r3
 8000bb2:	f3bf 8f6f 	isb	sy
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	623b      	str	r3, [r7, #32]
    }
 8000bbc:	bf00      	nop
 8000bbe:	e7fe      	b.n	8000bbe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <xQueueReceive+0x3e>
 8000bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <xQueueReceive+0x42>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <xQueueReceive+0x44>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10a      	bne.n	8000bee <xQueueReceive+0x5e>
        __asm volatile
 8000bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bdc:	f383 8811 	msr	BASEPRI, r3
 8000be0:	f3bf 8f6f 	isb	sy
 8000be4:	f3bf 8f4f 	dsb	sy
 8000be8:	61fb      	str	r3, [r7, #28]
    }
 8000bea:	bf00      	nop
 8000bec:	e7fe      	b.n	8000bec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000bee:	f001 f803 	bl	8001bf8 <xTaskGetSchedulerState>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <xQueueReceive+0x6e>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <xQueueReceive+0x72>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e000      	b.n	8000c04 <xQueueReceive+0x74>
 8000c02:	2300      	movs	r3, #0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10a      	bne.n	8000c1e <xQueueReceive+0x8e>
        __asm volatile
 8000c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c0c:	f383 8811 	msr	BASEPRI, r3
 8000c10:	f3bf 8f6f 	isb	sy
 8000c14:	f3bf 8f4f 	dsb	sy
 8000c18:	61bb      	str	r3, [r7, #24]
    }
 8000c1a:	bf00      	nop
 8000c1c:	e7fe      	b.n	8000c1c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c1e:	f001 fd43 	bl	80026a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d02f      	beq.n	8000c8e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c32:	f000 f927 	bl	8000e84 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f81b 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	2000      	movs	r0, #0
 8000c42:	f004 f817 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000c46:	4602      	mov	r2, r0
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	9100      	str	r1, [sp, #0]
 8000c4e:	4621      	mov	r1, r4
 8000c50:	205c      	movs	r0, #92	; 0x5c
 8000c52:	f003 faf7 	bl	8004244 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00f      	beq.n	8000c86 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c68:	3310      	adds	r3, #16
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fe24 	bl	80018b8 <xTaskRemoveFromEventList>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d007      	beq.n	8000c86 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000c76:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <xQueueReceive+0x21c>)
 8000c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	f3bf 8f4f 	dsb	sy
 8000c82:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c86:	f001 fd3f 	bl	8002708 <vPortExitCritical>
                return pdPASS;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e08a      	b.n	8000da4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d113      	bne.n	8000cbc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c94:	f001 fd38 	bl	8002708 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 ffea 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f003 ffe6 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2101      	movs	r1, #1
 8000cae:	9100      	str	r1, [sp, #0]
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	205c      	movs	r0, #92	; 0x5c
 8000cb4:	f003 fac6 	bl	8004244 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e073      	b.n	8000da4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d106      	bne.n	8000cd0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fe5c 	bl	8001984 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cd0:	f001 fd1a 	bl	8002708 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cd4:	f000 fba8 	bl	8001428 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cd8:	f001 fce6 	bl	80026a8 <vPortEnterCritical>
 8000cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce8:	d103      	bne.n	8000cf2 <xQueueReceive+0x162>
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cfe:	d103      	bne.n	8000d08 <xQueueReceive+0x178>
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d08:	f001 fcfe 	bl	8002708 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d0c:	1d3a      	adds	r2, r7, #4
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fe4b 	bl	80019b0 <xTaskCheckForTimeOut>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d124      	bne.n	8000d6a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d22:	f000 f927 	bl	8000f74 <prvIsQueueEmpty>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d018      	beq.n	8000d5e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	3324      	adds	r3, #36	; 0x24
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fd6d 	bl	8001814 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d3c:	f000 f8c8 	bl	8000ed0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d40:	f000 fb80 	bl	8001444 <xTaskResumeAll>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f47f af69 	bne.w	8000c1e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <xQueueReceive+0x21c>)
 8000d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	f3bf 8f6f 	isb	sy
 8000d5c:	e75f      	b.n	8000c1e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d60:	f000 f8b6 	bl	8000ed0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d64:	f000 fb6e 	bl	8001444 <xTaskResumeAll>
 8000d68:	e759      	b.n	8000c1e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d6c:	f000 f8b0 	bl	8000ed0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d70:	f000 fb68 	bl	8001444 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d76:	f000 f8fd 	bl	8000f74 <prvIsQueueEmpty>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f43f af4e 	beq.w	8000c1e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 ff75 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f003 ff71 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 8000d92:	4602      	mov	r2, r0
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2101      	movs	r1, #1
 8000d98:	9100      	str	r1, [sp, #0]
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	205c      	movs	r0, #92	; 0x5c
 8000d9e:	f003 fa51 	bl	8004244 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000da2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3734      	adds	r7, #52	; 0x34
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	e000ed04 	.word	0xe000ed04

08000db0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d14d      	bne.n	8000e72 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 ff2a 	bl	8001c34 <xTaskPriorityDisinherit>
 8000de0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	e043      	b.n	8000e72 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d119      	bne.n	8000e24 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6858      	ldr	r0, [r3, #4]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	f004 f8ca 	bl	8004f94 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	441a      	add	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d32b      	bcc.n	8000e72 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	e026      	b.n	8000e72 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	68d8      	ldr	r0, [r3, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	f004 f8b0 	bl	8004f94 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	441a      	add	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	425b      	negs	r3, r3
 8000e5a:	441a      	add	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d105      	bne.n	8000e72 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000e7a:	697b      	ldr	r3, [r7, #20]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d018      	beq.n	8000ec8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	441a      	add	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d303      	bcc.n	8000eb8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	6838      	ldr	r0, [r7, #0]
 8000ec4:	f004 f866 	bl	8004f94 <memcpy>
    }
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000ed8:	f001 fbe6 	bl	80026a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ee2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ee4:	e011      	b.n	8000f0a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d012      	beq.n	8000f14 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3324      	adds	r3, #36	; 0x24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fce0 	bl	80018b8 <xTaskRemoveFromEventList>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000efe:	f000 fdbd 	bl	8001a7c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	dce9      	bgt.n	8000ee6 <prvUnlockQueue+0x16>
 8000f12:	e000      	b.n	8000f16 <prvUnlockQueue+0x46>
                        break;
 8000f14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	22ff      	movs	r2, #255	; 0xff
 8000f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f1e:	f001 fbf3 	bl	8002708 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f22:	f001 fbc1 	bl	80026a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f2e:	e011      	b.n	8000f54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d012      	beq.n	8000f5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fcbb 	bl	80018b8 <xTaskRemoveFromEventList>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f48:	f000 fd98 	bl	8001a7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dce9      	bgt.n	8000f30 <prvUnlockQueue+0x60>
 8000f5c:	e000      	b.n	8000f60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000f5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000f68:	f001 fbce 	bl	8002708 <vPortExitCritical>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f7c:	f001 fb94 	bl	80026a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e001      	b.n	8000f92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f92:	f001 fbb9 	bl	8002708 <vPortExitCritical>

    return xReturn;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fa8:	f001 fb7e 	bl	80026a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d102      	bne.n	8000fbe <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e001      	b.n	8000fc2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fc2:	f001 fba1 	bl	8002708 <vPortExitCritical>

    return xReturn;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e01e      	b.n	800101e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <vQueueAddToRegistry+0x60>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d115      	bne.n	8001018 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000fec:	4910      	ldr	r1, [pc, #64]	; (8001030 <vQueueAddToRegistry+0x60>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <vQueueAddToRegistry+0x60>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fe35 	bl	8004c74 <SEGGER_SYSVIEW_ShrinkId>
 800100a:	4601      	mov	r1, r0
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	2071      	movs	r0, #113	; 0x71
 8001012:	f003 f847 	bl	80040a4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001016:	e006      	b.n	8001026 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d9dd      	bls.n	8000fe0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000cc 	.word	0x200000cc

08001034 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001044:	f001 fb30 	bl	80026a8 <vPortEnterCritical>
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800104e:	b25b      	sxtb	r3, r3
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d103      	bne.n	800105e <vQueueWaitForMessageRestricted+0x2a>
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001064:	b25b      	sxtb	r3, r3
 8001066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800106a:	d103      	bne.n	8001074 <vQueueWaitForMessageRestricted+0x40>
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001074:	f001 fb48 	bl	8002708 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3324      	adds	r3, #36	; 0x24
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fbe7 	bl	800185c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff1e 	bl	8000ed0 <prvUnlockQueue>
    }
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fc23 	bl	80028fc <pvPortMalloc>
 80010b6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00e      	beq.n	80010dc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80010be:	2058      	movs	r0, #88	; 0x58
 80010c0:	f001 fc1c 	bl	80028fc <pvPortMalloc>
 80010c4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
 80010d2:	e005      	b.n	80010e0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80010d4:	6978      	ldr	r0, [r7, #20]
 80010d6:	f001 fcf1 	bl	8002abc <vPortFree>
 80010da:	e001      	b.n	80010e0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d013      	beq.n	800110e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	2300      	movs	r3, #0
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f80e 	bl	800111e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001102:	69f8      	ldr	r0, [r7, #28]
 8001104:	f000 f8a2 	bl	800124c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	e002      	b.n	8001114 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001114:	69bb      	ldr	r3, [r7, #24]
    }
 8001116:	4618      	mov	r0, r3
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b088      	sub	sp, #32
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	461a      	mov	r2, r3
 8001136:	21a5      	movs	r1, #165	; 0xa5
 8001138:	f003 ff3a 	bl	8004fb0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001146:	3b01      	subs	r3, #1
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f023 0307 	bic.w	r3, r3, #7
 8001154:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00a      	beq.n	8001176 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001164:	f383 8811 	msr	BASEPRI, r3
 8001168:	f3bf 8f6f 	isb	sy
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	617b      	str	r3, [r7, #20]
    }
 8001172:	bf00      	nop
 8001174:	e7fe      	b.n	8001174 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d01f      	beq.n	80011bc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	e012      	b.n	80011a8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	4413      	add	r3, r2
 8001188:	7819      	ldrb	r1, [r3, #0]
 800118a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	4413      	add	r3, r2
 8001190:	3334      	adds	r3, #52	; 0x34
 8001192:	460a      	mov	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b09      	cmp	r3, #9
 80011ac:	d9e9      	bls.n	8001182 <prvInitialiseNewTask+0x64>
 80011ae:	e000      	b.n	80011b2 <prvInitialiseNewTask+0x94>
            {
                break;
 80011b0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80011ba:	e003      	b.n	80011c4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d901      	bls.n	80011ce <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80011ca:	2304      	movs	r3, #4
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80011d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011d8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80011da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011dc:	2200      	movs	r2, #0
 80011de:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80011e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e2:	3304      	adds	r3, #4
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f96a 	bl	80004be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80011ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ec:	3318      	adds	r3, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f965 	bl	80004be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80011f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011f8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	f1c3 0205 	rsb	r2, r3, #5
 8001200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001202:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	3350      	adds	r3, #80	; 0x50
 800120e:	2204      	movs	r2, #4
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fecc 	bl	8004fb0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121a:	3354      	adds	r3, #84	; 0x54
 800121c:	2201      	movs	r2, #1
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fec5 	bl	8004fb0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f001 f90c 	bl	8002448 <pxPortInitialiseStack>
 8001230:	4602      	mov	r2, r0
 8001232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001234:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001240:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001254:	f001 fa28 	bl	80026a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <prvAddNewTaskToReadyList+0xfc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <prvAddNewTaskToReadyList+0xfc>)
 8001260:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <prvAddNewTaskToReadyList+0x100>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d109      	bne.n	800127e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800126a:	4a38      	ldr	r2, [pc, #224]	; (800134c <prvAddNewTaskToReadyList+0x100>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001270:	4b35      	ldr	r3, [pc, #212]	; (8001348 <prvAddNewTaskToReadyList+0xfc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d110      	bne.n	800129a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001278:	f000 fc24 	bl	8001ac4 <prvInitialiseTaskLists>
 800127c:	e00d      	b.n	800129a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <prvAddNewTaskToReadyList+0x104>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001286:	4b31      	ldr	r3, [pc, #196]	; (800134c <prvAddNewTaskToReadyList+0x100>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	429a      	cmp	r2, r3
 8001292:	d802      	bhi.n	800129a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001294:	4a2d      	ldr	r2, [pc, #180]	; (800134c <prvAddNewTaskToReadyList+0x100>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <prvAddNewTaskToReadyList+0x108>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a2c      	ldr	r2, [pc, #176]	; (8001354 <prvAddNewTaskToReadyList+0x108>)
 80012a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <prvAddNewTaskToReadyList+0x108>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <prvAddNewTaskToReadyList+0x94>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fbb7 	bl	8004a28 <SEGGER_SYSVIEW_OnTaskCreate>
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	461d      	mov	r5, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	461c      	mov	r4, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	1ae3      	subs	r3, r4, r3
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	462b      	mov	r3, r5
 80012dc:	f001 fdbc 	bl	8002e58 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fc24 	bl	8004b30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	2201      	movs	r2, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <prvAddNewTaskToReadyList+0x10c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <prvAddNewTaskToReadyList+0x10c>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <prvAddNewTaskToReadyList+0x110>)
 8001308:	441a      	add	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3304      	adds	r3, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f7ff f8e1 	bl	80004d8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001316:	f001 f9f7 	bl	8002708 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <prvAddNewTaskToReadyList+0x104>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00e      	beq.n	8001340 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <prvAddNewTaskToReadyList+0x100>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <prvAddNewTaskToReadyList+0x114>)
 8001332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bdb0      	pop	{r4, r5, r7, pc}
 8001348:	200001e4 	.word	0x200001e4
 800134c:	2000010c 	.word	0x2000010c
 8001350:	200001f0 	.word	0x200001f0
 8001354:	20000200 	.word	0x20000200
 8001358:	200001ec 	.word	0x200001ec
 800135c:	20000110 	.word	0x20000110
 8001360:	e000ed04 	.word	0xe000ed04

08001364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <vTaskStartScheduler+0xa4>)
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	2300      	movs	r3, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	2282      	movs	r2, #130	; 0x82
 8001376:	4925      	ldr	r1, [pc, #148]	; (800140c <vTaskStartScheduler+0xa8>)
 8001378:	4825      	ldr	r0, [pc, #148]	; (8001410 <vTaskStartScheduler+0xac>)
 800137a:	f7ff fe8f 	bl	800109c <xTaskCreate>
 800137e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d102      	bne.n	800138c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001386:	f000 fd4d 	bl	8001e24 <xTimerCreateTimerTask>
 800138a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d124      	bne.n	80013dc <vTaskStartScheduler+0x78>
        __asm volatile
 8001392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001396:	f383 8811 	msr	BASEPRI, r3
 800139a:	f3bf 8f6f 	isb	sy
 800139e:	f3bf 8f4f 	dsb	sy
 80013a2:	60bb      	str	r3, [r7, #8]
    }
 80013a4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <vTaskStartScheduler+0xb0>)
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <vTaskStartScheduler+0xb4>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <vTaskStartScheduler+0xb8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <vTaskStartScheduler+0xbc>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <vTaskStartScheduler+0xa4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d102      	bne.n	80013cc <vTaskStartScheduler+0x68>
 80013c6:	f003 fb13 	bl	80049f0 <SEGGER_SYSVIEW_OnIdle>
 80013ca:	e004      	b.n	80013d6 <vTaskStartScheduler+0x72>
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <vTaskStartScheduler+0xbc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fb6b 	bl	8004aac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80013d6:	f001 f8c5 	bl	8002564 <xPortStartScheduler>
 80013da:	e00e      	b.n	80013fa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e2:	d10a      	bne.n	80013fa <vTaskStartScheduler+0x96>
        __asm volatile
 80013e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e8:	f383 8811 	msr	BASEPRI, r3
 80013ec:	f3bf 8f6f 	isb	sy
 80013f0:	f3bf 8f4f 	dsb	sy
 80013f4:	607b      	str	r3, [r7, #4]
    }
 80013f6:	bf00      	nop
 80013f8:	e7fe      	b.n	80013f8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <vTaskStartScheduler+0xc0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000208 	.word	0x20000208
 800140c:	08005900 	.word	0x08005900
 8001410:	08001a95 	.word	0x08001a95
 8001414:	20000204 	.word	0x20000204
 8001418:	200001f0 	.word	0x200001f0
 800141c:	200001e8 	.word	0x200001e8
 8001420:	2000010c 	.word	0x2000010c
 8001424:	20000004 	.word	0x20000004

08001428 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <vTaskSuspendAll+0x18>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a03      	ldr	r2, [pc, #12]	; (8001440 <vTaskSuspendAll+0x18>)
 8001434:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	2000020c 	.word	0x2000020c

08001444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <xTaskResumeAll+0x11c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10a      	bne.n	8001470 <xTaskResumeAll+0x2c>
        __asm volatile
 800145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	603b      	str	r3, [r7, #0]
    }
 800146c:	bf00      	nop
 800146e:	e7fe      	b.n	800146e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001470:	f001 f91a 	bl	80026a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <xTaskResumeAll+0x11c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	4a39      	ldr	r2, [pc, #228]	; (8001560 <xTaskResumeAll+0x11c>)
 800147c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <xTaskResumeAll+0x11c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d165      	bne.n	8001552 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <xTaskResumeAll+0x120>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d061      	beq.n	8001552 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800148e:	e032      	b.n	80014f6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <xTaskResumeAll+0x124>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3318      	adds	r3, #24
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f878 	bl	8000592 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3304      	adds	r3, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f873 	bl	8000592 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fb3e 	bl	8004b30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2201      	movs	r2, #1
 80014ba:	409a      	lsls	r2, r3
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <xTaskResumeAll+0x128>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <xTaskResumeAll+0x128>)
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4a27      	ldr	r2, [pc, #156]	; (8001570 <xTaskResumeAll+0x12c>)
 80014d4:	441a      	add	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3304      	adds	r3, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4610      	mov	r0, r2
 80014de:	f7fe fffb 	bl	80004d8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <xTaskResumeAll+0x130>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d302      	bcc.n	80014f6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <xTaskResumeAll+0x134>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <xTaskResumeAll+0x124>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1c8      	bne.n	8001490 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001504:	f000 fb5c 	bl	8001bc0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <xTaskResumeAll+0x138>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d010      	beq.n	8001536 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001514:	f000 f858 	bl	80015c8 <xTaskIncrementTick>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <xTaskResumeAll+0x134>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f1      	bne.n	8001514 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <xTaskResumeAll+0x138>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <xTaskResumeAll+0x134>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <xTaskResumeAll+0x13c>)
 8001544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001552:	f001 f8d9 	bl	8002708 <vPortExitCritical>

    return xAlreadyYielded;
 8001556:	68bb      	ldr	r3, [r7, #8]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000020c 	.word	0x2000020c
 8001564:	200001e4 	.word	0x200001e4
 8001568:	200001a4 	.word	0x200001a4
 800156c:	200001ec 	.word	0x200001ec
 8001570:	20000110 	.word	0x20000110
 8001574:	2000010c 	.word	0x2000010c
 8001578:	200001f8 	.word	0x200001f8
 800157c:	200001f4 	.word	0x200001f4
 8001580:	e000ed04 	.word	0xe000ed04

08001584 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <xTaskGetTickCount+0x1c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	200001e8 	.word	0x200001e8

080015a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015aa:	f001 f967 	bl	800287c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <xTaskGetTickCountFromISR+0x20>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80015b8:	683b      	ldr	r3, [r7, #0]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200001e8 	.word	0x200001e8

080015c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015d2:	4b50      	ldr	r3, [pc, #320]	; (8001714 <xTaskIncrementTick+0x14c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 8092 	bne.w	8001700 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015dc:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <xTaskIncrementTick+0x150>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <xTaskIncrementTick+0x150>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d120      	bne.n	8001632 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80015f0:	4b4a      	ldr	r3, [pc, #296]	; (800171c <xTaskIncrementTick+0x154>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <xTaskIncrementTick+0x48>
        __asm volatile
 80015fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fe:	f383 8811 	msr	BASEPRI, r3
 8001602:	f3bf 8f6f 	isb	sy
 8001606:	f3bf 8f4f 	dsb	sy
 800160a:	603b      	str	r3, [r7, #0]
    }
 800160c:	bf00      	nop
 800160e:	e7fe      	b.n	800160e <xTaskIncrementTick+0x46>
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <xTaskIncrementTick+0x154>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b42      	ldr	r3, [pc, #264]	; (8001720 <xTaskIncrementTick+0x158>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a40      	ldr	r2, [pc, #256]	; (800171c <xTaskIncrementTick+0x154>)
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4a40      	ldr	r2, [pc, #256]	; (8001720 <xTaskIncrementTick+0x158>)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <xTaskIncrementTick+0x15c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	4a3e      	ldr	r2, [pc, #248]	; (8001724 <xTaskIncrementTick+0x15c>)
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	f000 fac7 	bl	8001bc0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <xTaskIncrementTick+0x160>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d34c      	bcc.n	80016d6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <xTaskIncrementTick+0x154>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d104      	bne.n	8001650 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <xTaskIncrementTick+0x160>)
 8001648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800164c:	601a      	str	r2, [r3, #0]
                    break;
 800164e:	e042      	b.n	80016d6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001650:	4b32      	ldr	r3, [pc, #200]	; (800171c <xTaskIncrementTick+0x154>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	d203      	bcs.n	8001670 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <xTaskIncrementTick+0x160>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800166e:	e032      	b.n	80016d6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3304      	adds	r3, #4
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff8c 	bl	8000592 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3318      	adds	r3, #24
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff83 	bl	8000592 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fa4e 	bl	8004b30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <xTaskIncrementTick+0x164>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	4a22      	ldr	r2, [pc, #136]	; (800172c <xTaskIncrementTick+0x164>)
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <xTaskIncrementTick+0x168>)
 80016b4:	441a      	add	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3304      	adds	r3, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f7fe ff0b 	bl	80004d8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <xTaskIncrementTick+0x16c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3b5      	bcc.n	800163c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016d4:	e7b2      	b.n	800163c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <xTaskIncrementTick+0x16c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	4914      	ldr	r1, [pc, #80]	; (8001730 <xTaskIncrementTick+0x168>)
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d901      	bls.n	80016f2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80016ee:	2301      	movs	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <xTaskIncrementTick+0x170>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e004      	b.n	800170a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <xTaskIncrementTick+0x174>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a0d      	ldr	r2, [pc, #52]	; (800173c <xTaskIncrementTick+0x174>)
 8001708:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800170a:	697b      	ldr	r3, [r7, #20]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000020c 	.word	0x2000020c
 8001718:	200001e8 	.word	0x200001e8
 800171c:	2000019c 	.word	0x2000019c
 8001720:	200001a0 	.word	0x200001a0
 8001724:	200001fc 	.word	0x200001fc
 8001728:	20000204 	.word	0x20000204
 800172c:	200001ec 	.word	0x200001ec
 8001730:	20000110 	.word	0x20000110
 8001734:	2000010c 	.word	0x2000010c
 8001738:	200001f8 	.word	0x200001f8
 800173c:	200001f4 	.word	0x200001f4

08001740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <vTaskSwitchContext+0xbc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <vTaskSwitchContext+0xc0>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001754:	e04d      	b.n	80017f2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <vTaskSwitchContext+0xc0>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <vTaskSwitchContext+0xc4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	f1c3 031f 	rsb	r3, r3, #31
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <vTaskSwitchContext+0xc8>)
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10a      	bne.n	800179c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	607b      	str	r3, [r7, #4]
    }
 8001798:	bf00      	nop
 800179a:	e7fe      	b.n	800179a <vTaskSwitchContext+0x5a>
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4a18      	ldr	r2, [pc, #96]	; (8001808 <vTaskSwitchContext+0xc8>)
 80017a8:	4413      	add	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3308      	adds	r3, #8
 80017be:	429a      	cmp	r2, r3
 80017c0:	d104      	bne.n	80017cc <vTaskSwitchContext+0x8c>
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <vTaskSwitchContext+0xcc>)
 80017d4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <vTaskSwitchContext+0xcc>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <vTaskSwitchContext+0xd0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d102      	bne.n	80017e8 <vTaskSwitchContext+0xa8>
 80017e2:	f003 f905 	bl	80049f0 <SEGGER_SYSVIEW_OnIdle>
}
 80017e6:	e004      	b.n	80017f2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <vTaskSwitchContext+0xcc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f95d 	bl	8004aac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000020c 	.word	0x2000020c
 8001800:	200001f8 	.word	0x200001f8
 8001804:	200001ec 	.word	0x200001ec
 8001808:	20000110 	.word	0x20000110
 800180c:	2000010c 	.word	0x2000010c
 8001810:	20000208 	.word	0x20000208

08001814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001828:	f383 8811 	msr	BASEPRI, r3
 800182c:	f3bf 8f6f 	isb	sy
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	60fb      	str	r3, [r7, #12]
    }
 8001836:	bf00      	nop
 8001838:	e7fe      	b.n	8001838 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <vTaskPlaceOnEventList+0x44>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3318      	adds	r3, #24
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fe6c 	bl	8000520 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001848:	2101      	movs	r1, #1
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f000 fa72 	bl	8001d34 <prvAddCurrentTaskToDelayedList>
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000010c 	.word	0x2000010c

0800185c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10a      	bne.n	8001884 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800186e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001872:	f383 8811 	msr	BASEPRI, r3
 8001876:	f3bf 8f6f 	isb	sy
 800187a:	f3bf 8f4f 	dsb	sy
 800187e:	617b      	str	r3, [r7, #20]
    }
 8001880:	bf00      	nop
 8001882:	e7fe      	b.n	8001882 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <vTaskPlaceOnEventListRestricted+0x58>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3318      	adds	r3, #24
 800188a:	4619      	mov	r1, r3
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7fe fe23 	bl	80004d8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800189e:	2024      	movs	r0, #36	; 0x24
 80018a0:	f002 fba6 	bl	8003ff0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68b8      	ldr	r0, [r7, #8]
 80018a8:	f000 fa44 	bl	8001d34 <prvAddCurrentTaskToDelayedList>
    }
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000010c 	.word	0x2000010c

080018b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10a      	bne.n	80018e4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80018ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d2:	f383 8811 	msr	BASEPRI, r3
 80018d6:	f3bf 8f6f 	isb	sy
 80018da:	f3bf 8f4f 	dsb	sy
 80018de:	60fb      	str	r3, [r7, #12]
    }
 80018e0:	bf00      	nop
 80018e2:	e7fe      	b.n	80018e2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	3318      	adds	r3, #24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe52 	bl	8000592 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <xTaskRemoveFromEventList+0xb4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d120      	bne.n	8001938 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3304      	adds	r3, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe49 	bl	8000592 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 f914 	bl	8004b30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2201      	movs	r2, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <xTaskRemoveFromEventList+0xb8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4313      	orrs	r3, r2
 8001916:	4a16      	ldr	r2, [pc, #88]	; (8001970 <xTaskRemoveFromEventList+0xb8>)
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <xTaskRemoveFromEventList+0xbc>)
 8001928:	441a      	add	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3304      	adds	r3, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f7fe fdd1 	bl	80004d8 <vListInsertEnd>
 8001936:	e005      	b.n	8001944 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3318      	adds	r3, #24
 800193c:	4619      	mov	r1, r3
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <xTaskRemoveFromEventList+0xc0>)
 8001940:	f7fe fdca 	bl	80004d8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <xTaskRemoveFromEventList+0xc4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	429a      	cmp	r2, r3
 8001950:	d905      	bls.n	800195e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001952:	2301      	movs	r3, #1
 8001954:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <xTaskRemoveFromEventList+0xc8>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e001      	b.n	8001962 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001962:	697b      	ldr	r3, [r7, #20]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000020c 	.word	0x2000020c
 8001970:	200001ec 	.word	0x200001ec
 8001974:	20000110 	.word	0x20000110
 8001978:	200001a4 	.word	0x200001a4
 800197c:	2000010c 	.word	0x2000010c
 8001980:	200001f8 	.word	0x200001f8

08001984 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <vTaskInternalSetTimeOutState+0x24>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <vTaskInternalSetTimeOutState+0x28>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	605a      	str	r2, [r3, #4]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	200001fc 	.word	0x200001fc
 80019ac:	200001e8 	.word	0x200001e8

080019b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10a      	bne.n	80019d6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80019c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c4:	f383 8811 	msr	BASEPRI, r3
 80019c8:	f3bf 8f6f 	isb	sy
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	613b      	str	r3, [r7, #16]
    }
 80019d2:	bf00      	nop
 80019d4:	e7fe      	b.n	80019d4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	60fb      	str	r3, [r7, #12]
    }
 80019ee:	bf00      	nop
 80019f0:	e7fe      	b.n	80019f0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80019f2:	f000 fe59 	bl	80026a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <xTaskCheckForTimeOut+0xc4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a0e:	d102      	bne.n	8001a16 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	e026      	b.n	8001a64 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <xTaskCheckForTimeOut+0xc8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d00a      	beq.n	8001a38 <xTaskCheckForTimeOut+0x88>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d305      	bcc.n	8001a38 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e015      	b.n	8001a64 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d20b      	bcs.n	8001a5a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	1ad2      	subs	r2, r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff98 	bl	8001984 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e004      	b.n	8001a64 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a64:	f000 fe50 	bl	8002708 <vPortExitCritical>

    return xReturn;
 8001a68:	69fb      	ldr	r3, [r7, #28]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001e8 	.word	0x200001e8
 8001a78:	200001fc 	.word	0x200001fc

08001a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <vTaskMissedYield+0x14>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	200001f8 	.word	0x200001f8

08001a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001a9c:	f000 f852 	bl	8001b44 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <prvIdleTask+0x28>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d9f9      	bls.n	8001a9c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <prvIdleTask+0x2c>)
 8001aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001ab8:	e7f0      	b.n	8001a9c <prvIdleTask+0x8>
 8001aba:	bf00      	nop
 8001abc:	20000110 	.word	0x20000110
 8001ac0:	e000ed04 	.word	0xe000ed04

08001ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	e00c      	b.n	8001aea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <prvInitialiseTaskLists+0x60>)
 8001adc:	4413      	add	r3, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fccd 	bl	800047e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d9ef      	bls.n	8001ad0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <prvInitialiseTaskLists+0x64>)
 8001af2:	f7fe fcc4 	bl	800047e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <prvInitialiseTaskLists+0x68>)
 8001af8:	f7fe fcc1 	bl	800047e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <prvInitialiseTaskLists+0x6c>)
 8001afe:	f7fe fcbe 	bl	800047e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <prvInitialiseTaskLists+0x70>)
 8001b04:	f7fe fcbb 	bl	800047e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <prvInitialiseTaskLists+0x74>)
 8001b0a:	f7fe fcb8 	bl	800047e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <prvInitialiseTaskLists+0x78>)
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <prvInitialiseTaskLists+0x64>)
 8001b12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <prvInitialiseTaskLists+0x7c>)
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <prvInitialiseTaskLists+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000110 	.word	0x20000110
 8001b28:	20000174 	.word	0x20000174
 8001b2c:	20000188 	.word	0x20000188
 8001b30:	200001a4 	.word	0x200001a4
 8001b34:	200001b8 	.word	0x200001b8
 8001b38:	200001d0 	.word	0x200001d0
 8001b3c:	2000019c 	.word	0x2000019c
 8001b40:	200001a0 	.word	0x200001a0

08001b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b4a:	e019      	b.n	8001b80 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001b4c:	f000 fdac 	bl	80026a8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <prvCheckTasksWaitingTermination+0x50>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fd18 	bl	8000592 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <prvCheckTasksWaitingTermination+0x54>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <prvCheckTasksWaitingTermination+0x54>)
 8001b6a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <prvCheckTasksWaitingTermination+0x58>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <prvCheckTasksWaitingTermination+0x58>)
 8001b74:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001b76:	f000 fdc7 	bl	8002708 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f810 	bl	8001ba0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <prvCheckTasksWaitingTermination+0x58>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e1      	bne.n	8001b4c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200001b8 	.word	0x200001b8
 8001b98:	200001e4 	.word	0x200001e4
 8001b9c:	200001cc 	.word	0x200001cc

08001ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 ff85 	bl	8002abc <vPortFree>
                vPortFree( pxTCB );
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 ff82 	bl	8002abc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <prvResetNextTaskUnblockTime+0x30>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d104      	bne.n	8001bd8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <prvResetNextTaskUnblockTime+0x34>)
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001bd6:	e005      	b.n	8001be4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <prvResetNextTaskUnblockTime+0x30>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <prvResetNextTaskUnblockTime+0x34>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000019c 	.word	0x2000019c
 8001bf4:	20000204 	.word	0x20000204

08001bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <xTaskGetSchedulerState+0x34>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c06:	2301      	movs	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	e008      	b.n	8001c1e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <xTaskGetSchedulerState+0x38>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c14:	2302      	movs	r3, #2
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	e001      	b.n	8001c1e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c1e:	687b      	ldr	r3, [r7, #4]
    }
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	200001f0 	.word	0x200001f0
 8001c30:	2000020c 	.word	0x2000020c

08001c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d068      	beq.n	8001d1c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <xTaskPriorityDisinherit+0xf4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d00a      	beq.n	8001c6a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	60fb      	str	r3, [r7, #12]
    }
 8001c66:	bf00      	nop
 8001c68:	e7fe      	b.n	8001c68 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	60bb      	str	r3, [r7, #8]
    }
 8001c84:	bf00      	nop
 8001c86:	e7fe      	b.n	8001c86 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d03e      	beq.n	8001d1c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d13a      	bne.n	8001d1c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc71 	bl	8000592 <uxListRemove>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10a      	bne.n	8001ccc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43da      	mvns	r2, r3
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <xTaskPriorityDisinherit+0xf8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <xTaskPriorityDisinherit+0xf8>)
 8001cca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	204a      	movs	r0, #74	; 0x4a
 8001cd2:	f002 f9ab 	bl	800402c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f1c3 0205 	rsb	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	2201      	movs	r2, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <xTaskPriorityDisinherit+0xf8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <xTaskPriorityDisinherit+0xf8>)
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <xTaskPriorityDisinherit+0xfc>)
 8001d0a:	441a      	add	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f7fe fbe0 	bl	80004d8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d1c:	697b      	ldr	r3, [r7, #20]
    }
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000010c 	.word	0x2000010c
 8001d2c:	200001ec 	.word	0x200001ec
 8001d30:	20000110 	.word	0x20000110

08001d34 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d3e:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fc21 	bl	8000592 <uxListRemove>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10b      	bne.n	8001d6e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d6c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d74:	d110      	bne.n	8001d98 <prvAddCurrentTaskToDelayedList+0x64>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	211b      	movs	r1, #27
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 ff16 	bl	8004bb4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001d92:	f7fe fba1 	bl	80004d8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001d96:	e032      	b.n	8001dfe <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d20f      	bcs.n	8001dd0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2104      	movs	r1, #4
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 fefc 	bl	8004bb4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4610      	mov	r0, r2
 8001dca:	f7fe fba9 	bl	8000520 <vListInsert>
}
 8001dce:	e016      	b.n	8001dfe <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 feec 	bl	8004bb4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3304      	adds	r3, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe fb99 	bl	8000520 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d202      	bcs.n	8001dfe <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001df8:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200001e8 	.word	0x200001e8
 8001e0c:	2000010c 	.word	0x2000010c
 8001e10:	200001ec 	.word	0x200001ec
 8001e14:	200001d0 	.word	0x200001d0
 8001e18:	200001a0 	.word	0x200001a0
 8001e1c:	2000019c 	.word	0x2000019c
 8001e20:	20000204 	.word	0x20000204

08001e24 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001e2e:	f000 fad5 	bl	80023dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <xTimerCreateTimerTask+0x54>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <xTimerCreateTimerTask+0x58>)
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	2302      	movs	r3, #2
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e48:	490d      	ldr	r1, [pc, #52]	; (8001e80 <xTimerCreateTimerTask+0x5c>)
 8001e4a:	480e      	ldr	r0, [pc, #56]	; (8001e84 <xTimerCreateTimerTask+0x60>)
 8001e4c:	f7ff f926 	bl	800109c <xTaskCreate>
 8001e50:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	603b      	str	r3, [r7, #0]
    }
 8001e6a:	bf00      	nop
 8001e6c:	e7fe      	b.n	8001e6c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001e6e:	687b      	ldr	r3, [r7, #4]
    }
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000240 	.word	0x20000240
 8001e7c:	20000244 	.word	0x20000244
 8001e80:	08005908 	.word	0x08005908
 8001e84:	08001fbd 	.word	0x08001fbd

08001e88 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8001ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea4:	f383 8811 	msr	BASEPRI, r3
 8001ea8:	f3bf 8f6f 	isb	sy
 8001eac:	f3bf 8f4f 	dsb	sy
 8001eb0:	623b      	str	r3, [r7, #32]
    }
 8001eb2:	bf00      	nop
 8001eb4:	e7fe      	b.n	8001eb4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <xTimerGenericCommand+0x98>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d02a      	beq.n	8001f14 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	dc18      	bgt.n	8001f02 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001ed0:	f7ff fe92 	bl	8001bf8 <xTaskGetSchedulerState>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d109      	bne.n	8001eee <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <xTimerGenericCommand+0x98>)
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	f107 0114 	add.w	r1, r7, #20
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ee6:	f7fe fc6f 	bl	80007c8 <xQueueGenericSend>
 8001eea:	6278      	str	r0, [r7, #36]	; 0x24
 8001eec:	e012      	b.n	8001f14 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <xTimerGenericCommand+0x98>)
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	f107 0114 	add.w	r1, r7, #20
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f7fe fc65 	bl	80007c8 <xQueueGenericSend>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24
 8001f00:	e008      	b.n	8001f14 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <xTimerGenericCommand+0x98>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	f107 0114 	add.w	r1, r7, #20
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	f7fe fd81 	bl	8000a14 <xQueueGenericSendFromISR>
 8001f12:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f16:	4618      	mov	r0, r3
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000240 	.word	0x20000240

08001f24 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <prvProcessExpiredTimer+0x94>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fb28 	bl	8000592 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	18d1      	adds	r1, r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	6978      	ldr	r0, [r7, #20]
 8001f5e:	f000 f8d1 	bl	8002104 <prvInsertTimerInActiveList>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01f      	beq.n	8001fa8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	2100      	movs	r1, #0
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff88 	bl	8001e88 <xTimerGenericCommand>
 8001f78:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d113      	bne.n	8001fa8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	60fb      	str	r3, [r7, #12]
    }
 8001f92:	bf00      	nop
 8001f94:	e7fe      	b.n	8001f94 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	4798      	blx	r3
    }
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000238 	.word	0x20000238

08001fbc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001fc4:	f107 0308 	add.w	r3, r7, #8
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f857 	bl	800207c <prvGetNextExpireTime>
 8001fce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f803 	bl	8001fe0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001fda:	f000 f8d5 	bl	8002188 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001fde:	e7f1      	b.n	8001fc4 <prvTimerTask+0x8>

08001fe0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001fea:	f7ff fa1d 	bl	8001428 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f866 	bl	80020c4 <prvSampleTimeNow>
 8001ff8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d130      	bne.n	8002062 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10a      	bne.n	800201c <prvProcessTimerOrBlockTask+0x3c>
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	429a      	cmp	r2, r3
 800200c:	d806      	bhi.n	800201c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800200e:	f7ff fa19 	bl	8001444 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff85 	bl	8001f24 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800201a:	e024      	b.n	8002066 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <prvProcessTimerOrBlockTask+0x90>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <prvProcessTimerOrBlockTask+0x50>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <prvProcessTimerOrBlockTask+0x52>
 8002030:	2300      	movs	r3, #0
 8002032:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <prvProcessTimerOrBlockTask+0x94>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fff7 	bl	8001034 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002046:	f7ff f9fd 	bl	8001444 <xTaskResumeAll>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <prvProcessTimerOrBlockTask+0x98>)
 8002052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	f3bf 8f6f 	isb	sy
    }
 8002060:	e001      	b.n	8002066 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002062:	f7ff f9ef 	bl	8001444 <xTaskResumeAll>
    }
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000023c 	.word	0x2000023c
 8002074:	20000240 	.word	0x20000240
 8002078:	e000ed04 	.word	0xe000ed04

0800207c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <prvGetNextExpireTime+0x44>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <prvGetNextExpireTime+0x16>
 800208e:	2201      	movs	r2, #1
 8002090:	e000      	b.n	8002094 <prvGetNextExpireTime+0x18>
 8002092:	2200      	movs	r2, #0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <prvGetNextExpireTime+0x44>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e001      	b.n	80020b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80020b0:	68fb      	ldr	r3, [r7, #12]
    }
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000238 	.word	0x20000238

080020c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80020cc:	f7ff fa5a 	bl	8001584 <xTaskGetTickCount>
 80020d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <prvSampleTimeNow+0x3c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d205      	bcs.n	80020e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80020dc:	f000 f91a 	bl	8002314 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e002      	b.n	80020ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <prvSampleTimeNow+0x3c>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80020f4:	68fb      	ldr	r3, [r7, #12]
    }
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000248 	.word	0x20000248

08002104 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d812      	bhi.n	8002150 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	1ad2      	subs	r2, r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	429a      	cmp	r2, r3
 8002136:	d302      	bcc.n	800213e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002138:	2301      	movs	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e01b      	b.n	8002176 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <prvInsertTimerInActiveList+0x7c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3304      	adds	r3, #4
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f7fe f9e9 	bl	8000520 <vListInsert>
 800214e:	e012      	b.n	8002176 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d206      	bcs.n	8002166 <prvInsertTimerInActiveList+0x62>
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d302      	bcc.n	8002166 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002160:	2301      	movs	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e007      	b.n	8002176 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <prvInsertTimerInActiveList+0x80>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3304      	adds	r3, #4
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f7fe f9d5 	bl	8000520 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002176:	697b      	ldr	r3, [r7, #20]
    }
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000023c 	.word	0x2000023c
 8002184:	20000238 	.word	0x20000238

08002188 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800218e:	e0ae      	b.n	80022ee <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f2c0 80aa 	blt.w	80022ec <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3304      	adds	r3, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9f2 	bl	8000592 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff87 	bl	80020c4 <prvSampleTimeNow>
 80021b6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b09      	cmp	r3, #9
 80021bc:	f200 8097 	bhi.w	80022ee <prvProcessReceivedCommands+0x166>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <prvProcessReceivedCommands+0x40>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021f1 	.word	0x080021f1
 80021cc:	080021f1 	.word	0x080021f1
 80021d0:	080021f1 	.word	0x080021f1
 80021d4:	08002265 	.word	0x08002265
 80021d8:	08002279 	.word	0x08002279
 80021dc:	080022c3 	.word	0x080022c3
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	080021f1 	.word	0x080021f1
 80021e8:	08002265 	.word	0x08002265
 80021ec:	08002279 	.word	0x08002279
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	18d1      	adds	r1, r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002210:	f7ff ff78 	bl	8002104 <prvInsertTimerInActiveList>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d069      	beq.n	80022ee <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002220:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05e      	beq.n	80022ee <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	441a      	add	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2300      	movs	r3, #0
 800223e:	2100      	movs	r1, #0
 8002240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002242:	f7ff fe21 	bl	8001e88 <xTimerGenericCommand>
 8002246:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d14f      	bne.n	80022ee <prvProcessReceivedCommands+0x166>
        __asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	61bb      	str	r3, [r7, #24]
    }
 8002260:	bf00      	nop
 8002262:	e7fe      	b.n	8002262 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002276:	e03a      	b.n	80022ee <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	617b      	str	r3, [r7, #20]
    }
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	18d1      	adds	r1, r2, r3
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	6a3a      	ldr	r2, [r7, #32]
 80022ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022bc:	f7ff ff22 	bl	8002104 <prvInsertTimerInActiveList>
                        break;
 80022c0:	e015      	b.n	80022ee <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80022d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022d2:	f000 fbf3 	bl	8002abc <vPortFree>
 80022d6:	e00a      	b.n	80022ee <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80022ea:	e000      	b.n	80022ee <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80022ec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <prvProcessReceivedCommands+0x188>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f107 0108 	add.w	r1, r7, #8
 80022f6:	2200      	movs	r2, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fc49 	bl	8000b90 <xQueueReceive>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f af45 	bne.w	8002190 <prvProcessReceivedCommands+0x8>
        }
    }
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000240 	.word	0x20000240

08002314 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800231a:	e048      	b.n	80023ae <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <prvSwitchTimerLists+0xc0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <prvSwitchTimerLists+0xc0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3304      	adds	r3, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f92c 	bl	8000592 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02e      	beq.n	80023ae <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d90e      	bls.n	8002380 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <prvSwitchTimerLists+0xc0>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3304      	adds	r3, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f7fe f8d1 	bl	8000520 <vListInsert>
 800237e:	e016      	b.n	80023ae <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2300      	movs	r3, #0
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	2100      	movs	r1, #0
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7ff fd7c 	bl	8001e88 <xTimerGenericCommand>
 8002390:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	603b      	str	r3, [r7, #0]
    }
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <prvSwitchTimerLists+0xc0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1b1      	bne.n	800231c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <prvSwitchTimerLists+0xc0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <prvSwitchTimerLists+0xc4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <prvSwitchTimerLists+0xc0>)
 80023c4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <prvSwitchTimerLists+0xc4>)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	6013      	str	r3, [r2, #0]
    }
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000238 	.word	0x20000238
 80023d8:	2000023c 	.word	0x2000023c

080023dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80023e0:	f000 f962 	bl	80026a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <prvCheckForValidListAndQueue+0x54>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11d      	bne.n	8002428 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80023ec:	4811      	ldr	r0, [pc, #68]	; (8002434 <prvCheckForValidListAndQueue+0x58>)
 80023ee:	f7fe f846 	bl	800047e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80023f2:	4811      	ldr	r0, [pc, #68]	; (8002438 <prvCheckForValidListAndQueue+0x5c>)
 80023f4:	f7fe f843 	bl	800047e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <prvCheckForValidListAndQueue+0x60>)
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <prvCheckForValidListAndQueue+0x58>)
 80023fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <prvCheckForValidListAndQueue+0x64>)
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <prvCheckForValidListAndQueue+0x5c>)
 8002402:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002404:	2200      	movs	r2, #0
 8002406:	210c      	movs	r1, #12
 8002408:	200a      	movs	r0, #10
 800240a:	f7fe f955 	bl	80006b8 <xQueueGenericCreate>
 800240e:	4603      	mov	r3, r0
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <prvCheckForValidListAndQueue+0x54>)
 8002412:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <prvCheckForValidListAndQueue+0x54>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <prvCheckForValidListAndQueue+0x54>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4908      	ldr	r1, [pc, #32]	; (8002444 <prvCheckForValidListAndQueue+0x68>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fdd4 	bl	8000fd0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002428:	f000 f96e 	bl	8002708 <vPortExitCritical>
    }
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000240 	.word	0x20000240
 8002434:	20000210 	.word	0x20000210
 8002438:	20000224 	.word	0x20000224
 800243c:	20000238 	.word	0x20000238
 8002440:	2000023c 	.word	0x2000023c
 8002444:	08005910 	.word	0x08005910

08002448 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3b04      	subs	r3, #4
 8002458:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002460:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3b04      	subs	r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 0201 	bic.w	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3b04      	subs	r3, #4
 8002476:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <pxPortInitialiseStack+0x64>)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3b14      	subs	r3, #20
 8002482:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3b04      	subs	r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f06f 0202 	mvn.w	r2, #2
 8002496:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3b20      	subs	r3, #32
 800249c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	080024b1 	.word	0x080024b1

080024b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <prvTaskExitError+0x54>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c2:	d00a      	beq.n	80024da <prvTaskExitError+0x2a>
        __asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	60fb      	str	r3, [r7, #12]
    }
 80024d6:	bf00      	nop
 80024d8:	e7fe      	b.n	80024d8 <prvTaskExitError+0x28>
        __asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	60bb      	str	r3, [r7, #8]
    }
 80024ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80024ee:	bf00      	nop
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0fc      	beq.n	80024f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000008 	.word	0x20000008
	...

08002510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <pxCurrentTCBConst2>)
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	6808      	ldr	r0, [r1, #0]
 8002516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800251a:	f380 8809 	msr	PSP, r0
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f380 8811 	msr	BASEPRI, r0
 800252a:	4770      	bx	lr
 800252c:	f3af 8000 	nop.w

08002530 <pxCurrentTCBConst2>:
 8002530:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop

08002538 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002538:	4808      	ldr	r0, [pc, #32]	; (800255c <prvPortStartFirstTask+0x24>)
 800253a:	6800      	ldr	r0, [r0, #0]
 800253c:	6800      	ldr	r0, [r0, #0]
 800253e:	f380 8808 	msr	MSP, r0
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f380 8814 	msr	CONTROL, r0
 800254a:	b662      	cpsie	i
 800254c:	b661      	cpsie	f
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	df00      	svc	0
 8002558:	bf00      	nop
 800255a:	0000      	.short	0x0000
 800255c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop

08002564 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800256a:	4b46      	ldr	r3, [pc, #280]	; (8002684 <xPortStartScheduler+0x120>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a46      	ldr	r2, [pc, #280]	; (8002688 <xPortStartScheduler+0x124>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10a      	bne.n	800258a <xPortStartScheduler+0x26>
        __asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	613b      	str	r3, [r7, #16]
    }
 8002586:	bf00      	nop
 8002588:	e7fe      	b.n	8002588 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <xPortStartScheduler+0x120>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3f      	ldr	r2, [pc, #252]	; (800268c <xPortStartScheduler+0x128>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10a      	bne.n	80025aa <xPortStartScheduler+0x46>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	60fb      	str	r3, [r7, #12]
    }
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <xPortStartScheduler+0x12c>)
 80025ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <xPortStartScheduler+0x130>)
 80025d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <xPortStartScheduler+0x134>)
 80025d4:	2207      	movs	r2, #7
 80025d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025d8:	e009      	b.n	80025ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80025da:	4b2f      	ldr	r3, [pc, #188]	; (8002698 <xPortStartScheduler+0x134>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3b01      	subs	r3, #1
 80025e0:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <xPortStartScheduler+0x134>)
 80025e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	d0ef      	beq.n	80025da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <xPortStartScheduler+0x134>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00a      	beq.n	800261c <xPortStartScheduler+0xb8>
        __asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	60bb      	str	r3, [r7, #8]
    }
 8002618:	bf00      	nop
 800261a:	e7fe      	b.n	800261a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <xPortStartScheduler+0x134>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <xPortStartScheduler+0x134>)
 8002624:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <xPortStartScheduler+0x134>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800262e:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <xPortStartScheduler+0x134>)
 8002630:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <xPortStartScheduler+0x138>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <xPortStartScheduler+0x138>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002644:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <xPortStartScheduler+0x138>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a14      	ldr	r2, [pc, #80]	; (800269c <xPortStartScheduler+0x138>)
 800264c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002650:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002652:	f000 f8e3 	bl	800281c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <xPortStartScheduler+0x13c>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800265c:	f000 f902 	bl	8002864 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <xPortStartScheduler+0x140>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <xPortStartScheduler+0x140>)
 8002666:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800266a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800266c:	f7ff ff64 	bl	8002538 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002670:	f7ff f866 	bl	8001740 <vTaskSwitchContext>
    prvTaskExitError();
 8002674:	f7ff ff1c 	bl	80024b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00
 8002688:	410fc271 	.word	0x410fc271
 800268c:	410fc270 	.word	0x410fc270
 8002690:	e000e400 	.word	0xe000e400
 8002694:	2000024c 	.word	0x2000024c
 8002698:	20000250 	.word	0x20000250
 800269c:	e000ed20 	.word	0xe000ed20
 80026a0:	20000008 	.word	0x20000008
 80026a4:	e000ef34 	.word	0xe000ef34

080026a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
        __asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	607b      	str	r3, [r7, #4]
    }
 80026c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <vPortEnterCritical+0x58>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <vPortEnterCritical+0x58>)
 80026ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <vPortEnterCritical+0x58>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10f      	bne.n	80026f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <vPortEnterCritical+0x5c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	603b      	str	r3, [r7, #0]
    }
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <vPortEnterCritical+0x4a>
    }
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	20000008 	.word	0x20000008
 8002704:	e000ed04 	.word	0xe000ed04

08002708 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <vPortExitCritical+0x50>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <vPortExitCritical+0x24>
        __asm volatile
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	607b      	str	r3, [r7, #4]
    }
 8002728:	bf00      	nop
 800272a:	e7fe      	b.n	800272a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <vPortExitCritical+0x50>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3b01      	subs	r3, #1
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <vPortExitCritical+0x50>)
 8002734:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <vPortExitCritical+0x50>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <vPortExitCritical+0x42>
 800273e:	2300      	movs	r3, #0
 8002740:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f383 8811 	msr	BASEPRI, r3
    }
 8002748:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000008 	.word	0x20000008
 800275c:	00000000 	.word	0x00000000

08002760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002760:	f3ef 8009 	mrs	r0, PSP
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <pxCurrentTCBConst>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	f01e 0f10 	tst.w	lr, #16
 8002770:	bf08      	it	eq
 8002772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800277a:	6010      	str	r0, [r2, #0]
 800277c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002784:	f380 8811 	msr	BASEPRI, r0
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f7fe ffd6 	bl	8001740 <vTaskSwitchContext>
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f380 8811 	msr	BASEPRI, r0
 800279c:	bc09      	pop	{r0, r3}
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	6808      	ldr	r0, [r1, #0]
 80027a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a6:	f01e 0f10 	tst.w	lr, #16
 80027aa:	bf08      	it	eq
 80027ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80027b0:	f380 8809 	msr	PSP, r0
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	f3af 8000 	nop.w

080027c0 <pxCurrentTCBConst>:
 80027c0:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop

080027c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
        __asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	607b      	str	r3, [r7, #4]
    }
 80027e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80027e2:	f002 f88b 	bl	80048fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80027e6:	f7fe feef 	bl	80015c8 <xTaskIncrementTick>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80027f0:	f002 f8e2 	bl	80049b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <SysTick_Handler+0x50>)
 80027f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e001      	b.n	8002802 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80027fe:	f002 f8bf 	bl	8004980 <SEGGER_SYSVIEW_RecordExitISR>
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f383 8811 	msr	BASEPRI, r3
    }
 800280c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000ed04 	.word	0xe000ed04

0800281c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <vPortSetupTimerInterrupt+0x34>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <vPortSetupTimerInterrupt+0x38>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <vPortSetupTimerInterrupt+0x3c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <vPortSetupTimerInterrupt+0x40>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	099b      	lsrs	r3, r3, #6
 8002838:	4a09      	ldr	r2, [pc, #36]	; (8002860 <vPortSetupTimerInterrupt+0x44>)
 800283a:	3b01      	subs	r3, #1
 800283c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <vPortSetupTimerInterrupt+0x34>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010
 8002854:	e000e018 	.word	0xe000e018
 8002858:	20000000 	.word	0x20000000
 800285c:	10624dd3 	.word	0x10624dd3
 8002860:	e000e014 	.word	0xe000e014

08002864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002874 <vPortEnableVFP+0x10>
 8002868:	6801      	ldr	r1, [r0, #0]
 800286a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800286e:	6001      	str	r1, [r0, #0]
 8002870:	4770      	bx	lr
 8002872:	0000      	.short	0x0000
 8002874:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop

0800287c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002882:	f3ef 8305 	mrs	r3, IPSR
 8002886:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b0f      	cmp	r3, #15
 800288c:	d914      	bls.n	80028b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <vPortValidateInterruptPriority+0x70>)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <vPortValidateInterruptPriority+0x74>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	7afa      	ldrb	r2, [r7, #11]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d20a      	bcs.n	80028b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	607b      	str	r3, [r7, #4]
    }
 80028b4:	bf00      	nop
 80028b6:	e7fe      	b.n	80028b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <vPortValidateInterruptPriority+0x78>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <vPortValidateInterruptPriority+0x7c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d90a      	bls.n	80028de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	603b      	str	r3, [r7, #0]
    }
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <vPortValidateInterruptPriority+0x60>
    }
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000e3f0 	.word	0xe000e3f0
 80028f0:	2000024c 	.word	0x2000024c
 80028f4:	e000ed0c 	.word	0xe000ed0c
 80028f8:	20000250 	.word	0x20000250

080028fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002908:	f7fe fd8e 	bl	8001428 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800290c:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <pvPortMalloc+0x1a8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002914:	f000 f934 	bl	8002b80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002918:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <pvPortMalloc+0x1ac>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 80a7 	bne.w	8002a74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02d      	beq.n	8002988 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800292c:	2208      	movs	r2, #8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d227      	bcs.n	8002988 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002938:	2208      	movs	r2, #8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	2b00      	cmp	r3, #0
 8002948:	d021      	beq.n	800298e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f023 0307 	bic.w	r3, r3, #7
 8002950:	3308      	adds	r3, #8
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d214      	bcs.n	8002982 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	3308      	adds	r3, #8
 8002960:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	2b00      	cmp	r3, #0
 800296a:	d010      	beq.n	800298e <pvPortMalloc+0x92>
        __asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	617b      	str	r3, [r7, #20]
    }
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002986:	e002      	b.n	800298e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	e000      	b.n	8002990 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800298e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d06e      	beq.n	8002a74 <pvPortMalloc+0x178>
 8002996:	4b45      	ldr	r3, [pc, #276]	; (8002aac <pvPortMalloc+0x1b0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d869      	bhi.n	8002a74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <pvPortMalloc+0x1b4>)
 80029a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <pvPortMalloc+0x1b4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029aa:	e004      	b.n	80029b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d903      	bls.n	80029c8 <pvPortMalloc+0xcc>
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f1      	bne.n	80029ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <pvPortMalloc+0x1a8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d050      	beq.n	8002a74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2208      	movs	r2, #8
 80029d8:	4413      	add	r3, r2
 80029da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1ad2      	subs	r2, r2, r3
 80029ec:	2308      	movs	r3, #8
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d91f      	bls.n	8002a34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <pvPortMalloc+0x120>
        __asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	613b      	str	r3, [r7, #16]
    }
 8002a18:	bf00      	nop
 8002a1a:	e7fe      	b.n	8002a1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a2e:	69b8      	ldr	r0, [r7, #24]
 8002a30:	f000 f908 	bl	8002c44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <pvPortMalloc+0x1b0>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <pvPortMalloc+0x1b0>)
 8002a40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <pvPortMalloc+0x1b0>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <pvPortMalloc+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d203      	bcs.n	8002a56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <pvPortMalloc+0x1b0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <pvPortMalloc+0x1b8>)
 8002a54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <pvPortMalloc+0x1ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <pvPortMalloc+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <pvPortMalloc+0x1bc>)
 8002a72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002a74:	f7fe fce6 	bl	8001444 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <pvPortMalloc+0x19c>
        __asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	60fb      	str	r3, [r7, #12]
    }
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <pvPortMalloc+0x19a>
    return pvReturn;
 8002a98:	69fb      	ldr	r3, [r7, #28]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20012e5c 	.word	0x20012e5c
 8002aa8:	20012e70 	.word	0x20012e70
 8002aac:	20012e60 	.word	0x20012e60
 8002ab0:	20012e54 	.word	0x20012e54
 8002ab4:	20012e64 	.word	0x20012e64
 8002ab8:	20012e68 	.word	0x20012e68

08002abc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04d      	beq.n	8002b6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <vPortFree+0xb8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <vPortFree+0x44>
        __asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	60fb      	str	r3, [r7, #12]
    }
 8002afc:	bf00      	nop
 8002afe:	e7fe      	b.n	8002afe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <vPortFree+0x62>
        __asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	60bb      	str	r3, [r7, #8]
    }
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <vPortFree+0xb8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01e      	beq.n	8002b6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11a      	bne.n	8002b6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <vPortFree+0xb8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002b44:	f7fe fc70 	bl	8001428 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <vPortFree+0xbc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <vPortFree+0xbc>)
 8002b54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b56:	6938      	ldr	r0, [r7, #16]
 8002b58:	f000 f874 	bl	8002c44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <vPortFree+0xc0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <vPortFree+0xc0>)
 8002b64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002b66:	f7fe fc6d 	bl	8001444 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20012e70 	.word	0x20012e70
 8002b78:	20012e60 	.word	0x20012e60
 8002b7c:	20012e6c 	.word	0x20012e6c

08002b80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002b8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <prvHeapInit+0xac>)
 8002b8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3307      	adds	r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <prvHeapInit+0xac>)
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <prvHeapInit+0xb0>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <prvHeapInit+0xb0>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	4413      	add	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002bcc:	2208      	movs	r2, #8
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <prvHeapInit+0xb4>)
 8002be0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <prvHeapInit+0xb4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <prvHeapInit+0xb4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	1ad2      	subs	r2, r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <prvHeapInit+0xb4>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <prvHeapInit+0xb8>)
 8002c0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <prvHeapInit+0xbc>)
 8002c16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <prvHeapInit+0xc0>)
 8002c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c1e:	601a      	str	r2, [r3, #0]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	20000254 	.word	0x20000254
 8002c30:	20012e54 	.word	0x20012e54
 8002c34:	20012e5c 	.word	0x20012e5c
 8002c38:	20012e64 	.word	0x20012e64
 8002c3c:	20012e60 	.word	0x20012e60
 8002c40:	20012e70 	.word	0x20012e70

08002c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <prvInsertBlockIntoFreeList+0xac>)
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e002      	b.n	8002c58 <prvInsertBlockIntoFreeList+0x14>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d8f7      	bhi.n	8002c52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d108      	bne.n	8002c86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	441a      	add	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d118      	bne.n	8002ccc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d00d      	beq.n	8002cc2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e008      	b.n	8002cd4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e003      	b.n	8002cd4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d002      	beq.n	8002ce2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20012e54 	.word	0x20012e54
 8002cf4:	20012e5c 	.word	0x20012e5c

08002cf8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002cfc:	4803      	ldr	r0, [pc, #12]	; (8002d0c <_cbSendSystemDesc+0x14>)
 8002cfe:	f001 fda7 	bl	8004850 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d02:	4803      	ldr	r0, [pc, #12]	; (8002d10 <_cbSendSystemDesc+0x18>)
 8002d04:	f001 fda4 	bl	8004850 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08005918 	.word	0x08005918
 8002d10:	08005940 	.word	0x08005940

08002d14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <SEGGER_SYSVIEW_Conf+0x24>)
 8002d22:	4a06      	ldr	r2, [pc, #24]	; (8002d3c <SEGGER_SYSVIEW_Conf+0x28>)
 8002d24:	f001 f910 	bl	8003f48 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002d28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002d2c:	f001 f950 	bl	8003fd0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000000 	.word	0x20000000
 8002d38:	08002cf9 	.word	0x08002cf9
 8002d3c:	080059c8 	.word	0x080059c8

08002d40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	e033      	b.n	8002db4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002d4c:	491e      	ldr	r1, [pc, #120]	; (8002dc8 <_cbSendTaskList+0x88>)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	491a      	ldr	r1, [pc, #104]	; (8002dc8 <_cbSendTaskList+0x88>)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	4c16      	ldr	r4, [pc, #88]	; (8002dc8 <_cbSendTaskList+0x88>)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4423      	add	r3, r4
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	681c      	ldr	r4, [r3, #0]
 8002d80:	4d11      	ldr	r5, [pc, #68]	; (8002dc8 <_cbSendTaskList+0x88>)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	442b      	add	r3, r5
 8002d8e:	330c      	adds	r3, #12
 8002d90:	681d      	ldr	r5, [r3, #0]
 8002d92:	4e0d      	ldr	r6, [pc, #52]	; (8002dc8 <_cbSendTaskList+0x88>)
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4433      	add	r3, r6
 8002da0:	3310      	adds	r3, #16
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	462b      	mov	r3, r5
 8002da8:	4622      	mov	r2, r4
 8002daa:	f000 f8bd 	bl	8002f28 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3301      	adds	r3, #1
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <_cbSendTaskList+0x8c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3c6      	bcc.n	8002d4c <_cbSendTaskList+0xc>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc8:	20012e74 	.word	0x20012e74
 8002dcc:	20012f14 	.word	0x20012f14

08002dd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002dd8:	f7fe fbe4 	bl	80015a4 <xTaskGetTickCountFromISR>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2200      	movs	r2, #0
 8002de0:	469a      	mov	sl, r3
 8002de2:	4693      	mov	fp, r2
 8002de4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	f04f 0a00 	mov.w	sl, #0
 8002df4:	f04f 0b00 	mov.w	fp, #0
 8002df8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002dfc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002e00:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002e04:	4652      	mov	r2, sl
 8002e06:	465b      	mov	r3, fp
 8002e08:	1a14      	subs	r4, r2, r0
 8002e0a:	eb63 0501 	sbc.w	r5, r3, r1
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	00ab      	lsls	r3, r5, #2
 8002e18:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002e1c:	00a2      	lsls	r2, r4, #2
 8002e1e:	4614      	mov	r4, r2
 8002e20:	461d      	mov	r5, r3
 8002e22:	eb14 0800 	adds.w	r8, r4, r0
 8002e26:	eb45 0901 	adc.w	r9, r5, r1
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e3e:	4690      	mov	r8, r2
 8002e40:	4699      	mov	r9, r3
 8002e42:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002e46:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002e58 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002e66:	2205      	movs	r2, #5
 8002e68:	492b      	ldr	r1, [pc, #172]	; (8002f18 <SYSVIEW_AddTask+0xc0>)
 8002e6a:	68b8      	ldr	r0, [r7, #8]
 8002e6c:	f002 f882 	bl	8004f74 <memcmp>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d04b      	beq.n	8002f0e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002e76:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b07      	cmp	r3, #7
 8002e7c:	d903      	bls.n	8002e86 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002e7e:	4828      	ldr	r0, [pc, #160]	; (8002f20 <SYSVIEW_AddTask+0xc8>)
 8002e80:	f001 fff8 	bl	8004e74 <SEGGER_SYSVIEW_Warn>
    return;
 8002e84:	e044      	b.n	8002f10 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002e86:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4926      	ldr	r1, [pc, #152]	; (8002f24 <SYSVIEW_AddTask+0xcc>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4921      	ldr	r1, [pc, #132]	; (8002f24 <SYSVIEW_AddTask+0xcc>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3304      	adds	r3, #4
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	491b      	ldr	r1, [pc, #108]	; (8002f24 <SYSVIEW_AddTask+0xcc>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4916      	ldr	r1, [pc, #88]	; (8002f24 <SYSVIEW_AddTask+0xcc>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4910      	ldr	r1, [pc, #64]	; (8002f24 <SYSVIEW_AddTask+0xcc>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3310      	adds	r3, #16
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <SYSVIEW_AddTask+0xc4>)
 8002efa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f80e 	bl	8002f28 <SYSVIEW_SendTaskInfo>
 8002f0c:	e000      	b.n	8002f10 <SYSVIEW_AddTask+0xb8>
    return;
 8002f0e:	bf00      	nop

}
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08005950 	.word	0x08005950
 8002f1c:	20012f14 	.word	0x20012f14
 8002f20:	08005958 	.word	0x08005958
 8002f24:	20012e74 	.word	0x20012e74

08002f28 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	2214      	movs	r2, #20
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 f836 	bl	8004fb0 <memset>
  TaskInfo.TaskID     = TaskID;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fb7f 	bl	8004660 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002f62:	bf00      	nop
 8002f64:	3728      	adds	r7, #40	; 0x28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <USART2_IRQHandler+0x80>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d011      	beq.n	8002fa6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <USART2_IRQHandler+0x84>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 030b 	and.w	r3, r3, #11
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <USART2_IRQHandler+0x88>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <USART2_IRQHandler+0x88>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	79fa      	ldrb	r2, [r7, #7]
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01a      	beq.n	8002fe6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <USART2_IRQHandler+0x8c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <USART2_IRQHandler+0x8c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1dfa      	adds	r2, r7, #7
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4798      	blx	r3
 8002fc2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <USART2_IRQHandler+0x90>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <USART2_IRQHandler+0x90>)
 8002fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e006      	b.n	8002fe6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <USART2_IRQHandler+0x80>)
 8002fda:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002fdc:	79fa      	ldrb	r2, [r7, #7]
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <USART2_IRQHandler+0x84>)
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e000      	b.n	8002fe6 <USART2_IRQHandler+0x7a>
      return;
 8002fe4:	bf00      	nop
    }
  }
}
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	40004404 	.word	0x40004404
 8002ff4:	20012f18 	.word	0x20012f18
 8002ff8:	20012f1c 	.word	0x20012f1c
 8002ffc:	4000440c 	.word	0x4000440c

08003000 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	4000440c 	.word	0x4000440c

08003020 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <_DoInit+0x98>)
 8003028:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2203      	movs	r2, #3
 800302e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2203      	movs	r2, #3
 8003034:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a20      	ldr	r2, [pc, #128]	; (80030bc <_DoInit+0x9c>)
 800303a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <_DoInit+0xa0>)
 8003040:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003048:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <_DoInit+0x9c>)
 8003060:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <_DoInit+0xa4>)
 8003066:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2210      	movs	r2, #16
 800306c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3307      	adds	r3, #7
 8003084:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <_DoInit+0xa8>)
 8003086:	6810      	ldr	r0, [r2, #0]
 8003088:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800308a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <_DoInit+0xac>)
 8003092:	6810      	ldr	r0, [r2, #0]
 8003094:	6018      	str	r0, [r3, #0]
 8003096:	8891      	ldrh	r1, [r2, #4]
 8003098:	7992      	ldrb	r2, [r2, #6]
 800309a:	8099      	strh	r1, [r3, #4]
 800309c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800309e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80030a8:	f3bf 8f5f 	dmb	sy
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	20012f20 	.word	0x20012f20
 80030bc:	080059a8 	.word	0x080059a8
 80030c0:	20012fc8 	.word	0x20012fc8
 80030c4:	200133c8 	.word	0x200133c8
 80030c8:	080059b4 	.word	0x080059b4
 80030cc:	080059b8 	.word	0x080059b8

080030d0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	; 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80030dc:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <SEGGER_RTT_ReadNoLock+0x1e>
 80030ea:	f7ff ff99 	bl	8003020 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3360      	adds	r3, #96	; 0x60
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80030fc:	4413      	add	r3, r2
 80030fe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	d92b      	bls.n	8003174 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4293      	cmp	r3, r2
 800312c:	bf28      	it	cs
 800312e:	4613      	movcs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	4413      	add	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	6939      	ldr	r1, [r7, #16]
 8003140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003142:	f001 ff27 	bl	8004f94 <memcpy>
    NumBytesRead += NumBytesRem;
 8003146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	4413      	add	r3, r2
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	4413      	add	r3, r2
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800315e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	4413      	add	r3, r2
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316c:	429a      	cmp	r2, r3
 800316e:	d101      	bne.n	8003174 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003170:	2300      	movs	r3, #0
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4293      	cmp	r3, r2
 8003182:	bf28      	it	cs
 8003184:	4613      	movcs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d019      	beq.n	80031c2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	4413      	add	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800319e:	f001 fef9 	bl	8004f94 <memcpy>
    NumBytesRead += NumBytesRem;
 80031a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	4413      	add	r3, r2
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4413      	add	r3, r2
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4413      	add	r3, r2
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031cc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3730      	adds	r7, #48	; 0x30
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20012f20 	.word	0x20012f20

080031dc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <SEGGER_RTT_AllocUpBuffer+0x20>
 80031f8:	f7ff ff12 	bl	8003020 <_DoInit>
  SEGGER_RTT_LOCK();
 80031fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003200:	f04f 0120 	mov.w	r1, #32
 8003204:	f381 8811 	msr	BASEPRI, r1
 8003208:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800320a:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800320c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003212:	6939      	ldr	r1, [r7, #16]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	3304      	adds	r3, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	429a      	cmp	r2, r3
 8003238:	dbeb      	blt.n	8003212 <SEGGER_RTT_AllocUpBuffer+0x36>
 800323a:	e000      	b.n	800323e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800323c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	429a      	cmp	r2, r3
 8003246:	da3f      	bge.n	80032c8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003248:	6939      	ldr	r1, [r7, #16]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800325c:	6939      	ldr	r1, [r7, #16]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	3304      	adds	r3, #4
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003272:	6939      	ldr	r1, [r7, #16]
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	3320      	adds	r3, #32
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003286:	6939      	ldr	r1, [r7, #16]
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3328      	adds	r3, #40	; 0x28
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800329a:	6939      	ldr	r1, [r7, #16]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	3324      	adds	r3, #36	; 0x24
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80032ae:	6939      	ldr	r1, [r7, #16]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	332c      	adds	r3, #44	; 0x2c
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80032c2:	f3bf 8f5f 	dmb	sy
 80032c6:	e002      	b.n	80032ce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032cc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80032d4:	69fb      	ldr	r3, [r7, #28]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20012f20 	.word	0x20012f20

080032e4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003300:	f7ff fe8e 	bl	8003020 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003306:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	461a      	mov	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4293      	cmp	r3, r2
 8003312:	d24d      	bcs.n	80033b0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003314:	f3ef 8311 	mrs	r3, BASEPRI
 8003318:	f04f 0120 	mov.w	r1, #32
 800331c:	f381 8811 	msr	BASEPRI, r1
 8003320:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d031      	beq.n	800338c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003328:	6979      	ldr	r1, [r7, #20]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	3360      	adds	r3, #96	; 0x60
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	440b      	add	r3, r1
 800334a:	3364      	adds	r3, #100	; 0x64
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003350:	6979      	ldr	r1, [r7, #20]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	3368      	adds	r3, #104	; 0x68
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003364:	6979      	ldr	r1, [r7, #20]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3370      	adds	r3, #112	; 0x70
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003378:	6979      	ldr	r1, [r7, #20]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	440b      	add	r3, r1
 8003386:	336c      	adds	r3, #108	; 0x6c
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800338c:	6979      	ldr	r1, [r7, #20]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	440b      	add	r3, r1
 800339a:	3374      	adds	r3, #116	; 0x74
 800339c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80033a0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e002      	b.n	80033b6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033b4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80033b6:	69fb      	ldr	r3, [r7, #28]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20012f20 	.word	0x20012f20

080033c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80033d4:	e002      	b.n	80033dc <_EncodeStr+0x18>
    Len++;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	3301      	adds	r3, #1
 80033da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f6      	bne.n	80033d6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d901      	bls.n	80033f4 <_EncodeStr+0x30>
    Len = Limit;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2bfe      	cmp	r3, #254	; 0xfe
 80033f8:	d806      	bhi.n	8003408 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	60fa      	str	r2, [r7, #12]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e011      	b.n	800342c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	60fa      	str	r2, [r7, #12]
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	60fa      	str	r2, [r7, #12]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	0a19      	lsrs	r1, r3, #8
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	60fa      	str	r2, [r7, #12]
 8003428:	b2ca      	uxtb	r2, r1
 800342a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003430:	e00a      	b.n	8003448 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	1c53      	adds	r3, r2, #1
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1c59      	adds	r1, r3, #1
 800343c:	60f9      	str	r1, [r7, #12]
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
    n++;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	429a      	cmp	r2, r3
 800344e:	d3f0      	bcc.n	8003432 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800347e:	4b36      	ldr	r3, [pc, #216]	; (8003558 <_HandleIncomingPacket+0xe0>)
 8003480:	7e1b      	ldrb	r3, [r3, #24]
 8003482:	4618      	mov	r0, r3
 8003484:	1cfb      	adds	r3, r7, #3
 8003486:	2201      	movs	r2, #1
 8003488:	4619      	mov	r1, r3
 800348a:	f7ff fe21 	bl	80030d0 <SEGGER_RTT_ReadNoLock>
 800348e:	4603      	mov	r3, r0
 8003490:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dd54      	ble.n	8003542 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d032      	beq.n	8003504 <_HandleIncomingPacket+0x8c>
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	dc42      	bgt.n	8003528 <_HandleIncomingPacket+0xb0>
 80034a2:	2b07      	cmp	r3, #7
 80034a4:	dc16      	bgt.n	80034d4 <_HandleIncomingPacket+0x5c>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dd3e      	ble.n	8003528 <_HandleIncomingPacket+0xb0>
 80034aa:	3b01      	subs	r3, #1
 80034ac:	2b06      	cmp	r3, #6
 80034ae:	d83b      	bhi.n	8003528 <_HandleIncomingPacket+0xb0>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <_HandleIncomingPacket+0x40>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034db 	.word	0x080034db
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034e7 	.word	0x080034e7
 80034c4:	080034ed 	.word	0x080034ed
 80034c8:	080034f3 	.word	0x080034f3
 80034cc:	080034f9 	.word	0x080034f9
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	2b7f      	cmp	r3, #127	; 0x7f
 80034d6:	d036      	beq.n	8003546 <_HandleIncomingPacket+0xce>
 80034d8:	e026      	b.n	8003528 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80034da:	f000 ff45 	bl	8004368 <SEGGER_SYSVIEW_Start>
      break;
 80034de:	e037      	b.n	8003550 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80034e0:	f000 fffe 	bl	80044e0 <SEGGER_SYSVIEW_Stop>
      break;
 80034e4:	e034      	b.n	8003550 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80034e6:	f001 f9d7 	bl	8004898 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80034ea:	e031      	b.n	8003550 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80034ec:	f001 f99c 	bl	8004828 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80034f0:	e02e      	b.n	8003550 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80034f2:	f001 f81b 	bl	800452c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80034f6:	e02b      	b.n	8003550 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80034f8:	f001 fc6a 	bl	8004dd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80034fc:	e028      	b.n	8003550 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80034fe:	f001 fc49 	bl	8004d94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003502:	e025      	b.n	8003550 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <_HandleIncomingPacket+0xe0>)
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	4618      	mov	r0, r3
 800350a:	1cfb      	adds	r3, r7, #3
 800350c:	2201      	movs	r2, #1
 800350e:	4619      	mov	r1, r3
 8003510:	f7ff fdde 	bl	80030d0 <SEGGER_RTT_ReadNoLock>
 8003514:	4603      	mov	r3, r0
 8003516:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	dd15      	ble.n	800354a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fbb7 	bl	8004c94 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003526:	e010      	b.n	800354a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	b25b      	sxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	da0e      	bge.n	800354e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <_HandleIncomingPacket+0xe0>)
 8003532:	7e1b      	ldrb	r3, [r3, #24]
 8003534:	4618      	mov	r0, r3
 8003536:	1cfb      	adds	r3, r7, #3
 8003538:	2201      	movs	r2, #1
 800353a:	4619      	mov	r1, r3
 800353c:	f7ff fdc8 	bl	80030d0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003540:	e005      	b.n	800354e <_HandleIncomingPacket+0xd6>
    }
  }
 8003542:	bf00      	nop
 8003544:	e004      	b.n	8003550 <_HandleIncomingPacket+0xd8>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <_HandleIncomingPacket+0xd8>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <_HandleIncomingPacket+0xd8>
      break;
 800354e:	bf00      	nop
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200143e0 	.word	0x200143e0

0800355c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003562:	2301      	movs	r3, #1
 8003564:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003570:	4b32      	ldr	r3, [pc, #200]	; (800363c <_TrySendOverflowPacket+0xe0>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
 8003576:	e00b      	b.n	8003590 <_TrySendOverflowPacket+0x34>
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	b2da      	uxtb	r2, r3
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	09db      	lsrs	r3, r3, #7
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	2b7f      	cmp	r3, #127	; 0x7f
 8003594:	d8f0      	bhi.n	8003578 <_TrySendOverflowPacket+0x1c>
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800359c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <_TrySendOverflowPacket+0xe4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <_TrySendOverflowPacket+0xe0>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	e00b      	b.n	80035d8 <_TrySendOverflowPacket+0x7c>
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	6279      	str	r1, [r7, #36]	; 0x24
 80035ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	09db      	lsrs	r3, r3, #7
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	2b7f      	cmp	r3, #127	; 0x7f
 80035dc:	d8f0      	bhi.n	80035c0 <_TrySendOverflowPacket+0x64>
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	627a      	str	r2, [r7, #36]	; 0x24
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <_TrySendOverflowPacket+0xe0>)
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	4618      	mov	r0, r3
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	f7fc fdee 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003604:	4603      	mov	r3, r0
 8003606:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003608:	f7ff fcfa 	bl	8003000 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <_TrySendOverflowPacket+0xe0>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <_TrySendOverflowPacket+0xe0>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	3b01      	subs	r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <_TrySendOverflowPacket+0xe0>)
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e004      	b.n	8003630 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <_TrySendOverflowPacket+0xe0>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	3301      	adds	r3, #1
 800362c:	4a03      	ldr	r2, [pc, #12]	; (800363c <_TrySendOverflowPacket+0xe0>)
 800362e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003630:	693b      	ldr	r3, [r7, #16]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3730      	adds	r7, #48	; 0x30
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200143e0 	.word	0x200143e0
 8003640:	e0001004 	.word	0xe0001004

08003644 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003650:	4b6d      	ldr	r3, [pc, #436]	; (8003808 <_SendPacket+0x1c4>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d010      	beq.n	800367a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003658:	4b6b      	ldr	r3, [pc, #428]	; (8003808 <_SendPacket+0x1c4>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a5 	beq.w	80037ac <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003662:	4b69      	ldr	r3, [pc, #420]	; (8003808 <_SendPacket+0x1c4>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d109      	bne.n	800367e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800366a:	f7ff ff77 	bl	800355c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800366e:	4b66      	ldr	r3, [pc, #408]	; (8003808 <_SendPacket+0x1c4>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	f040 809c 	bne.w	80037b0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003678:	e001      	b.n	800367e <_SendPacket+0x3a>
    goto Send;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <_SendPacket+0x3c>
Send:
 800367e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b1f      	cmp	r3, #31
 8003684:	d809      	bhi.n	800369a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003686:	4b60      	ldr	r3, [pc, #384]	; (8003808 <_SendPacket+0x1c4>)
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 808d 	bne.w	80037b4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b17      	cmp	r3, #23
 800369e:	d807      	bhi.n	80036b0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e03d      	b.n	800372c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b7f      	cmp	r3, #127	; 0x7f
 80036bc:	d912      	bls.n	80036e4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	09da      	lsrs	r2, r3, #7
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	3a01      	subs	r2, #1
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e006      	b.n	80036f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b7f      	cmp	r3, #127	; 0x7f
 80036f6:	d912      	bls.n	800371e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	09da      	lsrs	r2, r3, #7
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3b01      	subs	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	3a01      	subs	r2, #1
 8003710:	60fa      	str	r2, [r7, #12]
 8003712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	e006      	b.n	800372c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800372c:	4b37      	ldr	r3, [pc, #220]	; (800380c <_SendPacket+0x1c8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003732:	4b35      	ldr	r3, [pc, #212]	; (8003808 <_SendPacket+0x1c4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	e00b      	b.n	800375e <_SendPacket+0x11a>
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	1c59      	adds	r1, r3, #1
 800374e:	6279      	str	r1, [r7, #36]	; 0x24
 8003750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	09db      	lsrs	r3, r3, #7
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	2b7f      	cmp	r3, #127	; 0x7f
 8003762:	d8f0      	bhi.n	8003746 <_SendPacket+0x102>
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	627a      	str	r2, [r7, #36]	; 0x24
 800376a:	6a3a      	ldr	r2, [r7, #32]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <_SendPacket+0x1c4>)
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	4618      	mov	r0, r3
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	461a      	mov	r2, r3
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	f7fc fd2c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003788:	4603      	mov	r3, r0
 800378a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800378c:	f7ff fc38 	bl	8003000 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003796:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <_SendPacket+0x1c4>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	60d3      	str	r3, [r2, #12]
 800379c:	e00b      	b.n	80037b6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <_SendPacket+0x1c4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <_SendPacket+0x1c4>)
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e004      	b.n	80037b6 <_SendPacket+0x172>
    goto SendDone;
 80037ac:	bf00      	nop
 80037ae:	e002      	b.n	80037b6 <_SendPacket+0x172>
      goto SendDone;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <_SendPacket+0x172>
      goto SendDone;
 80037b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <_SendPacket+0x1c4>)
 80037b8:	7e1b      	ldrb	r3, [r3, #24]
 80037ba:	4619      	mov	r1, r3
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <_SendPacket+0x1cc>)
 80037be:	460b      	mov	r3, r1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	440b      	add	r3, r1
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	336c      	adds	r3, #108	; 0x6c
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <_SendPacket+0x1c4>)
 80037ce:	7e1b      	ldrb	r3, [r3, #24]
 80037d0:	4618      	mov	r0, r3
 80037d2:	490f      	ldr	r1, [pc, #60]	; (8003810 <_SendPacket+0x1cc>)
 80037d4:	4603      	mov	r3, r0
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4403      	add	r3, r0
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	440b      	add	r3, r1
 80037de:	3370      	adds	r3, #112	; 0x70
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d00b      	beq.n	80037fe <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <_SendPacket+0x1c4>)
 80037e8:	789b      	ldrb	r3, [r3, #2]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <_SendPacket+0x1c4>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80037f4:	f7ff fe40 	bl	8003478 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <_SendPacket+0x1c4>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80037fe:	bf00      	nop
 8003800:	3728      	adds	r7, #40	; 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200143e0 	.word	0x200143e0
 800380c:	e0001004 	.word	0xe0001004
 8003810:	20012f20 	.word	0x20012f20

08003814 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	2b80      	cmp	r3, #128	; 0x80
 800382c:	d80a      	bhi.n	8003844 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	1c59      	adds	r1, r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6051      	str	r1, [r2, #4]
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d15a      	bne.n	8003902 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	e00b      	b.n	8003886 <_StoreChar+0x72>
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	1c59      	adds	r1, r3, #1
 8003876:	6279      	str	r1, [r7, #36]	; 0x24
 8003878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	09db      	lsrs	r3, r3, #7
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	2b7f      	cmp	r3, #127	; 0x7f
 800388a:	d8f0      	bhi.n	800386e <_StoreChar+0x5a>
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	627a      	str	r2, [r7, #36]	; 0x24
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e00b      	b.n	80038be <_StoreChar+0xaa>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	1c59      	adds	r1, r3, #1
 80038ae:	61f9      	str	r1, [r7, #28]
 80038b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	09db      	lsrs	r3, r3, #7
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b7f      	cmp	r3, #127	; 0x7f
 80038c2:	d8f0      	bhi.n	80038a6 <_StoreChar+0x92>
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	61fa      	str	r2, [r7, #28]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	221a      	movs	r2, #26
 80038da:	6939      	ldr	r1, [r7, #16]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff feb1 	bl	8003644 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fdb9 	bl	800345e <_PreparePacket>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	611a      	str	r2, [r3, #16]
  }
}
 8003902:	bf00      	nop
 8003904:	3728      	adds	r7, #40	; 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800391e:	2301      	movs	r3, #1
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003922:	2301      	movs	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003926:	e007      	b.n	8003938 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	623b      	str	r3, [r7, #32]
    Width++;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003938:	6a3a      	ldr	r2, [r7, #32]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d2f3      	bcs.n	8003928 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	429a      	cmp	r2, r3
 8003946:	d901      	bls.n	800394c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11f      	bne.n	8003996 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01c      	beq.n	8003996 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <_PrintUnsigned+0x66>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <_PrintUnsigned+0x66>
        c = '0';
 800396c:	2330      	movs	r3, #48	; 0x30
 800396e:	76fb      	strb	r3, [r7, #27]
 8003970:	e001      	b.n	8003976 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003972:	2320      	movs	r3, #32
 8003974:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003976:	e007      	b.n	8003988 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	3b01      	subs	r3, #1
 800397c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800397e:	7efb      	ldrb	r3, [r7, #27]
 8003980:	4619      	mov	r1, r3
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff ff46 	bl	8003814 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <_PrintUnsigned+0x8a>
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	429a      	cmp	r2, r3
 8003994:	d3f0      	bcc.n	8003978 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d903      	bls.n	80039a4 <_PrintUnsigned+0x98>
      NumDigits--;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	e009      	b.n	80039b8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d200      	bcs.n	80039b8 <_PrintUnsigned+0xac>
        break;
 80039b6:	e005      	b.n	80039c4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80039c2:	e7e8      	b.n	8003996 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <_PrintUnsigned+0x128>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4619      	mov	r1, r3
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f7ff ff14 	bl	8003814 <_StoreChar>
    Digit /= Base;
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e3      	bne.n	80039c4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d011      	beq.n	8003a2a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003a0c:	e006      	b.n	8003a1c <_PrintUnsigned+0x110>
        FieldWidth--;
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	3b01      	subs	r3, #1
 8003a12:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003a14:	2120      	movs	r1, #32
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fefc 	bl	8003814 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <_PrintUnsigned+0x11e>
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3f1      	bcc.n	8003a0e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3728      	adds	r7, #40	; 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	080059dc 	.word	0x080059dc

08003a38 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bfb8      	it	lt
 8003a4c:	425b      	neglt	r3, r3
 8003a4e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003a50:	2301      	movs	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003a54:	e007      	b.n	8003a66 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a5e:	613b      	str	r3, [r7, #16]
    Width++;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	daf3      	bge.n	8003a56 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d901      	bls.n	8003a7a <_PrintInt+0x42>
    Width = NumDigits;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <_PrintInt+0x5e>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	db04      	blt.n	8003a90 <_PrintInt+0x58>
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <_PrintInt+0x5e>
    FieldWidth--;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <_PrintInt+0x6e>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <_PrintInt+0x9c>
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00e      	beq.n	8003ad4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ab6:	e006      	b.n	8003ac6 <_PrintInt+0x8e>
        FieldWidth--;
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003abe:	2120      	movs	r1, #32
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fea7 	bl	8003814 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <_PrintInt+0x9c>
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3f1      	bcc.n	8003ab8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da07      	bge.n	8003aea <_PrintInt+0xb2>
    v = -v;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	425b      	negs	r3, r3
 8003ade:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003ae0:	212d      	movs	r1, #45	; 0x2d
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fe96 	bl	8003814 <_StoreChar>
 8003ae8:	e008      	b.n	8003afc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003af4:	212b      	movs	r1, #43	; 0x2b
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff fe8c 	bl	8003814 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d019      	beq.n	8003b3a <_PrintInt+0x102>
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d114      	bne.n	8003b3a <_PrintInt+0x102>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d111      	bne.n	8003b3a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003b1c:	e006      	b.n	8003b2c <_PrintInt+0xf4>
        FieldWidth--;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003b24:	2130      	movs	r1, #48	; 0x30
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff fe74 	bl	8003814 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <_PrintInt+0x102>
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d3f1      	bcc.n	8003b1e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f7ff fedf 	bl	800390c <_PrintUnsigned>
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b098      	sub	sp, #96	; 0x60
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b64:	f3ef 8311 	mrs	r3, BASEPRI
 8003b68:	f04f 0120 	mov.w	r1, #32
 8003b6c:	f381 8811 	msr	BASEPRI, r1
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
 8003b72:	48b7      	ldr	r0, [pc, #732]	; (8003e50 <_VPrintTarget+0x2f8>)
 8003b74:	f7ff fc73 	bl	800345e <_PreparePacket>
 8003b78:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003b7a:	4bb5      	ldr	r3, [pc, #724]	; (8003e50 <_VPrintTarget+0x2f8>)
 8003b7c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8183 	beq.w	8003eae <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bac:	2b25      	cmp	r3, #37	; 0x25
 8003bae:	f040 8170 	bne.w	8003e92 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8003bc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bc6:	3b23      	subs	r3, #35	; 0x23
 8003bc8:	2b0d      	cmp	r3, #13
 8003bca:	d83f      	bhi.n	8003c4c <_VPrintTarget+0xf4>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <_VPrintTarget+0x7c>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003c3d 	.word	0x08003c3d
 8003bd8:	08003c4d 	.word	0x08003c4d
 8003bdc:	08003c4d 	.word	0x08003c4d
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c4d 	.word	0x08003c4d
 8003bf0:	08003c4d 	.word	0x08003c4d
 8003bf4:	08003c2d 	.word	0x08003c2d
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c4d 	.word	0x08003c4d
 8003c04:	08003c4d 	.word	0x08003c4d
 8003c08:	08003c1d 	.word	0x08003c1d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e01a      	b.n	8003c52 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1e:	f043 0302 	orr.w	r3, r3, #2
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3301      	adds	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e012      	b.n	8003c52 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3301      	adds	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e00a      	b.n	8003c52 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3e:	f043 0308 	orr.w	r3, r3, #8
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e002      	b.n	8003c52 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c50:	bf00      	nop
        }
      } while (v);
 8003c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1b0      	bne.n	8003bba <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c68:	2b2f      	cmp	r3, #47	; 0x2f
 8003c6a:	d912      	bls.n	8003c92 <_VPrintTarget+0x13a>
 8003c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c70:	2b39      	cmp	r3, #57	; 0x39
 8003c72:	d80e      	bhi.n	8003c92 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3301      	adds	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	461a      	mov	r2, r3
 8003c86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b30      	subs	r3, #48	; 0x30
 8003c8e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003c90:	e7e4      	b.n	8003c5c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003c92:	2300      	movs	r3, #0
 8003c94:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003c9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ca4:	d11d      	bne.n	8003ce2 <_VPrintTarget+0x18a>
        sFormat++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8003cba:	d912      	bls.n	8003ce2 <_VPrintTarget+0x18a>
 8003cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cc0:	2b39      	cmp	r3, #57	; 0x39
 8003cc2:	d80e      	bhi.n	8003ce2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8003cca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cda:	4413      	add	r3, r2
 8003cdc:	3b30      	subs	r3, #48	; 0x30
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8003ce0:	e7e4      	b.n	8003cac <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8003cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cee:	2b6c      	cmp	r3, #108	; 0x6c
 8003cf0:	d003      	beq.n	8003cfa <_VPrintTarget+0x1a2>
 8003cf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cf6:	2b68      	cmp	r3, #104	; 0x68
 8003cf8:	d107      	bne.n	8003d0a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8003d08:	e7ef      	b.n	8003cea <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8003d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d0e:	2b25      	cmp	r3, #37	; 0x25
 8003d10:	f000 80b3 	beq.w	8003e7a <_VPrintTarget+0x322>
 8003d14:	2b25      	cmp	r3, #37	; 0x25
 8003d16:	f2c0 80b7 	blt.w	8003e88 <_VPrintTarget+0x330>
 8003d1a:	2b78      	cmp	r3, #120	; 0x78
 8003d1c:	f300 80b4 	bgt.w	8003e88 <_VPrintTarget+0x330>
 8003d20:	2b58      	cmp	r3, #88	; 0x58
 8003d22:	f2c0 80b1 	blt.w	8003e88 <_VPrintTarget+0x330>
 8003d26:	3b58      	subs	r3, #88	; 0x58
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	f200 80ad 	bhi.w	8003e88 <_VPrintTarget+0x330>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <_VPrintTarget+0x1dc>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003e2b 	.word	0x08003e2b
 8003d38:	08003e89 	.word	0x08003e89
 8003d3c:	08003e89 	.word	0x08003e89
 8003d40:	08003e89 	.word	0x08003e89
 8003d44:	08003e89 	.word	0x08003e89
 8003d48:	08003e89 	.word	0x08003e89
 8003d4c:	08003e89 	.word	0x08003e89
 8003d50:	08003e89 	.word	0x08003e89
 8003d54:	08003e89 	.word	0x08003e89
 8003d58:	08003e89 	.word	0x08003e89
 8003d5c:	08003e89 	.word	0x08003e89
 8003d60:	08003db9 	.word	0x08003db9
 8003d64:	08003ddf 	.word	0x08003ddf
 8003d68:	08003e89 	.word	0x08003e89
 8003d6c:	08003e89 	.word	0x08003e89
 8003d70:	08003e89 	.word	0x08003e89
 8003d74:	08003e89 	.word	0x08003e89
 8003d78:	08003e89 	.word	0x08003e89
 8003d7c:	08003e89 	.word	0x08003e89
 8003d80:	08003e89 	.word	0x08003e89
 8003d84:	08003e89 	.word	0x08003e89
 8003d88:	08003e89 	.word	0x08003e89
 8003d8c:	08003e89 	.word	0x08003e89
 8003d90:	08003e89 	.word	0x08003e89
 8003d94:	08003e55 	.word	0x08003e55
 8003d98:	08003e89 	.word	0x08003e89
 8003d9c:	08003e89 	.word	0x08003e89
 8003da0:	08003e89 	.word	0x08003e89
 8003da4:	08003e89 	.word	0x08003e89
 8003da8:	08003e05 	.word	0x08003e05
 8003dac:	08003e89 	.word	0x08003e89
 8003db0:	08003e89 	.word	0x08003e89
 8003db4:	08003e2b 	.word	0x08003e2b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	1d19      	adds	r1, r3, #4
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8003dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003dcc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fd1c 	bl	8003814 <_StoreChar>
        break;
 8003ddc:	e055      	b.n	8003e8a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	1d19      	adds	r1, r3, #4
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6011      	str	r1, [r2, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003dec:	f107 0014 	add.w	r0, r7, #20
 8003df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfa:	220a      	movs	r2, #10
 8003dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003dfe:	f7ff fe1b 	bl	8003a38 <_PrintInt>
        break;
 8003e02:	e042      	b.n	8003e8a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1d19      	adds	r1, r3, #4
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6011      	str	r1, [r2, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003e12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e14:	f107 0014 	add.w	r0, r7, #20
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e22:	220a      	movs	r2, #10
 8003e24:	f7ff fd72 	bl	800390c <_PrintUnsigned>
        break;
 8003e28:	e02f      	b.n	8003e8a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1d19      	adds	r1, r3, #4
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6011      	str	r1, [r2, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003e38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e3a:	f107 0014 	add.w	r0, r7, #20
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e48:	2210      	movs	r2, #16
 8003e4a:	f7ff fd5f 	bl	800390c <_PrintUnsigned>
        break;
 8003e4e:	e01c      	b.n	8003e8a <_VPrintTarget+0x332>
 8003e50:	20014410 	.word	0x20014410
      case 'p':
        v = va_arg(*pParamList, int);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1d19      	adds	r1, r3, #4
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8003e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e64:	f107 0014 	add.w	r0, r7, #20
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2308      	movs	r3, #8
 8003e72:	2210      	movs	r2, #16
 8003e74:	f7ff fd4a 	bl	800390c <_PrintUnsigned>
        break;
 8003e78:	e007      	b.n	8003e8a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	2125      	movs	r1, #37	; 0x25
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fcc7 	bl	8003814 <_StoreChar>
        break;
 8003e86:	e000      	b.n	8003e8a <_VPrintTarget+0x332>
      default:
        break;
 8003e88:	bf00      	nop
      }
      sFormat++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e007      	b.n	8003ea2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8003e92:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003e96:	f107 0314 	add.w	r3, r7, #20
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fcb9 	bl	8003814 <_StoreChar>
    }
  } while (*sFormat);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f47f ae72 	bne.w	8003b90 <_VPrintTarget+0x38>
 8003eac:	e000      	b.n	8003eb0 <_VPrintTarget+0x358>
      break;
 8003eae:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d041      	beq.n	8003f3a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec6:	e00b      	b.n	8003ee0 <_VPrintTarget+0x388>
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	6439      	str	r1, [r7, #64]	; 0x40
 8003ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	09db      	lsrs	r3, r3, #7
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee4:	d8f0      	bhi.n	8003ec8 <_VPrintTarget+0x370>
 8003ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	643a      	str	r2, [r7, #64]	; 0x40
 8003eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003efa:	2300      	movs	r3, #0
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
 8003efe:	e00b      	b.n	8003f18 <_VPrintTarget+0x3c0>
 8003f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	1c59      	adds	r1, r3, #1
 8003f08:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	09db      	lsrs	r3, r3, #7
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f1c:	d8f0      	bhi.n	8003f00 <_VPrintTarget+0x3a8>
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	69b9      	ldr	r1, [r7, #24]
 8003f32:	221a      	movs	r2, #26
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fb85 	bl	8003644 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003f40:	bf00      	nop
 8003f42:	3758      	adds	r7, #88	; 0x58
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003f56:	2300      	movs	r3, #0
 8003f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f5c:	4917      	ldr	r1, [pc, #92]	; (8003fbc <SEGGER_SYSVIEW_Init+0x74>)
 8003f5e:	4818      	ldr	r0, [pc, #96]	; (8003fc0 <SEGGER_SYSVIEW_Init+0x78>)
 8003f60:	f7ff f93c 	bl	80031dc <SEGGER_RTT_AllocUpBuffer>
 8003f64:	4603      	mov	r3, r0
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f6a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f6e:	785a      	ldrb	r2, [r3, #1]
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f72:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f76:	7e1b      	ldrb	r3, [r3, #24]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2308      	movs	r3, #8
 8003f80:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <SEGGER_SYSVIEW_Init+0x80>)
 8003f82:	490f      	ldr	r1, [pc, #60]	; (8003fc0 <SEGGER_SYSVIEW_Init+0x78>)
 8003f84:	f7ff f9ae 	bl	80032e4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <SEGGER_SYSVIEW_Init+0x84>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f94:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003f96:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003f9c:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003fa8:	4a06      	ldr	r2, [pc, #24]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200133d8 	.word	0x200133d8
 8003fc0:	080059c0 	.word	0x080059c0
 8003fc4:	200143e0 	.word	0x200143e0
 8003fc8:	200143d8 	.word	0x200143d8
 8003fcc:	e0001004 	.word	0xe0001004

08003fd0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6113      	str	r3, [r2, #16]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	200143e0 	.word	0x200143e0

08003ff0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8003ffc:	f04f 0120 	mov.w	r1, #32
 8004000:	f381 8811 	msr	BASEPRI, r1
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4808      	ldr	r0, [pc, #32]	; (8004028 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004008:	f7ff fa29 	bl	800345e <_PreparePacket>
 800400c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	68b8      	ldr	r0, [r7, #8]
 8004014:	f7ff fb16 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f383 8811 	msr	BASEPRI, r3
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20014410 	.word	0x20014410

0800402c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004036:	f3ef 8311 	mrs	r3, BASEPRI
 800403a:	f04f 0120 	mov.w	r1, #32
 800403e:	f381 8811 	msr	BASEPRI, r1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	4816      	ldr	r0, [pc, #88]	; (80040a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004046:	f7ff fa0a 	bl	800345e <_PreparePacket>
 800404a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	e00b      	b.n	8004072 <SEGGER_SYSVIEW_RecordU32+0x46>
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	61f9      	str	r1, [r7, #28]
 8004064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	09db      	lsrs	r3, r3, #7
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b7f      	cmp	r3, #127	; 0x7f
 8004076:	d8f0      	bhi.n	800405a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	61fa      	str	r2, [r7, #28]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6938      	ldr	r0, [r7, #16]
 800408e:	f7ff fad9 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f383 8811 	msr	BASEPRI, r3
}
 8004098:	bf00      	nop
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20014410 	.word	0x20014410

080040a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	; 0x30
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80040b0:	f3ef 8311 	mrs	r3, BASEPRI
 80040b4:	f04f 0120 	mov.w	r1, #32
 80040b8:	f381 8811 	msr	BASEPRI, r1
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	4825      	ldr	r0, [pc, #148]	; (8004154 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80040c0:	f7ff f9cd 	bl	800345e <_PreparePacket>
 80040c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d2:	e00b      	b.n	80040ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	1c59      	adds	r1, r3, #1
 80040dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	09db      	lsrs	r3, r3, #7
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b7f      	cmp	r3, #127	; 0x7f
 80040f0:	d8f0      	bhi.n	80040d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	e00b      	b.n	8004124 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	1c59      	adds	r1, r3, #1
 8004114:	6279      	str	r1, [r7, #36]	; 0x24
 8004116:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	09db      	lsrs	r3, r3, #7
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	2b7f      	cmp	r3, #127	; 0x7f
 8004128:	d8f0      	bhi.n	800410c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	627a      	str	r2, [r7, #36]	; 0x24
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	69b8      	ldr	r0, [r7, #24]
 8004140:	f7ff fa80 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f383 8811 	msr	BASEPRI, r3
}
 800414a:	bf00      	nop
 800414c:	3730      	adds	r7, #48	; 0x30
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20014410 	.word	0x20014410

08004158 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004166:	f3ef 8311 	mrs	r3, BASEPRI
 800416a:	f04f 0120 	mov.w	r1, #32
 800416e:	f381 8811 	msr	BASEPRI, r1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	4832      	ldr	r0, [pc, #200]	; (8004240 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004176:	f7ff f972 	bl	800345e <_PreparePacket>
 800417a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
 8004188:	e00b      	b.n	80041a2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	b2da      	uxtb	r2, r3
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	1c59      	adds	r1, r3, #1
 8004192:	6379      	str	r1, [r7, #52]	; 0x34
 8004194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	09db      	lsrs	r3, r3, #7
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2b7f      	cmp	r3, #127	; 0x7f
 80041a6:	d8f0      	bhi.n	800418a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80041a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	637a      	str	r2, [r7, #52]	; 0x34
 80041ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c0:	e00b      	b.n	80041da <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	09db      	lsrs	r3, r3, #7
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	2b7f      	cmp	r3, #127	; 0x7f
 80041de:	d8f0      	bhi.n	80041c2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	623b      	str	r3, [r7, #32]
 80041f8:	e00b      	b.n	8004212 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	1c59      	adds	r1, r3, #1
 8004202:	6279      	str	r1, [r7, #36]	; 0x24
 8004204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	09db      	lsrs	r3, r3, #7
 8004210:	623b      	str	r3, [r7, #32]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	2b7f      	cmp	r3, #127	; 0x7f
 8004216:	d8f0      	bhi.n	80041fa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	627a      	str	r2, [r7, #36]	; 0x24
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	69b8      	ldr	r0, [r7, #24]
 800422e:	f7ff fa09 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f383 8811 	msr	BASEPRI, r3
}
 8004238:	bf00      	nop
 800423a:	3738      	adds	r7, #56	; 0x38
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20014410 	.word	0x20014410

08004244 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b090      	sub	sp, #64	; 0x40
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004252:	f3ef 8311 	mrs	r3, BASEPRI
 8004256:	f04f 0120 	mov.w	r1, #32
 800425a:	f381 8811 	msr	BASEPRI, r1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	4840      	ldr	r0, [pc, #256]	; (8004364 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004262:	f7ff f8fc 	bl	800345e <_PreparePacket>
 8004266:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	63bb      	str	r3, [r7, #56]	; 0x38
 8004274:	e00b      	b.n	800428e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	b2da      	uxtb	r2, r3
 800427a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427c:	1c59      	adds	r1, r3, #1
 800427e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004280:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	09db      	lsrs	r3, r3, #7
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	2b7f      	cmp	r3, #127	; 0x7f
 8004292:	d8f0      	bhi.n	8004276 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	63fa      	str	r2, [r7, #60]	; 0x3c
 800429a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
 80042ac:	e00b      	b.n	80042c6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	1c59      	adds	r1, r3, #1
 80042b6:	6379      	str	r1, [r7, #52]	; 0x34
 80042b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	09db      	lsrs	r3, r3, #7
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2b7f      	cmp	r3, #127	; 0x7f
 80042ca:	d8f0      	bhi.n	80042ae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	637a      	str	r2, [r7, #52]	; 0x34
 80042d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e4:	e00b      	b.n	80042fe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	1c59      	adds	r1, r3, #1
 80042ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	09db      	lsrs	r3, r3, #7
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	2b7f      	cmp	r3, #127	; 0x7f
 8004302:	d8f0      	bhi.n	80042e6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800430a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	e00b      	b.n	8004336 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1c59      	adds	r1, r3, #1
 8004326:	6279      	str	r1, [r7, #36]	; 0x24
 8004328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	09db      	lsrs	r3, r3, #7
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	2b7f      	cmp	r3, #127	; 0x7f
 800433a:	d8f0      	bhi.n	800431e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	627a      	str	r2, [r7, #36]	; 0x24
 8004342:	6a3a      	ldr	r2, [r7, #32]
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6979      	ldr	r1, [r7, #20]
 8004350:	69b8      	ldr	r0, [r7, #24]
 8004352:	f7ff f977 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f383 8811 	msr	BASEPRI, r3
}
 800435c:	bf00      	nop
 800435e:	3740      	adds	r7, #64	; 0x40
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20014410 	.word	0x20014410

08004368 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b08c      	sub	sp, #48	; 0x30
 800436c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800436e:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004374:	f3ef 8311 	mrs	r3, BASEPRI
 8004378:	f04f 0120 	mov.w	r1, #32
 800437c:	f381 8811 	msr	BASEPRI, r1
 8004380:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004382:	4b54      	ldr	r3, [pc, #336]	; (80044d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	220a      	movs	r2, #10
 8004388:	4953      	ldr	r1, [pc, #332]	; (80044d8 <SEGGER_SYSVIEW_Start+0x170>)
 800438a:	4618      	mov	r0, r3
 800438c:	f7fb ff28 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004396:	f7fe fe33 	bl	8003000 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800439a:	200a      	movs	r0, #10
 800439c:	f7ff fe28 	bl	8003ff0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80043a0:	f3ef 8311 	mrs	r3, BASEPRI
 80043a4:	f04f 0120 	mov.w	r1, #32
 80043a8:	f381 8811 	msr	BASEPRI, r1
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	484b      	ldr	r0, [pc, #300]	; (80044dc <SEGGER_SYSVIEW_Start+0x174>)
 80043b0:	f7ff f855 	bl	800345e <_PreparePacket>
 80043b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043be:	4b45      	ldr	r3, [pc, #276]	; (80044d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c4:	e00b      	b.n	80043de <SEGGER_SYSVIEW_Start+0x76>
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	1c59      	adds	r1, r3, #1
 80043ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	09db      	lsrs	r3, r3, #7
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b7f      	cmp	r3, #127	; 0x7f
 80043e2:	d8f0      	bhi.n	80043c6 <SEGGER_SYSVIEW_Start+0x5e>
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	e00b      	b.n	8004418 <SEGGER_SYSVIEW_Start+0xb0>
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	6279      	str	r1, [r7, #36]	; 0x24
 800440a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	09db      	lsrs	r3, r3, #7
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	2b7f      	cmp	r3, #127	; 0x7f
 800441c:	d8f0      	bhi.n	8004400 <SEGGER_SYSVIEW_Start+0x98>
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	627a      	str	r2, [r7, #36]	; 0x24
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	e00b      	b.n	8004452 <SEGGER_SYSVIEW_Start+0xea>
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	1c59      	adds	r1, r3, #1
 8004442:	61f9      	str	r1, [r7, #28]
 8004444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	09db      	lsrs	r3, r3, #7
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b7f      	cmp	r3, #127	; 0x7f
 8004456:	d8f0      	bhi.n	800443a <SEGGER_SYSVIEW_Start+0xd2>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	61fa      	str	r2, [r7, #28]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e00b      	b.n	800448a <SEGGER_SYSVIEW_Start+0x122>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1c59      	adds	r1, r3, #1
 800447a:	6179      	str	r1, [r7, #20]
 800447c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	09db      	lsrs	r3, r3, #7
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b7f      	cmp	r3, #127	; 0x7f
 800448e:	d8f0      	bhi.n	8004472 <SEGGER_SYSVIEW_Start+0x10a>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	617a      	str	r2, [r7, #20]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80044a0:	2218      	movs	r2, #24
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff f8cd 	bl	8003644 <_SendPacket>
      RECORD_END();
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80044be:	f000 f9eb 	bl	8004898 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80044c2:	f000 f9b1 	bl	8004828 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80044c6:	f000 fc83 	bl	8004dd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80044ca:	bf00      	nop
 80044cc:	3730      	adds	r7, #48	; 0x30
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200143e0 	.word	0x200143e0
 80044d8:	080059d0 	.word	0x080059d0
 80044dc:	20014410 	.word	0x20014410

080044e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80044e6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ea:	f04f 0120 	mov.w	r1, #32
 80044ee:	f381 8811 	msr	BASEPRI, r1
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	480b      	ldr	r0, [pc, #44]	; (8004524 <SEGGER_SYSVIEW_Stop+0x44>)
 80044f6:	f7fe ffb2 	bl	800345e <_PreparePacket>
 80044fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <SEGGER_SYSVIEW_Stop+0x48>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004504:	220b      	movs	r2, #11
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	6838      	ldr	r0, [r7, #0]
 800450a:	f7ff f89b 	bl	8003644 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <SEGGER_SYSVIEW_Stop+0x48>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f383 8811 	msr	BASEPRI, r3
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20014410 	.word	0x20014410
 8004528:	200143e0 	.word	0x200143e0

0800452c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	; 0x30
 8004530:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004532:	f3ef 8311 	mrs	r3, BASEPRI
 8004536:	f04f 0120 	mov.w	r1, #32
 800453a:	f381 8811 	msr	BASEPRI, r1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	4845      	ldr	r0, [pc, #276]	; (8004658 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004542:	f7fe ff8c 	bl	800345e <_PreparePacket>
 8004546:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
 8004556:	e00b      	b.n	8004570 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	b2da      	uxtb	r2, r3
 800455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455e:	1c59      	adds	r1, r3, #1
 8004560:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	09db      	lsrs	r3, r3, #7
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	2b7f      	cmp	r3, #127	; 0x7f
 8004574:	d8f0      	bhi.n	8004558 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800457c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	4b34      	ldr	r3, [pc, #208]	; (800465c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	623b      	str	r3, [r7, #32]
 8004590:	e00b      	b.n	80045aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1c59      	adds	r1, r3, #1
 800459a:	6279      	str	r1, [r7, #36]	; 0x24
 800459c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	09db      	lsrs	r3, r3, #7
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	2b7f      	cmp	r3, #127	; 0x7f
 80045ae:	d8f0      	bhi.n	8004592 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	627a      	str	r2, [r7, #36]	; 0x24
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	e00b      	b.n	80045e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	1c59      	adds	r1, r3, #1
 80045d4:	61f9      	str	r1, [r7, #28]
 80045d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	09db      	lsrs	r3, r3, #7
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b7f      	cmp	r3, #127	; 0x7f
 80045e8:	d8f0      	bhi.n	80045cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	61fa      	str	r2, [r7, #28]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	e00b      	b.n	800461c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	6179      	str	r1, [r7, #20]
 800460e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	09db      	lsrs	r3, r3, #7
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b7f      	cmp	r3, #127	; 0x7f
 8004620:	d8f0      	bhi.n	8004604 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	617a      	str	r2, [r7, #20]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004632:	2218      	movs	r2, #24
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	68b8      	ldr	r0, [r7, #8]
 8004638:	f7ff f804 	bl	8003644 <_SendPacket>
  RECORD_END();
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800464a:	4b04      	ldr	r3, [pc, #16]	; (800465c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	4798      	blx	r3
  }
}
 8004650:	bf00      	nop
 8004652:	3730      	adds	r7, #48	; 0x30
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20014410 	.word	0x20014410
 800465c:	200143e0 	.word	0x200143e0

08004660 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b092      	sub	sp, #72	; 0x48
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004668:	f3ef 8311 	mrs	r3, BASEPRI
 800466c:	f04f 0120 	mov.w	r1, #32
 8004670:	f381 8811 	msr	BASEPRI, r1
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	486a      	ldr	r0, [pc, #424]	; (8004820 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004678:	f7fe fef1 	bl	800345e <_PreparePacket>
 800467c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	647b      	str	r3, [r7, #68]	; 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b66      	ldr	r3, [pc, #408]	; (8004824 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	643b      	str	r3, [r7, #64]	; 0x40
 8004692:	e00b      	b.n	80046ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	b2da      	uxtb	r2, r3
 8004698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469a:	1c59      	adds	r1, r3, #1
 800469c:	6479      	str	r1, [r7, #68]	; 0x44
 800469e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	09db      	lsrs	r3, r3, #7
 80046aa:	643b      	str	r3, [r7, #64]	; 0x40
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	2b7f      	cmp	r3, #127	; 0x7f
 80046b0:	d8f0      	bhi.n	8004694 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80046b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	647a      	str	r2, [r7, #68]	; 0x44
 80046b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80046cc:	e00b      	b.n	80046e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d4:	1c59      	adds	r1, r3, #1
 80046d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80046d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	09db      	lsrs	r3, r3, #7
 80046e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ea:	d8f0      	bhi.n	80046ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	4619      	mov	r1, r3
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7fe fe5d 	bl	80033c4 <_EncodeStr>
 800470a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800470c:	2209      	movs	r2, #9
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6938      	ldr	r0, [r7, #16]
 8004712:	f7fe ff97 	bl	8003644 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b40      	ldr	r3, [pc, #256]	; (8004824 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	633b      	str	r3, [r7, #48]	; 0x30
 800472a:	e00b      	b.n	8004744 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	b2da      	uxtb	r2, r3
 8004730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004732:	1c59      	adds	r1, r3, #1
 8004734:	6379      	str	r1, [r7, #52]	; 0x34
 8004736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	09db      	lsrs	r3, r3, #7
 8004742:	633b      	str	r3, [r7, #48]	; 0x30
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	2b7f      	cmp	r3, #127	; 0x7f
 8004748:	d8f0      	bhi.n	800472c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	637a      	str	r2, [r7, #52]	; 0x34
 8004750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004758:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
 8004764:	e00b      	b.n	800477e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	b2da      	uxtb	r2, r3
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	1c59      	adds	r1, r3, #1
 800476e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	09db      	lsrs	r3, r3, #7
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	2b7f      	cmp	r3, #127	; 0x7f
 8004782:	d8f0      	bhi.n	8004766 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800478a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	e00b      	b.n	80047b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	6279      	str	r1, [r7, #36]	; 0x24
 80047aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	09db      	lsrs	r3, r3, #7
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b7f      	cmp	r3, #127	; 0x7f
 80047bc:	d8f0      	bhi.n	80047a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	627a      	str	r2, [r7, #36]	; 0x24
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	e00b      	b.n	80047f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	1c59      	adds	r1, r3, #1
 80047e0:	61f9      	str	r1, [r7, #28]
 80047e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	09db      	lsrs	r3, r3, #7
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b7f      	cmp	r3, #127	; 0x7f
 80047f4:	d8f0      	bhi.n	80047d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	61fa      	str	r2, [r7, #28]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004806:	2215      	movs	r2, #21
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	6938      	ldr	r0, [r7, #16]
 800480c:	f7fe ff1a 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f383 8811 	msr	BASEPRI, r3
}
 8004816:	bf00      	nop
 8004818:	3748      	adds	r7, #72	; 0x48
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20014410 	.word	0x20014410
 8004824:	200143e0 	.word	0x200143e0

08004828 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800483e:	4b03      	ldr	r3, [pc, #12]	; (800484c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4798      	blx	r3
  }
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200143e0 	.word	0x200143e0

08004850 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004858:	f3ef 8311 	mrs	r3, BASEPRI
 800485c:	f04f 0120 	mov.w	r1, #32
 8004860:	f381 8811 	msr	BASEPRI, r1
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	480b      	ldr	r0, [pc, #44]	; (8004894 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004868:	f7fe fdf9 	bl	800345e <_PreparePacket>
 800486c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f7fe fda6 	bl	80033c4 <_EncodeStr>
 8004878:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800487a:	220e      	movs	r2, #14
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	6938      	ldr	r0, [r7, #16]
 8004880:	f7fe fee0 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f383 8811 	msr	BASEPRI, r3
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20014410 	.word	0x20014410

08004898 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01a      	beq.n	80048dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4798      	blx	r3
 80048b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80048bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80048be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	000a      	movs	r2, r1
 80048cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80048ce:	4613      	mov	r3, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4621      	mov	r1, r4
 80048d4:	200d      	movs	r0, #13
 80048d6:	f7ff fbe5 	bl	80040a4 <SEGGER_SYSVIEW_RecordU32x2>
 80048da:	e006      	b.n	80048ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4619      	mov	r1, r3
 80048e2:	200c      	movs	r0, #12
 80048e4:	f7ff fba2 	bl	800402c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd90      	pop	{r4, r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200143e0 	.word	0x200143e0
 80048f8:	e0001004 	.word	0xe0001004

080048fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004902:	f3ef 8311 	mrs	r3, BASEPRI
 8004906:	f04f 0120 	mov.w	r1, #32
 800490a:	f381 8811 	msr	BASEPRI, r1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	4819      	ldr	r0, [pc, #100]	; (8004978 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004912:	f7fe fda4 	bl	800345e <_PreparePacket>
 8004916:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800491c:	4b17      	ldr	r3, [pc, #92]	; (800497c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004924:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e00b      	b.n	8004948 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1c59      	adds	r1, r3, #1
 8004938:	6179      	str	r1, [r7, #20]
 800493a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	09db      	lsrs	r3, r3, #7
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b7f      	cmp	r3, #127	; 0x7f
 800494c:	d8f0      	bhi.n	8004930 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	617a      	str	r2, [r7, #20]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800495e:	2202      	movs	r2, #2
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	68b8      	ldr	r0, [r7, #8]
 8004964:	f7fe fe6e 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20014410 	.word	0x20014410
 800497c:	e000ed04 	.word	0xe000ed04

08004980 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004986:	f3ef 8311 	mrs	r3, BASEPRI
 800498a:	f04f 0120 	mov.w	r1, #32
 800498e:	f381 8811 	msr	BASEPRI, r1
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	4807      	ldr	r0, [pc, #28]	; (80049b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004996:	f7fe fd62 	bl	800345e <_PreparePacket>
 800499a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800499c:	2203      	movs	r2, #3
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	6838      	ldr	r0, [r7, #0]
 80049a2:	f7fe fe4f 	bl	8003644 <_SendPacket>
  RECORD_END();
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f383 8811 	msr	BASEPRI, r3
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20014410 	.word	0x20014410

080049b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049be:	f3ef 8311 	mrs	r3, BASEPRI
 80049c2:	f04f 0120 	mov.w	r1, #32
 80049c6:	f381 8811 	msr	BASEPRI, r1
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	4807      	ldr	r0, [pc, #28]	; (80049ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80049ce:	f7fe fd46 	bl	800345e <_PreparePacket>
 80049d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80049d4:	2212      	movs	r2, #18
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	6838      	ldr	r0, [r7, #0]
 80049da:	f7fe fe33 	bl	8003644 <_SendPacket>
  RECORD_END();
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f383 8811 	msr	BASEPRI, r3
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20014410 	.word	0x20014410

080049f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049f6:	f3ef 8311 	mrs	r3, BASEPRI
 80049fa:	f04f 0120 	mov.w	r1, #32
 80049fe:	f381 8811 	msr	BASEPRI, r1
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	4807      	ldr	r0, [pc, #28]	; (8004a24 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004a06:	f7fe fd2a 	bl	800345e <_PreparePacket>
 8004a0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004a0c:	2211      	movs	r2, #17
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	6838      	ldr	r0, [r7, #0]
 8004a12:	f7fe fe17 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f383 8811 	msr	BASEPRI, r3
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20014410 	.word	0x20014410

08004a28 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a30:	f3ef 8311 	mrs	r3, BASEPRI
 8004a34:	f04f 0120 	mov.w	r1, #32
 8004a38:	f381 8811 	msr	BASEPRI, r1
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	4819      	ldr	r0, [pc, #100]	; (8004aa4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004a40:	f7fe fd0d 	bl	800345e <_PreparePacket>
 8004a44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a4a:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	e00b      	b.n	8004a76 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	1c59      	adds	r1, r3, #1
 8004a66:	61f9      	str	r1, [r7, #28]
 8004a68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	09db      	lsrs	r3, r3, #7
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b7f      	cmp	r3, #127	; 0x7f
 8004a7a:	d8f0      	bhi.n	8004a5e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	61fa      	str	r2, [r7, #28]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	6938      	ldr	r0, [r7, #16]
 8004a92:	f7fe fdd7 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f383 8811 	msr	BASEPRI, r3
}
 8004a9c:	bf00      	nop
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20014410 	.word	0x20014410
 8004aa8:	200143e0 	.word	0x200143e0

08004aac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab8:	f04f 0120 	mov.w	r1, #32
 8004abc:	f381 8811 	msr	BASEPRI, r1
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	4819      	ldr	r0, [pc, #100]	; (8004b28 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ac4:	f7fe fccb 	bl	800345e <_PreparePacket>
 8004ac8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ace:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	e00b      	b.n	8004afa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	61f9      	str	r1, [r7, #28]
 8004aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	09db      	lsrs	r3, r3, #7
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b7f      	cmp	r3, #127	; 0x7f
 8004afe:	d8f0      	bhi.n	8004ae2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	61fa      	str	r2, [r7, #28]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004b10:	2204      	movs	r2, #4
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	6938      	ldr	r0, [r7, #16]
 8004b16:	f7fe fd95 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f383 8811 	msr	BASEPRI, r3
}
 8004b20:	bf00      	nop
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20014410 	.word	0x20014410
 8004b2c:	200143e0 	.word	0x200143e0

08004b30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b38:	f3ef 8311 	mrs	r3, BASEPRI
 8004b3c:	f04f 0120 	mov.w	r1, #32
 8004b40:	f381 8811 	msr	BASEPRI, r1
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	4819      	ldr	r0, [pc, #100]	; (8004bac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004b48:	f7fe fc89 	bl	800345e <_PreparePacket>
 8004b4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b52:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	e00b      	b.n	8004b7e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	1c59      	adds	r1, r3, #1
 8004b6e:	61f9      	str	r1, [r7, #28]
 8004b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	09db      	lsrs	r3, r3, #7
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b7f      	cmp	r3, #127	; 0x7f
 8004b82:	d8f0      	bhi.n	8004b66 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	61fa      	str	r2, [r7, #28]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004b94:	2206      	movs	r2, #6
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	6938      	ldr	r0, [r7, #16]
 8004b9a:	f7fe fd53 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f383 8811 	msr	BASEPRI, r3
}
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20014410 	.word	0x20014410
 8004bb0:	200143e0 	.word	0x200143e0

08004bb4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004bc2:	f04f 0120 	mov.w	r1, #32
 8004bc6:	f381 8811 	msr	BASEPRI, r1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	4827      	ldr	r0, [pc, #156]	; (8004c6c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004bce:	f7fe fc46 	bl	800345e <_PreparePacket>
 8004bd2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	e00b      	b.n	8004c04 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	1c59      	adds	r1, r3, #1
 8004bf4:	6279      	str	r1, [r7, #36]	; 0x24
 8004bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	09db      	lsrs	r3, r3, #7
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b7f      	cmp	r3, #127	; 0x7f
 8004c08:	d8f0      	bhi.n	8004bec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e00b      	b.n	8004c3c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	61f9      	str	r1, [r7, #28]
 8004c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	09db      	lsrs	r3, r3, #7
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c40:	d8f0      	bhi.n	8004c24 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	61fa      	str	r2, [r7, #28]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004c52:	2207      	movs	r2, #7
 8004c54:	68f9      	ldr	r1, [r7, #12]
 8004c56:	6938      	ldr	r0, [r7, #16]
 8004c58:	f7fe fcf4 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f383 8811 	msr	BASEPRI, r3
}
 8004c62:	bf00      	nop
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20014410 	.word	0x20014410
 8004c70:	200143e0 	.word	0x200143e0

08004c74 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004c7c:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	1ad3      	subs	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	200143e0 	.word	0x200143e0

08004c94 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004c9e:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d06d      	beq.n	8004d82 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004cac:	2300      	movs	r3, #0
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb0:	e008      	b.n	8004cc4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d3f2      	bcc.n	8004cb2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004ccc:	e000      	b.n	8004cd0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004cce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d055      	beq.n	8004d82 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cda:	f04f 0120 	mov.w	r1, #32
 8004cde:	f381 8811 	msr	BASEPRI, r1
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	482a      	ldr	r0, [pc, #168]	; (8004d90 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004ce6:	f7fe fbba 	bl	800345e <_PreparePacket>
 8004cea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	e00b      	b.n	8004d12 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	1c59      	adds	r1, r3, #1
 8004d02:	6279      	str	r1, [r7, #36]	; 0x24
 8004d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	09db      	lsrs	r3, r3, #7
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2b7f      	cmp	r3, #127	; 0x7f
 8004d16:	d8f0      	bhi.n	8004cfa <SEGGER_SYSVIEW_SendModule+0x66>
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	e00b      	b.n	8004d4c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	1c59      	adds	r1, r3, #1
 8004d3c:	61f9      	str	r1, [r7, #28]
 8004d3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	09db      	lsrs	r3, r3, #7
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d50:	d8f0      	bhi.n	8004d34 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	61fa      	str	r2, [r7, #28]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7fe fb2a 	bl	80033c4 <_EncodeStr>
 8004d70:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004d72:	2216      	movs	r2, #22
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	6938      	ldr	r0, [r7, #16]
 8004d78:	f7fe fc64 	bl	8003644 <_SendPacket>
      RECORD_END();
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004d82:	bf00      	nop
 8004d84:	3730      	adds	r7, #48	; 0x30
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20014408 	.word	0x20014408
 8004d90:	20014410 	.word	0x20014410

08004d94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f2      	bne.n	8004da8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20014408 	.word	0x20014408

08004dd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dda:	f04f 0120 	mov.w	r1, #32
 8004dde:	f381 8811 	msr	BASEPRI, r1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	4817      	ldr	r0, [pc, #92]	; (8004e44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004de6:	f7fe fb3a 	bl	800345e <_PreparePacket>
 8004dea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	e00b      	b.n	8004e14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	6179      	str	r1, [r7, #20]
 8004e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	09db      	lsrs	r3, r3, #7
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b7f      	cmp	r3, #127	; 0x7f
 8004e18:	d8f0      	bhi.n	8004dfc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	617a      	str	r2, [r7, #20]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004e2a:	221b      	movs	r2, #27
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f7fe fc08 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f383 8811 	msr	BASEPRI, r3
}
 8004e3a:	bf00      	nop
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20014410 	.word	0x20014410
 8004e48:	2001440c 	.word	0x2001440c

08004e4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004e4c:	b40f      	push	{r0, r1, r2, r3}
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6938      	ldr	r0, [r7, #16]
 8004e62:	f7fe fe79 	bl	8003b58 <_VPrintTarget>
  va_end(ParamList);
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e70:	b004      	add	sp, #16
 8004e72:	4770      	bx	lr

08004e74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e80:	f04f 0120 	mov.w	r1, #32
 8004e84:	f381 8811 	msr	BASEPRI, r1
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	4827      	ldr	r0, [pc, #156]	; (8004f28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004e8c:	f7fe fae7 	bl	800345e <_PreparePacket>
 8004e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e92:	2280      	movs	r2, #128	; 0x80
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	6938      	ldr	r0, [r7, #16]
 8004e98:	f7fe fa94 	bl	80033c4 <_EncodeStr>
 8004e9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	e00b      	b.n	8004ec0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	1c59      	adds	r1, r3, #1
 8004eb0:	6279      	str	r1, [r7, #36]	; 0x24
 8004eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	09db      	lsrs	r3, r3, #7
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec4:	d8f0      	bhi.n	8004ea8 <SEGGER_SYSVIEW_Warn+0x34>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	627a      	str	r2, [r7, #36]	; 0x24
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e00b      	b.n	8004ef8 <SEGGER_SYSVIEW_Warn+0x84>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	61f9      	str	r1, [r7, #28]
 8004eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	09db      	lsrs	r3, r3, #7
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b7f      	cmp	r3, #127	; 0x7f
 8004efc:	d8f0      	bhi.n	8004ee0 <SEGGER_SYSVIEW_Warn+0x6c>
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	61fa      	str	r2, [r7, #28]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f0e:	221a      	movs	r2, #26
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	6938      	ldr	r0, [r7, #16]
 8004f14:	f7fe fb96 	bl	8003644 <_SendPacket>
  RECORD_END();
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
}
 8004f1e:	bf00      	nop
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20014410 	.word	0x20014410

08004f2c <__libc_init_array>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	4d0d      	ldr	r5, [pc, #52]	; (8004f64 <__libc_init_array+0x38>)
 8004f30:	4c0d      	ldr	r4, [pc, #52]	; (8004f68 <__libc_init_array+0x3c>)
 8004f32:	1b64      	subs	r4, r4, r5
 8004f34:	10a4      	asrs	r4, r4, #2
 8004f36:	2600      	movs	r6, #0
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	d109      	bne.n	8004f50 <__libc_init_array+0x24>
 8004f3c:	4d0b      	ldr	r5, [pc, #44]	; (8004f6c <__libc_init_array+0x40>)
 8004f3e:	4c0c      	ldr	r4, [pc, #48]	; (8004f70 <__libc_init_array+0x44>)
 8004f40:	f000 fcac 	bl	800589c <_init>
 8004f44:	1b64      	subs	r4, r4, r5
 8004f46:	10a4      	asrs	r4, r4, #2
 8004f48:	2600      	movs	r6, #0
 8004f4a:	42a6      	cmp	r6, r4
 8004f4c:	d105      	bne.n	8004f5a <__libc_init_array+0x2e>
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f54:	4798      	blx	r3
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7ee      	b.n	8004f38 <__libc_init_array+0xc>
 8004f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5e:	4798      	blx	r3
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7f2      	b.n	8004f4a <__libc_init_array+0x1e>
 8004f64:	08005a20 	.word	0x08005a20
 8004f68:	08005a20 	.word	0x08005a20
 8004f6c:	08005a20 	.word	0x08005a20
 8004f70:	08005a24 	.word	0x08005a24

08004f74 <memcmp>:
 8004f74:	b510      	push	{r4, lr}
 8004f76:	3901      	subs	r1, #1
 8004f78:	4402      	add	r2, r0
 8004f7a:	4290      	cmp	r0, r2
 8004f7c:	d101      	bne.n	8004f82 <memcmp+0xe>
 8004f7e:	2000      	movs	r0, #0
 8004f80:	e005      	b.n	8004f8e <memcmp+0x1a>
 8004f82:	7803      	ldrb	r3, [r0, #0]
 8004f84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	d001      	beq.n	8004f90 <memcmp+0x1c>
 8004f8c:	1b18      	subs	r0, r3, r4
 8004f8e:	bd10      	pop	{r4, pc}
 8004f90:	3001      	adds	r0, #1
 8004f92:	e7f2      	b.n	8004f7a <memcmp+0x6>

08004f94 <memcpy>:
 8004f94:	440a      	add	r2, r1
 8004f96:	4291      	cmp	r1, r2
 8004f98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f9c:	d100      	bne.n	8004fa0 <memcpy+0xc>
 8004f9e:	4770      	bx	lr
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004faa:	4291      	cmp	r1, r2
 8004fac:	d1f9      	bne.n	8004fa2 <memcpy+0xe>
 8004fae:	bd10      	pop	{r4, pc}

08004fb0 <memset>:
 8004fb0:	4402      	add	r2, r0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d100      	bne.n	8004fba <memset+0xa>
 8004fb8:	4770      	bx	lr
 8004fba:	f803 1b01 	strb.w	r1, [r3], #1
 8004fbe:	e7f9      	b.n	8004fb4 <memset+0x4>

08004fc0 <siprintf>:
 8004fc0:	b40e      	push	{r1, r2, r3}
 8004fc2:	b500      	push	{lr}
 8004fc4:	b09c      	sub	sp, #112	; 0x70
 8004fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fc8:	9002      	str	r0, [sp, #8]
 8004fca:	9006      	str	r0, [sp, #24]
 8004fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd0:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <siprintf+0x38>)
 8004fd2:	9107      	str	r1, [sp, #28]
 8004fd4:	9104      	str	r1, [sp, #16]
 8004fd6:	4909      	ldr	r1, [pc, #36]	; (8004ffc <siprintf+0x3c>)
 8004fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	a902      	add	r1, sp, #8
 8004fe4:	f000 f868 	bl	80050b8 <_svfiprintf_r>
 8004fe8:	9b02      	ldr	r3, [sp, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	b01c      	add	sp, #112	; 0x70
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	ffff0208 	.word	0xffff0208

08005000 <__ssputs_r>:
 8005000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	688e      	ldr	r6, [r1, #8]
 8005006:	429e      	cmp	r6, r3
 8005008:	4682      	mov	sl, r0
 800500a:	460c      	mov	r4, r1
 800500c:	4690      	mov	r8, r2
 800500e:	461f      	mov	r7, r3
 8005010:	d838      	bhi.n	8005084 <__ssputs_r+0x84>
 8005012:	898a      	ldrh	r2, [r1, #12]
 8005014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005018:	d032      	beq.n	8005080 <__ssputs_r+0x80>
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	6909      	ldr	r1, [r1, #16]
 800501e:	eba5 0901 	sub.w	r9, r5, r1
 8005022:	6965      	ldr	r5, [r4, #20]
 8005024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005028:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800502c:	3301      	adds	r3, #1
 800502e:	444b      	add	r3, r9
 8005030:	106d      	asrs	r5, r5, #1
 8005032:	429d      	cmp	r5, r3
 8005034:	bf38      	it	cc
 8005036:	461d      	movcc	r5, r3
 8005038:	0553      	lsls	r3, r2, #21
 800503a:	d531      	bpl.n	80050a0 <__ssputs_r+0xa0>
 800503c:	4629      	mov	r1, r5
 800503e:	f000 fb55 	bl	80056ec <_malloc_r>
 8005042:	4606      	mov	r6, r0
 8005044:	b950      	cbnz	r0, 800505c <__ssputs_r+0x5c>
 8005046:	230c      	movs	r3, #12
 8005048:	f8ca 3000 	str.w	r3, [sl]
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505c:	6921      	ldr	r1, [r4, #16]
 800505e:	464a      	mov	r2, r9
 8005060:	f7ff ff98 	bl	8004f94 <memcpy>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	81a3      	strh	r3, [r4, #12]
 8005070:	6126      	str	r6, [r4, #16]
 8005072:	6165      	str	r5, [r4, #20]
 8005074:	444e      	add	r6, r9
 8005076:	eba5 0509 	sub.w	r5, r5, r9
 800507a:	6026      	str	r6, [r4, #0]
 800507c:	60a5      	str	r5, [r4, #8]
 800507e:	463e      	mov	r6, r7
 8005080:	42be      	cmp	r6, r7
 8005082:	d900      	bls.n	8005086 <__ssputs_r+0x86>
 8005084:	463e      	mov	r6, r7
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	4632      	mov	r2, r6
 800508a:	4641      	mov	r1, r8
 800508c:	f000 faa8 	bl	80055e0 <memmove>
 8005090:	68a3      	ldr	r3, [r4, #8]
 8005092:	1b9b      	subs	r3, r3, r6
 8005094:	60a3      	str	r3, [r4, #8]
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	4433      	add	r3, r6
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	2000      	movs	r0, #0
 800509e:	e7db      	b.n	8005058 <__ssputs_r+0x58>
 80050a0:	462a      	mov	r2, r5
 80050a2:	f000 fb97 	bl	80057d4 <_realloc_r>
 80050a6:	4606      	mov	r6, r0
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d1e1      	bne.n	8005070 <__ssputs_r+0x70>
 80050ac:	6921      	ldr	r1, [r4, #16]
 80050ae:	4650      	mov	r0, sl
 80050b0:	f000 fab0 	bl	8005614 <_free_r>
 80050b4:	e7c7      	b.n	8005046 <__ssputs_r+0x46>
	...

080050b8 <_svfiprintf_r>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	4698      	mov	r8, r3
 80050be:	898b      	ldrh	r3, [r1, #12]
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	b09d      	sub	sp, #116	; 0x74
 80050c4:	4607      	mov	r7, r0
 80050c6:	460d      	mov	r5, r1
 80050c8:	4614      	mov	r4, r2
 80050ca:	d50e      	bpl.n	80050ea <_svfiprintf_r+0x32>
 80050cc:	690b      	ldr	r3, [r1, #16]
 80050ce:	b963      	cbnz	r3, 80050ea <_svfiprintf_r+0x32>
 80050d0:	2140      	movs	r1, #64	; 0x40
 80050d2:	f000 fb0b 	bl	80056ec <_malloc_r>
 80050d6:	6028      	str	r0, [r5, #0]
 80050d8:	6128      	str	r0, [r5, #16]
 80050da:	b920      	cbnz	r0, 80050e6 <_svfiprintf_r+0x2e>
 80050dc:	230c      	movs	r3, #12
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e4:	e0d1      	b.n	800528a <_svfiprintf_r+0x1d2>
 80050e6:	2340      	movs	r3, #64	; 0x40
 80050e8:	616b      	str	r3, [r5, #20]
 80050ea:	2300      	movs	r3, #0
 80050ec:	9309      	str	r3, [sp, #36]	; 0x24
 80050ee:	2320      	movs	r3, #32
 80050f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80050f8:	2330      	movs	r3, #48	; 0x30
 80050fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80052a4 <_svfiprintf_r+0x1ec>
 80050fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005102:	f04f 0901 	mov.w	r9, #1
 8005106:	4623      	mov	r3, r4
 8005108:	469a      	mov	sl, r3
 800510a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800510e:	b10a      	cbz	r2, 8005114 <_svfiprintf_r+0x5c>
 8005110:	2a25      	cmp	r2, #37	; 0x25
 8005112:	d1f9      	bne.n	8005108 <_svfiprintf_r+0x50>
 8005114:	ebba 0b04 	subs.w	fp, sl, r4
 8005118:	d00b      	beq.n	8005132 <_svfiprintf_r+0x7a>
 800511a:	465b      	mov	r3, fp
 800511c:	4622      	mov	r2, r4
 800511e:	4629      	mov	r1, r5
 8005120:	4638      	mov	r0, r7
 8005122:	f7ff ff6d 	bl	8005000 <__ssputs_r>
 8005126:	3001      	adds	r0, #1
 8005128:	f000 80aa 	beq.w	8005280 <_svfiprintf_r+0x1c8>
 800512c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800512e:	445a      	add	r2, fp
 8005130:	9209      	str	r2, [sp, #36]	; 0x24
 8005132:	f89a 3000 	ldrb.w	r3, [sl]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80a2 	beq.w	8005280 <_svfiprintf_r+0x1c8>
 800513c:	2300      	movs	r3, #0
 800513e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005146:	f10a 0a01 	add.w	sl, sl, #1
 800514a:	9304      	str	r3, [sp, #16]
 800514c:	9307      	str	r3, [sp, #28]
 800514e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005152:	931a      	str	r3, [sp, #104]	; 0x68
 8005154:	4654      	mov	r4, sl
 8005156:	2205      	movs	r2, #5
 8005158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515c:	4851      	ldr	r0, [pc, #324]	; (80052a4 <_svfiprintf_r+0x1ec>)
 800515e:	f7fb f88f 	bl	8000280 <memchr>
 8005162:	9a04      	ldr	r2, [sp, #16]
 8005164:	b9d8      	cbnz	r0, 800519e <_svfiprintf_r+0xe6>
 8005166:	06d0      	lsls	r0, r2, #27
 8005168:	bf44      	itt	mi
 800516a:	2320      	movmi	r3, #32
 800516c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005170:	0711      	lsls	r1, r2, #28
 8005172:	bf44      	itt	mi
 8005174:	232b      	movmi	r3, #43	; 0x2b
 8005176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800517a:	f89a 3000 	ldrb.w	r3, [sl]
 800517e:	2b2a      	cmp	r3, #42	; 0x2a
 8005180:	d015      	beq.n	80051ae <_svfiprintf_r+0xf6>
 8005182:	9a07      	ldr	r2, [sp, #28]
 8005184:	4654      	mov	r4, sl
 8005186:	2000      	movs	r0, #0
 8005188:	f04f 0c0a 	mov.w	ip, #10
 800518c:	4621      	mov	r1, r4
 800518e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005192:	3b30      	subs	r3, #48	; 0x30
 8005194:	2b09      	cmp	r3, #9
 8005196:	d94e      	bls.n	8005236 <_svfiprintf_r+0x17e>
 8005198:	b1b0      	cbz	r0, 80051c8 <_svfiprintf_r+0x110>
 800519a:	9207      	str	r2, [sp, #28]
 800519c:	e014      	b.n	80051c8 <_svfiprintf_r+0x110>
 800519e:	eba0 0308 	sub.w	r3, r0, r8
 80051a2:	fa09 f303 	lsl.w	r3, r9, r3
 80051a6:	4313      	orrs	r3, r2
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	46a2      	mov	sl, r4
 80051ac:	e7d2      	b.n	8005154 <_svfiprintf_r+0x9c>
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	1d19      	adds	r1, r3, #4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	9103      	str	r1, [sp, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfbb      	ittet	lt
 80051ba:	425b      	neglt	r3, r3
 80051bc:	f042 0202 	orrlt.w	r2, r2, #2
 80051c0:	9307      	strge	r3, [sp, #28]
 80051c2:	9307      	strlt	r3, [sp, #28]
 80051c4:	bfb8      	it	lt
 80051c6:	9204      	strlt	r2, [sp, #16]
 80051c8:	7823      	ldrb	r3, [r4, #0]
 80051ca:	2b2e      	cmp	r3, #46	; 0x2e
 80051cc:	d10c      	bne.n	80051e8 <_svfiprintf_r+0x130>
 80051ce:	7863      	ldrb	r3, [r4, #1]
 80051d0:	2b2a      	cmp	r3, #42	; 0x2a
 80051d2:	d135      	bne.n	8005240 <_svfiprintf_r+0x188>
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	1d1a      	adds	r2, r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	9203      	str	r2, [sp, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bfb8      	it	lt
 80051e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051e4:	3402      	adds	r4, #2
 80051e6:	9305      	str	r3, [sp, #20]
 80051e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80052b4 <_svfiprintf_r+0x1fc>
 80051ec:	7821      	ldrb	r1, [r4, #0]
 80051ee:	2203      	movs	r2, #3
 80051f0:	4650      	mov	r0, sl
 80051f2:	f7fb f845 	bl	8000280 <memchr>
 80051f6:	b140      	cbz	r0, 800520a <_svfiprintf_r+0x152>
 80051f8:	2340      	movs	r3, #64	; 0x40
 80051fa:	eba0 000a 	sub.w	r0, r0, sl
 80051fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005202:	9b04      	ldr	r3, [sp, #16]
 8005204:	4303      	orrs	r3, r0
 8005206:	3401      	adds	r4, #1
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520e:	4826      	ldr	r0, [pc, #152]	; (80052a8 <_svfiprintf_r+0x1f0>)
 8005210:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005214:	2206      	movs	r2, #6
 8005216:	f7fb f833 	bl	8000280 <memchr>
 800521a:	2800      	cmp	r0, #0
 800521c:	d038      	beq.n	8005290 <_svfiprintf_r+0x1d8>
 800521e:	4b23      	ldr	r3, [pc, #140]	; (80052ac <_svfiprintf_r+0x1f4>)
 8005220:	bb1b      	cbnz	r3, 800526a <_svfiprintf_r+0x1b2>
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	3307      	adds	r3, #7
 8005226:	f023 0307 	bic.w	r3, r3, #7
 800522a:	3308      	adds	r3, #8
 800522c:	9303      	str	r3, [sp, #12]
 800522e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005230:	4433      	add	r3, r6
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	e767      	b.n	8005106 <_svfiprintf_r+0x4e>
 8005236:	fb0c 3202 	mla	r2, ip, r2, r3
 800523a:	460c      	mov	r4, r1
 800523c:	2001      	movs	r0, #1
 800523e:	e7a5      	b.n	800518c <_svfiprintf_r+0xd4>
 8005240:	2300      	movs	r3, #0
 8005242:	3401      	adds	r4, #1
 8005244:	9305      	str	r3, [sp, #20]
 8005246:	4619      	mov	r1, r3
 8005248:	f04f 0c0a 	mov.w	ip, #10
 800524c:	4620      	mov	r0, r4
 800524e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005252:	3a30      	subs	r2, #48	; 0x30
 8005254:	2a09      	cmp	r2, #9
 8005256:	d903      	bls.n	8005260 <_svfiprintf_r+0x1a8>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0c5      	beq.n	80051e8 <_svfiprintf_r+0x130>
 800525c:	9105      	str	r1, [sp, #20]
 800525e:	e7c3      	b.n	80051e8 <_svfiprintf_r+0x130>
 8005260:	fb0c 2101 	mla	r1, ip, r1, r2
 8005264:	4604      	mov	r4, r0
 8005266:	2301      	movs	r3, #1
 8005268:	e7f0      	b.n	800524c <_svfiprintf_r+0x194>
 800526a:	ab03      	add	r3, sp, #12
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	462a      	mov	r2, r5
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <_svfiprintf_r+0x1f8>)
 8005272:	a904      	add	r1, sp, #16
 8005274:	4638      	mov	r0, r7
 8005276:	f3af 8000 	nop.w
 800527a:	1c42      	adds	r2, r0, #1
 800527c:	4606      	mov	r6, r0
 800527e:	d1d6      	bne.n	800522e <_svfiprintf_r+0x176>
 8005280:	89ab      	ldrh	r3, [r5, #12]
 8005282:	065b      	lsls	r3, r3, #25
 8005284:	f53f af2c 	bmi.w	80050e0 <_svfiprintf_r+0x28>
 8005288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800528a:	b01d      	add	sp, #116	; 0x74
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005290:	ab03      	add	r3, sp, #12
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	462a      	mov	r2, r5
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <_svfiprintf_r+0x1f8>)
 8005298:	a904      	add	r1, sp, #16
 800529a:	4638      	mov	r0, r7
 800529c:	f000 f87a 	bl	8005394 <_printf_i>
 80052a0:	e7eb      	b.n	800527a <_svfiprintf_r+0x1c2>
 80052a2:	bf00      	nop
 80052a4:	080059ec 	.word	0x080059ec
 80052a8:	080059f6 	.word	0x080059f6
 80052ac:	00000000 	.word	0x00000000
 80052b0:	08005001 	.word	0x08005001
 80052b4:	080059f2 	.word	0x080059f2

080052b8 <_printf_common>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	4699      	mov	r9, r3
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfb8      	it	lt
 80052cc:	4613      	movlt	r3, r2
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d4:	4607      	mov	r7, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	b10a      	cbz	r2, 80052de <_printf_common+0x26>
 80052da:	3301      	adds	r3, #1
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	0699      	lsls	r1, r3, #26
 80052e2:	bf42      	ittt	mi
 80052e4:	6833      	ldrmi	r3, [r6, #0]
 80052e6:	3302      	addmi	r3, #2
 80052e8:	6033      	strmi	r3, [r6, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	f015 0506 	ands.w	r5, r5, #6
 80052f0:	d106      	bne.n	8005300 <_printf_common+0x48>
 80052f2:	f104 0a19 	add.w	sl, r4, #25
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dc26      	bgt.n	800534e <_printf_common+0x96>
 8005300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005304:	1e13      	subs	r3, r2, #0
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	bf18      	it	ne
 800530a:	2301      	movne	r3, #1
 800530c:	0692      	lsls	r2, r2, #26
 800530e:	d42b      	bmi.n	8005368 <_printf_common+0xb0>
 8005310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005314:	4649      	mov	r1, r9
 8005316:	4638      	mov	r0, r7
 8005318:	47c0      	blx	r8
 800531a:	3001      	adds	r0, #1
 800531c:	d01e      	beq.n	800535c <_printf_common+0xa4>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	68e5      	ldr	r5, [r4, #12]
 8005322:	6832      	ldr	r2, [r6, #0]
 8005324:	f003 0306 	and.w	r3, r3, #6
 8005328:	2b04      	cmp	r3, #4
 800532a:	bf08      	it	eq
 800532c:	1aad      	subeq	r5, r5, r2
 800532e:	68a3      	ldr	r3, [r4, #8]
 8005330:	6922      	ldr	r2, [r4, #16]
 8005332:	bf0c      	ite	eq
 8005334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005338:	2500      	movne	r5, #0
 800533a:	4293      	cmp	r3, r2
 800533c:	bfc4      	itt	gt
 800533e:	1a9b      	subgt	r3, r3, r2
 8005340:	18ed      	addgt	r5, r5, r3
 8005342:	2600      	movs	r6, #0
 8005344:	341a      	adds	r4, #26
 8005346:	42b5      	cmp	r5, r6
 8005348:	d11a      	bne.n	8005380 <_printf_common+0xc8>
 800534a:	2000      	movs	r0, #0
 800534c:	e008      	b.n	8005360 <_printf_common+0xa8>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4649      	mov	r1, r9
 8005354:	4638      	mov	r0, r7
 8005356:	47c0      	blx	r8
 8005358:	3001      	adds	r0, #1
 800535a:	d103      	bne.n	8005364 <_printf_common+0xac>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	3501      	adds	r5, #1
 8005366:	e7c6      	b.n	80052f6 <_printf_common+0x3e>
 8005368:	18e1      	adds	r1, r4, r3
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	2030      	movs	r0, #48	; 0x30
 800536e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005372:	4422      	add	r2, r4
 8005374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800537c:	3302      	adds	r3, #2
 800537e:	e7c7      	b.n	8005310 <_printf_common+0x58>
 8005380:	2301      	movs	r3, #1
 8005382:	4622      	mov	r2, r4
 8005384:	4649      	mov	r1, r9
 8005386:	4638      	mov	r0, r7
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d0e6      	beq.n	800535c <_printf_common+0xa4>
 800538e:	3601      	adds	r6, #1
 8005390:	e7d9      	b.n	8005346 <_printf_common+0x8e>
	...

08005394 <_printf_i>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	7e0f      	ldrb	r7, [r1, #24]
 800539a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800539c:	2f78      	cmp	r7, #120	; 0x78
 800539e:	4691      	mov	r9, r2
 80053a0:	4680      	mov	r8, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	469a      	mov	sl, r3
 80053a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053aa:	d807      	bhi.n	80053bc <_printf_i+0x28>
 80053ac:	2f62      	cmp	r7, #98	; 0x62
 80053ae:	d80a      	bhi.n	80053c6 <_printf_i+0x32>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	f000 80d8 	beq.w	8005566 <_printf_i+0x1d2>
 80053b6:	2f58      	cmp	r7, #88	; 0x58
 80053b8:	f000 80a3 	beq.w	8005502 <_printf_i+0x16e>
 80053bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c4:	e03a      	b.n	800543c <_printf_i+0xa8>
 80053c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ca:	2b15      	cmp	r3, #21
 80053cc:	d8f6      	bhi.n	80053bc <_printf_i+0x28>
 80053ce:	a101      	add	r1, pc, #4	; (adr r1, 80053d4 <_printf_i+0x40>)
 80053d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	08005441 	.word	0x08005441
 80053dc:	080053bd 	.word	0x080053bd
 80053e0:	080053bd 	.word	0x080053bd
 80053e4:	080053bd 	.word	0x080053bd
 80053e8:	080053bd 	.word	0x080053bd
 80053ec:	08005441 	.word	0x08005441
 80053f0:	080053bd 	.word	0x080053bd
 80053f4:	080053bd 	.word	0x080053bd
 80053f8:	080053bd 	.word	0x080053bd
 80053fc:	080053bd 	.word	0x080053bd
 8005400:	0800554d 	.word	0x0800554d
 8005404:	08005471 	.word	0x08005471
 8005408:	0800552f 	.word	0x0800552f
 800540c:	080053bd 	.word	0x080053bd
 8005410:	080053bd 	.word	0x080053bd
 8005414:	0800556f 	.word	0x0800556f
 8005418:	080053bd 	.word	0x080053bd
 800541c:	08005471 	.word	0x08005471
 8005420:	080053bd 	.word	0x080053bd
 8005424:	080053bd 	.word	0x080053bd
 8005428:	08005537 	.word	0x08005537
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	602a      	str	r2, [r5, #0]
 8005434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800543c:	2301      	movs	r3, #1
 800543e:	e0a3      	b.n	8005588 <_printf_i+0x1f4>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	6829      	ldr	r1, [r5, #0]
 8005444:	0606      	lsls	r6, r0, #24
 8005446:	f101 0304 	add.w	r3, r1, #4
 800544a:	d50a      	bpl.n	8005462 <_printf_i+0xce>
 800544c:	680e      	ldr	r6, [r1, #0]
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	2e00      	cmp	r6, #0
 8005452:	da03      	bge.n	800545c <_printf_i+0xc8>
 8005454:	232d      	movs	r3, #45	; 0x2d
 8005456:	4276      	negs	r6, r6
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	485e      	ldr	r0, [pc, #376]	; (80055d8 <_printf_i+0x244>)
 800545e:	230a      	movs	r3, #10
 8005460:	e019      	b.n	8005496 <_printf_i+0x102>
 8005462:	680e      	ldr	r6, [r1, #0]
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800546a:	bf18      	it	ne
 800546c:	b236      	sxthne	r6, r6
 800546e:	e7ef      	b.n	8005450 <_printf_i+0xbc>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	1d19      	adds	r1, r3, #4
 8005476:	6029      	str	r1, [r5, #0]
 8005478:	0601      	lsls	r1, r0, #24
 800547a:	d501      	bpl.n	8005480 <_printf_i+0xec>
 800547c:	681e      	ldr	r6, [r3, #0]
 800547e:	e002      	b.n	8005486 <_printf_i+0xf2>
 8005480:	0646      	lsls	r6, r0, #25
 8005482:	d5fb      	bpl.n	800547c <_printf_i+0xe8>
 8005484:	881e      	ldrh	r6, [r3, #0]
 8005486:	4854      	ldr	r0, [pc, #336]	; (80055d8 <_printf_i+0x244>)
 8005488:	2f6f      	cmp	r7, #111	; 0x6f
 800548a:	bf0c      	ite	eq
 800548c:	2308      	moveq	r3, #8
 800548e:	230a      	movne	r3, #10
 8005490:	2100      	movs	r1, #0
 8005492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005496:	6865      	ldr	r5, [r4, #4]
 8005498:	60a5      	str	r5, [r4, #8]
 800549a:	2d00      	cmp	r5, #0
 800549c:	bfa2      	ittt	ge
 800549e:	6821      	ldrge	r1, [r4, #0]
 80054a0:	f021 0104 	bicge.w	r1, r1, #4
 80054a4:	6021      	strge	r1, [r4, #0]
 80054a6:	b90e      	cbnz	r6, 80054ac <_printf_i+0x118>
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	d04d      	beq.n	8005548 <_printf_i+0x1b4>
 80054ac:	4615      	mov	r5, r2
 80054ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80054b2:	fb03 6711 	mls	r7, r3, r1, r6
 80054b6:	5dc7      	ldrb	r7, [r0, r7]
 80054b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054bc:	4637      	mov	r7, r6
 80054be:	42bb      	cmp	r3, r7
 80054c0:	460e      	mov	r6, r1
 80054c2:	d9f4      	bls.n	80054ae <_printf_i+0x11a>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d10b      	bne.n	80054e0 <_printf_i+0x14c>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	07de      	lsls	r6, r3, #31
 80054cc:	d508      	bpl.n	80054e0 <_printf_i+0x14c>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	6861      	ldr	r1, [r4, #4]
 80054d2:	4299      	cmp	r1, r3
 80054d4:	bfde      	ittt	le
 80054d6:	2330      	movle	r3, #48	; 0x30
 80054d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054e0:	1b52      	subs	r2, r2, r5
 80054e2:	6122      	str	r2, [r4, #16]
 80054e4:	f8cd a000 	str.w	sl, [sp]
 80054e8:	464b      	mov	r3, r9
 80054ea:	aa03      	add	r2, sp, #12
 80054ec:	4621      	mov	r1, r4
 80054ee:	4640      	mov	r0, r8
 80054f0:	f7ff fee2 	bl	80052b8 <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d14c      	bne.n	8005592 <_printf_i+0x1fe>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054fc:	b004      	add	sp, #16
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005502:	4835      	ldr	r0, [pc, #212]	; (80055d8 <_printf_i+0x244>)
 8005504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005508:	6829      	ldr	r1, [r5, #0]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005510:	6029      	str	r1, [r5, #0]
 8005512:	061d      	lsls	r5, r3, #24
 8005514:	d514      	bpl.n	8005540 <_printf_i+0x1ac>
 8005516:	07df      	lsls	r7, r3, #31
 8005518:	bf44      	itt	mi
 800551a:	f043 0320 	orrmi.w	r3, r3, #32
 800551e:	6023      	strmi	r3, [r4, #0]
 8005520:	b91e      	cbnz	r6, 800552a <_printf_i+0x196>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	f023 0320 	bic.w	r3, r3, #32
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	2310      	movs	r3, #16
 800552c:	e7b0      	b.n	8005490 <_printf_i+0xfc>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f043 0320 	orr.w	r3, r3, #32
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	2378      	movs	r3, #120	; 0x78
 8005538:	4828      	ldr	r0, [pc, #160]	; (80055dc <_printf_i+0x248>)
 800553a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800553e:	e7e3      	b.n	8005508 <_printf_i+0x174>
 8005540:	0659      	lsls	r1, r3, #25
 8005542:	bf48      	it	mi
 8005544:	b2b6      	uxthmi	r6, r6
 8005546:	e7e6      	b.n	8005516 <_printf_i+0x182>
 8005548:	4615      	mov	r5, r2
 800554a:	e7bb      	b.n	80054c4 <_printf_i+0x130>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6826      	ldr	r6, [r4, #0]
 8005550:	6961      	ldr	r1, [r4, #20]
 8005552:	1d18      	adds	r0, r3, #4
 8005554:	6028      	str	r0, [r5, #0]
 8005556:	0635      	lsls	r5, r6, #24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	d501      	bpl.n	8005560 <_printf_i+0x1cc>
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	e002      	b.n	8005566 <_printf_i+0x1d2>
 8005560:	0670      	lsls	r0, r6, #25
 8005562:	d5fb      	bpl.n	800555c <_printf_i+0x1c8>
 8005564:	8019      	strh	r1, [r3, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	4615      	mov	r5, r2
 800556c:	e7ba      	b.n	80054e4 <_printf_i+0x150>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	602a      	str	r2, [r5, #0]
 8005574:	681d      	ldr	r5, [r3, #0]
 8005576:	6862      	ldr	r2, [r4, #4]
 8005578:	2100      	movs	r1, #0
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa fe80 	bl	8000280 <memchr>
 8005580:	b108      	cbz	r0, 8005586 <_printf_i+0x1f2>
 8005582:	1b40      	subs	r0, r0, r5
 8005584:	6060      	str	r0, [r4, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	2300      	movs	r3, #0
 800558c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005590:	e7a8      	b.n	80054e4 <_printf_i+0x150>
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	462a      	mov	r2, r5
 8005596:	4649      	mov	r1, r9
 8005598:	4640      	mov	r0, r8
 800559a:	47d0      	blx	sl
 800559c:	3001      	adds	r0, #1
 800559e:	d0ab      	beq.n	80054f8 <_printf_i+0x164>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	079b      	lsls	r3, r3, #30
 80055a4:	d413      	bmi.n	80055ce <_printf_i+0x23a>
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	4298      	cmp	r0, r3
 80055ac:	bfb8      	it	lt
 80055ae:	4618      	movlt	r0, r3
 80055b0:	e7a4      	b.n	80054fc <_printf_i+0x168>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4632      	mov	r2, r6
 80055b6:	4649      	mov	r1, r9
 80055b8:	4640      	mov	r0, r8
 80055ba:	47d0      	blx	sl
 80055bc:	3001      	adds	r0, #1
 80055be:	d09b      	beq.n	80054f8 <_printf_i+0x164>
 80055c0:	3501      	adds	r5, #1
 80055c2:	68e3      	ldr	r3, [r4, #12]
 80055c4:	9903      	ldr	r1, [sp, #12]
 80055c6:	1a5b      	subs	r3, r3, r1
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	dcf2      	bgt.n	80055b2 <_printf_i+0x21e>
 80055cc:	e7eb      	b.n	80055a6 <_printf_i+0x212>
 80055ce:	2500      	movs	r5, #0
 80055d0:	f104 0619 	add.w	r6, r4, #25
 80055d4:	e7f5      	b.n	80055c2 <_printf_i+0x22e>
 80055d6:	bf00      	nop
 80055d8:	080059fd 	.word	0x080059fd
 80055dc:	08005a0e 	.word	0x08005a0e

080055e0 <memmove>:
 80055e0:	4288      	cmp	r0, r1
 80055e2:	b510      	push	{r4, lr}
 80055e4:	eb01 0402 	add.w	r4, r1, r2
 80055e8:	d902      	bls.n	80055f0 <memmove+0x10>
 80055ea:	4284      	cmp	r4, r0
 80055ec:	4623      	mov	r3, r4
 80055ee:	d807      	bhi.n	8005600 <memmove+0x20>
 80055f0:	1e43      	subs	r3, r0, #1
 80055f2:	42a1      	cmp	r1, r4
 80055f4:	d008      	beq.n	8005608 <memmove+0x28>
 80055f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055fe:	e7f8      	b.n	80055f2 <memmove+0x12>
 8005600:	4402      	add	r2, r0
 8005602:	4601      	mov	r1, r0
 8005604:	428a      	cmp	r2, r1
 8005606:	d100      	bne.n	800560a <memmove+0x2a>
 8005608:	bd10      	pop	{r4, pc}
 800560a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800560e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005612:	e7f7      	b.n	8005604 <memmove+0x24>

08005614 <_free_r>:
 8005614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005616:	2900      	cmp	r1, #0
 8005618:	d044      	beq.n	80056a4 <_free_r+0x90>
 800561a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561e:	9001      	str	r0, [sp, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f1a1 0404 	sub.w	r4, r1, #4
 8005626:	bfb8      	it	lt
 8005628:	18e4      	addlt	r4, r4, r3
 800562a:	f000 f913 	bl	8005854 <__malloc_lock>
 800562e:	4a1e      	ldr	r2, [pc, #120]	; (80056a8 <_free_r+0x94>)
 8005630:	9801      	ldr	r0, [sp, #4]
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	b933      	cbnz	r3, 8005644 <_free_r+0x30>
 8005636:	6063      	str	r3, [r4, #4]
 8005638:	6014      	str	r4, [r2, #0]
 800563a:	b003      	add	sp, #12
 800563c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005640:	f000 b90e 	b.w	8005860 <__malloc_unlock>
 8005644:	42a3      	cmp	r3, r4
 8005646:	d908      	bls.n	800565a <_free_r+0x46>
 8005648:	6825      	ldr	r5, [r4, #0]
 800564a:	1961      	adds	r1, r4, r5
 800564c:	428b      	cmp	r3, r1
 800564e:	bf01      	itttt	eq
 8005650:	6819      	ldreq	r1, [r3, #0]
 8005652:	685b      	ldreq	r3, [r3, #4]
 8005654:	1949      	addeq	r1, r1, r5
 8005656:	6021      	streq	r1, [r4, #0]
 8005658:	e7ed      	b.n	8005636 <_free_r+0x22>
 800565a:	461a      	mov	r2, r3
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	b10b      	cbz	r3, 8005664 <_free_r+0x50>
 8005660:	42a3      	cmp	r3, r4
 8005662:	d9fa      	bls.n	800565a <_free_r+0x46>
 8005664:	6811      	ldr	r1, [r2, #0]
 8005666:	1855      	adds	r5, r2, r1
 8005668:	42a5      	cmp	r5, r4
 800566a:	d10b      	bne.n	8005684 <_free_r+0x70>
 800566c:	6824      	ldr	r4, [r4, #0]
 800566e:	4421      	add	r1, r4
 8005670:	1854      	adds	r4, r2, r1
 8005672:	42a3      	cmp	r3, r4
 8005674:	6011      	str	r1, [r2, #0]
 8005676:	d1e0      	bne.n	800563a <_free_r+0x26>
 8005678:	681c      	ldr	r4, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	6053      	str	r3, [r2, #4]
 800567e:	4421      	add	r1, r4
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	e7da      	b.n	800563a <_free_r+0x26>
 8005684:	d902      	bls.n	800568c <_free_r+0x78>
 8005686:	230c      	movs	r3, #12
 8005688:	6003      	str	r3, [r0, #0]
 800568a:	e7d6      	b.n	800563a <_free_r+0x26>
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	1961      	adds	r1, r4, r5
 8005690:	428b      	cmp	r3, r1
 8005692:	bf04      	itt	eq
 8005694:	6819      	ldreq	r1, [r3, #0]
 8005696:	685b      	ldreq	r3, [r3, #4]
 8005698:	6063      	str	r3, [r4, #4]
 800569a:	bf04      	itt	eq
 800569c:	1949      	addeq	r1, r1, r5
 800569e:	6021      	streq	r1, [r4, #0]
 80056a0:	6054      	str	r4, [r2, #4]
 80056a2:	e7ca      	b.n	800563a <_free_r+0x26>
 80056a4:	b003      	add	sp, #12
 80056a6:	bd30      	pop	{r4, r5, pc}
 80056a8:	200144f4 	.word	0x200144f4

080056ac <sbrk_aligned>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	4e0e      	ldr	r6, [pc, #56]	; (80056e8 <sbrk_aligned+0x3c>)
 80056b0:	460c      	mov	r4, r1
 80056b2:	6831      	ldr	r1, [r6, #0]
 80056b4:	4605      	mov	r5, r0
 80056b6:	b911      	cbnz	r1, 80056be <sbrk_aligned+0x12>
 80056b8:	f000 f8bc 	bl	8005834 <_sbrk_r>
 80056bc:	6030      	str	r0, [r6, #0]
 80056be:	4621      	mov	r1, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f8b7 	bl	8005834 <_sbrk_r>
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	d00a      	beq.n	80056e0 <sbrk_aligned+0x34>
 80056ca:	1cc4      	adds	r4, r0, #3
 80056cc:	f024 0403 	bic.w	r4, r4, #3
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d007      	beq.n	80056e4 <sbrk_aligned+0x38>
 80056d4:	1a21      	subs	r1, r4, r0
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 f8ac 	bl	8005834 <_sbrk_r>
 80056dc:	3001      	adds	r0, #1
 80056de:	d101      	bne.n	80056e4 <sbrk_aligned+0x38>
 80056e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80056e4:	4620      	mov	r0, r4
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	200144f8 	.word	0x200144f8

080056ec <_malloc_r>:
 80056ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f0:	1ccd      	adds	r5, r1, #3
 80056f2:	f025 0503 	bic.w	r5, r5, #3
 80056f6:	3508      	adds	r5, #8
 80056f8:	2d0c      	cmp	r5, #12
 80056fa:	bf38      	it	cc
 80056fc:	250c      	movcc	r5, #12
 80056fe:	2d00      	cmp	r5, #0
 8005700:	4607      	mov	r7, r0
 8005702:	db01      	blt.n	8005708 <_malloc_r+0x1c>
 8005704:	42a9      	cmp	r1, r5
 8005706:	d905      	bls.n	8005714 <_malloc_r+0x28>
 8005708:	230c      	movs	r3, #12
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	2600      	movs	r6, #0
 800570e:	4630      	mov	r0, r6
 8005710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005714:	4e2e      	ldr	r6, [pc, #184]	; (80057d0 <_malloc_r+0xe4>)
 8005716:	f000 f89d 	bl	8005854 <__malloc_lock>
 800571a:	6833      	ldr	r3, [r6, #0]
 800571c:	461c      	mov	r4, r3
 800571e:	bb34      	cbnz	r4, 800576e <_malloc_r+0x82>
 8005720:	4629      	mov	r1, r5
 8005722:	4638      	mov	r0, r7
 8005724:	f7ff ffc2 	bl	80056ac <sbrk_aligned>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	4604      	mov	r4, r0
 800572c:	d14d      	bne.n	80057ca <_malloc_r+0xde>
 800572e:	6834      	ldr	r4, [r6, #0]
 8005730:	4626      	mov	r6, r4
 8005732:	2e00      	cmp	r6, #0
 8005734:	d140      	bne.n	80057b8 <_malloc_r+0xcc>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	4631      	mov	r1, r6
 800573a:	4638      	mov	r0, r7
 800573c:	eb04 0803 	add.w	r8, r4, r3
 8005740:	f000 f878 	bl	8005834 <_sbrk_r>
 8005744:	4580      	cmp	r8, r0
 8005746:	d13a      	bne.n	80057be <_malloc_r+0xd2>
 8005748:	6821      	ldr	r1, [r4, #0]
 800574a:	3503      	adds	r5, #3
 800574c:	1a6d      	subs	r5, r5, r1
 800574e:	f025 0503 	bic.w	r5, r5, #3
 8005752:	3508      	adds	r5, #8
 8005754:	2d0c      	cmp	r5, #12
 8005756:	bf38      	it	cc
 8005758:	250c      	movcc	r5, #12
 800575a:	4629      	mov	r1, r5
 800575c:	4638      	mov	r0, r7
 800575e:	f7ff ffa5 	bl	80056ac <sbrk_aligned>
 8005762:	3001      	adds	r0, #1
 8005764:	d02b      	beq.n	80057be <_malloc_r+0xd2>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	442b      	add	r3, r5
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	e00e      	b.n	800578c <_malloc_r+0xa0>
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	1b52      	subs	r2, r2, r5
 8005772:	d41e      	bmi.n	80057b2 <_malloc_r+0xc6>
 8005774:	2a0b      	cmp	r2, #11
 8005776:	d916      	bls.n	80057a6 <_malloc_r+0xba>
 8005778:	1961      	adds	r1, r4, r5
 800577a:	42a3      	cmp	r3, r4
 800577c:	6025      	str	r5, [r4, #0]
 800577e:	bf18      	it	ne
 8005780:	6059      	strne	r1, [r3, #4]
 8005782:	6863      	ldr	r3, [r4, #4]
 8005784:	bf08      	it	eq
 8005786:	6031      	streq	r1, [r6, #0]
 8005788:	5162      	str	r2, [r4, r5]
 800578a:	604b      	str	r3, [r1, #4]
 800578c:	4638      	mov	r0, r7
 800578e:	f104 060b 	add.w	r6, r4, #11
 8005792:	f000 f865 	bl	8005860 <__malloc_unlock>
 8005796:	f026 0607 	bic.w	r6, r6, #7
 800579a:	1d23      	adds	r3, r4, #4
 800579c:	1af2      	subs	r2, r6, r3
 800579e:	d0b6      	beq.n	800570e <_malloc_r+0x22>
 80057a0:	1b9b      	subs	r3, r3, r6
 80057a2:	50a3      	str	r3, [r4, r2]
 80057a4:	e7b3      	b.n	800570e <_malloc_r+0x22>
 80057a6:	6862      	ldr	r2, [r4, #4]
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	bf0c      	ite	eq
 80057ac:	6032      	streq	r2, [r6, #0]
 80057ae:	605a      	strne	r2, [r3, #4]
 80057b0:	e7ec      	b.n	800578c <_malloc_r+0xa0>
 80057b2:	4623      	mov	r3, r4
 80057b4:	6864      	ldr	r4, [r4, #4]
 80057b6:	e7b2      	b.n	800571e <_malloc_r+0x32>
 80057b8:	4634      	mov	r4, r6
 80057ba:	6876      	ldr	r6, [r6, #4]
 80057bc:	e7b9      	b.n	8005732 <_malloc_r+0x46>
 80057be:	230c      	movs	r3, #12
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4638      	mov	r0, r7
 80057c4:	f000 f84c 	bl	8005860 <__malloc_unlock>
 80057c8:	e7a1      	b.n	800570e <_malloc_r+0x22>
 80057ca:	6025      	str	r5, [r4, #0]
 80057cc:	e7de      	b.n	800578c <_malloc_r+0xa0>
 80057ce:	bf00      	nop
 80057d0:	200144f4 	.word	0x200144f4

080057d4 <_realloc_r>:
 80057d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d8:	4680      	mov	r8, r0
 80057da:	4614      	mov	r4, r2
 80057dc:	460e      	mov	r6, r1
 80057de:	b921      	cbnz	r1, 80057ea <_realloc_r+0x16>
 80057e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057e4:	4611      	mov	r1, r2
 80057e6:	f7ff bf81 	b.w	80056ec <_malloc_r>
 80057ea:	b92a      	cbnz	r2, 80057f8 <_realloc_r+0x24>
 80057ec:	f7ff ff12 	bl	8005614 <_free_r>
 80057f0:	4625      	mov	r5, r4
 80057f2:	4628      	mov	r0, r5
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	f000 f838 	bl	800586c <_malloc_usable_size_r>
 80057fc:	4284      	cmp	r4, r0
 80057fe:	4607      	mov	r7, r0
 8005800:	d802      	bhi.n	8005808 <_realloc_r+0x34>
 8005802:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005806:	d812      	bhi.n	800582e <_realloc_r+0x5a>
 8005808:	4621      	mov	r1, r4
 800580a:	4640      	mov	r0, r8
 800580c:	f7ff ff6e 	bl	80056ec <_malloc_r>
 8005810:	4605      	mov	r5, r0
 8005812:	2800      	cmp	r0, #0
 8005814:	d0ed      	beq.n	80057f2 <_realloc_r+0x1e>
 8005816:	42bc      	cmp	r4, r7
 8005818:	4622      	mov	r2, r4
 800581a:	4631      	mov	r1, r6
 800581c:	bf28      	it	cs
 800581e:	463a      	movcs	r2, r7
 8005820:	f7ff fbb8 	bl	8004f94 <memcpy>
 8005824:	4631      	mov	r1, r6
 8005826:	4640      	mov	r0, r8
 8005828:	f7ff fef4 	bl	8005614 <_free_r>
 800582c:	e7e1      	b.n	80057f2 <_realloc_r+0x1e>
 800582e:	4635      	mov	r5, r6
 8005830:	e7df      	b.n	80057f2 <_realloc_r+0x1e>
	...

08005834 <_sbrk_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d06      	ldr	r5, [pc, #24]	; (8005850 <_sbrk_r+0x1c>)
 8005838:	2300      	movs	r3, #0
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f000 f81e 	bl	8005880 <_sbrk>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_sbrk_r+0x1a>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_sbrk_r+0x1a>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	200144fc 	.word	0x200144fc

08005854 <__malloc_lock>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__malloc_lock+0x8>)
 8005856:	f000 b811 	b.w	800587c <__retarget_lock_acquire_recursive>
 800585a:	bf00      	nop
 800585c:	20014500 	.word	0x20014500

08005860 <__malloc_unlock>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__malloc_unlock+0x8>)
 8005862:	f000 b80c 	b.w	800587e <__retarget_lock_release_recursive>
 8005866:	bf00      	nop
 8005868:	20014500 	.word	0x20014500

0800586c <_malloc_usable_size_r>:
 800586c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005870:	1f18      	subs	r0, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	bfbc      	itt	lt
 8005876:	580b      	ldrlt	r3, [r1, r0]
 8005878:	18c0      	addlt	r0, r0, r3
 800587a:	4770      	bx	lr

0800587c <__retarget_lock_acquire_recursive>:
 800587c:	4770      	bx	lr

0800587e <__retarget_lock_release_recursive>:
 800587e:	4770      	bx	lr

08005880 <_sbrk>:
 8005880:	4a04      	ldr	r2, [pc, #16]	; (8005894 <_sbrk+0x14>)
 8005882:	6811      	ldr	r1, [r2, #0]
 8005884:	4603      	mov	r3, r0
 8005886:	b909      	cbnz	r1, 800588c <_sbrk+0xc>
 8005888:	4903      	ldr	r1, [pc, #12]	; (8005898 <_sbrk+0x18>)
 800588a:	6011      	str	r1, [r2, #0]
 800588c:	6810      	ldr	r0, [r2, #0]
 800588e:	4403      	add	r3, r0
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4770      	bx	lr
 8005894:	20014504 	.word	0x20014504
 8005898:	20014508 	.word	0x20014508

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
