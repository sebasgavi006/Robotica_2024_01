
EjemploLed_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b20  08005b20  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005b20  08005b20  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b20  08005b20  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014470  20000014  08005b3c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014484  08005b3c  00024484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d197  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc9  00000000  00000000  0002d1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d6a  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d073  00000000  00000000  0004248a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063c96  00000000  00000000  0004f4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3193  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  000b31e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059e8 	.word	0x080059e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080059e8 	.word	0x080059e8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012eb0 	.word	0x20012eb0

08000274 <main>:
extern void SEGGER_UART_init(uint32_t);

/*
 * FUNCIÓN PRINCIPAL DEL PROGRAMA
 */
int main(void){
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af02      	add	r7, sp, #8
	/* ========================== PLL ======================================================================*/

	systemClock_100MHz(&pllHandler);
 800027a:	4830      	ldr	r0, [pc, #192]	; (800033c <main+0xc8>)
 800027c:	f005 fb26 	bl	80058cc <systemClock_100MHz>
	systemClock_Output(); // el pin PC9 configurado como salida para leer la freq
 8000280:	f005 fb3e 	bl	8005900 <systemClock_Output>

	RCC->CR &= ~(RCC_CR_HSITRIM); // Limpiamos el registro
 8000284:	4b2e      	ldr	r3, [pc, #184]	; (8000340 <main+0xcc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a2d      	ldr	r2, [pc, #180]	; (8000340 <main+0xcc>)
 800028a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800028e:	6013      	str	r3, [r2, #0]
	RCC->CR |= ( 13 << RCC_CR_HSITRIM_Pos); // Numero para calibrar POR DEFECTO ESTABA EN 15!!!!!
 8000290:	4b2b      	ldr	r3, [pc, #172]	; (8000340 <main+0xcc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <main+0xcc>)
 8000296:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800029a:	6013      	str	r3, [r2, #0]


	/* Activamos la unidad de punto flotante (FPU) */
	SCB->CPACR    |= (0xF << 20);
 800029c:	4b29      	ldr	r3, [pc, #164]	; (8000344 <main+0xd0>)
 800029e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002a2:	4a28      	ldr	r2, [pc, #160]	; (8000344 <main+0xd0>)
 80002a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);
 80002ac:	4b26      	ldr	r3, [pc, #152]	; (8000348 <main+0xd4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a25      	ldr	r2, [pc, #148]	; (8000348 <main+0xd4>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6013      	str	r3, [r2, #0]

	/* Inicializamos el sistema */
	initSystem();
 80002b8:	f000 f8ac 	bl	8000414 <initSystem>

	/* Configuramos el puerto serial para trabajar con SEGGER */
	SEGGER_UART_init(500000);
 80002bc:	4823      	ldr	r0, [pc, #140]	; (800034c <main+0xd8>)
 80002be:	f003 f8d7 	bl	8003470 <SEGGER_UART_init>

	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 80002c2:	f002 feff 	bl	80030c4 <SEGGER_SYSVIEW_Conf>

	/* Despues activamos el sistema */
	// SEGGER_SYSVIEW_Start();


    xReturned = xTaskCreate(
 80002c6:	4b22      	ldr	r3, [pc, #136]	; (8000350 <main+0xdc>)
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2302      	movs	r3, #2
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	4b21      	ldr	r3, [pc, #132]	; (8000354 <main+0xe0>)
 80002d0:	22c8      	movs	r2, #200	; 0xc8
 80002d2:	4921      	ldr	r1, [pc, #132]	; (8000358 <main+0xe4>)
 80002d4:	4821      	ldr	r0, [pc, #132]	; (800035c <main+0xe8>)
 80002d6:	f000 ff09 	bl	80010ec <xTaskCreate>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a20      	ldr	r2, [pc, #128]	; (8000360 <main+0xec>)
 80002de:	6013      	str	r3, [r2, #0]
                    STACK_SIZE,      			/* Stack size in words, not bytes. */
                    ("Led parpadeando"),    	/* Parameter passed into the task. */
                    2,							/* Priority at which the task is created. */
                    &xHandlerTask_Blinky_Led );	/* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002e0:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <main+0xec>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d00a      	beq.n	80002fe <main+0x8a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ec:	f383 8811 	msr	BASEPRI, r3
 80002f0:	f3bf 8f6f 	isb	sy
 80002f4:	f3bf 8f4f 	dsb	sy
 80002f8:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002fa:	bf00      	nop
 80002fc:	e7fe      	b.n	80002fc <main+0x88>


    xReturned = xTaskCreate(
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <main+0xf0>)
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	2302      	movs	r3, #2
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <main+0xf4>)
 8000308:	22c8      	movs	r2, #200	; 0xc8
 800030a:	4918      	ldr	r1, [pc, #96]	; (800036c <main+0xf8>)
 800030c:	4818      	ldr	r0, [pc, #96]	; (8000370 <main+0xfc>)
 800030e:	f000 feed 	bl	80010ec <xTaskCreate>
 8000312:	4603      	mov	r3, r0
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <main+0xec>)
 8000316:	6013      	str	r3, [r2, #0]
                    STACK_SIZE,      			/* Stack size in words, not bytes. */
                    ("Hola mundo desde la Tarea-2"),	/* Parameter passed into the task. */
                    2,							/* Priority at which the task is created. */
                    &xHandlerTask2 );     		/* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <main+0xec>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d00a      	beq.n	8000336 <main+0xc2>
        __asm volatile
 8000320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000324:	f383 8811 	msr	BASEPRI, r3
 8000328:	f3bf 8f6f 	isb	sy
 800032c:	f3bf 8f4f 	dsb	sy
 8000330:	603b      	str	r3, [r7, #0]
    }
 8000332:	bf00      	nop
 8000334:	e7fe      	b.n	8000334 <main+0xc0>

    //STart the created tasks running
    vTaskStartScheduler();
 8000336:	f001 f875 	bl	8001424 <vTaskStartScheduler>

    /* Loop forever */
	while(1){
 800033a:	e7fe      	b.n	800033a <main+0xc6>
 800033c:	20000048 	.word	0x20000048
 8000340:	40023800 	.word	0x40023800
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e0001000 	.word	0xe0001000
 800034c:	0007a120 	.word	0x0007a120
 8000350:	20000054 	.word	0x20000054
 8000354:	08005a00 	.word	0x08005a00
 8000358:	08005a10 	.word	0x08005a10
 800035c:	08000375 	.word	0x08000375
 8000360:	20000050 	.word	0x20000050
 8000364:	20000058 	.word	0x20000058
 8000368:	08005a1c 	.word	0x08005a1c
 800036c:	08005a38 	.word	0x08005a38
 8000370:	080003c9 	.word	0x080003c9

08000374 <vTask_Blink_Led>:
/*
 * Funciones locales del main
 */

//Funcion que gobierna la tarea 1
void vTask_Blink_Led(void * pvParameters) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af02      	add	r7, sp, #8
 800037a:	6078      	str	r0, [r7, #4]

	BaseType_t notify_state = {0};
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
	uint8_t change_state = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	72fb      	strb	r3, [r7, #11]
	while(1){
		//printf("%s\n",(char*)pvParameters);


		// Si se recibe la notificación, se hace el blinky
		if(notify_state == pdTRUE){
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d106      	bne.n	8000398 <vTask_Blink_Led+0x24>
			change_state = !change_state;
 800038a:	7afb      	ldrb	r3, [r7, #11]
 800038c:	2b00      	cmp	r3, #0
 800038e:	bf0c      	ite	eq
 8000390:	2301      	moveq	r3, #1
 8000392:	2300      	movne	r3, #0
 8000394:	b2db      	uxtb	r3, r3
 8000396:	72fb      	strb	r3, [r7, #11]
		}

		if(change_state){
 8000398:	7afb      	ldrb	r3, [r7, #11]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d003      	beq.n	80003a6 <vTask_Blink_Led+0x32>
			gpio_TooglePin(&led_state);
 800039e:	4809      	ldr	r0, [pc, #36]	; (80003c4 <vTask_Blink_Led+0x50>)
 80003a0:	f005 f8e1 	bl	8005566 <gpio_TooglePin>
 80003a4:	e003      	b.n	80003ae <vTask_Blink_Led+0x3a>
		}
		else{
			gpio_WritePin(&led_state, RESET);
 80003a6:	2100      	movs	r1, #0
 80003a8:	4806      	ldr	r0, [pc, #24]	; (80003c4 <vTask_Blink_Led+0x50>)
 80003aa:	f005 f88d 	bl	80054c8 <gpio_WritePin>
		}
		//vTaskDelay( pdMS_TO_TICKS(250));
		notify_state = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(250));
 80003ae:	23fa      	movs	r3, #250	; 0xfa
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2300      	movs	r3, #0
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	2000      	movs	r0, #0
 80003ba:	f001 fd1b 	bl	8001df4 <xTaskGenericNotifyWait>
 80003be:	60f8      	str	r0, [r7, #12]
		if(notify_state == pdTRUE){
 80003c0:	e7e0      	b.n	8000384 <vTask_Blink_Led+0x10>
 80003c2:	bf00      	nop
 80003c4:	20000030 	.word	0x20000030

080003c8 <vTaskTwo>:
	}
}


//Funcion que gobierna la tarea 2
void vTaskTwo(void * pvParameters) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af02      	add	r7, sp, #8
 80003ce:	6078      	str	r0, [r7, #4]

	// Variables locales
	uint8_t button_state = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_button_state = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]


	while(1){

		//printf("%s\n",(char*)pvParameters);
		button_state = gpio_ReadPin(&user_button);
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <vTaskTwo+0x44>)
 80003da:	f005 f8a0 	bl	800551e <gpio_ReadPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	73bb      	strb	r3, [r7, #14]

		// Se entra en todo el ciclo cuando se cumple que el botón se presiona y se deja de presionar
		if(button_state){
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00b      	beq.n	8000400 <vTaskTwo+0x38>
			if(!prev_button_state){
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d108      	bne.n	8000400 <vTaskTwo+0x38>

				// Esta función envía la notificación al Handler de la tarea que maneja del Blinky
				xTaskNotify(xHandlerTask_Blinky_Led, 0, eNoAction);
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <vTaskTwo+0x48>)
 80003f0:	6818      	ldr	r0, [r3, #0]
 80003f2:	2300      	movs	r3, #0
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2300      	movs	r3, #0
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	f001 fd82 	bl	8001f04 <xTaskGenericNotify>
			}
		}
		prev_button_state = button_state;
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	73fb      	strb	r3, [r7, #15]

		vTaskDelay(pdMS_TO_TICKS(10));
 8000404:	200a      	movs	r0, #10
 8000406:	f000 ffd5 	bl	80013b4 <vTaskDelay>
		button_state = gpio_ReadPin(&user_button);
 800040a:	e7e5      	b.n	80003d8 <vTaskTwo+0x10>
 800040c:	2000003c 	.word	0x2000003c
 8000410:	20000054 	.word	0x20000054

08000414 <initSystem>:
	}
}


// Funcion para inicializar el sistema+
void initSystem(void){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

	// Configuramos el led de estado
	led_state.pGPIOx 						= GPIOA;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <initSystem+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <initSystem+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
	led_state.pinConfig.GPIO_PinNumber		= PIN_5;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <initSystem+0x58>)
 8000420:	2205      	movs	r2, #5
 8000422:	711a      	strb	r2, [r3, #4]
	led_state.pinConfig.GPIO_PinMode 		= GPIO_MODE_OUT;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <initSystem+0x58>)
 8000426:	2201      	movs	r2, #1
 8000428:	715a      	strb	r2, [r3, #5]
	led_state.pinConfig.GPIO_PinOutputSpeed = GPIO_OSPEED_LOW;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <initSystem+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	719a      	strb	r2, [r3, #6]
	led_state.pinConfig.GPIO_PinOutputType 	= GPIO_OTYPE_PUSHPULL;
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <initSystem+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	721a      	strb	r2, [r3, #8]
	led_state.pinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <initSystem+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	71da      	strb	r2, [r3, #7]

	// Cargamos la configuracion del pin led_state
	gpio_Config(&led_state);
 800043c:	480b      	ldr	r0, [pc, #44]	; (800046c <initSystem+0x58>)
 800043e:	f004 fec7 	bl	80051d0 <gpio_Config>

	// Apagamos el led
	gpio_WritePin(&led_state, RESET);
 8000442:	2100      	movs	r1, #0
 8000444:	4809      	ldr	r0, [pc, #36]	; (800046c <initSystem+0x58>)
 8000446:	f005 f83f 	bl	80054c8 <gpio_WritePin>


	// Configuramos el led de estado
	user_button.pGPIOx 							= GPIOC;
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <initSystem+0x60>)
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <initSystem+0x64>)
 800044e:	601a      	str	r2, [r3, #0]
	user_button.pinConfig.GPIO_PinNumber		= PIN_13;
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <initSystem+0x60>)
 8000452:	220d      	movs	r2, #13
 8000454:	711a      	strb	r2, [r3, #4]
	user_button.pinConfig.GPIO_PinMode 			= GPIO_MODE_IN;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <initSystem+0x60>)
 8000458:	2200      	movs	r2, #0
 800045a:	715a      	strb	r2, [r3, #5]
	user_button.pinConfig.GPIO_PinPuPdControl 	= GPIO_PUPDR_NOTHING;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <initSystem+0x60>)
 800045e:	2200      	movs	r2, #0
 8000460:	71da      	strb	r2, [r3, #7]

	// Cargamos la configuracion del pin led_state
	gpio_Config(&user_button);
 8000462:	4804      	ldr	r0, [pc, #16]	; (8000474 <initSystem+0x60>)
 8000464:	f004 feb4 	bl	80051d0 <gpio_Config>


}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000030 	.word	0x20000030
 8000470:	40020000 	.word	0x40020000
 8000474:	2000003c 	.word	0x2000003c
 8000478:	40020800 	.word	0x40020800

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	; (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	; (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004aa:	f005 fa53 	bl	8005954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f7ff fee1 	bl	8000274 <main>

080004b2 <LoopForever>:

LoopForever:
    b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004c0:	08005b28 	.word	0x08005b28
  ldr r2, =_sbss
 80004c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80004c8:	20014484 	.word	0x20014484

080004cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>

080004ce <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 0208 	add.w	r2, r3, #8
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004e6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f103 0208 	add.w	r2, r3, #8
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f103 0208 	add.w	r2, r3, #8
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	601a      	str	r2, [r3, #0]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000586:	d103      	bne.n	8000590 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e00c      	b.n	80005aa <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3308      	adds	r3, #8
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e002      	b.n	800059e <vListInsert+0x2e>
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d2f6      	bcs.n	8000598 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005e2:	b480      	push	{r7}
 80005e4:	b085      	sub	sp, #20
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	6892      	ldr	r2, [r2, #8]
 80005f8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	6852      	ldr	r2, [r2, #4]
 8000602:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	d103      	bne.n	8000616 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	1e5a      	subs	r2, r3, #1
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d10a      	bne.n	8000662 <xQueueGenericReset+0x2a>
        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	60bb      	str	r3, [r7, #8]
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000662:	f002 f9f9 	bl	8002a58 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	441a      	add	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000692:	3b01      	subs	r3, #1
 8000694:	68f9      	ldr	r1, [r7, #12]
 8000696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000698:	fb01 f303 	mul.w	r3, r1, r3
 800069c:	441a      	add	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d114      	bne.n	80006e2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d01a      	beq.n	80006f6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3310      	adds	r3, #16
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f957 	bl	8001978 <xTaskRemoveFromEventList>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d012      	beq.n	80006f6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <xQueueGenericReset+0xcc>)
 80006d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	e009      	b.n	80006f6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3310      	adds	r3, #16
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fef1 	bl	80004ce <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3324      	adds	r3, #36	; 0x24
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff feec 	bl	80004ce <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80006f6:	f002 f9df 	bl	8002ab8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	e000ed04 	.word	0xe000ed04

08000708 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af02      	add	r7, sp, #8
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	4613      	mov	r3, r2
 8000714:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10a      	bne.n	8000732 <xQueueGenericCreate+0x2a>
        __asm volatile
 800071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000720:	f383 8811 	msr	BASEPRI, r3
 8000724:	f3bf 8f6f 	isb	sy
 8000728:	f3bf 8f4f 	dsb	sy
 800072c:	61bb      	str	r3, [r7, #24]
    }
 800072e:	bf00      	nop
 8000730:	e7fe      	b.n	8000730 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <xQueueGenericCreate+0x48>
 8000742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d101      	bne.n	8000754 <xQueueGenericCreate+0x4c>
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <xQueueGenericCreate+0x4e>
 8000754:	2300      	movs	r3, #0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10a      	bne.n	8000770 <xQueueGenericCreate+0x68>
        __asm volatile
 800075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075e:	f383 8811 	msr	BASEPRI, r3
 8000762:	f3bf 8f6f 	isb	sy
 8000766:	f3bf 8f4f 	dsb	sy
 800076a:	617b      	str	r3, [r7, #20]
    }
 800076c:	bf00      	nop
 800076e:	e7fe      	b.n	800076e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000776:	d90a      	bls.n	800078e <xQueueGenericCreate+0x86>
        __asm volatile
 8000778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077c:	f383 8811 	msr	BASEPRI, r3
 8000780:	f3bf 8f6f 	isb	sy
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	613b      	str	r3, [r7, #16]
    }
 800078a:	bf00      	nop
 800078c:	e7fe      	b.n	800078c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	3350      	adds	r3, #80	; 0x50
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fa8a 	bl	8002cac <pvPortMalloc>
 8000798:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00d      	beq.n	80007bc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	3350      	adds	r3, #80	; 0x50
 80007a8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4613      	mov	r3, r2
 80007b2:	69fa      	ldr	r2, [r7, #28]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f000 f805 	bl	80007c6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007bc:	6a3b      	ldr	r3, [r7, #32]
    }
 80007be:	4618      	mov	r0, r3
 80007c0:	3728      	adds	r7, #40	; 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d103      	bne.n	80007e2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	69ba      	ldr	r2, [r7, #24]
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	e002      	b.n	80007e8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007f4:	2101      	movs	r1, #1
 80007f6:	69b8      	ldr	r0, [r7, #24]
 80007f8:	f7ff ff1e 	bl	8000638 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	78fa      	ldrb	r2, [r7, #3]
 8000800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	68f9      	ldr	r1, [r7, #12]
 800080a:	2073      	movs	r0, #115	; 0x73
 800080c:	f003 fddc 	bl	80043c8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b090      	sub	sp, #64	; 0x40
 800081c:	af02      	add	r7, sp, #8
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10a      	bne.n	800084a <xQueueGenericSend+0x32>
        __asm volatile
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	f383 8811 	msr	BASEPRI, r3
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000846:	bf00      	nop
 8000848:	e7fe      	b.n	8000848 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d103      	bne.n	8000858 <xQueueGenericSend+0x40>
 8000850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <xQueueGenericSend+0x44>
 8000858:	2301      	movs	r3, #1
 800085a:	e000      	b.n	800085e <xQueueGenericSend+0x46>
 800085c:	2300      	movs	r3, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10a      	bne.n	8000878 <xQueueGenericSend+0x60>
        __asm volatile
 8000862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000874:	bf00      	nop
 8000876:	e7fe      	b.n	8000876 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d103      	bne.n	8000886 <xQueueGenericSend+0x6e>
 800087e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000882:	2b01      	cmp	r3, #1
 8000884:	d101      	bne.n	800088a <xQueueGenericSend+0x72>
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <xQueueGenericSend+0x74>
 800088a:	2300      	movs	r3, #0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10a      	bne.n	80008a6 <xQueueGenericSend+0x8e>
        __asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	623b      	str	r3, [r7, #32]
    }
 80008a2:	bf00      	nop
 80008a4:	e7fe      	b.n	80008a4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008a6:	f001 fa07 	bl	8001cb8 <xTaskGetSchedulerState>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <xQueueGenericSend+0x9e>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d101      	bne.n	80008ba <xQueueGenericSend+0xa2>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <xQueueGenericSend+0xa4>
 80008ba:	2300      	movs	r3, #0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <xQueueGenericSend+0xbe>
        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	61fb      	str	r3, [r7, #28]
    }
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80008d6:	f002 f8bf 	bl	8002a58 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d302      	bcc.n	80008ec <xQueueGenericSend+0xd4>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d136      	bne.n	800095a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80008ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 faf8 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	460b      	mov	r3, r1
 80008fe:	4601      	mov	r1, r0
 8000900:	205a      	movs	r0, #90	; 0x5a
 8000902:	f003 fdd7 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800090c:	f000 fa78 	bl	8000e00 <prvCopyDataToQueue>
 8000910:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	2b00      	cmp	r3, #0
 8000918:	d010      	beq.n	800093c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091c:	3324      	adds	r3, #36	; 0x24
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f82a 	bl	8001978 <xTaskRemoveFromEventList>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d013      	beq.n	8000952 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800092a:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <xQueueGenericSend+0x248>)
 800092c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	f3bf 8f4f 	dsb	sy
 8000936:	f3bf 8f6f 	isb	sy
 800093a:	e00a      	b.n	8000952 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <xQueueGenericSend+0x248>)
 8000944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	f3bf 8f4f 	dsb	sy
 800094e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000952:	f002 f8b1 	bl	8002ab8 <vPortExitCritical>
                return pdPASS;
 8000956:	2301      	movs	r3, #1
 8000958:	e07d      	b.n	8000a56 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d110      	bne.n	8000982 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000960:	f002 f8aa 	bl	8002ab8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fabc 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	460b      	mov	r3, r1
 8000976:	4601      	mov	r1, r0
 8000978:	205a      	movs	r0, #90	; 0x5a
 800097a:	f003 fd9b 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800097e:	2300      	movs	r3, #0
 8000980:	e069      	b.n	8000a56 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4618      	mov	r0, r3
 800098e:	f001 f859 	bl	8001a44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000992:	2301      	movs	r3, #1
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000996:	f002 f88f 	bl	8002ab8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800099a:	f000 fda5 	bl	80014e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800099e:	f002 f85b 	bl	8002a58 <vPortEnterCritical>
 80009a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ae:	d103      	bne.n	80009b8 <xQueueGenericSend+0x1a0>
 80009b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c4:	d103      	bne.n	80009ce <xQueueGenericSend+0x1b6>
 80009c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009ce:	f002 f873 	bl	8002ab8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009d2:	1d3a      	adds	r2, r7, #4
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f848 	bl	8001a70 <xTaskCheckForTimeOut>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d124      	bne.n	8000a30 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009e8:	f000 fb02 	bl	8000ff0 <prvIsQueueFull>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d018      	beq.n	8000a24 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f4:	3310      	adds	r3, #16
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 ff6a 	bl	80018d4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a02:	f000 fa8d 	bl	8000f20 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a06:	f000 fd7d 	bl	8001504 <xTaskResumeAll>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f47f af62 	bne.w	80008d6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <xQueueGenericSend+0x248>)
 8000a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	f3bf 8f4f 	dsb	sy
 8000a1e:	f3bf 8f6f 	isb	sy
 8000a22:	e758      	b.n	80008d6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a26:	f000 fa7b 	bl	8000f20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a2a:	f000 fd6b 	bl	8001504 <xTaskResumeAll>
 8000a2e:	e752      	b.n	80008d6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a32:	f000 fa75 	bl	8000f20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a36:	f000 fd65 	bl	8001504 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fa51 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	4601      	mov	r1, r0
 8000a4e:	205a      	movs	r0, #90	; 0x5a
 8000a50:	f003 fd30 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000a54:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3738      	adds	r7, #56	; 0x38
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	e000ed04 	.word	0xe000ed04

08000a64 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b090      	sub	sp, #64	; 0x40
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10a      	bne.n	8000a92 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a80:	f383 8811 	msr	BASEPRI, r3
 8000a84:	f3bf 8f6f 	isb	sy
 8000a88:	f3bf 8f4f 	dsb	sy
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000a8e:	bf00      	nop
 8000a90:	e7fe      	b.n	8000a90 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d103      	bne.n	8000aa0 <xQueueGenericSendFromISR+0x3c>
 8000a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d101      	bne.n	8000aa4 <xQueueGenericSendFromISR+0x40>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <xQueueGenericSendFromISR+0x42>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10a      	bne.n	8000ac0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aae:	f383 8811 	msr	BASEPRI, r3
 8000ab2:	f3bf 8f6f 	isb	sy
 8000ab6:	f3bf 8f4f 	dsb	sy
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000abc:	bf00      	nop
 8000abe:	e7fe      	b.n	8000abe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d103      	bne.n	8000ace <xQueueGenericSendFromISR+0x6a>
 8000ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d101      	bne.n	8000ad2 <xQueueGenericSendFromISR+0x6e>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <xQueueGenericSendFromISR+0x70>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10a      	bne.n	8000aee <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000adc:	f383 8811 	msr	BASEPRI, r3
 8000ae0:	f3bf 8f6f 	isb	sy
 8000ae4:	f3bf 8f4f 	dsb	sy
 8000ae8:	623b      	str	r3, [r7, #32]
    }
 8000aea:	bf00      	nop
 8000aec:	e7fe      	b.n	8000aec <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000aee:	f002 f89d 	bl	8002c2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000af2:	f3ef 8211 	mrs	r2, BASEPRI
 8000af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000afa:	f383 8811 	msr	BASEPRI, r3
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	61fa      	str	r2, [r7, #28]
 8000b08:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b0a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d302      	bcc.n	8000b20 <xQueueGenericSendFromISR+0xbc>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d148      	bne.n	8000bb2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 f9d6 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2060      	movs	r0, #96	; 0x60
 8000b40:	f003 fbe8 	bl	8004314 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b4a:	f000 f959 	bl	8000e00 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b56:	d112      	bne.n	8000b7e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d025      	beq.n	8000bac <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b62:	3324      	adds	r3, #36	; 0x24
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 ff07 	bl	8001978 <xTaskRemoveFromEventList>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d01d      	beq.n	8000bac <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d01a      	beq.n	8000bac <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e016      	b.n	8000bac <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000b7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b82:	2b7f      	cmp	r3, #127	; 0x7f
 8000b84:	d10a      	bne.n	8000b9c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	617b      	str	r3, [r7, #20]
    }
 8000b98:	bf00      	nop
 8000b9a:	e7fe      	b.n	8000b9a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	b25a      	sxtb	r2, r3
 8000ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000bac:	2301      	movs	r3, #1
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000bb0:	e00b      	b.n	8000bca <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 f995 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000bba:	4601      	mov	r1, r0
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2060      	movs	r0, #96	; 0x60
 8000bc2:	f003 fba7 	bl	8004314 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bcc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000bd4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3740      	adds	r7, #64	; 0x40
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b08f      	sub	sp, #60	; 0x3c
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10a      	bne.n	8000c10 <xQueueReceive+0x30>
        __asm volatile
 8000bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfe:	f383 8811 	msr	BASEPRI, r3
 8000c02:	f3bf 8f6f 	isb	sy
 8000c06:	f3bf 8f4f 	dsb	sy
 8000c0a:	623b      	str	r3, [r7, #32]
    }
 8000c0c:	bf00      	nop
 8000c0e:	e7fe      	b.n	8000c0e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <xQueueReceive+0x3e>
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <xQueueReceive+0x42>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <xQueueReceive+0x44>
 8000c22:	2300      	movs	r3, #0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <xQueueReceive+0x5e>
        __asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	61fb      	str	r3, [r7, #28]
    }
 8000c3a:	bf00      	nop
 8000c3c:	e7fe      	b.n	8000c3c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c3e:	f001 f83b 	bl	8001cb8 <xTaskGetSchedulerState>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <xQueueReceive+0x6e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <xQueueReceive+0x72>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <xQueueReceive+0x74>
 8000c52:	2300      	movs	r3, #0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10a      	bne.n	8000c6e <xQueueReceive+0x8e>
        __asm volatile
 8000c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5c:	f383 8811 	msr	BASEPRI, r3
 8000c60:	f3bf 8f6f 	isb	sy
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	61bb      	str	r3, [r7, #24]
    }
 8000c6a:	bf00      	nop
 8000c6c:	e7fe      	b.n	8000c6c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c6e:	f001 fef3 	bl	8002a58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d02f      	beq.n	8000cde <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c82:	f000 f927 	bl	8000ed4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 f92b 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f004 f927 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000c96:	4602      	mov	r2, r0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	9100      	str	r1, [sp, #0]
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	205c      	movs	r0, #92	; 0x5c
 8000ca2:	f003 fc07 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00f      	beq.n	8000cd6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb8:	3310      	adds	r3, #16
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fe5c 	bl	8001978 <xTaskRemoveFromEventList>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <xQueueReceive+0x21c>)
 8000cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	f3bf 8f4f 	dsb	sy
 8000cd2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cd6:	f001 feef 	bl	8002ab8 <vPortExitCritical>
                return pdPASS;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e08a      	b.n	8000df4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d113      	bne.n	8000d0c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000ce4:	f001 fee8 	bl	8002ab8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 f8fa 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f004 f8f6 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	9100      	str	r1, [sp, #0]
 8000d00:	4621      	mov	r1, r4
 8000d02:	205c      	movs	r0, #92	; 0x5c
 8000d04:	f003 fbd6 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e073      	b.n	8000df4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d106      	bne.n	8000d20 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fe94 	bl	8001a44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d20:	f001 feca 	bl	8002ab8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d24:	f000 fbe0 	bl	80014e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d28:	f001 fe96 	bl	8002a58 <vPortEnterCritical>
 8000d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d38:	d103      	bne.n	8000d42 <xQueueReceive+0x162>
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d4e:	d103      	bne.n	8000d58 <xQueueReceive+0x178>
 8000d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d58:	f001 feae 	bl	8002ab8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d5c:	1d3a      	adds	r2, r7, #4
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fe83 	bl	8001a70 <xTaskCheckForTimeOut>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d124      	bne.n	8000dba <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d72:	f000 f927 	bl	8000fc4 <prvIsQueueEmpty>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d018      	beq.n	8000dae <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	3324      	adds	r3, #36	; 0x24
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fda5 	bl	80018d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d8c:	f000 f8c8 	bl	8000f20 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d90:	f000 fbb8 	bl	8001504 <xTaskResumeAll>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f47f af69 	bne.w	8000c6e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <xQueueReceive+0x21c>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	e75f      	b.n	8000c6e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db0:	f000 f8b6 	bl	8000f20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000db4:	f000 fba6 	bl	8001504 <xTaskResumeAll>
 8000db8:	e759      	b.n	8000c6e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dbc:	f000 f8b0 	bl	8000f20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000dc0:	f000 fba0 	bl	8001504 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dc6:	f000 f8fd 	bl	8000fc4 <prvIsQueueEmpty>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f43f af4e 	beq.w	8000c6e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 f885 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f004 f881 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 8000de2:	4602      	mov	r2, r0
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2101      	movs	r1, #1
 8000de8:	9100      	str	r1, [sp, #0]
 8000dea:	4621      	mov	r1, r4
 8000dec:	205c      	movs	r0, #92	; 0x5c
 8000dee:	f003 fb61 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000df2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3734      	adds	r7, #52	; 0x34
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	e000ed04 	.word	0xe000ed04

08000e00 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e14:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10d      	bne.n	8000e3a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d14d      	bne.n	8000ec2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 ff62 	bl	8001cf4 <xTaskPriorityDisinherit>
 8000e30:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	e043      	b.n	8000ec2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d119      	bne.n	8000e74 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6858      	ldr	r0, [r3, #4]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	f004 fdb6 	bl	80059bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	441a      	add	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d32b      	bcc.n	8000ec2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	e026      	b.n	8000ec2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	68d8      	ldr	r0, [r3, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68b9      	ldr	r1, [r7, #8]
 8000e80:	f004 fd9c 	bl	80059bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	441a      	add	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	441a      	add	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d105      	bne.n	8000ec2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000eca:	697b      	ldr	r3, [r7, #20]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d018      	beq.n	8000f18 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	441a      	add	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d303      	bcc.n	8000f08 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68d9      	ldr	r1, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	461a      	mov	r2, r3
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f004 fd52 	bl	80059bc <memcpy>
    }
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f28:	f001 fd96 	bl	8002a58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f32:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f34:	e011      	b.n	8000f5a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d012      	beq.n	8000f64 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3324      	adds	r3, #36	; 0x24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fd18 	bl	8001978 <xTaskRemoveFromEventList>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000f4e:	f000 fdf5 	bl	8001b3c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dce9      	bgt.n	8000f36 <prvUnlockQueue+0x16>
 8000f62:	e000      	b.n	8000f66 <prvUnlockQueue+0x46>
                        break;
 8000f64:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f6e:	f001 fda3 	bl	8002ab8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f72:	f001 fd71 	bl	8002a58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f7c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f7e:	e011      	b.n	8000fa4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d012      	beq.n	8000fae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fcf3 	bl	8001978 <xTaskRemoveFromEventList>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f98:	f000 fdd0 	bl	8001b3c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dce9      	bgt.n	8000f80 <prvUnlockQueue+0x60>
 8000fac:	e000      	b.n	8000fb0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000fae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000fb8:	f001 fd7e 	bl	8002ab8 <vPortExitCritical>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fcc:	f001 fd44 	bl	8002a58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e001      	b.n	8000fe2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fe2:	f001 fd69 	bl	8002ab8 <vPortExitCritical>

    return xReturn;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ff8:	f001 fd2e 	bl	8002a58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001004:	429a      	cmp	r2, r3
 8001006:	d102      	bne.n	800100e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001008:	2301      	movs	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e001      	b.n	8001012 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001012:	f001 fd51 	bl	8002ab8 <vPortExitCritical>

    return xReturn;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e01e      	b.n	800106e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001030:	4a13      	ldr	r2, [pc, #76]	; (8001080 <vQueueAddToRegistry+0x60>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d115      	bne.n	8001068 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800103c:	4910      	ldr	r1, [pc, #64]	; (8001080 <vQueueAddToRegistry+0x60>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <vQueueAddToRegistry+0x60>)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f003 ff45 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 800105a:	4601      	mov	r1, r0
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	2071      	movs	r0, #113	; 0x71
 8001062:	f003 f957 	bl	8004314 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001066:	e006      	b.n	8001076 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9dd      	bls.n	8001030 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000005c 	.word	0x2000005c

08001084 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001094:	f001 fce0 	bl	8002a58 <vPortEnterCritical>
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a4:	d103      	bne.n	80010ae <vQueueWaitForMessageRestricted+0x2a>
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ba:	d103      	bne.n	80010c4 <vQueueWaitForMessageRestricted+0x40>
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010c4:	f001 fcf8 	bl	8002ab8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d106      	bne.n	80010de <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3324      	adds	r3, #36	; 0x24
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fc1f 	bl	800191c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff1e 	bl	8000f20 <prvUnlockQueue>
    }
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	4613      	mov	r3, r2
 80010fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fdd3 	bl	8002cac <pvPortMalloc>
 8001106:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00e      	beq.n	800112c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800110e:	2058      	movs	r0, #88	; 0x58
 8001110:	f001 fdcc 	bl	8002cac <pvPortMalloc>
 8001114:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
 8001122:	e005      	b.n	8001130 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f001 fea1 	bl	8002e6c <vPortFree>
 800112a:	e001      	b.n	8001130 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d013      	beq.n	800115e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	2300      	movs	r3, #0
 800113a:	9303      	str	r3, [sp, #12]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 f80e 	bl	800116e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001152:	69f8      	ldr	r0, [r7, #28]
 8001154:	f000 f8a2 	bl	800129c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	e002      	b.n	8001164 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001162:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001164:	69bb      	ldr	r3, [r7, #24]
    }
 8001166:	4618      	mov	r0, r3
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b088      	sub	sp, #32
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	461a      	mov	r2, r3
 8001186:	21a5      	movs	r1, #165	; 0xa5
 8001188:	f004 fc26 	bl	80059d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001196:	3b01      	subs	r3, #1
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f023 0307 	bic.w	r3, r3, #7
 80011a4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80011b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	617b      	str	r3, [r7, #20]
    }
 80011c2:	bf00      	nop
 80011c4:	e7fe      	b.n	80011c4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01f      	beq.n	800120c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	e012      	b.n	80011f8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	4413      	add	r3, r2
 80011d8:	7819      	ldrb	r1, [r3, #0]
 80011da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4413      	add	r3, r2
 80011e0:	3334      	adds	r3, #52	; 0x34
 80011e2:	460a      	mov	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	d9e9      	bls.n	80011d2 <prvInitialiseNewTask+0x64>
 80011fe:	e000      	b.n	8001202 <prvInitialiseNewTask+0x94>
            {
                break;
 8001200:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800120a:	e003      	b.n	8001214 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001216:	2b04      	cmp	r3, #4
 8001218:	d901      	bls.n	800121e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800121a:	2304      	movs	r3, #4
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001228:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122c:	2200      	movs	r2, #0
 800122e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	3304      	adds	r3, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f96a 	bl	800050e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800123a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123c:	3318      	adds	r3, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f965 	bl	800050e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001248:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	f1c3 0205 	rsb	r2, r3, #5
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	3350      	adds	r3, #80	; 0x50
 800125e:	2204      	movs	r2, #4
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fbb8 	bl	80059d8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126a:	3354      	adds	r3, #84	; 0x54
 800126c:	2201      	movs	r2, #1
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fbb1 	bl	80059d8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	68f9      	ldr	r1, [r7, #12]
 800127a:	69b8      	ldr	r0, [r7, #24]
 800127c:	f001 fabe 	bl	80027fc <pxPortInitialiseStack>
 8001280:	4602      	mov	r2, r0
 8001282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001284:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001290:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012a4:	f001 fbd8 	bl	8002a58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <prvAddNewTaskToReadyList+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <prvAddNewTaskToReadyList+0xfc>)
 80012b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80012b2:	4b3a      	ldr	r3, [pc, #232]	; (800139c <prvAddNewTaskToReadyList+0x100>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80012ba:	4a38      	ldr	r2, [pc, #224]	; (800139c <prvAddNewTaskToReadyList+0x100>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012c0:	4b35      	ldr	r3, [pc, #212]	; (8001398 <prvAddNewTaskToReadyList+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d110      	bne.n	80012ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80012c8:	f000 fc5c 	bl	8001b84 <prvInitialiseTaskLists>
 80012cc:	e00d      	b.n	80012ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <prvAddNewTaskToReadyList+0x104>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <prvAddNewTaskToReadyList+0x100>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d802      	bhi.n	80012ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80012e4:	4a2d      	ldr	r2, [pc, #180]	; (800139c <prvAddNewTaskToReadyList+0x100>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <prvAddNewTaskToReadyList+0x108>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <prvAddNewTaskToReadyList+0x108>)
 80012f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <prvAddNewTaskToReadyList+0x108>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d016      	beq.n	8001330 <prvAddNewTaskToReadyList+0x94>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fcc7 	bl	8004c98 <SEGGER_SYSVIEW_OnTaskCreate>
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	461d      	mov	r5, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	461c      	mov	r4, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	1ae3      	subs	r3, r4, r3
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	462b      	mov	r3, r5
 800132c:	f001 ff6c 	bl	8003208 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fd34 	bl	8004da0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <prvAddNewTaskToReadyList+0x10c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4313      	orrs	r3, r2
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <prvAddNewTaskToReadyList+0x10c>)
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4a15      	ldr	r2, [pc, #84]	; (80013ac <prvAddNewTaskToReadyList+0x110>)
 8001358:	441a      	add	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f7ff f8e1 	bl	8000528 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001366:	f001 fba7 	bl	8002ab8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <prvAddNewTaskToReadyList+0x104>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00e      	beq.n	8001390 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <prvAddNewTaskToReadyList+0x100>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <prvAddNewTaskToReadyList+0x114>)
 8001382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f3bf 8f4f 	dsb	sy
 800138c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	20000174 	.word	0x20000174
 800139c:	2000009c 	.word	0x2000009c
 80013a0:	20000180 	.word	0x20000180
 80013a4:	20000190 	.word	0x20000190
 80013a8:	2000017c 	.word	0x2000017c
 80013ac:	200000a0 	.word	0x200000a0
 80013b0:	e000ed04 	.word	0xe000ed04

080013b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01b      	beq.n	80013fe <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <vTaskDelay+0x68>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <vTaskDelay+0x30>
        __asm volatile
 80013ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d2:	f383 8811 	msr	BASEPRI, r3
 80013d6:	f3bf 8f6f 	isb	sy
 80013da:	f3bf 8f4f 	dsb	sy
 80013de:	60bb      	str	r3, [r7, #8]
    }
 80013e0:	bf00      	nop
 80013e2:	e7fe      	b.n	80013e2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80013e4:	f000 f880 	bl	80014e8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	2023      	movs	r0, #35	; 0x23
 80013ec:	f002 ff56 	bl	800429c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fe78 	bl	80020e8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80013f8:	f000 f884 	bl	8001504 <xTaskResumeAll>
 80013fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d107      	bne.n	8001414 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <vTaskDelay+0x6c>)
 8001406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f3bf 8f4f 	dsb	sy
 8001410:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000019c 	.word	0x2000019c
 8001420:	e000ed04 	.word	0xe000ed04

08001424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <vTaskStartScheduler+0xa4>)
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	2282      	movs	r2, #130	; 0x82
 8001436:	4925      	ldr	r1, [pc, #148]	; (80014cc <vTaskStartScheduler+0xa8>)
 8001438:	4825      	ldr	r0, [pc, #148]	; (80014d0 <vTaskStartScheduler+0xac>)
 800143a:	f7ff fe57 	bl	80010ec <xTaskCreate>
 800143e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001446:	f000 fec7 	bl	80021d8 <xTimerCreateTimerTask>
 800144a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d124      	bne.n	800149c <vTaskStartScheduler+0x78>
        __asm volatile
 8001452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001456:	f383 8811 	msr	BASEPRI, r3
 800145a:	f3bf 8f6f 	isb	sy
 800145e:	f3bf 8f4f 	dsb	sy
 8001462:	60bb      	str	r3, [r7, #8]
    }
 8001464:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <vTaskStartScheduler+0xb0>)
 8001468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800146c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <vTaskStartScheduler+0xb4>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <vTaskStartScheduler+0xb8>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <vTaskStartScheduler+0xbc>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <vTaskStartScheduler+0xa4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d102      	bne.n	800148c <vTaskStartScheduler+0x68>
 8001486:	f003 fbeb 	bl	8004c60 <SEGGER_SYSVIEW_OnIdle>
 800148a:	e004      	b.n	8001496 <vTaskStartScheduler+0x72>
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <vTaskStartScheduler+0xbc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fc43 	bl	8004d1c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001496:	f001 fa3d 	bl	8002914 <xPortStartScheduler>
 800149a:	e00e      	b.n	80014ba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a2:	d10a      	bne.n	80014ba <vTaskStartScheduler+0x96>
        __asm volatile
 80014a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	607b      	str	r3, [r7, #4]
    }
 80014b6:	bf00      	nop
 80014b8:	e7fe      	b.n	80014b8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <vTaskStartScheduler+0xc0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000198 	.word	0x20000198
 80014cc:	08005a40 	.word	0x08005a40
 80014d0:	08001b55 	.word	0x08001b55
 80014d4:	20000194 	.word	0x20000194
 80014d8:	20000180 	.word	0x20000180
 80014dc:	20000178 	.word	0x20000178
 80014e0:	2000009c 	.word	0x2000009c
 80014e4:	20000004 	.word	0x20000004

080014e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <vTaskSuspendAll+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a03      	ldr	r2, [pc, #12]	; (8001500 <vTaskSuspendAll+0x18>)
 80014f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	2000019c 	.word	0x2000019c

08001504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <xTaskResumeAll+0x11c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10a      	bne.n	8001530 <xTaskResumeAll+0x2c>
        __asm volatile
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	f383 8811 	msr	BASEPRI, r3
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	603b      	str	r3, [r7, #0]
    }
 800152c:	bf00      	nop
 800152e:	e7fe      	b.n	800152e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001530:	f001 fa92 	bl	8002a58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <xTaskResumeAll+0x11c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	4a39      	ldr	r2, [pc, #228]	; (8001620 <xTaskResumeAll+0x11c>)
 800153c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800153e:	4b38      	ldr	r3, [pc, #224]	; (8001620 <xTaskResumeAll+0x11c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d165      	bne.n	8001612 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <xTaskResumeAll+0x120>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d061      	beq.n	8001612 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800154e:	e032      	b.n	80015b6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <xTaskResumeAll+0x124>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3318      	adds	r3, #24
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f840 	bl	80005e2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f83b 	bl	80005e2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fc16 	bl	8004da0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	2201      	movs	r2, #1
 800157a:	409a      	lsls	r2, r3
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <xTaskResumeAll+0x128>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <xTaskResumeAll+0x128>)
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4a27      	ldr	r2, [pc, #156]	; (8001630 <xTaskResumeAll+0x12c>)
 8001594:	441a      	add	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3304      	adds	r3, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4610      	mov	r0, r2
 800159e:	f7fe ffc3 	bl	8000528 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <xTaskResumeAll+0x130>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d302      	bcc.n	80015b6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <xTaskResumeAll+0x134>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <xTaskResumeAll+0x124>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1c8      	bne.n	8001550 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80015c4:	f000 fb5c 	bl	8001c80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <xTaskResumeAll+0x138>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80015d4:	f000 f858 	bl	8001688 <xTaskIncrementTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <xTaskResumeAll+0x134>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f1      	bne.n	80015d4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <xTaskResumeAll+0x138>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <xTaskResumeAll+0x134>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80015fe:	2301      	movs	r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <xTaskResumeAll+0x13c>)
 8001604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f3bf 8f4f 	dsb	sy
 800160e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001612:	f001 fa51 	bl	8002ab8 <vPortExitCritical>

    return xAlreadyYielded;
 8001616:	68bb      	ldr	r3, [r7, #8]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000019c 	.word	0x2000019c
 8001624:	20000174 	.word	0x20000174
 8001628:	20000134 	.word	0x20000134
 800162c:	2000017c 	.word	0x2000017c
 8001630:	200000a0 	.word	0x200000a0
 8001634:	2000009c 	.word	0x2000009c
 8001638:	20000188 	.word	0x20000188
 800163c:	20000184 	.word	0x20000184
 8001640:	e000ed04 	.word	0xe000ed04

08001644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <xTaskGetTickCount+0x1c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000178 	.word	0x20000178

08001664 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800166a:	f001 fadf 	bl	8002c2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <xTaskGetTickCountFromISR+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001678:	683b      	ldr	r3, [r7, #0]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000178 	.word	0x20000178

08001688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001692:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <xTaskIncrementTick+0x14c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 8092 	bne.w	80017c0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800169c:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <xTaskIncrementTick+0x150>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <xTaskIncrementTick+0x150>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d120      	bne.n	80016f2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <xTaskIncrementTick+0x154>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <xTaskIncrementTick+0x48>
        __asm volatile
 80016ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016be:	f383 8811 	msr	BASEPRI, r3
 80016c2:	f3bf 8f6f 	isb	sy
 80016c6:	f3bf 8f4f 	dsb	sy
 80016ca:	603b      	str	r3, [r7, #0]
    }
 80016cc:	bf00      	nop
 80016ce:	e7fe      	b.n	80016ce <xTaskIncrementTick+0x46>
 80016d0:	4b42      	ldr	r3, [pc, #264]	; (80017dc <xTaskIncrementTick+0x154>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b42      	ldr	r3, [pc, #264]	; (80017e0 <xTaskIncrementTick+0x158>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a40      	ldr	r2, [pc, #256]	; (80017dc <xTaskIncrementTick+0x154>)
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <xTaskIncrementTick+0x158>)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <xTaskIncrementTick+0x15c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <xTaskIncrementTick+0x15c>)
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	f000 fac7 	bl	8001c80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <xTaskIncrementTick+0x160>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d34c      	bcc.n	8001796 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016fc:	4b37      	ldr	r3, [pc, #220]	; (80017dc <xTaskIncrementTick+0x154>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d104      	bne.n	8001710 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <xTaskIncrementTick+0x160>)
 8001708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800170c:	601a      	str	r2, [r3, #0]
                    break;
 800170e:	e042      	b.n	8001796 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <xTaskIncrementTick+0x154>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	d203      	bcs.n	8001730 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001728:	4a2f      	ldr	r2, [pc, #188]	; (80017e8 <xTaskIncrementTick+0x160>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800172e:	e032      	b.n	8001796 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3304      	adds	r3, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff54 	bl	80005e2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3318      	adds	r3, #24
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff4b 	bl	80005e2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fb26 	bl	8004da0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	2201      	movs	r2, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <xTaskIncrementTick+0x164>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4313      	orrs	r3, r2
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <xTaskIncrementTick+0x164>)
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <xTaskIncrementTick+0x168>)
 8001774:	441a      	add	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3304      	adds	r3, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f7fe fed3 	bl	8000528 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <xTaskIncrementTick+0x16c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	429a      	cmp	r2, r3
 800178e:	d3b5      	bcc.n	80016fc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001794:	e7b2      	b.n	80016fc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <xTaskIncrementTick+0x16c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	4914      	ldr	r1, [pc, #80]	; (80017f0 <xTaskIncrementTick+0x168>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d901      	bls.n	80017b2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <xTaskIncrementTick+0x170>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e004      	b.n	80017ca <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <xTaskIncrementTick+0x174>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <xTaskIncrementTick+0x174>)
 80017c8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80017ca:	697b      	ldr	r3, [r7, #20]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000019c 	.word	0x2000019c
 80017d8:	20000178 	.word	0x20000178
 80017dc:	2000012c 	.word	0x2000012c
 80017e0:	20000130 	.word	0x20000130
 80017e4:	2000018c 	.word	0x2000018c
 80017e8:	20000194 	.word	0x20000194
 80017ec:	2000017c 	.word	0x2000017c
 80017f0:	200000a0 	.word	0x200000a0
 80017f4:	2000009c 	.word	0x2000009c
 80017f8:	20000188 	.word	0x20000188
 80017fc:	20000184 	.word	0x20000184

08001800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <vTaskSwitchContext+0xbc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <vTaskSwitchContext+0xc0>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001814:	e04d      	b.n	80018b2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <vTaskSwitchContext+0xc0>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <vTaskSwitchContext+0xc4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	f1c3 031f 	rsb	r3, r3, #31
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	4925      	ldr	r1, [pc, #148]	; (80018c8 <vTaskSwitchContext+0xc8>)
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	f3bf 8f6f 	isb	sy
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	607b      	str	r3, [r7, #4]
    }
 8001858:	bf00      	nop
 800185a:	e7fe      	b.n	800185a <vTaskSwitchContext+0x5a>
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <vTaskSwitchContext+0xc8>)
 8001868:	4413      	add	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	3308      	adds	r3, #8
 800187e:	429a      	cmp	r2, r3
 8001880:	d104      	bne.n	800188c <vTaskSwitchContext+0x8c>
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <vTaskSwitchContext+0xcc>)
 8001894:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <vTaskSwitchContext+0xcc>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <vTaskSwitchContext+0xd0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d102      	bne.n	80018a8 <vTaskSwitchContext+0xa8>
 80018a2:	f003 f9dd 	bl	8004c60 <SEGGER_SYSVIEW_OnIdle>
}
 80018a6:	e004      	b.n	80018b2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <vTaskSwitchContext+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fa35 	bl	8004d1c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000019c 	.word	0x2000019c
 80018c0:	20000188 	.word	0x20000188
 80018c4:	2000017c 	.word	0x2000017c
 80018c8:	200000a0 	.word	0x200000a0
 80018cc:	2000009c 	.word	0x2000009c
 80018d0:	20000198 	.word	0x20000198

080018d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80018e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f3bf 8f6f 	isb	sy
 80018f0:	f3bf 8f4f 	dsb	sy
 80018f4:	60fb      	str	r3, [r7, #12]
    }
 80018f6:	bf00      	nop
 80018f8:	e7fe      	b.n	80018f8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <vTaskPlaceOnEventList+0x44>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3318      	adds	r3, #24
 8001900:	4619      	mov	r1, r3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fe34 	bl	8000570 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001908:	2101      	movs	r1, #1
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f000 fbec 	bl	80020e8 <prvAddCurrentTaskToDelayedList>
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000009c 	.word	0x2000009c

0800191c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800192e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001932:	f383 8811 	msr	BASEPRI, r3
 8001936:	f3bf 8f6f 	isb	sy
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	617b      	str	r3, [r7, #20]
    }
 8001940:	bf00      	nop
 8001942:	e7fe      	b.n	8001942 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <vTaskPlaceOnEventListRestricted+0x58>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3318      	adds	r3, #24
 800194a:	4619      	mov	r1, r3
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7fe fdeb 	bl	8000528 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800195e:	2024      	movs	r0, #36	; 0x24
 8001960:	f002 fc7e 	bl	8004260 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	68b8      	ldr	r0, [r7, #8]
 8001968:	f000 fbbe 	bl	80020e8 <prvAddCurrentTaskToDelayedList>
    }
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000009c 	.word	0x2000009c

08001978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001992:	f383 8811 	msr	BASEPRI, r3
 8001996:	f3bf 8f6f 	isb	sy
 800199a:	f3bf 8f4f 	dsb	sy
 800199e:	60fb      	str	r3, [r7, #12]
    }
 80019a0:	bf00      	nop
 80019a2:	e7fe      	b.n	80019a2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	3318      	adds	r3, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fe1a 	bl	80005e2 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <xTaskRemoveFromEventList+0xb4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d120      	bne.n	80019f8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	3304      	adds	r3, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fe11 	bl	80005e2 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 f9ec 	bl	8004da0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	2201      	movs	r2, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <xTaskRemoveFromEventList+0xb8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <xTaskRemoveFromEventList+0xb8>)
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <xTaskRemoveFromEventList+0xbc>)
 80019e8:	441a      	add	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	3304      	adds	r3, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f7fe fd99 	bl	8000528 <vListInsertEnd>
 80019f6:	e005      	b.n	8001a04 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	3318      	adds	r3, #24
 80019fc:	4619      	mov	r1, r3
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <xTaskRemoveFromEventList+0xc0>)
 8001a00:	f7fe fd92 	bl	8000528 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <xTaskRemoveFromEventList+0xc4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d905      	bls.n	8001a1e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <xTaskRemoveFromEventList+0xc8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e001      	b.n	8001a22 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001a22:	697b      	ldr	r3, [r7, #20]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000019c 	.word	0x2000019c
 8001a30:	2000017c 	.word	0x2000017c
 8001a34:	200000a0 	.word	0x200000a0
 8001a38:	20000134 	.word	0x20000134
 8001a3c:	2000009c 	.word	0x2000009c
 8001a40:	20000188 	.word	0x20000188

08001a44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <vTaskInternalSetTimeOutState+0x24>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <vTaskInternalSetTimeOutState+0x28>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	605a      	str	r2, [r3, #4]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	2000018c 	.word	0x2000018c
 8001a6c:	20000178 	.word	0x20000178

08001a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a84:	f383 8811 	msr	BASEPRI, r3
 8001a88:	f3bf 8f6f 	isb	sy
 8001a8c:	f3bf 8f4f 	dsb	sy
 8001a90:	613b      	str	r3, [r7, #16]
    }
 8001a92:	bf00      	nop
 8001a94:	e7fe      	b.n	8001a94 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa0:	f383 8811 	msr	BASEPRI, r3
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	f3bf 8f4f 	dsb	sy
 8001aac:	60fb      	str	r3, [r7, #12]
    }
 8001aae:	bf00      	nop
 8001ab0:	e7fe      	b.n	8001ab0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001ab2:	f000 ffd1 	bl	8002a58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <xTaskCheckForTimeOut+0xc4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ace:	d102      	bne.n	8001ad6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e026      	b.n	8001b24 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <xTaskCheckForTimeOut+0xc8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d00a      	beq.n	8001af8 <xTaskCheckForTimeOut+0x88>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d305      	bcc.n	8001af8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e015      	b.n	8001b24 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d20b      	bcs.n	8001b1a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	1ad2      	subs	r2, r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff98 	bl	8001a44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	e004      	b.n	8001b24 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b24:	f000 ffc8 	bl	8002ab8 <vPortExitCritical>

    return xReturn;
 8001b28:	69fb      	ldr	r3, [r7, #28]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000178 	.word	0x20000178
 8001b38:	2000018c 	.word	0x2000018c

08001b3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <vTaskMissedYield+0x14>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000188 	.word	0x20000188

08001b54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b5c:	f000 f852 	bl	8001c04 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <prvIdleTask+0x28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d9f9      	bls.n	8001b5c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <prvIdleTask+0x2c>)
 8001b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f3bf 8f4f 	dsb	sy
 8001b74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001b78:	e7f0      	b.n	8001b5c <prvIdleTask+0x8>
 8001b7a:	bf00      	nop
 8001b7c:	200000a0 	.word	0x200000a0
 8001b80:	e000ed04 	.word	0xe000ed04

08001b84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	e00c      	b.n	8001baa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <prvInitialiseTaskLists+0x60>)
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc95 	bl	80004ce <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d9ef      	bls.n	8001b90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <prvInitialiseTaskLists+0x64>)
 8001bb2:	f7fe fc8c 	bl	80004ce <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <prvInitialiseTaskLists+0x68>)
 8001bb8:	f7fe fc89 	bl	80004ce <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <prvInitialiseTaskLists+0x6c>)
 8001bbe:	f7fe fc86 	bl	80004ce <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001bc2:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <prvInitialiseTaskLists+0x70>)
 8001bc4:	f7fe fc83 	bl	80004ce <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <prvInitialiseTaskLists+0x74>)
 8001bca:	f7fe fc80 	bl	80004ce <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <prvInitialiseTaskLists+0x78>)
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <prvInitialiseTaskLists+0x64>)
 8001bd2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <prvInitialiseTaskLists+0x7c>)
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <prvInitialiseTaskLists+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200000a0 	.word	0x200000a0
 8001be8:	20000104 	.word	0x20000104
 8001bec:	20000118 	.word	0x20000118
 8001bf0:	20000134 	.word	0x20000134
 8001bf4:	20000148 	.word	0x20000148
 8001bf8:	20000160 	.word	0x20000160
 8001bfc:	2000012c 	.word	0x2000012c
 8001c00:	20000130 	.word	0x20000130

08001c04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c0a:	e019      	b.n	8001c40 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001c0c:	f000 ff24 	bl	8002a58 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <prvCheckTasksWaitingTermination+0x50>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fce0 	bl	80005e2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <prvCheckTasksWaitingTermination+0x54>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <prvCheckTasksWaitingTermination+0x54>)
 8001c2a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <prvCheckTasksWaitingTermination+0x58>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <prvCheckTasksWaitingTermination+0x58>)
 8001c34:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001c36:	f000 ff3f 	bl	8002ab8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f810 	bl	8001c60 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <prvCheckTasksWaitingTermination+0x58>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e1      	bne.n	8001c0c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000148 	.word	0x20000148
 8001c58:	20000174 	.word	0x20000174
 8001c5c:	2000015c 	.word	0x2000015c

08001c60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 f8fd 	bl	8002e6c <vPortFree>
                vPortFree( pxTCB );
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f001 f8fa 	bl	8002e6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <prvResetNextTaskUnblockTime+0x30>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d104      	bne.n	8001c98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <prvResetNextTaskUnblockTime+0x34>)
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c96:	e005      	b.n	8001ca4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <prvResetNextTaskUnblockTime+0x30>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <prvResetNextTaskUnblockTime+0x34>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2000012c 	.word	0x2000012c
 8001cb4:	20000194 	.word	0x20000194

08001cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <xTaskGetSchedulerState+0x34>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	e008      	b.n	8001cde <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <xTaskGetSchedulerState+0x38>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	e001      	b.n	8001cde <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001cde:	687b      	ldr	r3, [r7, #4]
    }
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20000180 	.word	0x20000180
 8001cf0:	2000019c 	.word	0x2000019c

08001cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d068      	beq.n	8001ddc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <xTaskPriorityDisinherit+0xf4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d00a      	beq.n	8001d2a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	60fb      	str	r3, [r7, #12]
    }
 8001d26:	bf00      	nop
 8001d28:	e7fe      	b.n	8001d28 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10a      	bne.n	8001d48 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	60bb      	str	r3, [r7, #8]
    }
 8001d44:	bf00      	nop
 8001d46:	e7fe      	b.n	8001d46 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d03e      	beq.n	8001ddc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13a      	bne.n	8001ddc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fc39 	bl	80005e2 <uxListRemove>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10a      	bne.n	8001d8c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43da      	mvns	r2, r3
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <xTaskPriorityDisinherit+0xf8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4013      	ands	r3, r2
 8001d88:	4a18      	ldr	r2, [pc, #96]	; (8001dec <xTaskPriorityDisinherit+0xf8>)
 8001d8a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	204a      	movs	r0, #74	; 0x4a
 8001d92:	f002 fa83 	bl	800429c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f1c3 0205 	rsb	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	2201      	movs	r2, #1
 8001db0:	409a      	lsls	r2, r3
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <xTaskPriorityDisinherit+0xf8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <xTaskPriorityDisinherit+0xf8>)
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <xTaskPriorityDisinherit+0xfc>)
 8001dca:	441a      	add	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7fe fba8 	bl	8000528 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001ddc:	697b      	ldr	r3, [r7, #20]
    }
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000009c 	.word	0x2000009c
 8001dec:	2000017c 	.word	0x2000017c
 8001df0:	200000a0 	.word	0x200000a0

08001df4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	613b      	str	r3, [r7, #16]
    }
 8001e1a:	bf00      	nop
 8001e1c:	e7fe      	b.n	8001e1c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001e1e:	f000 fe1b 	bl	8002a58 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <xTaskGenericNotifyWait+0x108>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	3354      	adds	r3, #84	; 0x54
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d022      	beq.n	8001e7a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <xTaskGenericNotifyWait+0x108>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	3214      	adds	r2, #20
 8001e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	43d2      	mvns	r2, r2
 8001e44:	4011      	ands	r1, r2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	3214      	adds	r2, #20
 8001e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <xTaskGenericNotifyWait+0x108>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	3354      	adds	r3, #84	; 0x54
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e62:	2101      	movs	r1, #1
 8001e64:	6a38      	ldr	r0, [r7, #32]
 8001e66:	f000 f93f 	bl	80020e8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <xTaskGenericNotifyWait+0x10c>)
 8001e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e7a:	f000 fe1d 	bl	8002ab8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001e7e:	f000 fdeb 	bl	8002a58 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	2040      	movs	r0, #64	; 0x40
 8001e90:	f002 fb10 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <xTaskGenericNotifyWait+0x108>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	3214      	adds	r2, #20
 8001ea2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <xTaskGenericNotifyWait+0x108>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3354      	adds	r3, #84	; 0x54
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d002      	beq.n	8001ec2 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e00e      	b.n	8001ee0 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <xTaskGenericNotifyWait+0x108>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	3214      	adds	r2, #20
 8001eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	43d2      	mvns	r2, r2
 8001ed2:	4011      	ands	r1, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	3214      	adds	r2, #20
 8001ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <xTaskGenericNotifyWait+0x108>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3354      	adds	r3, #84	; 0x54
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001eee:	f000 fde3 	bl	8002ab8 <vPortExitCritical>

        return xReturn;
 8001ef2:	697b      	ldr	r3, [r7, #20]
    }
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	2000009c 	.word	0x2000009c
 8001f00:	e000ed04 	.word	0xe000ed04

08001f04 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	; 0x38
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001f12:	2301      	movs	r3, #1
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	623b      	str	r3, [r7, #32]
    }
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xTaskGenericNotify+0x4a>
        __asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	61fb      	str	r3, [r7, #28]
    }
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001f52:	f000 fd81 	bl	8002a58 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	3214      	adds	r2, #20
 8001f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f68:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4413      	add	r3, r2
 8001f70:	3354      	adds	r3, #84	; 0x54
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3354      	adds	r3, #84	; 0x54
 8001f80:	2202      	movs	r2, #2
 8001f82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d83b      	bhi.n	8002002 <xTaskGenericNotify+0xfe>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <xTaskGenericNotify+0x8c>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	08002021 	.word	0x08002021
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fc1 	.word	0x08001fc1
 8001f9c:	08001fd9 	.word	0x08001fd9
 8001fa0:	08001fe7 	.word	0x08001fe7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	3214      	adds	r2, #20
 8001faa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	ea42 0103 	orr.w	r1, r2, r3
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	3214      	adds	r2, #20
 8001fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fbe:	e032      	b.n	8002026 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	3214      	adds	r2, #20
 8001fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	3214      	adds	r2, #20
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fd6:	e026      	b.n	8002026 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	3214      	adds	r2, #20
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fe4:	e01f      	b.n	8002026 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d006      	beq.n	8001ffc <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	3214      	adds	r2, #20
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001ffa:	e014      	b.n	8002026 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002000:	e011      	b.n	8002026 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <xTaskGenericNotify+0x1d0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <xTaskGenericNotify+0x120>
        __asm volatile
 800200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	f3bf 8f4f 	dsb	sy
 800201a:	61bb      	str	r3, [r7, #24]
    }
 800201c:	bf00      	nop
 800201e:	e7fe      	b.n	800201e <xTaskGenericNotify+0x11a>
                    break;
 8002020:	bf00      	nop
 8002022:	e000      	b.n	8002026 <xTaskGenericNotify+0x122>

                    break;
 8002024:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	4618      	mov	r0, r3
 800202a:	f002 ff5b 	bl	8004ee4 <SEGGER_SYSVIEW_ShrinkId>
 800202e:	4601      	mov	r1, r0
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	203e      	movs	r0, #62	; 0x3e
 800203c:	f002 fa3a 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002044:	2b01      	cmp	r3, #1
 8002046:	d13d      	bne.n	80020c4 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	3304      	adds	r3, #4
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fac8 	bl	80005e2 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fea3 	bl	8004da0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	2201      	movs	r2, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <xTaskGenericNotify+0x1d4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <xTaskGenericNotify+0x1d4>)
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <xTaskGenericNotify+0x1d8>)
 800207a:	441a      	add	r2, r3
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	3304      	adds	r3, #4
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7fe fa50 	bl	8000528 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	617b      	str	r3, [r7, #20]
    }
 80020a2:	bf00      	nop
 80020a4:	e7fe      	b.n	80020a4 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <xTaskGenericNotify+0x1dc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d907      	bls.n	80020c4 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <xTaskGenericNotify+0x1e0>)
 80020b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020c4:	f000 fcf8 	bl	8002ab8 <vPortExitCritical>

        return xReturn;
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80020ca:	4618      	mov	r0, r3
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000178 	.word	0x20000178
 80020d8:	2000017c 	.word	0x2000017c
 80020dc:	200000a0 	.word	0x200000a0
 80020e0:	2000009c 	.word	0x2000009c
 80020e4:	e000ed04 	.word	0xe000ed04

080020e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80020f2:	4b32      	ldr	r3, [pc, #200]	; (80021bc <prvAddCurrentTaskToDelayedList+0xd4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020f8:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3304      	adds	r3, #4
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa6f 	bl	80005e2 <uxListRemove>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10b      	bne.n	8002122 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	2201      	movs	r2, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4013      	ands	r3, r2
 800211e:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002120:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002128:	d110      	bne.n	800214c <prvAddCurrentTaskToDelayedList+0x64>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002130:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	211b      	movs	r1, #27
 8002136:	4618      	mov	r0, r3
 8002138:	f002 fe74 	bl	8004e24 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3304      	adds	r3, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4820      	ldr	r0, [pc, #128]	; (80021c8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002146:	f7fe f9ef 	bl	8000528 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800214a:	e032      	b.n	80021b2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d20f      	bcs.n	8002184 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2104      	movs	r1, #4
 800216a:	4618      	mov	r0, r3
 800216c:	f002 fe5a 	bl	8004e24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <prvAddCurrentTaskToDelayedList+0xe4>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3304      	adds	r3, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7fe f9f7 	bl	8000570 <vListInsert>
}
 8002182:	e016      	b.n	80021b2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2104      	movs	r1, #4
 800218a:	4618      	mov	r0, r3
 800218c:	f002 fe4a 	bl	8004e24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3304      	adds	r3, #4
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f7fe f9e7 	bl	8000570 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d202      	bcs.n	80021b2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80021ac:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6013      	str	r3, [r2, #0]
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000178 	.word	0x20000178
 80021c0:	2000009c 	.word	0x2000009c
 80021c4:	2000017c 	.word	0x2000017c
 80021c8:	20000160 	.word	0x20000160
 80021cc:	20000130 	.word	0x20000130
 80021d0:	2000012c 	.word	0x2000012c
 80021d4:	20000194 	.word	0x20000194

080021d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80021e2:	f000 fad5 	bl	8002790 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <xTimerCreateTimerTask+0x54>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <xTimerCreateTimerTask+0x58>)
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2302      	movs	r3, #2
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2300      	movs	r3, #0
 80021f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021fc:	490d      	ldr	r1, [pc, #52]	; (8002234 <xTimerCreateTimerTask+0x5c>)
 80021fe:	480e      	ldr	r0, [pc, #56]	; (8002238 <xTimerCreateTimerTask+0x60>)
 8002200:	f7fe ff74 	bl	80010ec <xTaskCreate>
 8002204:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	603b      	str	r3, [r7, #0]
    }
 800221e:	bf00      	nop
 8002220:	e7fe      	b.n	8002220 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002222:	687b      	ldr	r3, [r7, #4]
    }
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200001d0 	.word	0x200001d0
 8002230:	200001d4 	.word	0x200001d4
 8002234:	08005a48 	.word	0x08005a48
 8002238:	08002371 	.word	0x08002371

0800223c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <xTimerGenericCommand+0x2e>
        __asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	623b      	str	r3, [r7, #32]
    }
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <xTimerGenericCommand+0x98>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d02a      	beq.n	80022c8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b05      	cmp	r3, #5
 8002282:	dc18      	bgt.n	80022b6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002284:	f7ff fd18 	bl	8001cb8 <xTaskGetSchedulerState>
 8002288:	4603      	mov	r3, r0
 800228a:	2b02      	cmp	r3, #2
 800228c:	d109      	bne.n	80022a2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <xTimerGenericCommand+0x98>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f107 0114 	add.w	r1, r7, #20
 8002296:	2300      	movs	r3, #0
 8002298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229a:	f7fe fabd 	bl	8000818 <xQueueGenericSend>
 800229e:	6278      	str	r0, [r7, #36]	; 0x24
 80022a0:	e012      	b.n	80022c8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <xTimerGenericCommand+0x98>)
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	f107 0114 	add.w	r1, r7, #20
 80022aa:	2300      	movs	r3, #0
 80022ac:	2200      	movs	r2, #0
 80022ae:	f7fe fab3 	bl	8000818 <xQueueGenericSend>
 80022b2:	6278      	str	r0, [r7, #36]	; 0x24
 80022b4:	e008      	b.n	80022c8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <xTimerGenericCommand+0x98>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	f107 0114 	add.w	r1, r7, #20
 80022be:	2300      	movs	r3, #0
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	f7fe fbcf 	bl	8000a64 <xQueueGenericSendFromISR>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80022ca:	4618      	mov	r0, r3
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001d0 	.word	0x200001d0

080022d8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <prvProcessExpiredTimer+0x94>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f976 	bl	80005e2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d022      	beq.n	800234a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	18d1      	adds	r1, r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	6978      	ldr	r0, [r7, #20]
 8002312:	f000 f8d1 	bl	80024b8 <prvInsertTimerInActiveList>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01f      	beq.n	800235c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800231c:	2300      	movs	r3, #0
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	2100      	movs	r1, #0
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff88 	bl	800223c <xTimerGenericCommand>
 800232c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d113      	bne.n	800235c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	60fb      	str	r3, [r7, #12]
    }
 8002346:	bf00      	nop
 8002348:	e7fe      	b.n	8002348 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	6978      	ldr	r0, [r7, #20]
 8002362:	4798      	blx	r3
    }
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200001c8 	.word	0x200001c8

08002370 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f857 	bl	8002430 <prvGetNextExpireTime>
 8002382:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4619      	mov	r1, r3
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f803 	bl	8002394 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800238e:	f000 f8d5 	bl	800253c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002392:	e7f1      	b.n	8002378 <prvTimerTask+0x8>

08002394 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800239e:	f7ff f8a3 	bl	80014e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f866 	bl	8002478 <prvSampleTimeNow>
 80023ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d130      	bne.n	8002416 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <prvProcessTimerOrBlockTask+0x3c>
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d806      	bhi.n	80023d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80023c2:	f7ff f89f 	bl	8001504 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff85 	bl	80022d8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80023ce:	e024      	b.n	800241a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <prvProcessTimerOrBlockTask+0x90>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <prvProcessTimerOrBlockTask+0x50>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <prvProcessTimerOrBlockTask+0x52>
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <prvProcessTimerOrBlockTask+0x94>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe fe45 	bl	8001084 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023fa:	f7ff f883 	bl	8001504 <xTaskResumeAll>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <prvProcessTimerOrBlockTask+0x98>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
    }
 8002414:	e001      	b.n	800241a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002416:	f7ff f875 	bl	8001504 <xTaskResumeAll>
    }
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200001cc 	.word	0x200001cc
 8002428:	200001d0 	.word	0x200001d0
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <prvGetNextExpireTime+0x44>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <prvGetNextExpireTime+0x16>
 8002442:	2201      	movs	r2, #1
 8002444:	e000      	b.n	8002448 <prvGetNextExpireTime+0x18>
 8002446:	2200      	movs	r2, #0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <prvGetNextExpireTime+0x44>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e001      	b.n	8002464 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002464:	68fb      	ldr	r3, [r7, #12]
    }
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200001c8 	.word	0x200001c8

08002478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002480:	f7ff f8e0 	bl	8001644 <xTaskGetTickCount>
 8002484:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <prvSampleTimeNow+0x3c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d205      	bcs.n	800249c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002490:	f000 f91a 	bl	80026c8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e002      	b.n	80024a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <prvSampleTimeNow+0x3c>)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80024a8:	68fb      	ldr	r3, [r7, #12]
    }
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200001d8 	.word	0x200001d8

080024b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d812      	bhi.n	8002504 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d302      	bcc.n	80024f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e01b      	b.n	800252a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <prvInsertTimerInActiveList+0x7c>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3304      	adds	r3, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f7fe f837 	bl	8000570 <vListInsert>
 8002502:	e012      	b.n	800252a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d206      	bcs.n	800251a <prvInsertTimerInActiveList+0x62>
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d302      	bcc.n	800251a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002514:	2301      	movs	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e007      	b.n	800252a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <prvInsertTimerInActiveList+0x80>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3304      	adds	r3, #4
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f7fe f823 	bl	8000570 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800252a:	697b      	ldr	r3, [r7, #20]
    }
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200001cc 	.word	0x200001cc
 8002538:	200001c8 	.word	0x200001c8

0800253c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002542:	e0ae      	b.n	80026a2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f2c0 80aa 	blt.w	80026a0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3304      	adds	r3, #4
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe f840 	bl	80005e2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff87 	bl	8002478 <prvSampleTimeNow>
 800256a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b09      	cmp	r3, #9
 8002570:	f200 8097 	bhi.w	80026a2 <prvProcessReceivedCommands+0x166>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <prvProcessReceivedCommands+0x40>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	080025a5 	.word	0x080025a5
 8002580:	080025a5 	.word	0x080025a5
 8002584:	080025a5 	.word	0x080025a5
 8002588:	08002619 	.word	0x08002619
 800258c:	0800262d 	.word	0x0800262d
 8002590:	08002677 	.word	0x08002677
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025a5 	.word	0x080025a5
 800259c:	08002619 	.word	0x08002619
 80025a0:	0800262d 	.word	0x0800262d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	18d1      	adds	r1, r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025c4:	f7ff ff78 	bl	80024b8 <prvInsertTimerInActiveList>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d069      	beq.n	80026a2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025d4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05e      	beq.n	80026a2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	441a      	add	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2300      	movs	r3, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025f6:	f7ff fe21 	bl	800223c <xTimerGenericCommand>
 80025fa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d14f      	bne.n	80026a2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	61bb      	str	r3, [r7, #24]
    }
 8002614:	bf00      	nop
 8002616:	e7fe      	b.n	8002616 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800262a:	e03a      	b.n	80026a2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	617b      	str	r3, [r7, #20]
    }
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	18d1      	adds	r1, r2, r3
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002670:	f7ff ff22 	bl	80024b8 <prvInsertTimerInActiveList>
                        break;
 8002674:	e015      	b.n	80026a2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002686:	f000 fbf1 	bl	8002e6c <vPortFree>
 800268a:	e00a      	b.n	80026a2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	b2da      	uxtb	r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800269e:	e000      	b.n	80026a2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80026a0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <prvProcessReceivedCommands+0x188>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f107 0108 	add.w	r1, r7, #8
 80026aa:	2200      	movs	r2, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fa97 	bl	8000be0 <xQueueReceive>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f47f af45 	bne.w	8002544 <prvProcessReceivedCommands+0x8>
        }
    }
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200001d0 	.word	0x200001d0

080026c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026ce:	e048      	b.n	8002762 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <prvSwitchTimerLists+0xc0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <prvSwitchTimerLists+0xc0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ff7a 	bl	80005e2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02e      	beq.n	8002762 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	429a      	cmp	r2, r3
 8002714:	d90e      	bls.n	8002734 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <prvSwitchTimerLists+0xc0>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3304      	adds	r3, #4
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7fd ff1f 	bl	8000570 <vListInsert>
 8002732:	e016      	b.n	8002762 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002734:	2300      	movs	r3, #0
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	2100      	movs	r1, #0
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff fd7c 	bl	800223c <xTimerGenericCommand>
 8002744:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	603b      	str	r3, [r7, #0]
    }
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <prvSwitchTimerLists+0xc0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1b1      	bne.n	80026d0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <prvSwitchTimerLists+0xc0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <prvSwitchTimerLists+0xc4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <prvSwitchTimerLists+0xc0>)
 8002778:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <prvSwitchTimerLists+0xc4>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	6013      	str	r3, [r2, #0]
    }
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200001c8 	.word	0x200001c8
 800278c:	200001cc 	.word	0x200001cc

08002790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002794:	f000 f960 	bl	8002a58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <prvCheckForValidListAndQueue+0x54>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11d      	bne.n	80027dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80027a0:	4811      	ldr	r0, [pc, #68]	; (80027e8 <prvCheckForValidListAndQueue+0x58>)
 80027a2:	f7fd fe94 	bl	80004ce <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80027a6:	4811      	ldr	r0, [pc, #68]	; (80027ec <prvCheckForValidListAndQueue+0x5c>)
 80027a8:	f7fd fe91 	bl	80004ce <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <prvCheckForValidListAndQueue+0x60>)
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <prvCheckForValidListAndQueue+0x58>)
 80027b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <prvCheckForValidListAndQueue+0x64>)
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <prvCheckForValidListAndQueue+0x5c>)
 80027b6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80027b8:	2200      	movs	r2, #0
 80027ba:	210c      	movs	r1, #12
 80027bc:	200a      	movs	r0, #10
 80027be:	f7fd ffa3 	bl	8000708 <xQueueGenericCreate>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <prvCheckForValidListAndQueue+0x54>)
 80027c6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <prvCheckForValidListAndQueue+0x54>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <prvCheckForValidListAndQueue+0x54>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4908      	ldr	r1, [pc, #32]	; (80027f8 <prvCheckForValidListAndQueue+0x68>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fc22 	bl	8001020 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80027dc:	f000 f96c 	bl	8002ab8 <vPortExitCritical>
    }
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200001d0 	.word	0x200001d0
 80027e8:	200001a0 	.word	0x200001a0
 80027ec:	200001b4 	.word	0x200001b4
 80027f0:	200001c8 	.word	0x200001c8
 80027f4:	200001cc 	.word	0x200001cc
 80027f8:	08005a50 	.word	0x08005a50

080027fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3b04      	subs	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002814:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3b04      	subs	r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3b04      	subs	r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <pxPortInitialiseStack+0x64>)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b14      	subs	r3, #20
 8002836:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3b04      	subs	r3, #4
 8002842:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f06f 0202 	mvn.w	r2, #2
 800284a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3b20      	subs	r3, #32
 8002850:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	08002865 	.word	0x08002865

08002864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <prvTaskExitError+0x54>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002876:	d00a      	beq.n	800288e <prvTaskExitError+0x2a>
        __asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	60fb      	str	r3, [r7, #12]
    }
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <prvTaskExitError+0x28>
        __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	60bb      	str	r3, [r7, #8]
    }
 80028a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80028a2:	bf00      	nop
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0fc      	beq.n	80028a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000008 	.word	0x20000008
 80028bc:	00000000 	.word	0x00000000

080028c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <pxCurrentTCBConst2>)
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	6808      	ldr	r0, [r1, #0]
 80028c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ca:	f380 8809 	msr	PSP, r0
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f380 8811 	msr	BASEPRI, r0
 80028da:	4770      	bx	lr
 80028dc:	f3af 8000 	nop.w

080028e0 <pxCurrentTCBConst2>:
 80028e0:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop

080028e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <prvPortStartFirstTask+0x24>)
 80028ea:	6800      	ldr	r0, [r0, #0]
 80028ec:	6800      	ldr	r0, [r0, #0]
 80028ee:	f380 8808 	msr	MSP, r0
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f380 8814 	msr	CONTROL, r0
 80028fa:	b662      	cpsie	i
 80028fc:	b661      	cpsie	f
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	df00      	svc	0
 8002908:	bf00      	nop
 800290a:	0000      	.short	0x0000
 800290c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop

08002914 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800291a:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <xPortStartScheduler+0x120>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a46      	ldr	r2, [pc, #280]	; (8002a38 <xPortStartScheduler+0x124>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d10a      	bne.n	800293a <xPortStartScheduler+0x26>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	613b      	str	r3, [r7, #16]
    }
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <xPortStartScheduler+0x120>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <xPortStartScheduler+0x128>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10a      	bne.n	800295a <xPortStartScheduler+0x46>
        __asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	60fb      	str	r3, [r7, #12]
    }
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <xPortStartScheduler+0x12c>)
 800295c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <xPortStartScheduler+0x130>)
 8002980:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <xPortStartScheduler+0x134>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002988:	e009      	b.n	800299e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <xPortStartScheduler+0x134>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3b01      	subs	r3, #1
 8002990:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <xPortStartScheduler+0x134>)
 8002992:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d0ef      	beq.n	800298a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <xPortStartScheduler+0x134>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d00a      	beq.n	80029cc <xPortStartScheduler+0xb8>
        __asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	60bb      	str	r3, [r7, #8]
    }
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <xPortStartScheduler+0x134>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <xPortStartScheduler+0x134>)
 80029d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <xPortStartScheduler+0x134>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029de:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <xPortStartScheduler+0x134>)
 80029e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <xPortStartScheduler+0x138>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <xPortStartScheduler+0x138>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <xPortStartScheduler+0x138>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <xPortStartScheduler+0x138>)
 80029fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002a02:	f000 f8e3 	bl	8002bcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <xPortStartScheduler+0x13c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002a0c:	f000 f902 	bl	8002c14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <xPortStartScheduler+0x140>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <xPortStartScheduler+0x140>)
 8002a16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002a1c:	f7ff ff64 	bl	80028e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002a20:	f7fe feee 	bl	8001800 <vTaskSwitchContext>
    prvTaskExitError();
 8002a24:	f7ff ff1e 	bl	8002864 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	410fc271 	.word	0x410fc271
 8002a3c:	410fc270 	.word	0x410fc270
 8002a40:	e000e400 	.word	0xe000e400
 8002a44:	200001dc 	.word	0x200001dc
 8002a48:	200001e0 	.word	0x200001e0
 8002a4c:	e000ed20 	.word	0xe000ed20
 8002a50:	20000008 	.word	0x20000008
 8002a54:	e000ef34 	.word	0xe000ef34

08002a58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	607b      	str	r3, [r7, #4]
    }
 8002a70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <vPortEnterCritical+0x58>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <vPortEnterCritical+0x58>)
 8002a7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <vPortEnterCritical+0x58>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10f      	bne.n	8002aa4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <vPortEnterCritical+0x5c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <vPortEnterCritical+0x4c>
        __asm volatile
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	603b      	str	r3, [r7, #0]
    }
 8002aa0:	bf00      	nop
 8002aa2:	e7fe      	b.n	8002aa2 <vPortEnterCritical+0x4a>
    }
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	e000ed04 	.word	0xe000ed04

08002ab8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <vPortExitCritical+0x50>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <vPortExitCritical+0x24>
        __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	607b      	str	r3, [r7, #4]
    }
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <vPortExitCritical+0x50>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <vPortExitCritical+0x50>)
 8002ae4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <vPortExitCritical+0x50>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <vPortExitCritical+0x42>
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f383 8811 	msr	BASEPRI, r3
    }
 8002af8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000008 	.word	0x20000008
 8002b0c:	00000000 	.word	0x00000000

08002b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b10:	f3ef 8009 	mrs	r0, PSP
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <pxCurrentTCBConst>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f01e 0f10 	tst.w	lr, #16
 8002b20:	bf08      	it	eq
 8002b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	6010      	str	r0, [r2, #0]
 8002b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b34:	f380 8811 	msr	BASEPRI, r0
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f7fe fe5e 	bl	8001800 <vTaskSwitchContext>
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f380 8811 	msr	BASEPRI, r0
 8002b4c:	bc09      	pop	{r0, r3}
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	6808      	ldr	r0, [r1, #0]
 8002b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b56:	f01e 0f10 	tst.w	lr, #16
 8002b5a:	bf08      	it	eq
 8002b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b60:	f380 8809 	msr	PSP, r0
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	f3af 8000 	nop.w

08002b70 <pxCurrentTCBConst>:
 8002b70:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop

08002b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
        __asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	607b      	str	r3, [r7, #4]
    }
 8002b90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002b92:	f001 ffeb 	bl	8004b6c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002b96:	f7fe fd77 	bl	8001688 <xTaskIncrementTick>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ba0:	f002 f842 	bl	8004c28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <SysTick_Handler+0x50>)
 8002ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e001      	b.n	8002bb2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002bae:	f002 f81f 	bl	8004bf0 <SEGGER_SYSVIEW_RecordExitISR>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f383 8811 	msr	BASEPRI, r3
    }
 8002bbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <vPortSetupTimerInterrupt+0x34>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <vPortSetupTimerInterrupt+0x38>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <vPortSetupTimerInterrupt+0x3c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <vPortSetupTimerInterrupt+0x40>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <vPortSetupTimerInterrupt+0x44>)
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <vPortSetupTimerInterrupt+0x34>)
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	601a      	str	r2, [r3, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e010 	.word	0xe000e010
 8002c04:	e000e018 	.word	0xe000e018
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	10624dd3 	.word	0x10624dd3
 8002c10:	e000e014 	.word	0xe000e014

08002c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002c24 <vPortEnableVFP+0x10>
 8002c18:	6801      	ldr	r1, [r0, #0]
 8002c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c1e:	6001      	str	r1, [r0, #0]
 8002c20:	4770      	bx	lr
 8002c22:	0000      	.short	0x0000
 8002c24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop

08002c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002c32:	f3ef 8305 	mrs	r3, IPSR
 8002c36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	d914      	bls.n	8002c68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <vPortValidateInterruptPriority+0x70>)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <vPortValidateInterruptPriority+0x74>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	7afa      	ldrb	r2, [r7, #11]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d20a      	bcs.n	8002c68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	607b      	str	r3, [r7, #4]
    }
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <vPortValidateInterruptPriority+0x78>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <vPortValidateInterruptPriority+0x7c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d90a      	bls.n	8002c8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	603b      	str	r3, [r7, #0]
    }
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <vPortValidateInterruptPriority+0x60>
    }
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e3f0 	.word	0xe000e3f0
 8002ca0:	200001dc 	.word	0x200001dc
 8002ca4:	e000ed0c 	.word	0xe000ed0c
 8002ca8:	200001e0 	.word	0x200001e0

08002cac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002cb8:	f7fe fc16 	bl	80014e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002cbc:	4b65      	ldr	r3, [pc, #404]	; (8002e54 <pvPortMalloc+0x1a8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002cc4:	f000 f934 	bl	8002f30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cc8:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <pvPortMalloc+0x1ac>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 80a7 	bne.w	8002e24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d02d      	beq.n	8002d38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002cdc:	2208      	movs	r2, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d227      	bcs.n	8002d38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002ce8:	2208      	movs	r2, #8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d021      	beq.n	8002d3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f023 0307 	bic.w	r3, r3, #7
 8002d00:	3308      	adds	r3, #8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d214      	bcs.n	8002d32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f023 0307 	bic.w	r3, r3, #7
 8002d0e:	3308      	adds	r3, #8
 8002d10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <pvPortMalloc+0x92>
        __asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	617b      	str	r3, [r7, #20]
    }
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d36:	e002      	b.n	8002d3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	e000      	b.n	8002d40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d06e      	beq.n	8002e24 <pvPortMalloc+0x178>
 8002d46:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <pvPortMalloc+0x1b0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d869      	bhi.n	8002e24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002d50:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <pvPortMalloc+0x1b4>)
 8002d52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <pvPortMalloc+0x1b4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d5a:	e004      	b.n	8002d66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d903      	bls.n	8002d78 <pvPortMalloc+0xcc>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f1      	bne.n	8002d5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <pvPortMalloc+0x1a8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d050      	beq.n	8002e24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2208      	movs	r2, #8
 8002d88:	4413      	add	r3, r2
 8002d8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	1ad2      	subs	r2, r2, r3
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d91f      	bls.n	8002de4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <pvPortMalloc+0x120>
        __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	613b      	str	r3, [r7, #16]
    }
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dde:	69b8      	ldr	r0, [r7, #24]
 8002de0:	f000 f908 	bl	8002ff4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <pvPortMalloc+0x1b0>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <pvPortMalloc+0x1b0>)
 8002df0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <pvPortMalloc+0x1b0>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <pvPortMalloc+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <pvPortMalloc+0x1b0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <pvPortMalloc+0x1b8>)
 8002e04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <pvPortMalloc+0x1ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <pvPortMalloc+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <pvPortMalloc+0x1bc>)
 8002e22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e24:	f7fe fb6e 	bl	8001504 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <pvPortMalloc+0x19c>
        __asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	60fb      	str	r3, [r7, #12]
    }
 8002e44:	bf00      	nop
 8002e46:	e7fe      	b.n	8002e46 <pvPortMalloc+0x19a>
    return pvReturn;
 8002e48:	69fb      	ldr	r3, [r7, #28]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	; 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20012dec 	.word	0x20012dec
 8002e58:	20012e00 	.word	0x20012e00
 8002e5c:	20012df0 	.word	0x20012df0
 8002e60:	20012de4 	.word	0x20012de4
 8002e64:	20012df4 	.word	0x20012df4
 8002e68:	20012df8 	.word	0x20012df8

08002e6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d04d      	beq.n	8002f1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e7e:	2308      	movs	r3, #8
 8002e80:	425b      	negs	r3, r3
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4413      	add	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <vPortFree+0xb8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <vPortFree+0x44>
        __asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60fb      	str	r3, [r7, #12]
    }
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <vPortFree+0x62>
        __asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60bb      	str	r3, [r7, #8]
    }
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <vPortFree+0xb8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01e      	beq.n	8002f1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d11a      	bne.n	8002f1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <vPortFree+0xb8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002ef4:	f7fe faf8 	bl	80014e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <vPortFree+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <vPortFree+0xbc>)
 8002f04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f06:	6938      	ldr	r0, [r7, #16]
 8002f08:	f000 f874 	bl	8002ff4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <vPortFree+0xc0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3301      	adds	r3, #1
 8002f12:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <vPortFree+0xc0>)
 8002f14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f16:	f7fe faf5 	bl	8001504 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20012e00 	.word	0x20012e00
 8002f28:	20012df0 	.word	0x20012df0
 8002f2c:	20012dfc 	.word	0x20012dfc

08002f30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002f3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002f3c:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <prvHeapInit+0xac>)
 8002f3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00c      	beq.n	8002f64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3307      	adds	r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0307 	bic.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <prvHeapInit+0xac>)
 8002f60:	4413      	add	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <prvHeapInit+0xb0>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <prvHeapInit+0xb0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <prvHeapInit+0xb4>)
 8002f90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <prvHeapInit+0xb4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <prvHeapInit+0xb4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	1ad2      	subs	r2, r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <prvHeapInit+0xb4>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <prvHeapInit+0xb8>)
 8002fbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <prvHeapInit+0xbc>)
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <prvHeapInit+0xc0>)
 8002fca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	200001e4 	.word	0x200001e4
 8002fe0:	20012de4 	.word	0x20012de4
 8002fe4:	20012dec 	.word	0x20012dec
 8002fe8:	20012df4 	.word	0x20012df4
 8002fec:	20012df0 	.word	0x20012df0
 8002ff0:	20012e00 	.word	0x20012e00

08002ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <prvInsertBlockIntoFreeList+0xac>)
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e002      	b.n	8003008 <prvInsertBlockIntoFreeList+0x14>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d8f7      	bhi.n	8003002 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	4413      	add	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d108      	bne.n	8003036 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	441a      	add	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	441a      	add	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d118      	bne.n	800307c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d00d      	beq.n	8003072 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e008      	b.n	8003084 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e003      	b.n	8003084 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d002      	beq.n	8003092 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20012de4 	.word	0x20012de4
 80030a4:	20012dec 	.word	0x20012dec

080030a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80030ac:	4803      	ldr	r0, [pc, #12]	; (80030bc <_cbSendSystemDesc+0x14>)
 80030ae:	f001 fd07 	bl	8004ac0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80030b2:	4803      	ldr	r0, [pc, #12]	; (80030c0 <_cbSendSystemDesc+0x18>)
 80030b4:	f001 fd04 	bl	8004ac0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	08005a58 	.word	0x08005a58
 80030c0:	08005a80 	.word	0x08005a80

080030c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80030d2:	4a06      	ldr	r2, [pc, #24]	; (80030ec <SEGGER_SYSVIEW_Conf+0x28>)
 80030d4:	f001 f870 	bl	80041b8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80030d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80030dc:	f001 f8b0 	bl	8004240 <SEGGER_SYSVIEW_SetRAMBase>
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000000 	.word	0x20000000
 80030e8:	080030a9 	.word	0x080030a9
 80030ec:	08005b08 	.word	0x08005b08

080030f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80030f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	e033      	b.n	8003164 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80030fc:	491e      	ldr	r1, [pc, #120]	; (8003178 <_cbSendTaskList+0x88>)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	491a      	ldr	r1, [pc, #104]	; (8003178 <_cbSendTaskList+0x88>)
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3304      	adds	r3, #4
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	4c16      	ldr	r4, [pc, #88]	; (8003178 <_cbSendTaskList+0x88>)
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4423      	add	r3, r4
 800312c:	3308      	adds	r3, #8
 800312e:	681c      	ldr	r4, [r3, #0]
 8003130:	4d11      	ldr	r5, [pc, #68]	; (8003178 <_cbSendTaskList+0x88>)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	442b      	add	r3, r5
 800313e:	330c      	adds	r3, #12
 8003140:	681d      	ldr	r5, [r3, #0]
 8003142:	4e0d      	ldr	r6, [pc, #52]	; (8003178 <_cbSendTaskList+0x88>)
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4433      	add	r3, r6
 8003150:	3310      	adds	r3, #16
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	462b      	mov	r3, r5
 8003158:	4622      	mov	r2, r4
 800315a:	f000 f8bd 	bl	80032d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3301      	adds	r3, #1
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <_cbSendTaskList+0x8c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	d3c6      	bcc.n	80030fc <_cbSendTaskList+0xc>
  }
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003178:	20012e04 	.word	0x20012e04
 800317c:	20012ea4 	.word	0x20012ea4

08003180 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003188:	f7fe fa6c 	bl	8001664 <xTaskGetTickCountFromISR>
 800318c:	4603      	mov	r3, r0
 800318e:	2200      	movs	r2, #0
 8003190:	469a      	mov	sl, r3
 8003192:	4693      	mov	fp, r2
 8003194:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	f04f 0a00 	mov.w	sl, #0
 80031a4:	f04f 0b00 	mov.w	fp, #0
 80031a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80031ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80031b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80031b4:	4652      	mov	r2, sl
 80031b6:	465b      	mov	r3, fp
 80031b8:	1a14      	subs	r4, r2, r0
 80031ba:	eb63 0501 	sbc.w	r5, r3, r1
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	00ab      	lsls	r3, r5, #2
 80031c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80031cc:	00a2      	lsls	r2, r4, #2
 80031ce:	4614      	mov	r4, r2
 80031d0:	461d      	mov	r5, r3
 80031d2:	eb14 0800 	adds.w	r8, r4, r0
 80031d6:	eb45 0901 	adc.w	r9, r5, r1
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ee:	4690      	mov	r8, r2
 80031f0:	4699      	mov	r9, r3
 80031f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80031f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003208 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003216:	2205      	movs	r2, #5
 8003218:	492b      	ldr	r1, [pc, #172]	; (80032c8 <SYSVIEW_AddTask+0xc0>)
 800321a:	68b8      	ldr	r0, [r7, #8]
 800321c:	f002 fbbe 	bl	800599c <memcmp>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d04b      	beq.n	80032be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b07      	cmp	r3, #7
 800322c:	d903      	bls.n	8003236 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800322e:	4828      	ldr	r0, [pc, #160]	; (80032d0 <SYSVIEW_AddTask+0xc8>)
 8003230:	f001 ff44 	bl	80050bc <SEGGER_SYSVIEW_Warn>
    return;
 8003234:	e044      	b.n	80032c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003236:	4b25      	ldr	r3, [pc, #148]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4926      	ldr	r1, [pc, #152]	; (80032d4 <SYSVIEW_AddTask+0xcc>)
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4921      	ldr	r1, [pc, #132]	; (80032d4 <SYSVIEW_AddTask+0xcc>)
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3304      	adds	r3, #4
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	491b      	ldr	r1, [pc, #108]	; (80032d4 <SYSVIEW_AddTask+0xcc>)
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	3308      	adds	r3, #8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4916      	ldr	r1, [pc, #88]	; (80032d4 <SYSVIEW_AddTask+0xcc>)
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	330c      	adds	r3, #12
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4910      	ldr	r1, [pc, #64]	; (80032d4 <SYSVIEW_AddTask+0xcc>)
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3310      	adds	r3, #16
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	4a08      	ldr	r2, [pc, #32]	; (80032cc <SYSVIEW_AddTask+0xc4>)
 80032aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f80e 	bl	80032d8 <SYSVIEW_SendTaskInfo>
 80032bc:	e000      	b.n	80032c0 <SYSVIEW_AddTask+0xb8>
    return;
 80032be:	bf00      	nop

}
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08005a90 	.word	0x08005a90
 80032cc:	20012ea4 	.word	0x20012ea4
 80032d0:	08005a98 	.word	0x08005a98
 80032d4:	20012e04 	.word	0x20012e04

080032d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	2214      	movs	r2, #20
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f002 fb72 	bl	80059d8 <memset>
  TaskInfo.TaskID     = TaskID;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4618      	mov	r0, r3
 800330e:	f001 fadf 	bl	80048d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80033b2:	f001 fedf 	bl	8005174 <SEGGER_SYSVIEW_IsStarted>
 80033b6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80033be:	f001 f90b 	bl	80045d8 <SEGGER_SYSVIEW_Start>
  }
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <_cbOnUARTRx+0x3c>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d806      	bhi.n	80033ec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <_cbOnUARTRx+0x3c>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <_cbOnUARTRx+0x3c>)
 80033e8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80033ea:	e009      	b.n	8003400 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80033ec:	f7ff ffde 	bl	80033ac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <_cbOnUARTRx+0x3c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	2201      	movs	r2, #1
 80033fa:	4619      	mov	r1, r3
 80033fc:	f000 fb9a 	bl	8003b34 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003400:	bf00      	nop
}
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2000000c 	.word	0x2000000c

0800340c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <_cbOnUARTTx+0x5c>)
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d80f      	bhi.n	800343c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <_cbOnUARTTx+0x5c>)
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	461a      	mov	r2, r3
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <_cbOnUARTTx+0x60>)
 8003424:	5c9a      	ldrb	r2, [r3, r2]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <_cbOnUARTTx+0x5c>)
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	3301      	adds	r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <_cbOnUARTTx+0x5c>)
 8003434:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
    goto Done;
 800343a:	e00f      	b.n	800345c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <_cbOnUARTTx+0x5c>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fa19 	bl	800387c <SEGGER_RTT_ReadUpBufferNoLock>
 800344a:	4603      	mov	r3, r0
 800344c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	da02      	bge.n	800345a <_cbOnUARTTx+0x4e>
    r = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e000      	b.n	800345c <_cbOnUARTTx+0x50>
  }
Done:
 800345a:	bf00      	nop
  return r;
 800345c:	68fb      	ldr	r3, [r7, #12]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	2000000c 	.word	0x2000000c
 800346c:	08005b10 	.word	0x08005b10

08003470 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <SEGGER_UART_init+0x1c>)
 800347a:	4905      	ldr	r1, [pc, #20]	; (8003490 <SEGGER_UART_init+0x20>)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f863 	bl	8003548 <HIF_UART_Init>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	080033cd 	.word	0x080033cd
 8003490:	0800340d 	.word	0x0800340d

08003494 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <USART2_IRQHandler+0x80>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d011      	beq.n	80034ce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <USART2_IRQHandler+0x84>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 030b 	and.w	r3, r3, #11
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <USART2_IRQHandler+0x88>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80034c4:	4b15      	ldr	r3, [pc, #84]	; (800351c <USART2_IRQHandler+0x88>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	79fa      	ldrb	r2, [r7, #7]
 80034ca:	4610      	mov	r0, r2
 80034cc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01a      	beq.n	800350e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <USART2_IRQHandler+0x8c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <USART2_IRQHandler+0x8c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	1dfa      	adds	r2, r7, #7
 80034e6:	4610      	mov	r0, r2
 80034e8:	4798      	blx	r3
 80034ea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <USART2_IRQHandler+0x90>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <USART2_IRQHandler+0x90>)
 80034f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e006      	b.n	800350e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <USART2_IRQHandler+0x80>)
 8003502:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003504:	79fa      	ldrb	r2, [r7, #7]
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <USART2_IRQHandler+0x84>)
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e000      	b.n	800350e <USART2_IRQHandler+0x7a>
      return;
 800350c:	bf00      	nop
    }
  }
}
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40004400 	.word	0x40004400
 8003518:	40004404 	.word	0x40004404
 800351c:	20012ea8 	.word	0x20012ea8
 8003520:	20012eac 	.word	0x20012eac
 8003524:	4000440c 	.word	0x4000440c

08003528 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	4000440c 	.word	0x4000440c

08003548 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <HIF_UART_Init+0xc8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2d      	ldr	r2, [pc, #180]	; (8003610 <HIF_UART_Init+0xc8>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HIF_UART_Init+0xcc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <HIF_UART_Init+0xcc>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HIF_UART_Init+0xd0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003578:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003580:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003582:	4a25      	ldr	r2, [pc, #148]	; (8003618 <HIF_UART_Init+0xd0>)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HIF_UART_Init+0xd4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003594:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800359c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HIF_UART_Init+0xd4>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80035a4:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HIF_UART_Init+0xd8>)
 80035a6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80035aa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HIF_UART_Init+0xdc>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HIF_UART_Init+0xe0>)
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80035be:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HIF_UART_Init+0xe4>)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d302      	bcc.n	80035de <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80035d8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80035dc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HIF_UART_Init+0xe8>)
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80035ee:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HIF_UART_Init+0xec>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80035f4:	4a10      	ldr	r2, [pc, #64]	; (8003638 <HIF_UART_Init+0xf0>)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80035fa:	2106      	movs	r1, #6
 80035fc:	2026      	movs	r0, #38	; 0x26
 80035fe:	f7ff feab 	bl	8003358 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003602:	2026      	movs	r0, #38	; 0x26
 8003604:	f7ff fe8a 	bl	800331c <__NVIC_EnableIRQ>
}
 8003608:	bf00      	nop
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023840 	.word	0x40023840
 8003614:	40023830 	.word	0x40023830
 8003618:	40020020 	.word	0x40020020
 800361c:	40020000 	.word	0x40020000
 8003620:	4000440c 	.word	0x4000440c
 8003624:	40004410 	.word	0x40004410
 8003628:	40004414 	.word	0x40004414
 800362c:	05f5e100 	.word	0x05f5e100
 8003630:	40004408 	.word	0x40004408
 8003634:	20012ea8 	.word	0x20012ea8
 8003638:	20012eac 	.word	0x20012eac

0800363c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <_DoInit+0x98>)
 8003644:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2203      	movs	r2, #3
 800364a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2203      	movs	r2, #3
 8003650:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <_DoInit+0x9c>)
 8003656:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a20      	ldr	r2, [pc, #128]	; (80036dc <_DoInit+0xa0>)
 800365c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003664:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <_DoInit+0x9c>)
 800367c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <_DoInit+0xa4>)
 8003682:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2210      	movs	r2, #16
 8003688:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3307      	adds	r3, #7
 80036a0:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <_DoInit+0xa8>)
 80036a2:	6810      	ldr	r0, [r2, #0]
 80036a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80036a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <_DoInit+0xac>)
 80036ae:	6810      	ldr	r0, [r2, #0]
 80036b0:	6018      	str	r0, [r3, #0]
 80036b2:	8891      	ldrh	r1, [r2, #4]
 80036b4:	7992      	ldrb	r2, [r2, #6]
 80036b6:	8099      	strh	r1, [r3, #4]
 80036b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80036ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80036c4:	f3bf 8f5f 	dmb	sy
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	20012eb0 	.word	0x20012eb0
 80036d8:	08005ae8 	.word	0x08005ae8
 80036dc:	20012f58 	.word	0x20012f58
 80036e0:	20013358 	.word	0x20013358
 80036e4:	08005af4 	.word	0x08005af4
 80036e8:	08005af8 	.word	0x08005af8

080036ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80036f8:	2300      	movs	r3, #0
 80036fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	429a      	cmp	r2, r3
 800370e:	d905      	bls.n	800371c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e007      	b.n	800372c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	69b9      	ldr	r1, [r7, #24]
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	1acb      	subs	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	3b01      	subs	r3, #1
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	4293      	cmp	r3, r2
 8003738:	bf28      	it	cs
 800373a:	4613      	movcs	r3, r2
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4293      	cmp	r3, r2
 8003744:	bf28      	it	cs
 8003746:	4613      	movcs	r3, r2
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	6978      	ldr	r0, [r7, #20]
 800375a:	f002 f92f 	bl	80059bc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	4413      	add	r3, r2
 8003764:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	4413      	add	r3, r2
 800376c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	4413      	add	r3, r2
 800377c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	429a      	cmp	r2, r3
 8003786:	d101      	bne.n	800378c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800378c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1b2      	bne.n	8003702 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800379c:	6a3b      	ldr	r3, [r7, #32]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3728      	adds	r7, #40	; 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d911      	bls.n	80037ee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	6938      	ldr	r0, [r7, #16]
 80037da:	f002 f8ef 	bl	80059bc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80037de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	441a      	add	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80037ec:	e01f      	b.n	800382e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	6938      	ldr	r0, [r7, #16]
 8003802:	f002 f8db 	bl	80059bc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4413      	add	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4619      	mov	r1, r3
 800381e:	6938      	ldr	r0, [r7, #16]
 8003820:	f002 f8cc 	bl	80059bc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003824:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	60da      	str	r2, [r3, #12]
}
 800382e:	bf00      	nop
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003836:	b480      	push	{r7}
 8003838:	b087      	sub	sp, #28
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	429a      	cmp	r2, r3
 8003850:	d808      	bhi.n	8003864 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad2      	subs	r2, r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	3b01      	subs	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e004      	b.n	800386e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800386e:	697b      	ldr	r3, [r7, #20]
}
 8003870:	4618      	mov	r0, r3
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	; 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003888:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003896:	f7ff fed1 	bl	800363c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4a37      	ldr	r2, [pc, #220]	; (8003984 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80038a8:	4413      	add	r3, r2
 80038aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80038c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d92b      	bls.n	8003920 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4293      	cmp	r3, r2
 80038d8:	bf28      	it	cs
 80038da:	4613      	movcs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	4413      	add	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	6939      	ldr	r1, [r7, #16]
 80038ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ee:	f002 f865 	bl	80059bc <memcpy>
    NumBytesRead += NumBytesRem;
 80038f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4413      	add	r3, r2
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4413      	add	r3, r2
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800390a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4413      	add	r3, r2
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003918:	429a      	cmp	r2, r3
 800391a:	d101      	bne.n	8003920 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800391c:	2300      	movs	r3, #0
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4293      	cmp	r3, r2
 800392e:	bf28      	it	cs
 8003930:	4613      	movcs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d019      	beq.n	800396e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	4413      	add	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	6939      	ldr	r1, [r7, #16]
 8003948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800394a:	f002 f837 	bl	80059bc <memcpy>
    NumBytesRead += NumBytesRem;
 800394e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4413      	add	r3, r2
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003978:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800397c:	4618      	mov	r0, r3
 800397e:	3730      	adds	r7, #48	; 0x30
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20012eb0 	.word	0x20012eb0

08003988 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003994:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <SEGGER_RTT_ReadNoLock+0x108>)
 8003996:	623b      	str	r3, [r7, #32]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <SEGGER_RTT_ReadNoLock+0x1e>
 80039a2:	f7ff fe4b 	bl	800363c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	3360      	adds	r3, #96	; 0x60
 80039b2:	4a37      	ldr	r2, [pc, #220]	; (8003a90 <SEGGER_RTT_ReadNoLock+0x108>)
 80039b4:	4413      	add	r3, r2
 80039b6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80039cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d92b      	bls.n	8003a2c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	bf28      	it	cs
 80039e6:	4613      	movcs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	4413      	add	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	6939      	ldr	r1, [r7, #16]
 80039f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039fa:	f001 ffdf 	bl	80059bc <memcpy>
    NumBytesRead += NumBytesRem;
 80039fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4413      	add	r3, r2
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d101      	bne.n	8003a2c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	bf28      	it	cs
 8003a3c:	4613      	movcs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d019      	beq.n	8003a7a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	4413      	add	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	6939      	ldr	r1, [r7, #16]
 8003a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a56:	f001 ffb1 	bl	80059bc <memcpy>
    NumBytesRead += NumBytesRem;
 8003a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4413      	add	r3, r2
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3730      	adds	r7, #48	; 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20012eb0 	.word	0x20012eb0

08003a94 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	3360      	adds	r3, #96	; 0x60
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003ab2:	4413      	add	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d029      	beq.n	8003b12 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d82e      	bhi.n	8003b20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d013      	beq.n	8003af2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003aca:	e029      	b.n	8003b20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003acc:	6978      	ldr	r0, [r7, #20]
 8003ace:	f7ff feb2 	bl	8003836 <_GetAvailWriteSpace>
 8003ad2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d202      	bcs.n	8003ae2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003ae0:	e021      	b.n	8003b26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	69b9      	ldr	r1, [r7, #24]
 8003aea:	6978      	ldr	r0, [r7, #20]
 8003aec:	f7ff fe5b 	bl	80037a6 <_WriteNoCheck>
    break;
 8003af0:	e019      	b.n	8003b26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff fe9f 	bl	8003836 <_GetAvailWriteSpace>
 8003af8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4293      	cmp	r3, r2
 8003b00:	bf28      	it	cs
 8003b02:	4613      	movcs	r3, r2
 8003b04:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	6978      	ldr	r0, [r7, #20]
 8003b0c:	f7ff fe4b 	bl	80037a6 <_WriteNoCheck>
    break;
 8003b10:	e009      	b.n	8003b26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	69b9      	ldr	r1, [r7, #24]
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff fde8 	bl	80036ec <_WriteBlocking>
 8003b1c:	61f8      	str	r0, [r7, #28]
    break;
 8003b1e:	e002      	b.n	8003b26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]
    break;
 8003b24:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003b26:	69fb      	ldr	r3, [r7, #28]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20012eb0 	.word	0x20012eb0

08003b34 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003b4e:	f7ff fd75 	bl	800363c <_DoInit>
  SEGGER_RTT_LOCK();
 8003b52:	f3ef 8311 	mrs	r3, BASEPRI
 8003b56:	f04f 0120 	mov.w	r1, #32
 8003b5a:	f381 8811 	msr	BASEPRI, r1
 8003b5e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff ff95 	bl	8003a94 <SEGGER_RTT_WriteDownBufferNoLock>
 8003b6a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003b72:	697b      	ldr	r3, [r7, #20]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20012eb0 	.word	0x20012eb0

08003b80 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003b9c:	f7ff fd4e 	bl	800363c <_DoInit>
  SEGGER_RTT_LOCK();
 8003ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ba4:	f04f 0120 	mov.w	r1, #32
 8003ba8:	f381 8811 	msr	BASEPRI, r1
 8003bac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bae:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003bb0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003bb6:	6939      	ldr	r1, [r7, #16]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	dbeb      	blt.n	8003bb6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003bde:	e000      	b.n	8003be2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003be0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	da3f      	bge.n	8003c6c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003bec:	6939      	ldr	r1, [r7, #16]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003c00:	6939      	ldr	r1, [r7, #16]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	3304      	adds	r3, #4
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003c16:	6939      	ldr	r1, [r7, #16]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	3320      	adds	r3, #32
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003c2a:	6939      	ldr	r1, [r7, #16]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	440b      	add	r3, r1
 8003c38:	3328      	adds	r3, #40	; 0x28
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003c3e:	6939      	ldr	r1, [r7, #16]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	440b      	add	r3, r1
 8003c4c:	3324      	adds	r3, #36	; 0x24
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003c52:	6939      	ldr	r1, [r7, #16]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	440b      	add	r3, r1
 8003c60:	332c      	adds	r3, #44	; 0x2c
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c66:	f3bf 8f5f 	dmb	sy
 8003c6a:	e002      	b.n	8003c72 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c70:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003c78:	69fb      	ldr	r3, [r7, #28]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20012eb0 	.word	0x20012eb0

08003c88 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c96:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003ca4:	f7ff fcca 	bl	800363c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003caa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d24d      	bcs.n	8003d54 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8003cbc:	f04f 0120 	mov.w	r1, #32
 8003cc0:	f381 8811 	msr	BASEPRI, r1
 8003cc4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d031      	beq.n	8003d30 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003ccc:	6979      	ldr	r1, [r7, #20]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4413      	add	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	440b      	add	r3, r1
 8003cda:	3360      	adds	r3, #96	; 0x60
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003ce0:	6979      	ldr	r1, [r7, #20]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	3364      	adds	r3, #100	; 0x64
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003cf4:	6979      	ldr	r1, [r7, #20]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	3368      	adds	r3, #104	; 0x68
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003d08:	6979      	ldr	r1, [r7, #20]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	440b      	add	r3, r1
 8003d16:	3370      	adds	r3, #112	; 0x70
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	440b      	add	r3, r1
 8003d2a:	336c      	adds	r3, #108	; 0x6c
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3374      	adds	r3, #116	; 0x74
 8003d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d42:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d44:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e002      	b.n	8003d5a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d58:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20012eb0 	.word	0x20012eb0

08003d68 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003d78:	e002      	b.n	8003d80 <_EncodeStr+0x18>
    Len++;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f6      	bne.n	8003d7a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d901      	bls.n	8003d98 <_EncodeStr+0x30>
    Len = Limit;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d9c:	d806      	bhi.n	8003dac <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e011      	b.n	8003dd0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	60fa      	str	r2, [r7, #12]
 8003db2:	22ff      	movs	r2, #255	; 0xff
 8003db4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	60fa      	str	r2, [r7, #12]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	0a19      	lsrs	r1, r3, #8
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	60fa      	str	r2, [r7, #12]
 8003dcc:	b2ca      	uxtb	r2, r1
 8003dce:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003dd4:	e00a      	b.n	8003dec <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	1c53      	adds	r3, r2, #1
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1c59      	adds	r1, r3, #1
 8003de0:	60f9      	str	r1, [r7, #12]
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	701a      	strb	r2, [r3, #0]
    n++;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	3301      	adds	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d3f0      	bcc.n	8003dd6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003df4:	68fb      	ldr	r3, [r7, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e22:	4b36      	ldr	r3, [pc, #216]	; (8003efc <_HandleIncomingPacket+0xe0>)
 8003e24:	7e1b      	ldrb	r3, [r3, #24]
 8003e26:	4618      	mov	r0, r3
 8003e28:	1cfb      	adds	r3, r7, #3
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f7ff fdab 	bl	8003988 <SEGGER_RTT_ReadNoLock>
 8003e32:	4603      	mov	r3, r0
 8003e34:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dd54      	ble.n	8003ee6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d032      	beq.n	8003ea8 <_HandleIncomingPacket+0x8c>
 8003e42:	2b80      	cmp	r3, #128	; 0x80
 8003e44:	dc42      	bgt.n	8003ecc <_HandleIncomingPacket+0xb0>
 8003e46:	2b07      	cmp	r3, #7
 8003e48:	dc16      	bgt.n	8003e78 <_HandleIncomingPacket+0x5c>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	dd3e      	ble.n	8003ecc <_HandleIncomingPacket+0xb0>
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d83b      	bhi.n	8003ecc <_HandleIncomingPacket+0xb0>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <_HandleIncomingPacket+0x40>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e7f 	.word	0x08003e7f
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003e8b 	.word	0x08003e8b
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08003e9d 	.word	0x08003e9d
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7a:	d036      	beq.n	8003eea <_HandleIncomingPacket+0xce>
 8003e7c:	e026      	b.n	8003ecc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003e7e:	f000 fbab 	bl	80045d8 <SEGGER_SYSVIEW_Start>
      break;
 8003e82:	e037      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003e84:	f000 fc64 	bl	8004750 <SEGGER_SYSVIEW_Stop>
      break;
 8003e88:	e034      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003e8a:	f000 fe3d 	bl	8004b08 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003e8e:	e031      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003e90:	f000 fe02 	bl	8004a98 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003e94:	e02e      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003e96:	f000 fc81 	bl	800479c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003e9a:	e02b      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003e9c:	f001 f8d0 	bl	8005040 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ea0:	e028      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ea2:	f001 f8af 	bl	8005004 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003ea6:	e025      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <_HandleIncomingPacket+0xe0>)
 8003eaa:	7e1b      	ldrb	r3, [r3, #24]
 8003eac:	4618      	mov	r0, r3
 8003eae:	1cfb      	adds	r3, r7, #3
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7ff fd68 	bl	8003988 <SEGGER_RTT_ReadNoLock>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dd15      	ble.n	8003eee <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f81d 	bl	8004f04 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003eca:	e010      	b.n	8003eee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da0e      	bge.n	8003ef2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <_HandleIncomingPacket+0xe0>)
 8003ed6:	7e1b      	ldrb	r3, [r3, #24]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	1cfb      	adds	r3, r7, #3
 8003edc:	2201      	movs	r2, #1
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f7ff fd52 	bl	8003988 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003ee4:	e005      	b.n	8003ef2 <_HandleIncomingPacket+0xd6>
    }
  }
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
      break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <_HandleIncomingPacket+0xd8>
      break;
 8003ef2:	bf00      	nop
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20014370 	.word	0x20014370

08003f00 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	; 0x30
 8003f04:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f06:	2301      	movs	r3, #1
 8003f08:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	4b32      	ldr	r3, [pc, #200]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1a:	e00b      	b.n	8003f34 <_TrySendOverflowPacket+0x34>
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	1c59      	adds	r1, r3, #1
 8003f24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	09db      	lsrs	r3, r3, #7
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	2b7f      	cmp	r3, #127	; 0x7f
 8003f38:	d8f0      	bhi.n	8003f1c <_TrySendOverflowPacket+0x1c>
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f4a:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <_TrySendOverflowPacket+0xe4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	e00b      	b.n	8003f7c <_TrySendOverflowPacket+0x7c>
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	6279      	str	r1, [r7, #36]	; 0x24
 8003f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	09db      	lsrs	r3, r3, #7
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f80:	d8f0      	bhi.n	8003f64 <_TrySendOverflowPacket+0x64>
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	627a      	str	r2, [r7, #36]	; 0x24
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003f94:	785b      	ldrb	r3, [r3, #1]
 8003f96:	4618      	mov	r0, r3
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	1d3b      	adds	r3, r7, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7fc f91c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003fac:	f7ff fabc 	bl	8003528 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e004      	b.n	8003fd4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	4a03      	ldr	r2, [pc, #12]	; (8003fe0 <_TrySendOverflowPacket+0xe0>)
 8003fd2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003fd4:	693b      	ldr	r3, [r7, #16]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3730      	adds	r7, #48	; 0x30
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20014370 	.word	0x20014370
 8003fe4:	e0001004 	.word	0xe0001004

08003fe8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003ff4:	4b6d      	ldr	r3, [pc, #436]	; (80041ac <_SendPacket+0x1c4>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d010      	beq.n	800401e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <_SendPacket+0x1c4>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80a5 	beq.w	8004150 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004006:	4b69      	ldr	r3, [pc, #420]	; (80041ac <_SendPacket+0x1c4>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d109      	bne.n	8004022 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800400e:	f7ff ff77 	bl	8003f00 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004012:	4b66      	ldr	r3, [pc, #408]	; (80041ac <_SendPacket+0x1c4>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	f040 809c 	bne.w	8004154 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800401c:	e001      	b.n	8004022 <_SendPacket+0x3a>
    goto Send;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <_SendPacket+0x3c>
Send:
 8004022:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b1f      	cmp	r3, #31
 8004028:	d809      	bhi.n	800403e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800402a:	4b60      	ldr	r3, [pc, #384]	; (80041ac <_SendPacket+0x1c4>)
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 808d 	bne.w	8004158 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b17      	cmp	r3, #23
 8004042:	d807      	bhi.n	8004054 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e03d      	b.n	80040d0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b7f      	cmp	r3, #127	; 0x7f
 8004060:	d912      	bls.n	8004088 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	09da      	lsrs	r2, r3, #7
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b01      	subs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	3a01      	subs	r2, #1
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	e006      	b.n	8004096 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3b01      	subs	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b7f      	cmp	r3, #127	; 0x7f
 800409a:	d912      	bls.n	80040c2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	09da      	lsrs	r2, r3, #7
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	3a01      	subs	r2, #1
 80040b4:	60fa      	str	r2, [r7, #12]
 80040b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e006      	b.n	80040d0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80040d0:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <_SendPacket+0x1c8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80040d6:	4b35      	ldr	r3, [pc, #212]	; (80041ac <_SendPacket+0x1c4>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	e00b      	b.n	8004102 <_SendPacket+0x11a>
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	6279      	str	r1, [r7, #36]	; 0x24
 80040f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	09db      	lsrs	r3, r3, #7
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	2b7f      	cmp	r3, #127	; 0x7f
 8004106:	d8f0      	bhi.n	80040ea <_SendPacket+0x102>
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	627a      	str	r2, [r7, #36]	; 0x24
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004118:	4b24      	ldr	r3, [pc, #144]	; (80041ac <_SendPacket+0x1c4>)
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	4618      	mov	r0, r3
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	461a      	mov	r2, r3
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	f7fc f85a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800412c:	4603      	mov	r3, r0
 800412e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004130:	f7ff f9fa 	bl	8003528 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <_SendPacket+0x1c4>)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	60d3      	str	r3, [r2, #12]
 8004140:	e00b      	b.n	800415a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004142:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <_SendPacket+0x1c4>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <_SendPacket+0x1c4>)
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e004      	b.n	800415a <_SendPacket+0x172>
    goto SendDone;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <_SendPacket+0x172>
      goto SendDone;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <_SendPacket+0x172>
      goto SendDone;
 8004158:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800415a:	4b14      	ldr	r3, [pc, #80]	; (80041ac <_SendPacket+0x1c4>)
 800415c:	7e1b      	ldrb	r3, [r3, #24]
 800415e:	4619      	mov	r1, r3
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <_SendPacket+0x1cc>)
 8004162:	460b      	mov	r3, r1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	440b      	add	r3, r1
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	336c      	adds	r3, #108	; 0x6c
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <_SendPacket+0x1c4>)
 8004172:	7e1b      	ldrb	r3, [r3, #24]
 8004174:	4618      	mov	r0, r3
 8004176:	490f      	ldr	r1, [pc, #60]	; (80041b4 <_SendPacket+0x1cc>)
 8004178:	4603      	mov	r3, r0
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4403      	add	r3, r0
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	3370      	adds	r3, #112	; 0x70
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d00b      	beq.n	80041a2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <_SendPacket+0x1c4>)
 800418c:	789b      	ldrb	r3, [r3, #2]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d107      	bne.n	80041a2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <_SendPacket+0x1c4>)
 8004194:	2201      	movs	r2, #1
 8004196:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004198:	f7ff fe40 	bl	8003e1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <_SendPacket+0x1c4>)
 800419e:	2200      	movs	r2, #0
 80041a0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041a2:	bf00      	nop
 80041a4:	3728      	adds	r7, #40	; 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20014370 	.word	0x20014370
 80041b0:	e0001004 	.word	0xe0001004
 80041b4:	20012eb0 	.word	0x20012eb0

080041b8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80041c6:	2300      	movs	r3, #0
 80041c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041cc:	4917      	ldr	r1, [pc, #92]	; (800422c <SEGGER_SYSVIEW_Init+0x74>)
 80041ce:	4818      	ldr	r0, [pc, #96]	; (8004230 <SEGGER_SYSVIEW_Init+0x78>)
 80041d0:	f7ff fcd6 	bl	8003b80 <SEGGER_RTT_AllocUpBuffer>
 80041d4:	4603      	mov	r3, r0
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 80041da:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80041dc:	4b15      	ldr	r3, [pc, #84]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 80041de:	785a      	ldrb	r2, [r3, #1]
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 80041e2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80041e4:	4b13      	ldr	r3, [pc, #76]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 80041e6:	7e1b      	ldrb	r3, [r3, #24]
 80041e8:	4618      	mov	r0, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	2308      	movs	r3, #8
 80041f0:	4a11      	ldr	r2, [pc, #68]	; (8004238 <SEGGER_SYSVIEW_Init+0x80>)
 80041f2:	490f      	ldr	r1, [pc, #60]	; (8004230 <SEGGER_SYSVIEW_Init+0x78>)
 80041f4:	f7ff fd48 	bl	8003c88 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <SEGGER_SYSVIEW_Init+0x84>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 8004204:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004206:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800420c:	4a09      	ldr	r2, [pc, #36]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004212:	4a08      	ldr	r2, [pc, #32]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004218:	4a06      	ldr	r2, [pc, #24]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <SEGGER_SYSVIEW_Init+0x7c>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20013368 	.word	0x20013368
 8004230:	08005b00 	.word	0x08005b00
 8004234:	20014370 	.word	0x20014370
 8004238:	20014368 	.word	0x20014368
 800423c:	e0001004 	.word	0xe0001004

08004240 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6113      	str	r3, [r2, #16]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20014370 	.word	0x20014370

08004260 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004268:	f3ef 8311 	mrs	r3, BASEPRI
 800426c:	f04f 0120 	mov.w	r1, #32
 8004270:	f381 8811 	msr	BASEPRI, r1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	4808      	ldr	r0, [pc, #32]	; (8004298 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004278:	f7ff fdc3 	bl	8003e02 <_PreparePacket>
 800427c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68b8      	ldr	r0, [r7, #8]
 8004284:	f7ff feb0 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f383 8811 	msr	BASEPRI, r3
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200143a0 	.word	0x200143a0

0800429c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042a6:	f3ef 8311 	mrs	r3, BASEPRI
 80042aa:	f04f 0120 	mov.w	r1, #32
 80042ae:	f381 8811 	msr	BASEPRI, r1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	4816      	ldr	r0, [pc, #88]	; (8004310 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80042b6:	f7ff fda4 	bl	8003e02 <_PreparePacket>
 80042ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e00b      	b.n	80042e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	61f9      	str	r1, [r7, #28]
 80042d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	09db      	lsrs	r3, r3, #7
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b7f      	cmp	r3, #127	; 0x7f
 80042e6:	d8f0      	bhi.n	80042ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	61fa      	str	r2, [r7, #28]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	6938      	ldr	r0, [r7, #16]
 80042fe:	f7ff fe73 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f383 8811 	msr	BASEPRI, r3
}
 8004308:	bf00      	nop
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	200143a0 	.word	0x200143a0

08004314 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	; 0x30
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004320:	f3ef 8311 	mrs	r3, BASEPRI
 8004324:	f04f 0120 	mov.w	r1, #32
 8004328:	f381 8811 	msr	BASEPRI, r1
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	4825      	ldr	r0, [pc, #148]	; (80043c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004330:	f7ff fd67 	bl	8003e02 <_PreparePacket>
 8004334:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
 8004342:	e00b      	b.n	800435c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	b2da      	uxtb	r2, r3
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800434e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	09db      	lsrs	r3, r3, #7
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2b7f      	cmp	r3, #127	; 0x7f
 8004360:	d8f0      	bhi.n	8004344 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	e00b      	b.n	8004394 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	6279      	str	r1, [r7, #36]	; 0x24
 8004386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	09db      	lsrs	r3, r3, #7
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	2b7f      	cmp	r3, #127	; 0x7f
 8004398:	d8f0      	bhi.n	800437c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	627a      	str	r2, [r7, #36]	; 0x24
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	6979      	ldr	r1, [r7, #20]
 80043ae:	69b8      	ldr	r0, [r7, #24]
 80043b0:	f7ff fe1a 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f383 8811 	msr	BASEPRI, r3
}
 80043ba:	bf00      	nop
 80043bc:	3730      	adds	r7, #48	; 0x30
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200143a0 	.word	0x200143a0

080043c8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	; 0x38
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80043d6:	f3ef 8311 	mrs	r3, BASEPRI
 80043da:	f04f 0120 	mov.w	r1, #32
 80043de:	f381 8811 	msr	BASEPRI, r1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	4832      	ldr	r0, [pc, #200]	; (80044b0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80043e6:	f7ff fd0c 	bl	8003e02 <_PreparePacket>
 80043ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	633b      	str	r3, [r7, #48]	; 0x30
 80043f8:	e00b      	b.n	8004412 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	1c59      	adds	r1, r3, #1
 8004402:	6379      	str	r1, [r7, #52]	; 0x34
 8004404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	633b      	str	r3, [r7, #48]	; 0x30
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2b7f      	cmp	r3, #127	; 0x7f
 8004416:	d8f0      	bhi.n	80043fa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	637a      	str	r2, [r7, #52]	; 0x34
 800441e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004430:	e00b      	b.n	800444a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	b2da      	uxtb	r2, r3
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	1c59      	adds	r1, r3, #1
 800443a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800443c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	09db      	lsrs	r3, r3, #7
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	2b7f      	cmp	r3, #127	; 0x7f
 800444e:	d8f0      	bhi.n	8004432 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	e00b      	b.n	8004482 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	6279      	str	r1, [r7, #36]	; 0x24
 8004474:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	09db      	lsrs	r3, r3, #7
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b7f      	cmp	r3, #127	; 0x7f
 8004486:	d8f0      	bhi.n	800446a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	627a      	str	r2, [r7, #36]	; 0x24
 800448e:	6a3a      	ldr	r2, [r7, #32]
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	6979      	ldr	r1, [r7, #20]
 800449c:	69b8      	ldr	r0, [r7, #24]
 800449e:	f7ff fda3 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f383 8811 	msr	BASEPRI, r3
}
 80044a8:	bf00      	nop
 80044aa:	3738      	adds	r7, #56	; 0x38
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	200143a0 	.word	0x200143a0

080044b4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b090      	sub	sp, #64	; 0x40
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80044c2:	f3ef 8311 	mrs	r3, BASEPRI
 80044c6:	f04f 0120 	mov.w	r1, #32
 80044ca:	f381 8811 	msr	BASEPRI, r1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	4840      	ldr	r0, [pc, #256]	; (80045d4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80044d2:	f7ff fc96 	bl	8003e02 <_PreparePacket>
 80044d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e4:	e00b      	b.n	80044fe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	1c59      	adds	r1, r3, #1
 80044ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80044f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	09db      	lsrs	r3, r3, #7
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b7f      	cmp	r3, #127	; 0x7f
 8004502:	d8f0      	bhi.n	80044e6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	63fa      	str	r2, [r7, #60]	; 0x3c
 800450a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
 800451c:	e00b      	b.n	8004536 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	b2da      	uxtb	r2, r3
 8004522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004524:	1c59      	adds	r1, r3, #1
 8004526:	6379      	str	r1, [r7, #52]	; 0x34
 8004528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	09db      	lsrs	r3, r3, #7
 8004534:	633b      	str	r3, [r7, #48]	; 0x30
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2b7f      	cmp	r3, #127	; 0x7f
 800453a:	d8f0      	bhi.n	800451e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	637a      	str	r2, [r7, #52]	; 0x34
 8004542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
 8004554:	e00b      	b.n	800456e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	b2da      	uxtb	r2, r3
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	1c59      	adds	r1, r3, #1
 800455e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	09db      	lsrs	r3, r3, #7
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2b7f      	cmp	r3, #127	; 0x7f
 8004572:	d8f0      	bhi.n	8004556 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800457a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	e00b      	b.n	80045a6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1c59      	adds	r1, r3, #1
 8004596:	6279      	str	r1, [r7, #36]	; 0x24
 8004598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	09db      	lsrs	r3, r3, #7
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	2b7f      	cmp	r3, #127	; 0x7f
 80045aa:	d8f0      	bhi.n	800458e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	627a      	str	r2, [r7, #36]	; 0x24
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	6979      	ldr	r1, [r7, #20]
 80045c0:	69b8      	ldr	r0, [r7, #24]
 80045c2:	f7ff fd11 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f383 8811 	msr	BASEPRI, r3
}
 80045cc:	bf00      	nop
 80045ce:	3740      	adds	r7, #64	; 0x40
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200143a0 	.word	0x200143a0

080045d8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08c      	sub	sp, #48	; 0x30
 80045dc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80045de:	4b59      	ldr	r3, [pc, #356]	; (8004744 <SEGGER_SYSVIEW_Start+0x16c>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80045e4:	f3ef 8311 	mrs	r3, BASEPRI
 80045e8:	f04f 0120 	mov.w	r1, #32
 80045ec:	f381 8811 	msr	BASEPRI, r1
 80045f0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80045f2:	4b54      	ldr	r3, [pc, #336]	; (8004744 <SEGGER_SYSVIEW_Start+0x16c>)
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	220a      	movs	r2, #10
 80045f8:	4953      	ldr	r1, [pc, #332]	; (8004748 <SEGGER_SYSVIEW_Start+0x170>)
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb fdf0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004606:	f7fe ff8f 	bl	8003528 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800460a:	200a      	movs	r0, #10
 800460c:	f7ff fe28 	bl	8004260 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004610:	f3ef 8311 	mrs	r3, BASEPRI
 8004614:	f04f 0120 	mov.w	r1, #32
 8004618:	f381 8811 	msr	BASEPRI, r1
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	484b      	ldr	r0, [pc, #300]	; (800474c <SEGGER_SYSVIEW_Start+0x174>)
 8004620:	f7ff fbef 	bl	8003e02 <_PreparePacket>
 8004624:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800462e:	4b45      	ldr	r3, [pc, #276]	; (8004744 <SEGGER_SYSVIEW_Start+0x16c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
 8004634:	e00b      	b.n	800464e <SEGGER_SYSVIEW_Start+0x76>
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	09db      	lsrs	r3, r3, #7
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	2b7f      	cmp	r3, #127	; 0x7f
 8004652:	d8f0      	bhi.n	8004636 <SEGGER_SYSVIEW_Start+0x5e>
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	62fa      	str	r2, [r7, #44]	; 0x2c
 800465a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <SEGGER_SYSVIEW_Start+0x16c>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	623b      	str	r3, [r7, #32]
 800466e:	e00b      	b.n	8004688 <SEGGER_SYSVIEW_Start+0xb0>
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	1c59      	adds	r1, r3, #1
 8004678:	6279      	str	r1, [r7, #36]	; 0x24
 800467a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	09db      	lsrs	r3, r3, #7
 8004686:	623b      	str	r3, [r7, #32]
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2b7f      	cmp	r3, #127	; 0x7f
 800468c:	d8f0      	bhi.n	8004670 <SEGGER_SYSVIEW_Start+0x98>
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	627a      	str	r2, [r7, #36]	; 0x24
 8004694:	6a3a      	ldr	r2, [r7, #32]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	4b28      	ldr	r3, [pc, #160]	; (8004744 <SEGGER_SYSVIEW_Start+0x16c>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e00b      	b.n	80046c2 <SEGGER_SYSVIEW_Start+0xea>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	1c59      	adds	r1, r3, #1
 80046b2:	61f9      	str	r1, [r7, #28]
 80046b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	09db      	lsrs	r3, r3, #7
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b7f      	cmp	r3, #127	; 0x7f
 80046c6:	d8f0      	bhi.n	80046aa <SEGGER_SYSVIEW_Start+0xd2>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e00b      	b.n	80046fa <SEGGER_SYSVIEW_Start+0x122>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	1c59      	adds	r1, r3, #1
 80046ea:	6179      	str	r1, [r7, #20]
 80046ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	09db      	lsrs	r3, r3, #7
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b7f      	cmp	r3, #127	; 0x7f
 80046fe:	d8f0      	bhi.n	80046e2 <SEGGER_SYSVIEW_Start+0x10a>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	617a      	str	r2, [r7, #20]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004710:	2218      	movs	r2, #24
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fc67 	bl	8003fe8 <_SendPacket>
      RECORD_END();
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <SEGGER_SYSVIEW_Start+0x16c>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <SEGGER_SYSVIEW_Start+0x16c>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800472e:	f000 f9eb 	bl	8004b08 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004732:	f000 f9b1 	bl	8004a98 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004736:	f000 fc83 	bl	8005040 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800473a:	bf00      	nop
 800473c:	3730      	adds	r7, #48	; 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20014370 	.word	0x20014370
 8004748:	08005b14 	.word	0x08005b14
 800474c:	200143a0 	.word	0x200143a0

08004750 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004756:	f3ef 8311 	mrs	r3, BASEPRI
 800475a:	f04f 0120 	mov.w	r1, #32
 800475e:	f381 8811 	msr	BASEPRI, r1
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	480b      	ldr	r0, [pc, #44]	; (8004794 <SEGGER_SYSVIEW_Stop+0x44>)
 8004766:	f7ff fb4c 	bl	8003e02 <_PreparePacket>
 800476a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <SEGGER_SYSVIEW_Stop+0x48>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004774:	220b      	movs	r2, #11
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	6838      	ldr	r0, [r7, #0]
 800477a:	f7ff fc35 	bl	8003fe8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <SEGGER_SYSVIEW_Stop+0x48>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f383 8811 	msr	BASEPRI, r3
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200143a0 	.word	0x200143a0
 8004798:	20014370 	.word	0x20014370

0800479c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b08c      	sub	sp, #48	; 0x30
 80047a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80047a2:	f3ef 8311 	mrs	r3, BASEPRI
 80047a6:	f04f 0120 	mov.w	r1, #32
 80047aa:	f381 8811 	msr	BASEPRI, r1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	4845      	ldr	r0, [pc, #276]	; (80048c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80047b2:	f7ff fb26 	bl	8003e02 <_PreparePacket>
 80047b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c0:	4b42      	ldr	r3, [pc, #264]	; (80048cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c6:	e00b      	b.n	80047e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	1c59      	adds	r1, r3, #1
 80047d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	09db      	lsrs	r3, r3, #7
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	2b7f      	cmp	r3, #127	; 0x7f
 80047e4:	d8f0      	bhi.n	80047c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	4b34      	ldr	r3, [pc, #208]	; (80048cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	e00b      	b.n	800481a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	1c59      	adds	r1, r3, #1
 800480a:	6279      	str	r1, [r7, #36]	; 0x24
 800480c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	09db      	lsrs	r3, r3, #7
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	2b7f      	cmp	r3, #127	; 0x7f
 800481e:	d8f0      	bhi.n	8004802 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	627a      	str	r2, [r7, #36]	; 0x24
 8004826:	6a3a      	ldr	r2, [r7, #32]
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e00b      	b.n	8004854 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	61f9      	str	r1, [r7, #28]
 8004846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b7f      	cmp	r3, #127	; 0x7f
 8004858:	d8f0      	bhi.n	800483c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	61fa      	str	r2, [r7, #28]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	e00b      	b.n	800488c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	6179      	str	r1, [r7, #20]
 800487e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	09db      	lsrs	r3, r3, #7
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b7f      	cmp	r3, #127	; 0x7f
 8004890:	d8f0      	bhi.n	8004874 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	617a      	str	r2, [r7, #20]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80048a2:	2218      	movs	r2, #24
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	68b8      	ldr	r0, [r7, #8]
 80048a8:	f7ff fb9e 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	4798      	blx	r3
  }
}
 80048c0:	bf00      	nop
 80048c2:	3730      	adds	r7, #48	; 0x30
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	200143a0 	.word	0x200143a0
 80048cc:	20014370 	.word	0x20014370

080048d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b092      	sub	sp, #72	; 0x48
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80048d8:	f3ef 8311 	mrs	r3, BASEPRI
 80048dc:	f04f 0120 	mov.w	r1, #32
 80048e0:	f381 8811 	msr	BASEPRI, r1
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	486a      	ldr	r0, [pc, #424]	; (8004a90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80048e8:	f7ff fa8b 	bl	8003e02 <_PreparePacket>
 80048ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b66      	ldr	r3, [pc, #408]	; (8004a94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	643b      	str	r3, [r7, #64]	; 0x40
 8004902:	e00b      	b.n	800491c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004906:	b2da      	uxtb	r2, r3
 8004908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	6479      	str	r1, [r7, #68]	; 0x44
 800490e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004918:	09db      	lsrs	r3, r3, #7
 800491a:	643b      	str	r3, [r7, #64]	; 0x40
 800491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491e:	2b7f      	cmp	r3, #127	; 0x7f
 8004920:	d8f0      	bhi.n	8004904 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	647a      	str	r2, [r7, #68]	; 0x44
 8004928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004930:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	63bb      	str	r3, [r7, #56]	; 0x38
 800493c:	e00b      	b.n	8004956 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004944:	1c59      	adds	r1, r3, #1
 8004946:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	09db      	lsrs	r3, r3, #7
 8004954:	63bb      	str	r3, [r7, #56]	; 0x38
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2b7f      	cmp	r3, #127	; 0x7f
 800495a:	d8f0      	bhi.n	800493e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800495c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	4619      	mov	r1, r3
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff f9f7 	bl	8003d68 <_EncodeStr>
 800497a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800497c:	2209      	movs	r2, #9
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	6938      	ldr	r0, [r7, #16]
 8004982:	f7ff fb31 	bl	8003fe8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b40      	ldr	r3, [pc, #256]	; (8004a94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	633b      	str	r3, [r7, #48]	; 0x30
 800499a:	e00b      	b.n	80049b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	1c59      	adds	r1, r3, #1
 80049a4:	6379      	str	r1, [r7, #52]	; 0x34
 80049a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	09db      	lsrs	r3, r3, #7
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	2b7f      	cmp	r3, #127	; 0x7f
 80049b8:	d8f0      	bhi.n	800499c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	637a      	str	r2, [r7, #52]	; 0x34
 80049c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d4:	e00b      	b.n	80049ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	1c59      	adds	r1, r3, #1
 80049de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	09db      	lsrs	r3, r3, #7
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	2b7f      	cmp	r3, #127	; 0x7f
 80049f2:	d8f0      	bhi.n	80049d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	623b      	str	r3, [r7, #32]
 8004a0e:	e00b      	b.n	8004a28 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	1c59      	adds	r1, r3, #1
 8004a18:	6279      	str	r1, [r7, #36]	; 0x24
 8004a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	09db      	lsrs	r3, r3, #7
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2c:	d8f0      	bhi.n	8004a10 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	627a      	str	r2, [r7, #36]	; 0x24
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	e00b      	b.n	8004a60 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	61f9      	str	r1, [r7, #28]
 8004a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	09db      	lsrs	r3, r3, #7
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b7f      	cmp	r3, #127	; 0x7f
 8004a64:	d8f0      	bhi.n	8004a48 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	61fa      	str	r2, [r7, #28]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004a76:	2215      	movs	r2, #21
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	6938      	ldr	r0, [r7, #16]
 8004a7c:	f7ff fab4 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f383 8811 	msr	BASEPRI, r3
}
 8004a86:	bf00      	nop
 8004a88:	3748      	adds	r7, #72	; 0x48
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200143a0 	.word	0x200143a0
 8004a94:	20014370 	.word	0x20014370

08004a98 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004aae:	4b03      	ldr	r3, [pc, #12]	; (8004abc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4798      	blx	r3
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20014370 	.word	0x20014370

08004ac0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8004acc:	f04f 0120 	mov.w	r1, #32
 8004ad0:	f381 8811 	msr	BASEPRI, r1
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	480b      	ldr	r0, [pc, #44]	; (8004b04 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004ad8:	f7ff f993 	bl	8003e02 <_PreparePacket>
 8004adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	6938      	ldr	r0, [r7, #16]
 8004ae4:	f7ff f940 	bl	8003d68 <_EncodeStr>
 8004ae8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004aea:	220e      	movs	r2, #14
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	6938      	ldr	r0, [r7, #16]
 8004af0:	f7ff fa7a 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f383 8811 	msr	BASEPRI, r3
}
 8004afa:	bf00      	nop
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200143a0 	.word	0x200143a0

08004b08 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01a      	beq.n	8004b4c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4798      	blx	r3
 8004b28:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004b2c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	000a      	movs	r2, r1
 8004b3c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004b3e:	4613      	mov	r3, r2
 8004b40:	461a      	mov	r2, r3
 8004b42:	4621      	mov	r1, r4
 8004b44:	200d      	movs	r0, #13
 8004b46:	f7ff fbe5 	bl	8004314 <SEGGER_SYSVIEW_RecordU32x2>
 8004b4a:	e006      	b.n	8004b5a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4619      	mov	r1, r3
 8004b52:	200c      	movs	r0, #12
 8004b54:	f7ff fba2 	bl	800429c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd90      	pop	{r4, r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20014370 	.word	0x20014370
 8004b68:	e0001004 	.word	0xe0001004

08004b6c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b72:	f3ef 8311 	mrs	r3, BASEPRI
 8004b76:	f04f 0120 	mov.w	r1, #32
 8004b7a:	f381 8811 	msr	BASEPRI, r1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	4819      	ldr	r0, [pc, #100]	; (8004be8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004b82:	f7ff f93e 	bl	8003e02 <_PreparePacket>
 8004b86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	e00b      	b.n	8004bb8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	6179      	str	r1, [r7, #20]
 8004baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	09db      	lsrs	r3, r3, #7
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b7f      	cmp	r3, #127	; 0x7f
 8004bbc:	d8f0      	bhi.n	8004ba0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	617a      	str	r2, [r7, #20]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004bce:	2202      	movs	r2, #2
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	68b8      	ldr	r0, [r7, #8]
 8004bd4:	f7ff fa08 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f383 8811 	msr	BASEPRI, r3
}
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	200143a0 	.word	0x200143a0
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bfa:	f04f 0120 	mov.w	r1, #32
 8004bfe:	f381 8811 	msr	BASEPRI, r1
 8004c02:	607b      	str	r3, [r7, #4]
 8004c04:	4807      	ldr	r0, [pc, #28]	; (8004c24 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004c06:	f7ff f8fc 	bl	8003e02 <_PreparePacket>
 8004c0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	6839      	ldr	r1, [r7, #0]
 8004c10:	6838      	ldr	r0, [r7, #0]
 8004c12:	f7ff f9e9 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f383 8811 	msr	BASEPRI, r3
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	200143a0 	.word	0x200143a0

08004c28 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c32:	f04f 0120 	mov.w	r1, #32
 8004c36:	f381 8811 	msr	BASEPRI, r1
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	4807      	ldr	r0, [pc, #28]	; (8004c5c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004c3e:	f7ff f8e0 	bl	8003e02 <_PreparePacket>
 8004c42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004c44:	2212      	movs	r2, #18
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6838      	ldr	r0, [r7, #0]
 8004c4a:	f7ff f9cd 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f383 8811 	msr	BASEPRI, r3
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	200143a0 	.word	0x200143a0

08004c60 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c66:	f3ef 8311 	mrs	r3, BASEPRI
 8004c6a:	f04f 0120 	mov.w	r1, #32
 8004c6e:	f381 8811 	msr	BASEPRI, r1
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	4807      	ldr	r0, [pc, #28]	; (8004c94 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004c76:	f7ff f8c4 	bl	8003e02 <_PreparePacket>
 8004c7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004c7c:	2211      	movs	r2, #17
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	6838      	ldr	r0, [r7, #0]
 8004c82:	f7ff f9b1 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f383 8811 	msr	BASEPRI, r3
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	200143a0 	.word	0x200143a0

08004c98 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ca0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca4:	f04f 0120 	mov.w	r1, #32
 8004ca8:	f381 8811 	msr	BASEPRI, r1
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	4819      	ldr	r0, [pc, #100]	; (8004d14 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004cb0:	f7ff f8a7 	bl	8003e02 <_PreparePacket>
 8004cb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	e00b      	b.n	8004ce6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	61f9      	str	r1, [r7, #28]
 8004cd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	09db      	lsrs	r3, r3, #7
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cea:	d8f0      	bhi.n	8004cce <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	61fa      	str	r2, [r7, #28]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	68f9      	ldr	r1, [r7, #12]
 8004d00:	6938      	ldr	r0, [r7, #16]
 8004d02:	f7ff f971 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f383 8811 	msr	BASEPRI, r3
}
 8004d0c:	bf00      	nop
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	200143a0 	.word	0x200143a0
 8004d18:	20014370 	.word	0x20014370

08004d1c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d24:	f3ef 8311 	mrs	r3, BASEPRI
 8004d28:	f04f 0120 	mov.w	r1, #32
 8004d2c:	f381 8811 	msr	BASEPRI, r1
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	4819      	ldr	r0, [pc, #100]	; (8004d98 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004d34:	f7ff f865 	bl	8003e02 <_PreparePacket>
 8004d38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d3e:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e00b      	b.n	8004d6a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	61f9      	str	r1, [r7, #28]
 8004d5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	09db      	lsrs	r3, r3, #7
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6e:	d8f0      	bhi.n	8004d52 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	61fa      	str	r2, [r7, #28]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004d80:	2204      	movs	r2, #4
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	6938      	ldr	r0, [r7, #16]
 8004d86:	f7ff f92f 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f383 8811 	msr	BASEPRI, r3
}
 8004d90:	bf00      	nop
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	200143a0 	.word	0x200143a0
 8004d9c:	20014370 	.word	0x20014370

08004da0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004da8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dac:	f04f 0120 	mov.w	r1, #32
 8004db0:	f381 8811 	msr	BASEPRI, r1
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	4819      	ldr	r0, [pc, #100]	; (8004e1c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004db8:	f7ff f823 	bl	8003e02 <_PreparePacket>
 8004dbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004dc2:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	e00b      	b.n	8004dee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	61f9      	str	r1, [r7, #28]
 8004de0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	09db      	lsrs	r3, r3, #7
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b7f      	cmp	r3, #127	; 0x7f
 8004df2:	d8f0      	bhi.n	8004dd6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	61fa      	str	r2, [r7, #28]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004e04:	2206      	movs	r2, #6
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	6938      	ldr	r0, [r7, #16]
 8004e0a:	f7ff f8ed 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f383 8811 	msr	BASEPRI, r3
}
 8004e14:	bf00      	nop
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	200143a0 	.word	0x200143a0
 8004e20:	20014370 	.word	0x20014370

08004e24 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e32:	f04f 0120 	mov.w	r1, #32
 8004e36:	f381 8811 	msr	BASEPRI, r1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	4827      	ldr	r0, [pc, #156]	; (8004edc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004e3e:	f7fe ffe0 	bl	8003e02 <_PreparePacket>
 8004e42:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e48:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	e00b      	b.n	8004e74 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	1c59      	adds	r1, r3, #1
 8004e64:	6279      	str	r1, [r7, #36]	; 0x24
 8004e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	09db      	lsrs	r3, r3, #7
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2b7f      	cmp	r3, #127	; 0x7f
 8004e78:	d8f0      	bhi.n	8004e5c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e00b      	b.n	8004eac <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	61f9      	str	r1, [r7, #28]
 8004e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	09db      	lsrs	r3, r3, #7
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb0:	d8f0      	bhi.n	8004e94 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	61fa      	str	r2, [r7, #28]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004ec2:	2207      	movs	r2, #7
 8004ec4:	68f9      	ldr	r1, [r7, #12]
 8004ec6:	6938      	ldr	r0, [r7, #16]
 8004ec8:	f7ff f88e 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f383 8811 	msr	BASEPRI, r3
}
 8004ed2:	bf00      	nop
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200143a0 	.word	0x200143a0
 8004ee0:	20014370 	.word	0x20014370

08004ee4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20014370 	.word	0x20014370

08004f04 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	; 0x30
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d06d      	beq.n	8004ff2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f20:	e008      	b.n	8004f34 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	3301      	adds	r3, #1
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d3f2      	bcc.n	8004f22 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f3c:	e000      	b.n	8004f40 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f3e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d055      	beq.n	8004ff2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f46:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4a:	f04f 0120 	mov.w	r1, #32
 8004f4e:	f381 8811 	msr	BASEPRI, r1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	482a      	ldr	r0, [pc, #168]	; (8005000 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004f56:	f7fe ff54 	bl	8003e02 <_PreparePacket>
 8004f5a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	e00b      	b.n	8004f82 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	1c59      	adds	r1, r3, #1
 8004f72:	6279      	str	r1, [r7, #36]	; 0x24
 8004f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	09db      	lsrs	r3, r3, #7
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2b7f      	cmp	r3, #127	; 0x7f
 8004f86:	d8f0      	bhi.n	8004f6a <SEGGER_SYSVIEW_SendModule+0x66>
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f8e:	6a3a      	ldr	r2, [r7, #32]
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	e00b      	b.n	8004fbc <SEGGER_SYSVIEW_SendModule+0xb8>
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1c59      	adds	r1, r3, #1
 8004fac:	61f9      	str	r1, [r7, #28]
 8004fae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	09db      	lsrs	r3, r3, #7
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc0:	d8f0      	bhi.n	8004fa4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	61fa      	str	r2, [r7, #28]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	4619      	mov	r1, r3
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7fe fec4 	bl	8003d68 <_EncodeStr>
 8004fe0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004fe2:	2216      	movs	r2, #22
 8004fe4:	68f9      	ldr	r1, [r7, #12]
 8004fe6:	6938      	ldr	r0, [r7, #16]
 8004fe8:	f7fe fffe 	bl	8003fe8 <_SendPacket>
      RECORD_END();
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	3730      	adds	r7, #48	; 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20014398 	.word	0x20014398
 8005000:	200143a0 	.word	0x200143a0

08005004 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800500a:	4b0c      	ldr	r3, [pc, #48]	; (800503c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00f      	beq.n	8005032 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f2      	bne.n	8005018 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20014398 	.word	0x20014398

08005040 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005046:	f3ef 8311 	mrs	r3, BASEPRI
 800504a:	f04f 0120 	mov.w	r1, #32
 800504e:	f381 8811 	msr	BASEPRI, r1
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	4817      	ldr	r0, [pc, #92]	; (80050b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005056:	f7fe fed4 	bl	8003e02 <_PreparePacket>
 800505a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	e00b      	b.n	8005084 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	6179      	str	r1, [r7, #20]
 8005076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	09db      	lsrs	r3, r3, #7
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b7f      	cmp	r3, #127	; 0x7f
 8005088:	d8f0      	bhi.n	800506c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	617a      	str	r2, [r7, #20]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800509a:	221b      	movs	r2, #27
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f7fe ffa2 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f383 8811 	msr	BASEPRI, r3
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200143a0 	.word	0x200143a0
 80050b8:	2001439c 	.word	0x2001439c

080050bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050c4:	f3ef 8311 	mrs	r3, BASEPRI
 80050c8:	f04f 0120 	mov.w	r1, #32
 80050cc:	f381 8811 	msr	BASEPRI, r1
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	4827      	ldr	r0, [pc, #156]	; (8005170 <SEGGER_SYSVIEW_Warn+0xb4>)
 80050d4:	f7fe fe95 	bl	8003e02 <_PreparePacket>
 80050d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050da:	2280      	movs	r2, #128	; 0x80
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	6938      	ldr	r0, [r7, #16]
 80050e0:	f7fe fe42 	bl	8003d68 <_EncodeStr>
 80050e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ea:	2301      	movs	r3, #1
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	e00b      	b.n	8005108 <SEGGER_SYSVIEW_Warn+0x4c>
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	6279      	str	r1, [r7, #36]	; 0x24
 80050fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	09db      	lsrs	r3, r3, #7
 8005106:	623b      	str	r3, [r7, #32]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	2b7f      	cmp	r3, #127	; 0x7f
 800510c:	d8f0      	bhi.n	80050f0 <SEGGER_SYSVIEW_Warn+0x34>
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	627a      	str	r2, [r7, #36]	; 0x24
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	e00b      	b.n	8005140 <SEGGER_SYSVIEW_Warn+0x84>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	b2da      	uxtb	r2, r3
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	61f9      	str	r1, [r7, #28]
 8005132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	09db      	lsrs	r3, r3, #7
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b7f      	cmp	r3, #127	; 0x7f
 8005144:	d8f0      	bhi.n	8005128 <SEGGER_SYSVIEW_Warn+0x6c>
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	61fa      	str	r2, [r7, #28]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005156:	221a      	movs	r2, #26
 8005158:	68f9      	ldr	r1, [r7, #12]
 800515a:	6938      	ldr	r0, [r7, #16]
 800515c:	f7fe ff44 	bl	8003fe8 <_SendPacket>
  RECORD_END();
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f383 8811 	msr	BASEPRI, r3
}
 8005166:	bf00      	nop
 8005168:	3728      	adds	r7, #40	; 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200143a0 	.word	0x200143a0

08005174 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800517a:	7e1b      	ldrb	r3, [r3, #24]
 800517c:	4619      	mov	r1, r3
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005180:	460b      	mov	r3, r1
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	440b      	add	r3, r1
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	336c      	adds	r3, #108	; 0x6c
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005190:	7e1b      	ldrb	r3, [r3, #24]
 8005192:	4618      	mov	r0, r3
 8005194:	490d      	ldr	r1, [pc, #52]	; (80051cc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005196:	4603      	mov	r3, r0
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4403      	add	r3, r0
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	440b      	add	r3, r1
 80051a0:	3370      	adds	r3, #112	; 0x70
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d00b      	beq.n	80051c0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80051aa:	789b      	ldrb	r3, [r3, #2]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d107      	bne.n	80051c0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80051b6:	f7fe fe31 	bl	8003e1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80051bc:	2200      	movs	r2, #0
 80051be:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80051c0:	4b01      	ldr	r3, [pc, #4]	; (80051c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20014370 	.word	0x20014370
 80051cc:	20012eb0 	.word	0x20012eb0

080051d0 <gpio_Config>:
 * ese elemento específico (relacionado con el periférico RCC, se activa el
 * periférico en dicho registro), a eso llamaremos simplemente "activar el
 * periférico o activar la señal de reloj del periférico".
 */

void gpio_Config(GPIO_Handler_t *pGPIOHandler){	// Función pública
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

	/* Verificamos que el pin seleccionado es correcto */
	assert_param(IS_GPIO_PIN(pGPIOHandler->pinConfig.GPIO_PinNumber));

	// 1) Activamos el periférico (Señal de reloj)
	gpio_enable_clock_peripheral(pGPIOHandler);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f813 	bl	8005204 <gpio_enable_clock_peripheral>

	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	gpio_config_mode(pGPIOHandler);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f870 	bl	80052c4 <gpio_config_mode>

	// 3) Configurando el registro GPIOx_OTYPER
	gpio_config_output_type(pGPIOHandler);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f899 	bl	800531c <gpio_config_output_type>

	// 4) Configurando el registro GPIOx_SPEED (velocidad de salida)
	gpio_config_output_speed(pGPIOHandler);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f8c0 	bl	8005370 <gpio_config_output_speed>

	// 5) Configurando el registro GPIOx_PUPDR o(pull-up, pull-dpwn o flotante)
	gpio_config_pullup_pulldown(pGPIOHandler);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8e9 	bl	80053c8 <gpio_config_pullup_pulldown>

	// 6) Configurando el registro GPIOx_ALTFN de función alternativa
	gpio_config_alternate_function(pGPIOHandler);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f912 	bl	8005420 <gpio_config_alternate_function>

} // Fin del GPIO_config
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <gpio_enable_clock_peripheral>:



/* Enable Clock Signal for specific GPIOx_Port */
void gpio_enable_clock_peripheral(GPIO_Handler_t *pGPIOHandler){	// Función privada
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

	// Verificamos que el puerto configurado si es permitido
	assert_param(IS_GPIO_ALL_INSTANCE(pGPIOHandler->pGPIOx));

	// Verificamos para GPIOA
		if(pGPIOHandler->pGPIOx == GPIOA){
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a25      	ldr	r2, [pc, #148]	; (80052a8 <gpio_enable_clock_peripheral+0xa4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d106      	bne.n	8005224 <gpio_enable_clock_peripheral+0x20>
			// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8005216:	4b25      	ldr	r3, [pc, #148]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4a24      	ldr	r2, [pc, #144]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOHandler->pGPIOx == GPIOH){
			// Escribimos 1 (SET) en la posicion correspondiente al GPIOH
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
		}

} // Fin función privada Config Enable Clock Peripheral
 8005222:	e03a      	b.n	800529a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOB){
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <gpio_enable_clock_peripheral+0xac>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d106      	bne.n	800523c <gpio_enable_clock_peripheral+0x38>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800522e:	4b1f      	ldr	r3, [pc, #124]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 800523a:	e02e      	b.n	800529a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOC){
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <gpio_enable_clock_peripheral+0xb0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d106      	bne.n	8005254 <gpio_enable_clock_peripheral+0x50>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8005246:	4b19      	ldr	r3, [pc, #100]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	4a18      	ldr	r2, [pc, #96]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8005252:	e022      	b.n	800529a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOD){
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <gpio_enable_clock_peripheral+0xb4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d106      	bne.n	800526c <gpio_enable_clock_peripheral+0x68>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	4a12      	ldr	r2, [pc, #72]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005264:	f043 0308 	orr.w	r3, r3, #8
 8005268:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 800526a:	e016      	b.n	800529a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOE){
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a12      	ldr	r2, [pc, #72]	; (80052bc <gpio_enable_clock_peripheral+0xb8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d106      	bne.n	8005284 <gpio_enable_clock_peripheral+0x80>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 800527c:	f043 0310 	orr.w	r3, r3, #16
 8005280:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8005282:	e00a      	b.n	800529a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOH){
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a0d      	ldr	r2, [pc, #52]	; (80052c0 <gpio_enable_clock_peripheral+0xbc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d105      	bne.n	800529a <gpio_enable_clock_peripheral+0x96>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800528e:	4b07      	ldr	r3, [pc, #28]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	4a06      	ldr	r2, [pc, #24]	; (80052ac <gpio_enable_clock_peripheral+0xa8>)
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40020000 	.word	0x40020000
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40020400 	.word	0x40020400
 80052b4:	40020800 	.word	0x40020800
 80052b8:	40020c00 	.word	0x40020c00
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40021c00 	.word	0x40021c00

080052c4 <gpio_config_mode>:
 * - Input
 * - Output
 * - Analog
 * - Alternate function
 */
void gpio_config_mode(GPIO_Handler_t *pGPIOHandler){	// Función privada
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]

	/*
	 * Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda
	 * ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinMode << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	795b      	ldrb	r3, [r3, #5]
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	791b      	ldrb	r3, [r3, #4]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro
	 * (debemos escribir 0b00), para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	791b      	ldrb	r3, [r3, #4]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	2103      	movs	r1, #3
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	400a      	ands	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]

	/* Cargamos a auxConfig en el registro MODER */
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6819      	ldr	r1, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <gpio_config_output_type>:
/*
 * Configures which type of output the PinX will use:
 * - Push-Pull (Entrada-Salida)
 * - OpenDrain (Alta Impedancia)
 */
void gpio_config_output_type(GPIO_Handler_t *pGPIOHandler){	//Función privada
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputType << pGPIOHandler->pinConfig.GPIO_PinNumber);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7a1b      	ldrb	r3, [r3, #8]
 800532c:	461a      	mov	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	791b      	ldrb	r3, [r3, #4]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->pinConfig.GPIO_PinNumber);	// SET = 0b1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	791b      	ldrb	r3, [r3, #4]
 8005342:	4619      	mov	r1, r3
 8005344:	2301      	movs	r3, #1
 8005346:	408b      	lsls	r3, r1
 8005348:	43db      	mvns	r3, r3
 800534a:	4619      	mov	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	400a      	ands	r2, r1
 8005352:	605a      	str	r2, [r3, #4]

	/* Cargamos el resultado sobre el registro OTYPER */
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]

}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <gpio_config_output_speed>:
 * - Low
 * - Medium
 * - Fast
 * - HighSpeed
 */
void gpio_config_output_speed(GPIO_Handler_t *pGPIOHandler){	//Función privada
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputSpeed << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	799b      	ldrb	r3, [r3, #6]
 8005380:	461a      	mov	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	791b      	ldrb	r3, [r3, #4]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	791b      	ldrb	r3, [r3, #4]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	2103      	movs	r1, #3
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	43db      	mvns	r3, r3
 80053a2:	4619      	mov	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	400a      	ands	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]

	/* Cargamos el resultado sobre el registro OSPEEDR */
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6899      	ldr	r1, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]

}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <gpio_config_pullup_pulldown>:

/*
 * Turns ON/OFF the pull-up pull-down resistor for each PinX in selected GPIO Port
 */
void gpio_config_pullup_pulldown(GPIO_Handler_t *pGPIOHandler){	//Función privada
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	79db      	ldrb	r3, [r3, #7]
 80053d8:	461a      	mov	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	791b      	ldrb	r3, [r3, #4]
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	2103      	movs	r1, #3
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	400a      	ands	r2, r1
 8005402:	60da      	str	r2, [r3, #12]

	/* Cargamos el resultado sobre el registro OTYPER */
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68d9      	ldr	r1, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	430a      	orrs	r2, r1
 8005412:	60da      	str	r2, [r3, #12]

}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <gpio_config_alternate_function>:

/*
 * Allows to configure other functions (more specialized) on the selected PinX
 * (Revisar Tabla 8 del Datasheet del STM32F411)
 */
void gpio_config_alternate_function(GPIO_Handler_t *pGPIOHandler){	//Función privada
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

	uint32_t auxPosition = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

	if(pGPIOHandler->pinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	795b      	ldrb	r3, [r3, #5]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d143      	bne.n	80054bc <gpio_config_alternate_function+0x9c>

		// Seleccionamos primero si se puede utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->pinConfig.GPIO_PinNumber < 8){
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	791b      	ldrb	r3, [r3, #4]
 8005438:	2b07      	cmp	r3, #7
 800543a:	d81f      	bhi.n	800547c <gpio_config_alternate_function+0x5c>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * (pGPIOHandler->pinConfig.GPIO_PinNumber);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	791b      	ldrb	r3, [r3, #4]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	60fb      	str	r3, [r7, #12]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	210f      	movs	r1, #15
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	4619      	mov	r1, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	400a      	ands	r2, r1
 800545c:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	7a5b      	ldrb	r3, [r3, #9]
 8005468:	4619      	mov	r1, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	4619      	mov	r1, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 800547a:	e01f      	b.n	80054bc <gpio_config_alternate_function+0x9c>
			auxPosition = 4 * (pGPIOHandler->pinConfig.GPIO_PinNumber -8);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	791b      	ldrb	r3, [r3, #4]
 8005480:	3b08      	subs	r3, #8
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	60fb      	str	r3, [r7, #12]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548c:	210f      	movs	r1, #15
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	400a      	ands	r2, r1
 800549e:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7a5b      	ldrb	r3, [r3, #9]
 80054aa:	4619      	mov	r1, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <gpio_WritePin>:

/*
 * Función utilizada para cambiar de estado el pin entregado en el handler,
 * asignando el valor entregado en la variable newState
 */
void gpio_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){	// Función pública
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]

	/* Verificamos si la acción que deseamos realizar es permitida */
	assert_param(IS_GPIO_PIN_ACTION(newState));

	/* Limpiams la posición que deseamos */
	if(newState == SET){
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10d      	bne.n	80054f6 <gpio_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->pinConfig.GPIO_PinNumber);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	791b      	ldrb	r3, [r3, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	2301      	movs	r3, #1
 80054e8:	408b      	lsls	r3, r1
 80054ea:	4619      	mov	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
	}

}
 80054f4:	e00d      	b.n	8005512 <gpio_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	3310      	adds	r3, #16
 8005502:	2101      	movs	r1, #1
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	4619      	mov	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	619a      	str	r2, [r3, #24]
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <gpio_ReadPin>:


/*
 * Función para leer el estado de un pin específico
 */
uint32_t gpio_ReadPin(GPIO_Handler_t *pPinHandler){
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]

	// Creamos unas variable auxiliares para la máscara y para devolver el valor leído del PinX
	uint32_t pinValue = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]

	/*
	 * Cargamos una variable con el valor del registro IDR del periférico GPIOx
	 */
	pinValue = pPinHandler->pGPIOx->IDR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	60fb      	str	r3, [r7, #12]

	/*
	 * - Creamos una máscara para obtener un binario que contiene únicamente el valor del pin que nos interesa (PinX).
	 * - Hacemos un AND bitwise entre el valor del registro IDR y la máscara para extraer el valor del PinX
	 */
	mask = SET << pPinHandler->pinConfig.GPIO_PinNumber;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	791b      	ldrb	r3, [r3, #4]
 800553a:	461a      	mov	r2, r3
 800553c:	2301      	movs	r3, #1
 800553e:	4093      	lsls	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]
	pinValue &= mask;
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4013      	ands	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
	/*
	 * Desplazamos el valor del bit del pin que acabamos obtener, "PinNumber" veces a la derecha para que quede en
	 * el bit 0, y lo asignamos a la variable pinValue
	 */

	pinValue >>= pPinHandler->pinConfig.GPIO_PinNumber;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	791b      	ldrb	r3, [r3, #4]
 800554e:	461a      	mov	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	40d3      	lsrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

	/* Devolvemos el valor leído del PinX */
	return (uint8_t)pinValue;	// Se hace un casting de la variable pinValue de 32-bits a 8 bits
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	b2db      	uxtb	r3, r3

}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <gpio_TooglePin>:

/* =============== PREGUNTA 2 DE LA PARTE_B DE LA TAREA_1 ================
 *
 * Función para cambiar el estado de un PinX, al estado opuesto del actual
 */
void gpio_TooglePin(GPIO_Handler_t *pPinHandler){
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
	// Definimos una variable auxiliar para guardar el estado del PinX
	uint8_t auxVal = 0; // Se define de 8-bits para poder utilizarla como parámetro en la función gpio_WritePin, sin que hayan truncamientos
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
	/*
	 * Leemos el estado del PinX y aplicamos la operación booleana BANG, que devuelve el valor binario justamente
	 * contrario al estado actual (0b1 si el estado del PinX es 0b0, 0b0 si el estado del PinX es 0b1).
	 * Cargamos el estado "negado" en la variable auxVal
	 */
	auxVal = !gpio_ReadPin(pPinHandler);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ffd3 	bl	800551e <gpio_ReadPin>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	73fb      	strb	r3, [r7, #15]

	/* Se cambia el estado del PinX al estado opuesto */
	gpio_WritePin(pPinHandler, auxVal);
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff9c 	bl	80054c8 <gpio_WritePin>

}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <PLL_config>:
void PLL_reFactorM(PLL_Config_t *ptrPLL);
void PLL_reFactorN(PLL_Config_t *ptrPLL);
void PLL_reFactorP(PLL_Config_t *ptrPLL);
void restartBits(PLL_Config_t *ptrPLL);

void PLL_config(PLL_Config_t *ptrPLL){
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

	actual_Frequency = 16;
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <PLL_config+0x48>)
 80055a2:	2210      	movs	r2, #16
 80055a4:	701a      	strb	r2, [r3, #0]

	/* Asegurar que el PLL está apagado para configuración */
	PLL_DriverOnOff(ptrPLL,ptrPLL->state);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	799b      	ldrb	r3, [r3, #6]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f819 	bl	80055e4 <PLL_DriverOnOff>

	/* Selección de reloj de entrada para PLL */
	PLL_chooseClock(ptrPLL);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f834 	bl	8005620 <PLL_chooseClock>

	/* División de reloj principal para entrar a VCO */
	PLL_reFactorM(ptrPLL);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f84d 	bl	8005658 <PLL_reFactorM>

	/* Multiplicación de salida VCO (2MHz) a 200MHz */
	PLL_reFactorN(ptrPLL);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f87a 	bl	80056b8 <PLL_reFactorN>

	/* División de salida para sistema principal (200MHz) a 100MHz */
	/* Reinicio de bits */
	restartBits(ptrPLL);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8c3 	bl	8005750 <restartBits>

	/*Aplicamos el valor final para P*/
	PLL_reFactorP(ptrPLL);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8a4 	bl	8005718 <PLL_reFactorP>

	/* Guardar frecuencia final configurada */
	ptrPLL->final_Frequency = actual_Frequency;
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <PLL_config+0x48>)
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	715a      	strb	r2, [r3, #5]
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20014483 	.word	0x20014483

080055e4 <PLL_DriverOnOff>:


/* Asegurar que el PLL está apagado para configuración */
void PLL_DriverOnOff(PLL_Config_t *ptrPLL,uint8_t state){
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
	if(state){
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <PLL_DriverOnOff+0x20>
		RCC->CR |= RCC_CR_PLLON;
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <PLL_DriverOnOff+0x38>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <PLL_DriverOnOff+0x38>)
 80055fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005600:	6013      	str	r3, [r2, #0]
	}
	else{
		RCC->CR &= ~RCC_CR_PLLON;
	}
}
 8005602:	e005      	b.n	8005610 <PLL_DriverOnOff+0x2c>
		RCC->CR &= ~RCC_CR_PLLON;
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <PLL_DriverOnOff+0x38>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a04      	ldr	r2, [pc, #16]	; (800561c <PLL_DriverOnOff+0x38>)
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40023800 	.word	0x40023800

08005620 <PLL_chooseClock>:


/* Selección de reloj de entrada para PLL */
void PLL_chooseClock(PLL_Config_t *ptrPLL){
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	if(ptrPLL->input_Clock == HSI_CLOCK){
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d105      	bne.n	800563c <PLL_chooseClock+0x1c>
		RCC->PLLCFGR &= RCC_PLLCFGR_PLLSRC_HSI;
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <PLL_chooseClock+0x34>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4b07      	ldr	r3, [pc, #28]	; (8005654 <PLL_chooseClock+0x34>)
 8005636:	2200      	movs	r2, #0
 8005638:	605a      	str	r2, [r3, #4]
	} else {
		RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
	}
}
 800563a:	e005      	b.n	8005648 <PLL_chooseClock+0x28>
		RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <PLL_chooseClock+0x34>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a04      	ldr	r2, [pc, #16]	; (8005654 <PLL_chooseClock+0x34>)
 8005642:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005646:	6053      	str	r3, [r2, #4]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40023800 	.word	0x40023800

08005658 <PLL_reFactorM>:


/* División de reloj principal para entrar a VCO */
void PLL_reFactorM(PLL_Config_t *ptrPLL){
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

	/* Reinicio de bits en divisor /M*/
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8005660:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <PLL_reFactorM+0x58>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <PLL_reFactorM+0x58>)
 8005666:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800566a:	6053      	str	r3, [r2, #4]

	/* Divisón por M */
	actual_Frequency = actual_Frequency/(ptrPLL->m_Factor);
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <PLL_reFactorM+0x5c>)
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4b0e      	ldr	r3, [pc, #56]	; (80056b4 <PLL_reFactorM+0x5c>)
 800567c:	701a      	strb	r2, [r3, #0]

	// No configurar si supera los límites
	if(actual_Frequency < 1 || 2 < actual_Frequency){
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <PLL_reFactorM+0x5c>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <PLL_reFactorM+0x36>
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <PLL_reFactorM+0x5c>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <PLL_reFactorM+0x3a>
		while(1){
			// Supera los límites
			__NOP();
 800568e:	bf00      	nop
 8005690:	e7fd      	b.n	800568e <PLL_reFactorM+0x36>
		}
	}

	// Configurar factor M
	RCC->PLLCFGR |= (ptrPLL->m_Factor << RCC_PLLCFGR_PLLM_Pos);
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <PLL_reFactorM+0x58>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	7852      	ldrb	r2, [r2, #1]
 800569a:	4611      	mov	r1, r2
 800569c:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <PLL_reFactorM+0x58>)
 800569e:	430b      	orrs	r3, r1
 80056a0:	6053      	str	r3, [r2, #4]
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
 80056b4:	20014483 	.word	0x20014483

080056b8 <PLL_reFactorN>:


/* Multiplicación de salida VCO (2MHz) a 200MHz */
void PLL_reFactorN(PLL_Config_t *ptrPLL){
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

	/* Reinicio de bits xN */
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 80056c0:	4b13      	ldr	r3, [pc, #76]	; (8005710 <PLL_reFactorN+0x58>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a12      	ldr	r2, [pc, #72]	; (8005710 <PLL_reFactorN+0x58>)
 80056c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80056ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ce:	6053      	str	r3, [r2, #4]

	/* Multiplicación por N */
	actual_Frequency = actual_Frequency * (ptrPLL->n_Factor);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	885b      	ldrh	r3, [r3, #2]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <PLL_reFactorN+0x5c>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	fb12 f303 	smulbb	r3, r2, r3
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <PLL_reFactorN+0x5c>)
 80056e2:	701a      	strb	r2, [r3, #0]

	// No configurar si supera los límites
	if(actual_Frequency < 100 || 432 < actual_Frequency){
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <PLL_reFactorN+0x5c>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b63      	cmp	r3, #99	; 0x63
 80056ea:	d801      	bhi.n	80056f0 <PLL_reFactorN+0x38>
		while(1){
			// Supera los límites
			__NOP();
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <PLL_reFactorN+0x34>
		}
	}
	// Configurar factor N
	RCC->PLLCFGR |= (ptrPLL->n_Factor << RCC_PLLCFGR_PLLN_Pos);
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <PLL_reFactorN+0x58>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	8852      	ldrh	r2, [r2, #2]
 80056f8:	0192      	lsls	r2, r2, #6
 80056fa:	4611      	mov	r1, r2
 80056fc:	4a04      	ldr	r2, [pc, #16]	; (8005710 <PLL_reFactorN+0x58>)
 80056fe:	430b      	orrs	r3, r1
 8005700:	6053      	str	r3, [r2, #4]
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800
 8005714:	20014483 	.word	0x20014483

08005718 <PLL_reFactorP>:


/*Aplicamos el valor final para P*/
void PLL_reFactorP(PLL_Config_t *ptrPLL){
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

	/* División por P */
	actual_Frequency = actual_Frequency/(ptrPLL->p_Factor);
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <PLL_reFactorP+0x34>)
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	791b      	ldrb	r3, [r3, #4]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <PLL_reFactorP+0x34>)
 8005730:	701a      	strb	r2, [r3, #0]
	// No configurar si supera los límites
	if(actual_Frequency > 100){
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <PLL_reFactorP+0x34>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <PLL_reFactorP+0x26>
		while(1){
			// Supera los límites
			__NOP();
 800573a:	bf00      	nop
 800573c:	e7fd      	b.n	800573a <PLL_reFactorP+0x22>
		}
	}

}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20014483 	.word	0x20014483

08005750 <restartBits>:


/* División de salida para sistema principal (200MHz) a 100MHz */
/* Reinicio de bits */
void restartBits(PLL_Config_t *ptrPLL){
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8005758:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <restartBits+0x88>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <restartBits+0x88>)
 800575e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005762:	6053      	str	r3, [r2, #4]

	switch(ptrPLL->p_Factor){
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	791b      	ldrb	r3, [r3, #4]
 8005768:	3b02      	subs	r3, #2
 800576a:	2b06      	cmp	r3, #6
 800576c:	d82c      	bhi.n	80057c8 <restartBits+0x78>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <restartBits+0x24>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005791 	.word	0x08005791
 8005778:	080057c9 	.word	0x080057c9
 800577c:	0800579f 	.word	0x0800579f
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057bb 	.word	0x080057bb
	case 2:{
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <restartBits+0x88>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <restartBits+0x88>)
 8005796:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800579a:	6053      	str	r3, [r2, #4]
		break;
 800579c:	e016      	b.n	80057cc <restartBits+0x7c>
	}
	case 4:{
		RCC->PLLCFGR |= 1 << RCC_PLLCFGR_PLLP_Pos;
 800579e:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <restartBits+0x88>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <restartBits+0x88>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	6053      	str	r3, [r2, #4]
		break;
 80057aa:	e00f      	b.n	80057cc <restartBits+0x7c>
	}
	case 6:{
		RCC->PLLCFGR |= 2 << RCC_PLLCFGR_PLLP_Pos;
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <restartBits+0x88>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <restartBits+0x88>)
 80057b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b6:	6053      	str	r3, [r2, #4]
		break;
 80057b8:	e008      	b.n	80057cc <restartBits+0x7c>
	}
	case 8:{
		RCC->PLLCFGR |= 3 << RCC_PLLCFGR_PLLP_Pos;
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <restartBits+0x88>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4a06      	ldr	r2, [pc, #24]	; (80057d8 <restartBits+0x88>)
 80057c0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80057c4:	6053      	str	r3, [r2, #4]
		break;
 80057c6:	e001      	b.n	80057cc <restartBits+0x7c>
	}
	default:{
		while(1){
			// Worong P factor
			__NOP();
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <restartBits+0x78>
		}
	}
	}
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	40023800 	.word	0x40023800

080057dc <PLL_ON_forSystem>:
	}
}


// Sistema para encender PLL a configuración seleccionada
void PLL_ON_forSystem(PLL_Config_t *ptrPLL){
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

	/* Configuración de memoria flash y buses para nueva frecuencia */
	FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk; // Reset flash
 80057e4:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a36      	ldr	r2, [pc, #216]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // Reset APB1
 80057f0:	4b35      	ldr	r3, [pc, #212]	; (80058c8 <PLL_ON_forSystem+0xec>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4a34      	ldr	r2, [pc, #208]	; (80058c8 <PLL_ON_forSystem+0xec>)
 80057f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80057fa:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // Reset APB2
 80057fc:	4b32      	ldr	r3, [pc, #200]	; (80058c8 <PLL_ON_forSystem+0xec>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4a31      	ldr	r2, [pc, #196]	; (80058c8 <PLL_ON_forSystem+0xec>)
 8005802:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005806:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_HPRE; // Reset AHB
 8005808:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <PLL_ON_forSystem+0xec>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4a2e      	ldr	r2, [pc, #184]	; (80058c8 <PLL_ON_forSystem+0xec>)
 800580e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005812:	6093      	str	r3, [r2, #8]

	if(ptrPLL->final_Frequency <= 30){
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	795b      	ldrb	r3, [r3, #5]
 8005818:	2b1e      	cmp	r3, #30
 800581a:	d806      	bhi.n	800582a <PLL_ON_forSystem+0x4e>
		FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk;
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e031      	b.n	800588e <PLL_ON_forSystem+0xb2>
	}
	else if (ptrPLL->final_Frequency <= 64){
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	795b      	ldrb	r3, [r3, #5]
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d810      	bhi.n	8005854 <PLL_ON_forSystem+0x78>
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a23      	ldr	r2, [pc, #140]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	6013      	str	r3, [r2, #0]

		if(ptrPLL->final_Frequency > 50){
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	795b      	ldrb	r3, [r3, #5]
 8005842:	2b32      	cmp	r3, #50	; 0x32
 8005844:	d923      	bls.n	800588e <PLL_ON_forSystem+0xb2>
			/* División mínima para no superar limites del bus */
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8005846:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <PLL_ON_forSystem+0xec>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <PLL_ON_forSystem+0xec>)
 800584c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005850:	6093      	str	r3, [r2, #8]
 8005852:	e01c      	b.n	800588e <PLL_ON_forSystem+0xb2>
		}
	}
	else if (ptrPLL->final_Frequency <= 90){
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	795b      	ldrb	r3, [r3, #5]
 8005858:	2b5a      	cmp	r3, #90	; 0x5a
 800585a:	d80c      	bhi.n	8005876 <PLL_ON_forSystem+0x9a>
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	6013      	str	r3, [r2, #0]
		/* División mínima para no superar limites del bus */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8005868:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <PLL_ON_forSystem+0xec>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a16      	ldr	r2, [pc, #88]	; (80058c8 <PLL_ON_forSystem+0xec>)
 800586e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005872:	6093      	str	r3, [r2, #8]
 8005874:	e00b      	b.n	800588e <PLL_ON_forSystem+0xb2>
	}
	else {
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a12      	ldr	r2, [pc, #72]	; (80058c4 <PLL_ON_forSystem+0xe8>)
 800587c:	f043 0303 	orr.w	r3, r3, #3
 8005880:	6013      	str	r3, [r2, #0]
		/* División mínima para no superar limites del bus */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <PLL_ON_forSystem+0xec>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <PLL_ON_forSystem+0xec>)
 8005888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800588c:	6093      	str	r3, [r2, #8]
	}

	// Endender señal de PLL
	RCC->CR |= RCC_CR_PLLON;
 800588e:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <PLL_ON_forSystem+0xec>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a0d      	ldr	r2, [pc, #52]	; (80058c8 <PLL_ON_forSystem+0xec>)
 8005894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005898:	6013      	str	r3, [r2, #0]


	/* Confirmación de PLL listo */
	while(!(RCC->CR & RCC_CR_PLLRDY)){
 800589a:	e000      	b.n	800589e <PLL_ON_forSystem+0xc2>
		__NOP();
 800589c:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY)){
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <PLL_ON_forSystem+0xec>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f8      	beq.n	800589c <PLL_ON_forSystem+0xc0>
	}

	/* Configuración multiplexor que envia reloj a todo el hardware */
	/* Enviar señal PLL */
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80058aa:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <PLL_ON_forSystem+0xec>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4a06      	ldr	r2, [pc, #24]	; (80058c8 <PLL_ON_forSystem+0xec>)
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6093      	str	r3, [r2, #8]
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40023c00 	.word	0x40023c00
 80058c8:	40023800 	.word	0x40023800

080058cc <systemClock_100MHz>:
	/* Enviar señal desde HSI */
	RCC->CFGR &= RCC_CFGR_SWS_HSI;
}


void systemClock_100MHz(PLL_Config_t *ptrPLL){
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

	ptrPLL->input_Clock = HSI_CLOCK;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
	ptrPLL->m_Factor = 8;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2208      	movs	r2, #8
 80058de:	705a      	strb	r2, [r3, #1]
	ptrPLL->n_Factor = 100;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2264      	movs	r2, #100	; 0x64
 80058e4:	805a      	strh	r2, [r3, #2]
	ptrPLL->p_Factor = 2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	711a      	strb	r2, [r3, #4]
	PLL_config(ptrPLL); // Apaga y configura PLL
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fe53 	bl	8005598 <PLL_config>

	PLL_ON_forSystem(ptrPLL);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff ff72 	bl	80057dc <PLL_ON_forSystem>
}
 80058f8:	bf00      	nop
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <systemClock_Output>:

	PLL_ON_forSystem(ptrPLL);
}


void systemClock_Output(void){
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0

	GPIO_Handler_t ptrC9;
	/* Encendido GPIO A8 */
	ptrC9.pGPIOx = GPIOC;
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <systemClock_Output+0x4c>)
 8005908:	607b      	str	r3, [r7, #4]
	ptrC9.pinConfig.GPIO_PinNumber = PIN_9;
 800590a:	2309      	movs	r3, #9
 800590c:	723b      	strb	r3, [r7, #8]
	ptrC9.pinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800590e:	2302      	movs	r3, #2
 8005910:	727b      	strb	r3, [r7, #9]
	ptrC9.pinConfig.GPIO_PinAltFunMode = AF0;
 8005912:	2300      	movs	r3, #0
 8005914:	737b      	strb	r3, [r7, #13]
	gpio_Config(&ptrC9);
 8005916:	1d3b      	adds	r3, r7, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fc59 	bl	80051d0 <gpio_Config>

	/* Configuración prescaler de MCO2 SysCLK/5 */
	RCC->CFGR &= ~RCC_CFGR_MCO2PRE_Msk;
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <systemClock_Output+0x50>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	4a0b      	ldr	r2, [pc, #44]	; (8005950 <systemClock_Output+0x50>)
 8005924:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8005928:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b111 << RCC_CFGR_MCO2PRE_Pos);
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <systemClock_Output+0x50>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <systemClock_Output+0x50>)
 8005930:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005934:	6093      	str	r3, [r2, #8]

	/* Encendido señal para lectura MCO2 */
	RCC->CFGR |= RCC_CFGR_MCO2;
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <systemClock_Output+0x50>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	4a05      	ldr	r2, [pc, #20]	; (8005950 <systemClock_Output+0x50>)
 800593c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005940:	6093      	str	r3, [r2, #8]

}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40020800 	.word	0x40020800
 8005950:	40023800 	.word	0x40023800

08005954 <__libc_init_array>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	4d0d      	ldr	r5, [pc, #52]	; (800598c <__libc_init_array+0x38>)
 8005958:	4c0d      	ldr	r4, [pc, #52]	; (8005990 <__libc_init_array+0x3c>)
 800595a:	1b64      	subs	r4, r4, r5
 800595c:	10a4      	asrs	r4, r4, #2
 800595e:	2600      	movs	r6, #0
 8005960:	42a6      	cmp	r6, r4
 8005962:	d109      	bne.n	8005978 <__libc_init_array+0x24>
 8005964:	4d0b      	ldr	r5, [pc, #44]	; (8005994 <__libc_init_array+0x40>)
 8005966:	4c0c      	ldr	r4, [pc, #48]	; (8005998 <__libc_init_array+0x44>)
 8005968:	f000 f83e 	bl	80059e8 <_init>
 800596c:	1b64      	subs	r4, r4, r5
 800596e:	10a4      	asrs	r4, r4, #2
 8005970:	2600      	movs	r6, #0
 8005972:	42a6      	cmp	r6, r4
 8005974:	d105      	bne.n	8005982 <__libc_init_array+0x2e>
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	f855 3b04 	ldr.w	r3, [r5], #4
 800597c:	4798      	blx	r3
 800597e:	3601      	adds	r6, #1
 8005980:	e7ee      	b.n	8005960 <__libc_init_array+0xc>
 8005982:	f855 3b04 	ldr.w	r3, [r5], #4
 8005986:	4798      	blx	r3
 8005988:	3601      	adds	r6, #1
 800598a:	e7f2      	b.n	8005972 <__libc_init_array+0x1e>
 800598c:	08005b20 	.word	0x08005b20
 8005990:	08005b20 	.word	0x08005b20
 8005994:	08005b20 	.word	0x08005b20
 8005998:	08005b24 	.word	0x08005b24

0800599c <memcmp>:
 800599c:	b510      	push	{r4, lr}
 800599e:	3901      	subs	r1, #1
 80059a0:	4402      	add	r2, r0
 80059a2:	4290      	cmp	r0, r2
 80059a4:	d101      	bne.n	80059aa <memcmp+0xe>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e005      	b.n	80059b6 <memcmp+0x1a>
 80059aa:	7803      	ldrb	r3, [r0, #0]
 80059ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d001      	beq.n	80059b8 <memcmp+0x1c>
 80059b4:	1b18      	subs	r0, r3, r4
 80059b6:	bd10      	pop	{r4, pc}
 80059b8:	3001      	adds	r0, #1
 80059ba:	e7f2      	b.n	80059a2 <memcmp+0x6>

080059bc <memcpy>:
 80059bc:	440a      	add	r2, r1
 80059be:	4291      	cmp	r1, r2
 80059c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059c4:	d100      	bne.n	80059c8 <memcpy+0xc>
 80059c6:	4770      	bx	lr
 80059c8:	b510      	push	{r4, lr}
 80059ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d2:	4291      	cmp	r1, r2
 80059d4:	d1f9      	bne.n	80059ca <memcpy+0xe>
 80059d6:	bd10      	pop	{r4, pc}

080059d8 <memset>:
 80059d8:	4402      	add	r2, r0
 80059da:	4603      	mov	r3, r0
 80059dc:	4293      	cmp	r3, r2
 80059de:	d100      	bne.n	80059e2 <memset+0xa>
 80059e0:	4770      	bx	lr
 80059e2:	f803 1b01 	strb.w	r1, [r3], #1
 80059e6:	e7f9      	b.n	80059dc <memset+0x4>

080059e8 <_init>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr

080059f4 <_fini>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	bf00      	nop
 80059f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fa:	bc08      	pop	{r3}
 80059fc:	469e      	mov	lr, r3
 80059fe:	4770      	bx	lr
