
Wheels_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08008478  08008478  00018478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800891c  0800891c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800891c  0800891c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800891c  0800891c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001d4  08008af8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08008af8  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000475e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000104d  00000000  00000000  00024962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  000259b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000428  00000000  00000000  00025e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001002d  00000000  00000000  00026298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053b6  00000000  00000000  000362c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057318  00000000  00000000  0003b67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00092993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000274c  00000000  00000000  000929e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008460 	.word	0x08008460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008460 	.word	0x08008460

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
// Funciones privadas
void initSystem(void);


/* ===== Funciión principal del programa ===== */
int main(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

	// Configuramos el PLL para que el micro corra a 100MHz
	systemClock_100MHz(&pllHandler);
 8000d08:	4824      	ldr	r0, [pc, #144]	; (8000d9c <main+0x98>)
 8000d0a:	f002 f8d5 	bl	8002eb8 <systemClock_100MHz>
	systemClock_Output(); // el pin PC9 configurado como salida para leer la freq
 8000d0e:	f002 f8ed 	bl	8002eec <systemClock_Output>

	RCC->CR &= ~(RCC_CR_HSITRIM); // Limpiamos el registro
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <main+0x9c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <main+0x9c>)
 8000d18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d1c:	6013      	str	r3, [r2, #0]
	RCC->CR |= (11 << RCC_CR_HSITRIM_Pos); // Numero para calibrar POR DEFECTO ESTABA EN 15!!!!!
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <main+0x9c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <main+0x9c>)
 8000d24:	f043 0358 	orr.w	r3, r3, #88	; 0x58
 8000d28:	6013      	str	r3, [r2, #0]

	initSystem();
 8000d2a:	f000 f847 	bl	8000dbc <initSystem>

	/* Activar motor derecho */

	// Encendemos el puente H
	gpio_WritePin(&GPIO_Enb_R, RESET);	// Prende motor derecho
 8000d2e:	2100      	movs	r1, #0
 8000d30:	481c      	ldr	r0, [pc, #112]	; (8000da4 <main+0xa0>)
 8000d32:	f001 febf 	bl	8002ab4 <gpio_WritePin>
	gpio_WritePin(&GPIO_Enb_L, RESET);	// Apaga motor izquierdo
 8000d36:	2100      	movs	r1, #0
 8000d38:	481b      	ldr	r0, [pc, #108]	; (8000da8 <main+0xa4>)
 8000d3a:	f001 febb 	bl	8002ab4 <gpio_WritePin>

	// Seteamos la dirección del motor
	gpio_WritePin(&GPIO_Dir_R, SET);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	481a      	ldr	r0, [pc, #104]	; (8000dac <main+0xa8>)
 8000d42:	f001 feb7 	bl	8002ab4 <gpio_WritePin>
	gpio_WritePin(&GPIO_Dir_L, RESET);
 8000d46:	2100      	movs	r1, #0
 8000d48:	4819      	ldr	r0, [pc, #100]	; (8000db0 <main+0xac>)
 8000d4a:	f001 feb3 	bl	8002ab4 <gpio_WritePin>


	PWM_R.config.polarity	= PWM_POLARITY_DIRECT;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <main+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	749a      	strb	r2, [r3, #18]
	pwm_Config(&PWM_R);
 8000d54:	4817      	ldr	r0, [pc, #92]	; (8000db4 <main+0xb0>)
 8000d56:	f002 f8f3 	bl	8002f40 <pwm_Config>
	selectPolarity(&PWM_R);
 8000d5a:	4816      	ldr	r0, [pc, #88]	; (8000db4 <main+0xb0>)
 8000d5c:	f002 fa7c 	bl	8003258 <selectPolarity>


	PWM_L.config.polarity	= PWM_POLARITY_INVERSE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <main+0xb4>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	749a      	strb	r2, [r3, #18]
	pwm_Config(&PWM_L);
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <main+0xb4>)
 8000d68:	f002 f8ea 	bl	8002f40 <pwm_Config>
	selectPolarity(&PWM_L);
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <main+0xb4>)
 8000d6e:	f002 fa73 	bl	8003258 <selectPolarity>

	stopPwmSignal(&PWM_R);
 8000d72:	4810      	ldr	r0, [pc, #64]	; (8000db4 <main+0xb0>)
 8000d74:	f002 fa1e 	bl	80031b4 <stopPwmSignal>
	stopPwmSignal(&PWM_L);
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <main+0xb4>)
 8000d7a:	f002 fa1b 	bl	80031b4 <stopPwmSignal>


	// Encendemos el PWM para mover el motor derecho
	startPwmSignal(&PWM_R);
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <main+0xb0>)
 8000d80:	f002 fa02 	bl	8003188 <startPwmSignal>
	startPwmSignal(&PWM_L);
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <main+0xb4>)
 8000d86:	f002 f9ff 	bl	8003188 <startPwmSignal>
	systick_Delay_ms(SYSTICK_10s);
 8000d8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d8e:	f002 fc31 	bl	80035f4 <systick_Delay_ms>
	updateDutyCycle(&PWM_R, 90);
 8000d92:	215a      	movs	r1, #90	; 0x5a
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <main+0xb0>)
 8000d96:	f002 fb43 	bl	8003420 <updateDutyCycle>
	// Detenemos el PWM
	//stopPwmSignal(&PWM_R);


	/* Loop forever */
	while(1){
 8000d9a:	e7fe      	b.n	8000d9a <main+0x96>
 8000d9c:	200002a8 	.word	0x200002a8
 8000da0:	40023800 	.word	0x40023800
 8000da4:	200001fc 	.word	0x200001fc
 8000da8:	20000220 	.word	0x20000220
 8000dac:	20000208 	.word	0x20000208
 8000db0:	2000022c 	.word	0x2000022c
 8000db4:	20000270 	.word	0x20000270
 8000db8:	20000284 	.word	0x20000284

08000dbc <initSystem>:
}	// Fin del main



// Función para configurar los periféricos iniciales del sistemas
void initSystem(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

	// 1. ===== PUERTOS Y PINES =====
	/* Configurando el pin para el Blinky */
	stateLed.pGPIOx								= GPIOA;
 8000dc0:	4b86      	ldr	r3, [pc, #536]	; (8000fdc <initSystem+0x220>)
 8000dc2:	4a87      	ldr	r2, [pc, #540]	; (8000fe0 <initSystem+0x224>)
 8000dc4:	601a      	str	r2, [r3, #0]
	stateLed.pinConfig.GPIO_PinNumber			= PIN_5;	// PinA5
 8000dc6:	4b85      	ldr	r3, [pc, #532]	; (8000fdc <initSystem+0x220>)
 8000dc8:	2205      	movs	r2, #5
 8000dca:	711a      	strb	r2, [r3, #4]
	stateLed.pinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000dcc:	4b83      	ldr	r3, [pc, #524]	; (8000fdc <initSystem+0x220>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	715a      	strb	r2, [r3, #5]
	stateLed.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000dd2:	4b82      	ldr	r3, [pc, #520]	; (8000fdc <initSystem+0x220>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	721a      	strb	r2, [r3, #8]
	stateLed.pinConfig.GPIO_PinOutputSpeed		= GPIO_OSPEED_MEDIUM;
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <initSystem+0x220>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	719a      	strb	r2, [r3, #6]
	stateLed.pinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000dde:	4b7f      	ldr	r3, [pc, #508]	; (8000fdc <initSystem+0x220>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	71da      	strb	r2, [r3, #7]
	gpio_Config(&stateLed);
 8000de4:	487d      	ldr	r0, [pc, #500]	; (8000fdc <initSystem+0x220>)
 8000de6:	f001 fce9 	bl	80027bc <gpio_Config>
	gpio_WritePin(&stateLed, SET);
 8000dea:	2101      	movs	r1, #1
 8000dec:	487b      	ldr	r0, [pc, #492]	; (8000fdc <initSystem+0x220>)
 8000dee:	f001 fe61 	bl	8002ab4 <gpio_WritePin>

	/* Configurando el pin para el Enable del puente H */
	GPIO_Enb_R.pGPIOx							= GPIOC;
 8000df2:	4b7c      	ldr	r3, [pc, #496]	; (8000fe4 <initSystem+0x228>)
 8000df4:	4a7c      	ldr	r2, [pc, #496]	; (8000fe8 <initSystem+0x22c>)
 8000df6:	601a      	str	r2, [r3, #0]
	GPIO_Enb_R.pinConfig.GPIO_PinNumber			= PIN_10;
 8000df8:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <initSystem+0x228>)
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	711a      	strb	r2, [r3, #4]
	GPIO_Enb_R.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000dfe:	4b79      	ldr	r3, [pc, #484]	; (8000fe4 <initSystem+0x228>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	715a      	strb	r2, [r3, #5]
	GPIO_Enb_R.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000e04:	4b77      	ldr	r3, [pc, #476]	; (8000fe4 <initSystem+0x228>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	721a      	strb	r2, [r3, #8]
	GPIO_Enb_R.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000e0a:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <initSystem+0x228>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	719a      	strb	r2, [r3, #6]
	GPIO_Enb_R.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000e10:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <initSystem+0x228>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Enb_R);
 8000e16:	4873      	ldr	r0, [pc, #460]	; (8000fe4 <initSystem+0x228>)
 8000e18:	f001 fcd0 	bl	80027bc <gpio_Config>

	/* Configurando el pin para definir la dirección del motor DERECHO */
	GPIO_Dir_R.pGPIOx							= GPIOC;
 8000e1c:	4b73      	ldr	r3, [pc, #460]	; (8000fec <initSystem+0x230>)
 8000e1e:	4a72      	ldr	r2, [pc, #456]	; (8000fe8 <initSystem+0x22c>)
 8000e20:	601a      	str	r2, [r3, #0]
	GPIO_Dir_R.pinConfig.GPIO_PinNumber			= PIN_12;
 8000e22:	4b72      	ldr	r3, [pc, #456]	; (8000fec <initSystem+0x230>)
 8000e24:	220c      	movs	r2, #12
 8000e26:	711a      	strb	r2, [r3, #4]
	GPIO_Dir_R.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000e28:	4b70      	ldr	r3, [pc, #448]	; (8000fec <initSystem+0x230>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	715a      	strb	r2, [r3, #5]
	GPIO_Dir_R.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000e2e:	4b6f      	ldr	r3, [pc, #444]	; (8000fec <initSystem+0x230>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	721a      	strb	r2, [r3, #8]
	GPIO_Dir_R.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000e34:	4b6d      	ldr	r3, [pc, #436]	; (8000fec <initSystem+0x230>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	719a      	strb	r2, [r3, #6]
	GPIO_Dir_R.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000e3a:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <initSystem+0x230>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Dir_R);
 8000e40:	486a      	ldr	r0, [pc, #424]	; (8000fec <initSystem+0x230>)
 8000e42:	f001 fcbb 	bl	80027bc <gpio_Config>

	/* Pin de salida del PWM para el motor derecho. Usa el Timer5 */
	GPIO_PWM_R.pGPIOx								= GPIOA;
 8000e46:	4b6a      	ldr	r3, [pc, #424]	; (8000ff0 <initSystem+0x234>)
 8000e48:	4a65      	ldr	r2, [pc, #404]	; (8000fe0 <initSystem+0x224>)
 8000e4a:	601a      	str	r2, [r3, #0]
	GPIO_PWM_R.pinConfig.GPIO_PinNumber				= PIN_0;
 8000e4c:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <initSystem+0x234>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	711a      	strb	r2, [r3, #4]
	GPIO_PWM_R.pinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8000e52:	4b67      	ldr	r3, [pc, #412]	; (8000ff0 <initSystem+0x234>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	715a      	strb	r2, [r3, #5]
	GPIO_PWM_R.pinConfig.GPIO_PinAltFunMode			= AF2;
 8000e58:	4b65      	ldr	r3, [pc, #404]	; (8000ff0 <initSystem+0x234>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	725a      	strb	r2, [r3, #9]
	GPIO_PWM_R.pinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000e5e:	4b64      	ldr	r3, [pc, #400]	; (8000ff0 <initSystem+0x234>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	71da      	strb	r2, [r3, #7]
	GPIO_PWM_R.pinConfig.GPIO_PinOutputSpeed		= GPIO_OSPEED_FAST;
 8000e64:	4b62      	ldr	r3, [pc, #392]	; (8000ff0 <initSystem+0x234>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	719a      	strb	r2, [r3, #6]
	gpio_Config(&GPIO_PWM_R);
 8000e6a:	4861      	ldr	r0, [pc, #388]	; (8000ff0 <initSystem+0x234>)
 8000e6c:	f001 fca6 	bl	80027bc <gpio_Config>

	/* Configurando el pin para el Enable del puente H */
	GPIO_Enb_L.pGPIOx							= GPIOC;
 8000e70:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <initSystem+0x238>)
 8000e72:	4a5d      	ldr	r2, [pc, #372]	; (8000fe8 <initSystem+0x22c>)
 8000e74:	601a      	str	r2, [r3, #0]
	GPIO_Enb_L.pinConfig.GPIO_PinNumber			= PIN_11;
 8000e76:	4b5f      	ldr	r3, [pc, #380]	; (8000ff4 <initSystem+0x238>)
 8000e78:	220b      	movs	r2, #11
 8000e7a:	711a      	strb	r2, [r3, #4]
	GPIO_Enb_L.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000e7c:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <initSystem+0x238>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	715a      	strb	r2, [r3, #5]
	GPIO_Enb_L.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000e82:	4b5c      	ldr	r3, [pc, #368]	; (8000ff4 <initSystem+0x238>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	721a      	strb	r2, [r3, #8]
	GPIO_Enb_L.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000e88:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <initSystem+0x238>)
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	719a      	strb	r2, [r3, #6]
	GPIO_Enb_L.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000e8e:	4b59      	ldr	r3, [pc, #356]	; (8000ff4 <initSystem+0x238>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Enb_L);
 8000e94:	4857      	ldr	r0, [pc, #348]	; (8000ff4 <initSystem+0x238>)
 8000e96:	f001 fc91 	bl	80027bc <gpio_Config>

	/* Configurando el pin para definir la dirección del motor IZQUIERDO */
	GPIO_Dir_L.pGPIOx							= GPIOD;
 8000e9a:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <initSystem+0x23c>)
 8000e9c:	4a57      	ldr	r2, [pc, #348]	; (8000ffc <initSystem+0x240>)
 8000e9e:	601a      	str	r2, [r3, #0]
	GPIO_Dir_L.pinConfig.GPIO_PinNumber			= PIN_2;
 8000ea0:	4b55      	ldr	r3, [pc, #340]	; (8000ff8 <initSystem+0x23c>)
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	711a      	strb	r2, [r3, #4]
	GPIO_Dir_L.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000ea6:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <initSystem+0x23c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	715a      	strb	r2, [r3, #5]
	GPIO_Dir_L.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000eac:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <initSystem+0x23c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	721a      	strb	r2, [r3, #8]
	GPIO_Dir_L.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <initSystem+0x23c>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	719a      	strb	r2, [r3, #6]
	GPIO_Dir_L.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <initSystem+0x23c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Dir_L);
 8000ebe:	484e      	ldr	r0, [pc, #312]	; (8000ff8 <initSystem+0x23c>)
 8000ec0:	f001 fc7c 	bl	80027bc <gpio_Config>

	/* Pin de salida del PWM para el motor izquierdo. Usa el Timer5 */
	GPIO_PWM_L.pGPIOx								= GPIOA;
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <initSystem+0x244>)
 8000ec6:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <initSystem+0x224>)
 8000ec8:	601a      	str	r2, [r3, #0]
	GPIO_PWM_L.pinConfig.GPIO_PinNumber				= PIN_1;
 8000eca:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <initSystem+0x244>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	711a      	strb	r2, [r3, #4]
	GPIO_PWM_L.pinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8000ed0:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <initSystem+0x244>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	715a      	strb	r2, [r3, #5]
	GPIO_PWM_L.pinConfig.GPIO_PinAltFunMode			= AF2;
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <initSystem+0x244>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	725a      	strb	r2, [r3, #9]
	GPIO_PWM_L.pinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000edc:	4b48      	ldr	r3, [pc, #288]	; (8001000 <initSystem+0x244>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	71da      	strb	r2, [r3, #7]
	GPIO_PWM_L.pinConfig.GPIO_PinOutputSpeed		= GPIO_OSPEED_FAST;
 8000ee2:	4b47      	ldr	r3, [pc, #284]	; (8001000 <initSystem+0x244>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	719a      	strb	r2, [r3, #6]
	gpio_Config(&GPIO_PWM_L);
 8000ee8:	4845      	ldr	r0, [pc, #276]	; (8001000 <initSystem+0x244>)
 8000eea:	f001 fc67 	bl	80027bc <gpio_Config>

	/* Pin del Encoder Derecho */
	GPIO_Exti_R.pGPIOx							= GPIOC;
 8000eee:	4b45      	ldr	r3, [pc, #276]	; (8001004 <initSystem+0x248>)
 8000ef0:	4a3d      	ldr	r2, [pc, #244]	; (8000fe8 <initSystem+0x22c>)
 8000ef2:	601a      	str	r2, [r3, #0]
	GPIO_Exti_R.pinConfig.GPIO_PinNumber		= PIN_1;
 8000ef4:	4b43      	ldr	r3, [pc, #268]	; (8001004 <initSystem+0x248>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	711a      	strb	r2, [r3, #4]
	GPIO_Exti_R.pinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000efa:	4b42      	ldr	r3, [pc, #264]	; (8001004 <initSystem+0x248>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	715a      	strb	r2, [r3, #5]
	gpio_Config(&GPIO_Exti_R);
 8000f00:	4840      	ldr	r0, [pc, #256]	; (8001004 <initSystem+0x248>)
 8000f02:	f001 fc5b 	bl	80027bc <gpio_Config>

	/* Pin del Encoder Izquierdo */
	GPIO_Exti_L.pGPIOx							= GPIOC;
 8000f06:	4b40      	ldr	r3, [pc, #256]	; (8001008 <initSystem+0x24c>)
 8000f08:	4a37      	ldr	r2, [pc, #220]	; (8000fe8 <initSystem+0x22c>)
 8000f0a:	601a      	str	r2, [r3, #0]
	GPIO_Exti_L.pinConfig.GPIO_PinNumber		= PIN_3;
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <initSystem+0x24c>)
 8000f0e:	2203      	movs	r2, #3
 8000f10:	711a      	strb	r2, [r3, #4]
	GPIO_Exti_L.pinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <initSystem+0x24c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	715a      	strb	r2, [r3, #5]
	gpio_Config(&GPIO_Exti_L);
 8000f18:	483b      	ldr	r0, [pc, #236]	; (8001008 <initSystem+0x24c>)
 8000f1a:	f001 fc4f 	bl	80027bc <gpio_Config>


	// 2. ===== TIMERS =====
	/* Configurando el Timer del Blinky*/
	Tim_Blinky.pTIMx								= TIM2;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <initSystem+0x250>)
 8000f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f24:	601a      	str	r2, [r3, #0]
	Tim_Blinky.TIMx_Config.TIMx_Prescaler			= 100E3;	// Genera incrementos de 1 ms. El micro está a 100MHz
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <initSystem+0x250>)
 8000f28:	4a39      	ldr	r2, [pc, #228]	; (8001010 <initSystem+0x254>)
 8000f2a:	609a      	str	r2, [r3, #8]
	Tim_Blinky.TIMx_Config.TIMx_Period				= 2000;		// De la mano con el pre-scaler, determina cuando se dispara una interrupción (500 ms)
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <initSystem+0x250>)
 8000f2e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f32:	60da      	str	r2, [r3, #12]
	Tim_Blinky.TIMx_Config.TIMx_mode				= TIMER_UP_COUNTER;	// El Timer cuante ascendente
 8000f34:	4b35      	ldr	r3, [pc, #212]	; (800100c <initSystem+0x250>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	711a      	strb	r2, [r3, #4]
	Tim_Blinky.TIMx_Config.TIMx_InterruptEnable		= TIMER_INT_ENABLE;	// Se activa la interrupción
 8000f3a:	4b34      	ldr	r3, [pc, #208]	; (800100c <initSystem+0x250>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	741a      	strb	r2, [r3, #16]
	timer_Config(&Tim_Blinky);
 8000f40:	4832      	ldr	r0, [pc, #200]	; (800100c <initSystem+0x250>)
 8000f42:	f002 fbf9 	bl	8003738 <timer_Config>
	timer_SetState(&Tim_Blinky, TIMER_ON);
 8000f46:	2101      	movs	r1, #1
 8000f48:	4830      	ldr	r0, [pc, #192]	; (800100c <initSystem+0x250>)
 8000f4a:	f002 fd73 	bl	8003a34 <timer_SetState>


	// 3. ===== PWM =====

	/* Configurando el PWM para el motor DERECHO */
	PWM_R.ptrTIMx					= TIM5; // Timer5 usado para el PWM
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <initSystem+0x258>)
 8000f50:	4a31      	ldr	r2, [pc, #196]	; (8001018 <initSystem+0x25c>)
 8000f52:	601a      	str	r2, [r3, #0]
	PWM_R.config.channel			= PWM_CHANNEL_1;
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <initSystem+0x258>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	711a      	strb	r2, [r3, #4]
	PWM_R.config.prescaler			= 100E3; 	// 1 ms
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <initSystem+0x258>)
 8000f5c:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <initSystem+0x254>)
 8000f5e:	609a      	str	r2, [r3, #8]
	PWM_R.config.periodo			= 500;		// 500 ms
 8000f60:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <initSystem+0x258>)
 8000f62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f66:	819a      	strh	r2, [r3, #12]
	PWM_R.config.percDuty			= 10;		// Activo por 5 ms
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <initSystem+0x258>)
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	821a      	strh	r2, [r3, #16]
	pwm_Config(&PWM_R);
 8000f6e:	4829      	ldr	r0, [pc, #164]	; (8001014 <initSystem+0x258>)
 8000f70:	f001 ffe6 	bl	8002f40 <pwm_Config>

	/* Configurando el PWM para el motor IZQUIERDO */
	PWM_L.ptrTIMx					= TIM5; // Timer3 usado para el PWM
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <initSystem+0x260>)
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <initSystem+0x25c>)
 8000f78:	601a      	str	r2, [r3, #0]
	PWM_L.config.channel			= PWM_CHANNEL_2;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <initSystem+0x260>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	711a      	strb	r2, [r3, #4]
	PWM_L.config.prescaler			= 100E3; 	// 1 ms
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <initSystem+0x260>)
 8000f82:	4a23      	ldr	r2, [pc, #140]	; (8001010 <initSystem+0x254>)
 8000f84:	609a      	str	r2, [r3, #8]
	PWM_L.config.periodo			= 500;		// 500 ms
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <initSystem+0x260>)
 8000f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f8c:	819a      	strh	r2, [r3, #12]
	PWM_L.config.percDuty			= 10;		// Activo por 5 ms
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <initSystem+0x260>)
 8000f90:	220a      	movs	r2, #10
 8000f92:	821a      	strh	r2, [r3, #16]
	pwm_Config(&PWM_L);
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <initSystem+0x260>)
 8000f96:	f001 ffd3 	bl	8002f40 <pwm_Config>


	// 4. ====== EXTI =====
	/* Condigurando EXTI1 - Encoder Derecho */
	Exti_R.pGPIOHandler				= &GPIO_Exti_R;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <initSystem+0x264>)
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <initSystem+0x248>)
 8000f9e:	601a      	str	r2, [r3, #0]
	Exti_R.edgeType					= EXTERNAL_INTERRUPT_RISING_EDGE;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <initSystem+0x264>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	711a      	strb	r2, [r3, #4]
	exti_Config(&Exti_R);
 8000fa6:	481e      	ldr	r0, [pc, #120]	; (8001020 <initSystem+0x264>)
 8000fa8:	f000 f972 	bl	8001290 <exti_Config>

	/* Condigurando EXTI3 - Encoder Izquierdo */
	Exti_L.pGPIOHandler				= &GPIO_Exti_L;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <initSystem+0x268>)
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <initSystem+0x24c>)
 8000fb0:	601a      	str	r2, [r3, #0]
	Exti_L.edgeType					= EXTERNAL_INTERRUPT_RISING_EDGE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <initSystem+0x268>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	711a      	strb	r2, [r3, #4]
	exti_Config(&Exti_L);
 8000fb8:	481a      	ldr	r0, [pc, #104]	; (8001024 <initSystem+0x268>)
 8000fba:	f000 f969 	bl	8001290 <exti_Config>

	// 5. ====== SYSTICK =====
	SystickHandler.pSystick 						= SYSTICK;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <initSystem+0x26c>)
 8000fc0:	4a1a      	ldr	r2, [pc, #104]	; (800102c <initSystem+0x270>)
 8000fc2:	601a      	str	r2, [r3, #0]
	SystickHandler.Systick_Config.Systick_Reload	= 100000;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <initSystem+0x26c>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <initSystem+0x254>)
 8000fc8:	605a      	str	r2, [r3, #4]
	SystickHandler.Systick_Config.Systick_IntState 	= SYSTICK_ON;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <initSystem+0x26c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	721a      	strb	r2, [r3, #8]
	systick_Config(&SystickHandler);
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <initSystem+0x26c>)
 8000fd2:	f002 fa77 	bl	80034c4 <systick_Config>


}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001f0 	.word	0x200001f0
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	200001fc 	.word	0x200001fc
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	20000208 	.word	0x20000208
 8000ff0:	20000214 	.word	0x20000214
 8000ff4:	20000220 	.word	0x20000220
 8000ff8:	2000022c 	.word	0x2000022c
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	20000238 	.word	0x20000238
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	2000025c 	.word	0x2000025c
 8001010:	000186a0 	.word	0x000186a0
 8001014:	20000270 	.word	0x20000270
 8001018:	40000c00 	.word	0x40000c00
 800101c:	20000284 	.word	0x20000284
 8001020:	20000298 	.word	0x20000298
 8001024:	200002a0 	.word	0x200002a0
 8001028:	200002b0 	.word	0x200002b0
 800102c:	e000e010 	.word	0xe000e010

08001030 <callback_ExtInt1>:


/* Función callback que atiende la interrupción del EXTI8, en este caso, corresponde
 * a la interrupcón externa del encoder
 * */
void callback_ExtInt1(void){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	counter_R ++;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <callback_ExtInt1+0x1c>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <callback_ExtInt1+0x1c>)
 800103e:	801a      	strh	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200002bc 	.word	0x200002bc

08001050 <Timer2_Callback>:

/* Callback de Timer 2 para el Blinky */
void Timer2_Callback(void){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	gpio_TooglePin(&stateLed);
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <Timer2_Callback+0x1c>)
 8001056:	f001 fd7c 	bl	8002b52 <gpio_TooglePin>
	counter_L++;
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <Timer2_Callback+0x20>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <Timer2_Callback+0x20>)
 8001064:	801a      	strh	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200001f0 	.word	0x200001f0
 8001070:	200002be 	.word	0x200002be

08001074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return 1;
 8001078:	2301      	movs	r3, #1
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_kill>:

int _kill(int pid, int sig)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800108e:	f002 fd45 	bl	8003b1c <__errno>
 8001092:	4603      	mov	r3, r0
 8001094:	2216      	movs	r2, #22
 8001096:	601a      	str	r2, [r3, #0]
	return -1;
 8001098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_exit>:

void _exit (int status)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffe7 	bl	8001084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010b6:	e7fe      	b.n	80010b6 <_exit+0x12>

080010b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e00a      	b.n	80010e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ca:	f3af 8000 	nop.w
 80010ce:	4601      	mov	r1, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf0      	blt.n	80010ca <_read+0x12>
	}

return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e009      	b.n	8001118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf1      	blt.n	8001104 <_write+0x12>
	}
	return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_close>:

int _close(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	return -1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001152:	605a      	str	r2, [r3, #4]
	return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_isatty>:

int _isatty(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f002 fcaa 	bl	8003b1c <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20020000 	.word	0x20020000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	200002c0 	.word	0x200002c0
 80011fc:	200002e8 	.word	0x200002e8

08001200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001202:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	; (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	; (800124c <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800122e:	f002 fc7b 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fd67 	bl	8000d04 <main>

08001236 <LoopForever>:

LoopForever:
    b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   r0, =_estack
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001244:	08008924 	.word	0x08008924
  ldr r2, =_sbss
 8001248:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800124c:	200002e4 	.word	0x200002e4

08001250 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <exti_Config>:
/*
 * Funcion de configuracion del sistema EXTI.
 * Requiere que un pinX ya se encuentre configurado como
 * entrada digital
 * */
void exti_Config(EXTI_Config_t *extiConfig){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	gpio_Config(extiConfig->pGPIOHandler);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f001 fa8d 	bl	80027bc <gpio_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	exti_enable_clock_peripheral();
 80012a2:	f000 f811 	bl	80012c8 <exti_enable_clock_peripheral>

	/* 3.0 Selección de canal */
	exti_assign_channel(extiConfig);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f81e 	bl	80012e8 <exti_assign_channel>

	/* 4.0 Seleccionamos el tipo de flanco */
	exti_select_edge(extiConfig);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fdff 	bl	8001eb0 <exti_select_edge>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b2:	b672      	cpsid	i
}
 80012b4:	bf00      	nop

	/* 5.0 Desactivo primero las interrupciones globales */
	__disable_irq();

	/* 6. 0 Manejo de Interrupciones */
	exti_config_interrupt(extiConfig);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 f804 	bl	80022c4 <exti_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 80012bc:	b662      	cpsie	i
}
 80012be:	bf00      	nop

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <exti_enable_clock_peripheral>:

/*
 * No requiere el periferico, ya que solo es necesario activar
 * al SYSCFG
 * */
static void exti_enable_clock_peripheral(void){
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <exti_enable_clock_peripheral+0x1c>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <exti_enable_clock_peripheral+0x1c>)
 80012d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <exti_assign_channel>:

/*
 * Función que configura los MUX para asignar el pinX del puerto Y
 * a la entrada EXTI correspondiente.
 * */
static void exti_assign_channel(EXTI_Config_t *extiConfig){
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	/*Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
		 * Debemos activar la línea PIN_Xy (X = A, B, C... y y = 0, 1, 2, 3...)
		 * en el módulo EXTI */

	switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	791b      	ldrb	r3, [r3, #4]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	f200 85cd 	bhi.w	8001e96 <exti_assign_channel+0xbae>
 80012fc:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <exti_assign_channel+0x1c>)
 80012fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001302:	bf00      	nop
 8001304:	08001345 	.word	0x08001345
 8001308:	080013fb 	.word	0x080013fb
 800130c:	080014b1 	.word	0x080014b1
 8001310:	08001567 	.word	0x08001567
 8001314:	0800163b 	.word	0x0800163b
 8001318:	080016e9 	.word	0x080016e9
 800131c:	08001791 	.word	0x08001791
 8001320:	08001855 	.word	0x08001855
 8001324:	080018fd 	.word	0x080018fd
 8001328:	080019a5 	.word	0x080019a5
 800132c:	08001a6b 	.word	0x08001a6b
 8001330:	08001b13 	.word	0x08001b13
 8001334:	08001bbb 	.word	0x08001bbb
 8001338:	08001c81 	.word	0x08001c81
 800133c:	08001d29 	.word	0x08001d29
 8001340:	08001dd1 	.word	0x08001dd1
	/* Configurando para todos los pines GPIOX_0 */
	case 0: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8001344:	4b91      	ldr	r3, [pc, #580]	; (800158c <exti_assign_channel+0x2a4>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	4a90      	ldr	r2, [pc, #576]	; (800158c <exti_assign_channel+0x2a4>)
 800134a:	f023 030f 	bic.w	r3, r3, #15
 800134e:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a8e      	ldr	r2, [pc, #568]	; (8001590 <exti_assign_channel+0x2a8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d105      	bne.n	8001368 <exti_assign_channel+0x80>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 800135c:	4b8b      	ldr	r3, [pc, #556]	; (800158c <exti_assign_channel+0x2a4>)
 800135e:	4a8b      	ldr	r2, [pc, #556]	; (800158c <exti_assign_channel+0x2a4>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8001364:	f000 bd99 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a89      	ldr	r2, [pc, #548]	; (8001594 <exti_assign_channel+0x2ac>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d107      	bne.n	8001384 <exti_assign_channel+0x9c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8001374:	4b85      	ldr	r3, [pc, #532]	; (800158c <exti_assign_channel+0x2a4>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a84      	ldr	r2, [pc, #528]	; (800158c <exti_assign_channel+0x2a4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6093      	str	r3, [r2, #8]
		break;
 8001380:	f000 bd8b 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a83      	ldr	r2, [pc, #524]	; (8001598 <exti_assign_channel+0x2b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d107      	bne.n	80013a0 <exti_assign_channel+0xb8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <exti_assign_channel+0x2a4>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4a7d      	ldr	r2, [pc, #500]	; (800158c <exti_assign_channel+0x2a4>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	6093      	str	r3, [r2, #8]
		break;
 800139c:	f000 bd7d 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7d      	ldr	r2, [pc, #500]	; (800159c <exti_assign_channel+0x2b4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d107      	bne.n	80013bc <exti_assign_channel+0xd4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80013ac:	4b77      	ldr	r3, [pc, #476]	; (800158c <exti_assign_channel+0x2a4>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4a76      	ldr	r2, [pc, #472]	; (800158c <exti_assign_channel+0x2a4>)
 80013b2:	f043 0303 	orr.w	r3, r3, #3
 80013b6:	6093      	str	r3, [r2, #8]
		break;
 80013b8:	f000 bd6f 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a77      	ldr	r2, [pc, #476]	; (80015a0 <exti_assign_channel+0x2b8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d107      	bne.n	80013d8 <exti_assign_channel+0xf0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <exti_assign_channel+0x2a4>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a6f      	ldr	r2, [pc, #444]	; (800158c <exti_assign_channel+0x2a4>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6093      	str	r3, [r2, #8]
		break;
 80013d4:	f000 bd61 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a71      	ldr	r2, [pc, #452]	; (80015a4 <exti_assign_channel+0x2bc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d107      	bne.n	80013f4 <exti_assign_channel+0x10c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80013e4:	4b69      	ldr	r3, [pc, #420]	; (800158c <exti_assign_channel+0x2a4>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a68      	ldr	r2, [pc, #416]	; (800158c <exti_assign_channel+0x2a4>)
 80013ea:	f043 0307 	orr.w	r3, r3, #7
 80013ee:	6093      	str	r3, [r2, #8]
		break;
 80013f0:	f000 bd53 	b.w	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 80013f4:	bf00      	nop
		break;
 80013f6:	f000 bd50 	b.w	8001e9a <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_1 */
	case 1: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80013fa:	4b64      	ldr	r3, [pc, #400]	; (800158c <exti_assign_channel+0x2a4>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4a63      	ldr	r2, [pc, #396]	; (800158c <exti_assign_channel+0x2a4>)
 8001400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001404:	6093      	str	r3, [r2, #8]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a60      	ldr	r2, [pc, #384]	; (8001590 <exti_assign_channel+0x2a8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d105      	bne.n	800141e <exti_assign_channel+0x136>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <exti_assign_channel+0x2a4>)
 8001414:	4a5d      	ldr	r2, [pc, #372]	; (800158c <exti_assign_channel+0x2a4>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 800141a:	f000 bd3e 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <exti_assign_channel+0x2ac>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d107      	bne.n	800143a <exti_assign_channel+0x152>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800142a:	4b58      	ldr	r3, [pc, #352]	; (800158c <exti_assign_channel+0x2a4>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4a57      	ldr	r2, [pc, #348]	; (800158c <exti_assign_channel+0x2a4>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6093      	str	r3, [r2, #8]
		break;
 8001436:	f000 bd30 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a55      	ldr	r2, [pc, #340]	; (8001598 <exti_assign_channel+0x2b0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d107      	bne.n	8001456 <exti_assign_channel+0x16e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <exti_assign_channel+0x2a4>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4a50      	ldr	r2, [pc, #320]	; (800158c <exti_assign_channel+0x2a4>)
 800144c:	f043 0320 	orr.w	r3, r3, #32
 8001450:	6093      	str	r3, [r2, #8]
		break;
 8001452:	f000 bd22 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <exti_assign_channel+0x2b4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d107      	bne.n	8001472 <exti_assign_channel+0x18a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <exti_assign_channel+0x2a4>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4a49      	ldr	r2, [pc, #292]	; (800158c <exti_assign_channel+0x2a4>)
 8001468:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800146c:	6093      	str	r3, [r2, #8]
		break;
 800146e:	f000 bd14 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a49      	ldr	r2, [pc, #292]	; (80015a0 <exti_assign_channel+0x2b8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d107      	bne.n	800148e <exti_assign_channel+0x1a6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <exti_assign_channel+0x2a4>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4a42      	ldr	r2, [pc, #264]	; (800158c <exti_assign_channel+0x2a4>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	6093      	str	r3, [r2, #8]
		break;
 800148a:	f000 bd06 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <exti_assign_channel+0x2bc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d107      	bne.n	80014aa <exti_assign_channel+0x1c2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <exti_assign_channel+0x2a4>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	4a3b      	ldr	r2, [pc, #236]	; (800158c <exti_assign_channel+0x2a4>)
 80014a0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80014a4:	6093      	str	r3, [r2, #8]
		break;
 80014a6:	f000 bcf8 	b.w	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 80014aa:	bf00      	nop
		break;
 80014ac:	f000 bcf5 	b.w	8001e9a <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_2 */
	case 2: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 80014b0:	4b36      	ldr	r3, [pc, #216]	; (800158c <exti_assign_channel+0x2a4>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a35      	ldr	r2, [pc, #212]	; (800158c <exti_assign_channel+0x2a4>)
 80014b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014ba:	6093      	str	r3, [r2, #8]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a33      	ldr	r2, [pc, #204]	; (8001590 <exti_assign_channel+0x2a8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d105      	bne.n	80014d4 <exti_assign_channel+0x1ec>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <exti_assign_channel+0x2a4>)
 80014ca:	4a30      	ldr	r2, [pc, #192]	; (800158c <exti_assign_channel+0x2a4>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 80014d0:	f000 bce3 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <exti_assign_channel+0x2ac>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d107      	bne.n	80014f0 <exti_assign_channel+0x208>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <exti_assign_channel+0x2a4>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a29      	ldr	r2, [pc, #164]	; (800158c <exti_assign_channel+0x2a4>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6093      	str	r3, [r2, #8]
		break;
 80014ec:	f000 bcd5 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a28      	ldr	r2, [pc, #160]	; (8001598 <exti_assign_channel+0x2b0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d107      	bne.n	800150c <exti_assign_channel+0x224>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <exti_assign_channel+0x2a4>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <exti_assign_channel+0x2a4>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001506:	6093      	str	r3, [r2, #8]
		break;
 8001508:	f000 bcc7 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a22      	ldr	r2, [pc, #136]	; (800159c <exti_assign_channel+0x2b4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d107      	bne.n	8001528 <exti_assign_channel+0x240>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <exti_assign_channel+0x2a4>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <exti_assign_channel+0x2a4>)
 800151e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001522:	6093      	str	r3, [r2, #8]
		break;
 8001524:	f000 bcb9 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <exti_assign_channel+0x2b8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d107      	bne.n	8001544 <exti_assign_channel+0x25c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <exti_assign_channel+0x2a4>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <exti_assign_channel+0x2a4>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6093      	str	r3, [r2, #8]
		break;
 8001540:	f000 bcab 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <exti_assign_channel+0x2bc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d107      	bne.n	8001560 <exti_assign_channel+0x278>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <exti_assign_channel+0x2a4>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <exti_assign_channel+0x2a4>)
 8001556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800155a:	6093      	str	r3, [r2, #8]
		break;
 800155c:	f000 bc9d 	b.w	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001560:	bf00      	nop
		break;
 8001562:	f000 bc9a 	b.w	8001e9a <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_3 */
	case 3: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <exti_assign_channel+0x2a4>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <exti_assign_channel+0x2a4>)
 800156c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001570:	6093      	str	r3, [r2, #8]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <exti_assign_channel+0x2a8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d114      	bne.n	80015a8 <exti_assign_channel+0x2c0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800157e:	4b03      	ldr	r3, [pc, #12]	; (800158c <exti_assign_channel+0x2a4>)
 8001580:	4a02      	ldr	r2, [pc, #8]	; (800158c <exti_assign_channel+0x2a4>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8001586:	f000 bc88 	b.w	8001e9a <exti_assign_channel+0xbb2>
 800158a:	bf00      	nop
 800158c:	40013800 	.word	0x40013800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40021c00 	.word	0x40021c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a87      	ldr	r2, [pc, #540]	; (80017cc <exti_assign_channel+0x4e4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d107      	bne.n	80015c4 <exti_assign_channel+0x2dc>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80015b4:	4b86      	ldr	r3, [pc, #536]	; (80017d0 <exti_assign_channel+0x4e8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a85      	ldr	r2, [pc, #532]	; (80017d0 <exti_assign_channel+0x4e8>)
 80015ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015be:	6093      	str	r3, [r2, #8]
		break;
 80015c0:	f000 bc6b 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a82      	ldr	r2, [pc, #520]	; (80017d4 <exti_assign_channel+0x4ec>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d107      	bne.n	80015e0 <exti_assign_channel+0x2f8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80015d0:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <exti_assign_channel+0x4e8>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <exti_assign_channel+0x4e8>)
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	6093      	str	r3, [r2, #8]
		break;
 80015dc:	f000 bc5d 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7c      	ldr	r2, [pc, #496]	; (80017d8 <exti_assign_channel+0x4f0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d107      	bne.n	80015fc <exti_assign_channel+0x314>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80015ec:	4b78      	ldr	r3, [pc, #480]	; (80017d0 <exti_assign_channel+0x4e8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <exti_assign_channel+0x4e8>)
 80015f2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80015f6:	6093      	str	r3, [r2, #8]
		break;
 80015f8:	f000 bc4f 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a76      	ldr	r2, [pc, #472]	; (80017dc <exti_assign_channel+0x4f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d107      	bne.n	8001618 <exti_assign_channel+0x330>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <exti_assign_channel+0x4e8>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a70      	ldr	r2, [pc, #448]	; (80017d0 <exti_assign_channel+0x4e8>)
 800160e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001612:	6093      	str	r3, [r2, #8]
		break;
 8001614:	f000 bc41 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a70      	ldr	r2, [pc, #448]	; (80017e0 <exti_assign_channel+0x4f8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d107      	bne.n	8001634 <exti_assign_channel+0x34c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8001624:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a69      	ldr	r2, [pc, #420]	; (80017d0 <exti_assign_channel+0x4e8>)
 800162a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800162e:	6093      	str	r3, [r2, #8]
		break;
 8001630:	f000 bc33 	b.w	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001634:	bf00      	nop
		break;
 8001636:	f000 bc30 	b.w	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_4 */
	case 4: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 800163a:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <exti_assign_channel+0x4e8>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	4a64      	ldr	r2, [pc, #400]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001640:	f023 030f 	bic.w	r3, r3, #15
 8001644:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	; (80017e4 <exti_assign_channel+0x4fc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d105      	bne.n	800165e <exti_assign_channel+0x376>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8001652:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001654:	4a5e      	ldr	r2, [pc, #376]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 800165a:	f000 bc1e 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a59      	ldr	r2, [pc, #356]	; (80017cc <exti_assign_channel+0x4e4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d107      	bne.n	800167a <exti_assign_channel+0x392>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <exti_assign_channel+0x4e8>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	60d3      	str	r3, [r2, #12]
		break;
 8001676:	f000 bc10 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a54      	ldr	r2, [pc, #336]	; (80017d4 <exti_assign_channel+0x4ec>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d107      	bne.n	8001696 <exti_assign_channel+0x3ae>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8001686:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <exti_assign_channel+0x4e8>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	60d3      	str	r3, [r2, #12]
		break;
 8001692:	f000 bc02 	b.w	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4e      	ldr	r2, [pc, #312]	; (80017d8 <exti_assign_channel+0x4f0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d106      	bne.n	80016b0 <exti_assign_channel+0x3c8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016a8:	f043 0303 	orr.w	r3, r3, #3
 80016ac:	60d3      	str	r3, [r2, #12]
		break;
 80016ae:	e3f4      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a49      	ldr	r2, [pc, #292]	; (80017dc <exti_assign_channel+0x4f4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d106      	bne.n	80016ca <exti_assign_channel+0x3e2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80016bc:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	60d3      	str	r3, [r2, #12]
		break;
 80016c8:	e3e7      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a43      	ldr	r2, [pc, #268]	; (80017e0 <exti_assign_channel+0x4f8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d106      	bne.n	80016e4 <exti_assign_channel+0x3fc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4a3d      	ldr	r2, [pc, #244]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016dc:	f043 0307 	orr.w	r3, r3, #7
 80016e0:	60d3      	str	r3, [r2, #12]
		break;
 80016e2:	e3da      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 80016e4:	bf00      	nop
		break;
 80016e6:	e3d8      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_5 */
	case 5: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <exti_assign_channel+0x4e8>)
 80016ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016f2:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <exti_assign_channel+0x4fc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d104      	bne.n	800170a <exti_assign_channel+0x422>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001708:	e3c7      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <exti_assign_channel+0x4e4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d106      	bne.n	8001724 <exti_assign_channel+0x43c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <exti_assign_channel+0x4e8>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	60d3      	str	r3, [r2, #12]
		break;
 8001722:	e3ba      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <exti_assign_channel+0x4ec>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d106      	bne.n	800173e <exti_assign_channel+0x456>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001736:	f043 0320 	orr.w	r3, r3, #32
 800173a:	60d3      	str	r3, [r2, #12]
		break;
 800173c:	e3ad      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <exti_assign_channel+0x4f0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d106      	bne.n	8001758 <exti_assign_channel+0x470>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <exti_assign_channel+0x4e8>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001750:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001754:	60d3      	str	r3, [r2, #12]
		break;
 8001756:	e3a0      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <exti_assign_channel+0x4f4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d106      	bne.n	8001772 <exti_assign_channel+0x48a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <exti_assign_channel+0x4e8>)
 800176a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176e:	60d3      	str	r3, [r2, #12]
		break;
 8001770:	e393      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <exti_assign_channel+0x4f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d106      	bne.n	800178c <exti_assign_channel+0x4a4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001784:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001788:	60d3      	str	r3, [r2, #12]
		break;
 800178a:	e386      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 800178c:	bf00      	nop
		break;
 800178e:	e384      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_6 */
	case 6: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <exti_assign_channel+0x4e8>)
 8001796:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800179a:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <exti_assign_channel+0x4fc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d104      	bne.n	80017b2 <exti_assign_channel+0x4ca>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <exti_assign_channel+0x4e8>)
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <exti_assign_channel+0x4e8>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 80017b0:	e373      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <exti_assign_channel+0x4e4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d114      	bne.n	80017e8 <exti_assign_channel+0x500>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <exti_assign_channel+0x4e8>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <exti_assign_channel+0x4e8>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	60d3      	str	r3, [r2, #12]
		break;
 80017ca:	e366      	b.n	8001e9a <exti_assign_channel+0xbb2>
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40020000 	.word	0x40020000
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a83      	ldr	r2, [pc, #524]	; (80019fc <exti_assign_channel+0x714>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d106      	bne.n	8001802 <exti_assign_channel+0x51a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80017f4:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <exti_assign_channel+0x718>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a81      	ldr	r2, [pc, #516]	; (8001a00 <exti_assign_channel+0x718>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	60d3      	str	r3, [r2, #12]
		break;
 8001800:	e34b      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a7e      	ldr	r2, [pc, #504]	; (8001a04 <exti_assign_channel+0x71c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d106      	bne.n	800181c <exti_assign_channel+0x534>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800180e:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <exti_assign_channel+0x718>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a7b      	ldr	r2, [pc, #492]	; (8001a00 <exti_assign_channel+0x718>)
 8001814:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001818:	60d3      	str	r3, [r2, #12]
		break;
 800181a:	e33e      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a79      	ldr	r2, [pc, #484]	; (8001a08 <exti_assign_channel+0x720>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d106      	bne.n	8001836 <exti_assign_channel+0x54e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <exti_assign_channel+0x718>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a74      	ldr	r2, [pc, #464]	; (8001a00 <exti_assign_channel+0x718>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	60d3      	str	r3, [r2, #12]
		break;
 8001834:	e331      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a73      	ldr	r2, [pc, #460]	; (8001a0c <exti_assign_channel+0x724>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d106      	bne.n	8001850 <exti_assign_channel+0x568>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <exti_assign_channel+0x718>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <exti_assign_channel+0x718>)
 8001848:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184c:	60d3      	str	r3, [r2, #12]
		break;
 800184e:	e324      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001850:	bf00      	nop
		break;
 8001852:	e322      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_7 */
	case 7: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <exti_assign_channel+0x718>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a69      	ldr	r2, [pc, #420]	; (8001a00 <exti_assign_channel+0x718>)
 800185a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800185e:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6a      	ldr	r2, [pc, #424]	; (8001a10 <exti_assign_channel+0x728>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d104      	bne.n	8001876 <exti_assign_channel+0x58e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <exti_assign_channel+0x718>)
 800186e:	4a64      	ldr	r2, [pc, #400]	; (8001a00 <exti_assign_channel+0x718>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001874:	e311      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a65      	ldr	r2, [pc, #404]	; (8001a14 <exti_assign_channel+0x72c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d106      	bne.n	8001890 <exti_assign_channel+0x5a8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8001882:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <exti_assign_channel+0x718>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4a5e      	ldr	r2, [pc, #376]	; (8001a00 <exti_assign_channel+0x718>)
 8001888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800188c:	60d3      	str	r3, [r2, #12]
		break;
 800188e:	e304      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a59      	ldr	r2, [pc, #356]	; (80019fc <exti_assign_channel+0x714>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d106      	bne.n	80018aa <exti_assign_channel+0x5c2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800189c:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <exti_assign_channel+0x718>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a57      	ldr	r2, [pc, #348]	; (8001a00 <exti_assign_channel+0x718>)
 80018a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a6:	60d3      	str	r3, [r2, #12]
		break;
 80018a8:	e2f7      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <exti_assign_channel+0x71c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d106      	bne.n	80018c4 <exti_assign_channel+0x5dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80018b6:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <exti_assign_channel+0x718>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a51      	ldr	r2, [pc, #324]	; (8001a00 <exti_assign_channel+0x718>)
 80018bc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80018c0:	60d3      	str	r3, [r2, #12]
		break;
 80018c2:	e2ea      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4f      	ldr	r2, [pc, #316]	; (8001a08 <exti_assign_channel+0x720>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d106      	bne.n	80018de <exti_assign_channel+0x5f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <exti_assign_channel+0x718>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <exti_assign_channel+0x718>)
 80018d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018da:	60d3      	str	r3, [r2, #12]
		break;
 80018dc:	e2dd      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <exti_assign_channel+0x724>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d106      	bne.n	80018f8 <exti_assign_channel+0x610>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <exti_assign_channel+0x718>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <exti_assign_channel+0x718>)
 80018f0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80018f4:	60d3      	str	r3, [r2, #12]
		break;
 80018f6:	e2d0      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 80018f8:	bf00      	nop
		break;
 80018fa:	e2ce      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_8 */
	case 8: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <exti_assign_channel+0x718>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4a3f      	ldr	r2, [pc, #252]	; (8001a00 <exti_assign_channel+0x718>)
 8001902:	f023 030f 	bic.w	r3, r3, #15
 8001906:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <exti_assign_channel+0x728>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d104      	bne.n	800191e <exti_assign_channel+0x636>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <exti_assign_channel+0x718>)
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <exti_assign_channel+0x718>)
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 800191c:	e2bd      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a3b      	ldr	r2, [pc, #236]	; (8001a14 <exti_assign_channel+0x72c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d106      	bne.n	8001938 <exti_assign_channel+0x650>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <exti_assign_channel+0x718>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <exti_assign_channel+0x718>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6113      	str	r3, [r2, #16]
		break;
 8001936:	e2b0      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <exti_assign_channel+0x714>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d106      	bne.n	8001952 <exti_assign_channel+0x66a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <exti_assign_channel+0x718>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a2d      	ldr	r2, [pc, #180]	; (8001a00 <exti_assign_channel+0x718>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	6113      	str	r3, [r2, #16]
		break;
 8001950:	e2a3      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2a      	ldr	r2, [pc, #168]	; (8001a04 <exti_assign_channel+0x71c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d106      	bne.n	800196c <exti_assign_channel+0x684>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <exti_assign_channel+0x718>)
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <exti_assign_channel+0x718>)
 8001964:	f043 0303 	orr.w	r3, r3, #3
 8001968:	6113      	str	r3, [r2, #16]
		break;
 800196a:	e296      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <exti_assign_channel+0x720>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d106      	bne.n	8001986 <exti_assign_channel+0x69e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <exti_assign_channel+0x718>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <exti_assign_channel+0x718>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6113      	str	r3, [r2, #16]
		break;
 8001984:	e289      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <exti_assign_channel+0x724>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d106      	bne.n	80019a0 <exti_assign_channel+0x6b8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <exti_assign_channel+0x718>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <exti_assign_channel+0x718>)
 8001998:	f043 0307 	orr.w	r3, r3, #7
 800199c:	6113      	str	r3, [r2, #16]
		break;
 800199e:	e27c      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 80019a0:	bf00      	nop
		break;
 80019a2:	e27a      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_9 */
	case 9: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <exti_assign_channel+0x718>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <exti_assign_channel+0x718>)
 80019aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ae:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <exti_assign_channel+0x728>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d104      	bne.n	80019c6 <exti_assign_channel+0x6de>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <exti_assign_channel+0x718>)
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <exti_assign_channel+0x718>)
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 80019c4:	e269      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <exti_assign_channel+0x72c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d106      	bne.n	80019e0 <exti_assign_channel+0x6f8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <exti_assign_channel+0x718>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <exti_assign_channel+0x718>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	6113      	str	r3, [r2, #16]
		break;
 80019de:	e25c      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <exti_assign_channel+0x714>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d115      	bne.n	8001a18 <exti_assign_channel+0x730>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <exti_assign_channel+0x718>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <exti_assign_channel+0x718>)
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	6113      	str	r3, [r2, #16]
		break;
 80019f8:	e24f      	b.n	8001e9a <exti_assign_channel+0xbb2>
 80019fa:	bf00      	nop
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40021c00 	.word	0x40021c00
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a83      	ldr	r2, [pc, #524]	; (8001c2c <exti_assign_channel+0x944>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d106      	bne.n	8001a32 <exti_assign_channel+0x74a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8001a24:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <exti_assign_channel+0x948>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	4a81      	ldr	r2, [pc, #516]	; (8001c30 <exti_assign_channel+0x948>)
 8001a2a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001a2e:	6113      	str	r3, [r2, #16]
		break;
 8001a30:	e233      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a7e      	ldr	r2, [pc, #504]	; (8001c34 <exti_assign_channel+0x94c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d106      	bne.n	8001a4c <exti_assign_channel+0x764>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8001a3e:	4b7c      	ldr	r3, [pc, #496]	; (8001c30 <exti_assign_channel+0x948>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4a7b      	ldr	r2, [pc, #492]	; (8001c30 <exti_assign_channel+0x948>)
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	6113      	str	r3, [r2, #16]
		break;
 8001a4a:	e226      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a79      	ldr	r2, [pc, #484]	; (8001c38 <exti_assign_channel+0x950>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d106      	bne.n	8001a66 <exti_assign_channel+0x77e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8001a58:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <exti_assign_channel+0x948>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	4a74      	ldr	r2, [pc, #464]	; (8001c30 <exti_assign_channel+0x948>)
 8001a5e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001a62:	6113      	str	r3, [r2, #16]
		break;
 8001a64:	e219      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001a66:	bf00      	nop
		break;
 8001a68:	e217      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_10*/
	case 10: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8001a6a:	4b71      	ldr	r3, [pc, #452]	; (8001c30 <exti_assign_channel+0x948>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	4a70      	ldr	r2, [pc, #448]	; (8001c30 <exti_assign_channel+0x948>)
 8001a70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a74:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <exti_assign_channel+0x954>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d104      	bne.n	8001a8c <exti_assign_channel+0x7a4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8001a82:	4b6b      	ldr	r3, [pc, #428]	; (8001c30 <exti_assign_channel+0x948>)
 8001a84:	4a6a      	ldr	r2, [pc, #424]	; (8001c30 <exti_assign_channel+0x948>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 8001a8a:	e206      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6b      	ldr	r2, [pc, #428]	; (8001c40 <exti_assign_channel+0x958>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d106      	bne.n	8001aa6 <exti_assign_channel+0x7be>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8001a98:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <exti_assign_channel+0x948>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a64      	ldr	r2, [pc, #400]	; (8001c30 <exti_assign_channel+0x948>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6113      	str	r3, [r2, #16]
		break;
 8001aa4:	e1f9      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <exti_assign_channel+0x95c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d106      	bne.n	8001ac0 <exti_assign_channel+0x7d8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <exti_assign_channel+0x948>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	4a5e      	ldr	r2, [pc, #376]	; (8001c30 <exti_assign_channel+0x948>)
 8001ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abc:	6113      	str	r3, [r2, #16]
		break;
 8001abe:	e1ec      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a59      	ldr	r2, [pc, #356]	; (8001c2c <exti_assign_channel+0x944>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d106      	bne.n	8001ada <exti_assign_channel+0x7f2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <exti_assign_channel+0x948>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <exti_assign_channel+0x948>)
 8001ad2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ad6:	6113      	str	r3, [r2, #16]
		break;
 8001ad8:	e1df      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <exti_assign_channel+0x94c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d106      	bne.n	8001af4 <exti_assign_channel+0x80c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <exti_assign_channel+0x948>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <exti_assign_channel+0x948>)
 8001aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af0:	6113      	str	r3, [r2, #16]
		break;
 8001af2:	e1d2      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <exti_assign_channel+0x950>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d106      	bne.n	8001b0e <exti_assign_channel+0x826>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <exti_assign_channel+0x948>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	4a4a      	ldr	r2, [pc, #296]	; (8001c30 <exti_assign_channel+0x948>)
 8001b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0a:	6113      	str	r3, [r2, #16]
		break;
 8001b0c:	e1c5      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001b0e:	bf00      	nop
		break;
 8001b10:	e1c3      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_11*/
	case 11: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <exti_assign_channel+0x948>)
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <exti_assign_channel+0x948>)
 8001b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b1c:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <exti_assign_channel+0x954>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d104      	bne.n	8001b34 <exti_assign_channel+0x84c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <exti_assign_channel+0x948>)
 8001b2c:	4a40      	ldr	r2, [pc, #256]	; (8001c30 <exti_assign_channel+0x948>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 8001b32:	e1b2      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a41      	ldr	r2, [pc, #260]	; (8001c40 <exti_assign_channel+0x958>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d106      	bne.n	8001b4e <exti_assign_channel+0x866>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <exti_assign_channel+0x948>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a3a      	ldr	r2, [pc, #232]	; (8001c30 <exti_assign_channel+0x948>)
 8001b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b4a:	6113      	str	r3, [r2, #16]
		break;
 8001b4c:	e1a5      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <exti_assign_channel+0x95c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d106      	bne.n	8001b68 <exti_assign_channel+0x880>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8001b5a:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <exti_assign_channel+0x948>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <exti_assign_channel+0x948>)
 8001b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b64:	6113      	str	r3, [r2, #16]
		break;
 8001b66:	e198      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	; (8001c2c <exti_assign_channel+0x944>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d106      	bne.n	8001b82 <exti_assign_channel+0x89a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <exti_assign_channel+0x948>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <exti_assign_channel+0x948>)
 8001b7a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001b7e:	6113      	str	r3, [r2, #16]
		break;
 8001b80:	e18b      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <exti_assign_channel+0x94c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d106      	bne.n	8001b9c <exti_assign_channel+0x8b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <exti_assign_channel+0x948>)
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	4a27      	ldr	r2, [pc, #156]	; (8001c30 <exti_assign_channel+0x948>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	6113      	str	r3, [r2, #16]
		break;
 8001b9a:	e17e      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <exti_assign_channel+0x950>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d106      	bne.n	8001bb6 <exti_assign_channel+0x8ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <exti_assign_channel+0x948>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <exti_assign_channel+0x948>)
 8001bae:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001bb2:	6113      	str	r3, [r2, #16]
		break;
 8001bb4:	e171      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001bb6:	bf00      	nop
		break;
 8001bb8:	e16f      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_12*/
	case 12: {
		/* SYSCFG_EXTICR4 */
		/* Cuarta posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <exti_assign_channel+0x948>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <exti_assign_channel+0x948>)
 8001bc0:	f023 030f 	bic.w	r3, r3, #15
 8001bc4:	6153      	str	r3, [r2, #20]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <exti_assign_channel+0x954>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d104      	bne.n	8001bdc <exti_assign_channel+0x8f4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <exti_assign_channel+0x948>)
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <exti_assign_channel+0x948>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8001bda:	e15e      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <exti_assign_channel+0x958>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d106      	bne.n	8001bf6 <exti_assign_channel+0x90e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <exti_assign_channel+0x948>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <exti_assign_channel+0x948>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6153      	str	r3, [r2, #20]
		break;
 8001bf4:	e151      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <exti_assign_channel+0x95c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d106      	bne.n	8001c10 <exti_assign_channel+0x928>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <exti_assign_channel+0x948>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <exti_assign_channel+0x948>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6153      	str	r3, [r2, #20]
		break;
 8001c0e:	e144      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <exti_assign_channel+0x944>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d115      	bne.n	8001c48 <exti_assign_channel+0x960>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <exti_assign_channel+0x948>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <exti_assign_channel+0x948>)
 8001c22:	f043 0303 	orr.w	r3, r3, #3
 8001c26:	6153      	str	r3, [r2, #20]
		break;
 8001c28:	e137      	b.n	8001e9a <exti_assign_channel+0xbb2>
 8001c2a:	bf00      	nop
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	40013800 	.word	0x40013800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a83      	ldr	r2, [pc, #524]	; (8001e5c <exti_assign_channel+0xb74>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <exti_assign_channel+0x97a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8001c54:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	4a81      	ldr	r2, [pc, #516]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6153      	str	r3, [r2, #20]
		break;
 8001c60:	e11b      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a7e      	ldr	r2, [pc, #504]	; (8001e64 <exti_assign_channel+0xb7c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d106      	bne.n	8001c7c <exti_assign_channel+0x994>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8001c6e:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4a7b      	ldr	r2, [pc, #492]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c74:	f043 0307 	orr.w	r3, r3, #7
 8001c78:	6153      	str	r3, [r2, #20]
		break;
 8001c7a:	e10e      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001c7c:	bf00      	nop
		break;
 8001c7e:	e10c      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_13*/
	case 13: {
		/* SYSCFG_EXTICR4 */
		/* Cuarta posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8001c80:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	4a76      	ldr	r2, [pc, #472]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c8a:	6153      	str	r3, [r2, #20]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a75      	ldr	r2, [pc, #468]	; (8001e68 <exti_assign_channel+0xb80>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d104      	bne.n	8001ca2 <exti_assign_channel+0x9ba>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8001c98:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c9a:	4a71      	ldr	r2, [pc, #452]	; (8001e60 <exti_assign_channel+0xb78>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8001ca0:	e0fb      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a70      	ldr	r2, [pc, #448]	; (8001e6c <exti_assign_channel+0xb84>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d106      	bne.n	8001cbc <exti_assign_channel+0x9d4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8001cae:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <exti_assign_channel+0xb78>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a6b      	ldr	r2, [pc, #428]	; (8001e60 <exti_assign_channel+0xb78>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6153      	str	r3, [r2, #20]
		break;
 8001cba:	e0ee      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6b      	ldr	r2, [pc, #428]	; (8001e70 <exti_assign_channel+0xb88>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d106      	bne.n	8001cd6 <exti_assign_channel+0x9ee>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8001cc8:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <exti_assign_channel+0xb78>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	4a64      	ldr	r2, [pc, #400]	; (8001e60 <exti_assign_channel+0xb78>)
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6153      	str	r3, [r2, #20]
		break;
 8001cd4:	e0e1      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a65      	ldr	r2, [pc, #404]	; (8001e74 <exti_assign_channel+0xb8c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d106      	bne.n	8001cf0 <exti_assign_channel+0xa08>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <exti_assign_channel+0xb78>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a5e      	ldr	r2, [pc, #376]	; (8001e60 <exti_assign_channel+0xb78>)
 8001ce8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cec:	6153      	str	r3, [r2, #20]
		break;
 8001cee:	e0d4      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a59      	ldr	r2, [pc, #356]	; (8001e5c <exti_assign_channel+0xb74>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d106      	bne.n	8001d0a <exti_assign_channel+0xa22>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8001cfc:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <exti_assign_channel+0xb78>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	4a57      	ldr	r2, [pc, #348]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d06:	6153      	str	r3, [r2, #20]
		break;
 8001d08:	e0c7      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a54      	ldr	r2, [pc, #336]	; (8001e64 <exti_assign_channel+0xb7c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d106      	bne.n	8001d24 <exti_assign_channel+0xa3c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8001d16:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d1c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001d20:	6153      	str	r3, [r2, #20]
		break;
 8001d22:	e0ba      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001d24:	bf00      	nop
		break;
 8001d26:	e0b8      	b.n	8001e9a <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_14*/
	case 14: {
		/* SYSCFG_EXTICR4 */
		/* Cuarta posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d32:	6153      	str	r3, [r2, #20]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <exti_assign_channel+0xb80>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d104      	bne.n	8001d4a <exti_assign_channel+0xa62>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8001d48:	e0a7      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <exti_assign_channel+0xb84>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d106      	bne.n	8001d64 <exti_assign_channel+0xa7c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8001d56:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4a41      	ldr	r2, [pc, #260]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6153      	str	r3, [r2, #20]
		break;
 8001d62:	e09a      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <exti_assign_channel+0xb88>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d106      	bne.n	8001d7e <exti_assign_channel+0xa96>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8001d70:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	4a3a      	ldr	r2, [pc, #232]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6153      	str	r3, [r2, #20]
		break;
 8001d7c:	e08d      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3b      	ldr	r2, [pc, #236]	; (8001e74 <exti_assign_channel+0xb8c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d106      	bne.n	8001d98 <exti_assign_channel+0xab0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8001d8a:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <exti_assign_channel+0xb78>)
 8001d90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d94:	6153      	str	r3, [r2, #20]
		break;
 8001d96:	e080      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <exti_assign_channel+0xb74>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d106      	bne.n	8001db2 <exti_assign_channel+0xaca>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <exti_assign_channel+0xb78>)
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <exti_assign_channel+0xb78>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dae:	6153      	str	r3, [r2, #20]
		break;
 8001db0:	e073      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <exti_assign_channel+0xb7c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d106      	bne.n	8001dcc <exti_assign_channel+0xae4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <exti_assign_channel+0xb78>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <exti_assign_channel+0xb78>)
 8001dc4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dc8:	6153      	str	r3, [r2, #20]
		break;
 8001dca:	e066      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001dcc:	bf00      	nop
		break;
 8001dce:	e064      	b.n	8001e9a <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_15 */
	case 15: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <exti_assign_channel+0xb78>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4a22      	ldr	r2, [pc, #136]	; (8001e60 <exti_assign_channel+0xb78>)
 8001dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dda:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <exti_assign_channel+0xb80>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d104      	bne.n	8001df2 <exti_assign_channel+0xb0a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <exti_assign_channel+0xb78>)
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <exti_assign_channel+0xb78>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8001df0:	e053      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <exti_assign_channel+0xb84>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d106      	bne.n	8001e0c <exti_assign_channel+0xb24>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e08:	6153      	str	r3, [r2, #20]
		break;
 8001e0a:	e046      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <exti_assign_channel+0xb88>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d106      	bne.n	8001e26 <exti_assign_channel+0xb3e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e22:	6153      	str	r3, [r2, #20]
		break;
 8001e24:	e039      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <exti_assign_channel+0xb8c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d106      	bne.n	8001e40 <exti_assign_channel+0xb58>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e38:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001e3c:	6153      	str	r3, [r2, #20]
		break;
 8001e3e:	e02c      	b.n	8001e9a <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <exti_assign_channel+0xb74>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d115      	bne.n	8001e78 <exti_assign_channel+0xb90>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <exti_assign_channel+0xb78>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e56:	6153      	str	r3, [r2, #20]
		break;
 8001e58:	e01f      	b.n	8001e9a <exti_assign_channel+0xbb2>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40021c00 	.word	0x40021c00
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <exti_assign_channel+0xbc0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d106      	bne.n	8001e92 <exti_assign_channel+0xbaa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <exti_assign_channel+0xbc4>)
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <exti_assign_channel+0xbc4>)
 8001e8a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001e8e:	6153      	str	r3, [r2, #20]
		break;
 8001e90:	e003      	b.n	8001e9a <exti_assign_channel+0xbb2>
			__NOP();
 8001e92:	bf00      	nop
		break;
 8001e94:	e001      	b.n	8001e9a <exti_assign_channel+0xbb2>
	}

	default: {
		__NOP();
 8001e96:	bf00      	nop
		break;
 8001e98:	bf00      	nop
	}

	} // Fin del switch-case
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021c00 	.word	0x40021c00
 8001eac:	40013800 	.word	0x40013800

08001eb0 <exti_select_edge>:

/*
 * Función para seleccionar adecuadamente el flanco que lanza la interrupcion
 * en el canal EXTI específico.
 * */
static void exti_select_edge(EXTI_Config_t *extiConfig){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

	if(extiConfig->edgeType == EXTERNAL_INTERRUPT_FALLING_EDGE){
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	791b      	ldrb	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 80fb 	bne.w	80020b8 <exti_select_edge+0x208>
		/* Falling Trigger selection register*/

		// Seleccionamos el canal al cual le queremos configurar el flanco
        switch(extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber){
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	791b      	ldrb	r3, [r3, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	f200 80f3 	bhi.w	80020b4 <exti_select_edge+0x204>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <exti_select_edge+0x24>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001f15 	.word	0x08001f15
 8001ed8:	08001f2f 	.word	0x08001f2f
 8001edc:	08001f49 	.word	0x08001f49
 8001ee0:	08001f63 	.word	0x08001f63
 8001ee4:	08001f7d 	.word	0x08001f7d
 8001ee8:	08001f97 	.word	0x08001f97
 8001eec:	08001fb1 	.word	0x08001fb1
 8001ef0:	08001fcb 	.word	0x08001fcb
 8001ef4:	08001fe5 	.word	0x08001fe5
 8001ef8:	08001fff 	.word	0x08001fff
 8001efc:	08002019 	.word	0x08002019
 8001f00:	08002033 	.word	0x08002033
 8001f04:	0800204d 	.word	0x0800204d
 8001f08:	08002067 	.word	0x08002067
 8001f0c:	08002081 	.word	0x08002081
 8001f10:	0800209b 	.word	0x0800209b

        	/* Ya que la interrupción puede ser configurada para lanzarse por ambos flancos a la vez,
        	 * como se quiere seleccionar un único flanco es necesario desactivar previamente el otro.
        	 *
        	 * Nos aseguramos de que el flanco de subida esté desactivado para este canal*/
        	EXTI->RTSR &= ~EXTI_RTSR_TR0;
 8001f14:	4b97      	ldr	r3, [pc, #604]	; (8002174 <exti_select_edge+0x2c4>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a96      	ldr	r2, [pc, #600]	; (8002174 <exti_select_edge+0x2c4>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6093      	str	r3, [r2, #8]

        	/* Configuramos el flanco de bajada para que lance la interrupción en este canal */
        	EXTI->FTSR |= EXTI_FTSR_TR0;
 8001f20:	4b94      	ldr	r3, [pc, #592]	; (8002174 <exti_select_edge+0x2c4>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a93      	ldr	r2, [pc, #588]	; (8002174 <exti_select_edge+0x2c4>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	60d3      	str	r3, [r2, #12]
        	break;
 8001f2c:	e1c2      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 1: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR1;
 8001f2e:	4b91      	ldr	r3, [pc, #580]	; (8002174 <exti_select_edge+0x2c4>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a90      	ldr	r2, [pc, #576]	; (8002174 <exti_select_edge+0x2c4>)
 8001f34:	f023 0302 	bic.w	r3, r3, #2
 8001f38:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR1;
 8001f3a:	4b8e      	ldr	r3, [pc, #568]	; (8002174 <exti_select_edge+0x2c4>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4a8d      	ldr	r2, [pc, #564]	; (8002174 <exti_select_edge+0x2c4>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	60d3      	str	r3, [r2, #12]
        	break;
 8001f46:	e1b5      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 2: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR2;
 8001f48:	4b8a      	ldr	r3, [pc, #552]	; (8002174 <exti_select_edge+0x2c4>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a89      	ldr	r2, [pc, #548]	; (8002174 <exti_select_edge+0x2c4>)
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR2;
 8001f54:	4b87      	ldr	r3, [pc, #540]	; (8002174 <exti_select_edge+0x2c4>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a86      	ldr	r2, [pc, #536]	; (8002174 <exti_select_edge+0x2c4>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	60d3      	str	r3, [r2, #12]
        	break;
 8001f60:	e1a8      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 3: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR3;
 8001f62:	4b84      	ldr	r3, [pc, #528]	; (8002174 <exti_select_edge+0x2c4>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4a83      	ldr	r2, [pc, #524]	; (8002174 <exti_select_edge+0x2c4>)
 8001f68:	f023 0308 	bic.w	r3, r3, #8
 8001f6c:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR3;
 8001f6e:	4b81      	ldr	r3, [pc, #516]	; (8002174 <exti_select_edge+0x2c4>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4a80      	ldr	r2, [pc, #512]	; (8002174 <exti_select_edge+0x2c4>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	60d3      	str	r3, [r2, #12]
        	break;
 8001f7a:	e19b      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 4: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR4;
 8001f7c:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <exti_select_edge+0x2c4>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a7c      	ldr	r2, [pc, #496]	; (8002174 <exti_select_edge+0x2c4>)
 8001f82:	f023 0310 	bic.w	r3, r3, #16
 8001f86:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR4;
 8001f88:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <exti_select_edge+0x2c4>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a79      	ldr	r2, [pc, #484]	; (8002174 <exti_select_edge+0x2c4>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	60d3      	str	r3, [r2, #12]
        	break;
 8001f94:	e18e      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 5: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR5;
 8001f96:	4b77      	ldr	r3, [pc, #476]	; (8002174 <exti_select_edge+0x2c4>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a76      	ldr	r2, [pc, #472]	; (8002174 <exti_select_edge+0x2c4>)
 8001f9c:	f023 0320 	bic.w	r3, r3, #32
 8001fa0:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR5;
 8001fa2:	4b74      	ldr	r3, [pc, #464]	; (8002174 <exti_select_edge+0x2c4>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a73      	ldr	r2, [pc, #460]	; (8002174 <exti_select_edge+0x2c4>)
 8001fa8:	f043 0320 	orr.w	r3, r3, #32
 8001fac:	60d3      	str	r3, [r2, #12]
        	break;
 8001fae:	e181      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 6: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR6;
 8001fb0:	4b70      	ldr	r3, [pc, #448]	; (8002174 <exti_select_edge+0x2c4>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a6f      	ldr	r2, [pc, #444]	; (8002174 <exti_select_edge+0x2c4>)
 8001fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fba:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR6;
 8001fbc:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <exti_select_edge+0x2c4>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a6c      	ldr	r2, [pc, #432]	; (8002174 <exti_select_edge+0x2c4>)
 8001fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc6:	60d3      	str	r3, [r2, #12]
        	break;
 8001fc8:	e174      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 7: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR7;
 8001fca:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <exti_select_edge+0x2c4>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a69      	ldr	r2, [pc, #420]	; (8002174 <exti_select_edge+0x2c4>)
 8001fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd4:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR7;
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <exti_select_edge+0x2c4>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4a66      	ldr	r2, [pc, #408]	; (8002174 <exti_select_edge+0x2c4>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	60d3      	str	r3, [r2, #12]
        	break;
 8001fe2:	e167      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 8: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR8;
 8001fe4:	4b63      	ldr	r3, [pc, #396]	; (8002174 <exti_select_edge+0x2c4>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a62      	ldr	r2, [pc, #392]	; (8002174 <exti_select_edge+0x2c4>)
 8001fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fee:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR8;
 8001ff0:	4b60      	ldr	r3, [pc, #384]	; (8002174 <exti_select_edge+0x2c4>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a5f      	ldr	r2, [pc, #380]	; (8002174 <exti_select_edge+0x2c4>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	60d3      	str	r3, [r2, #12]
        	break;
 8001ffc:	e15a      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 9: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR9;
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <exti_select_edge+0x2c4>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <exti_select_edge+0x2c4>)
 8002004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002008:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR9;
 800200a:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <exti_select_edge+0x2c4>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a59      	ldr	r2, [pc, #356]	; (8002174 <exti_select_edge+0x2c4>)
 8002010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002014:	60d3      	str	r3, [r2, #12]
        	break;
 8002016:	e14d      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 10: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR10;
 8002018:	4b56      	ldr	r3, [pc, #344]	; (8002174 <exti_select_edge+0x2c4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a55      	ldr	r2, [pc, #340]	; (8002174 <exti_select_edge+0x2c4>)
 800201e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002022:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR10;
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <exti_select_edge+0x2c4>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <exti_select_edge+0x2c4>)
 800202a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202e:	60d3      	str	r3, [r2, #12]
        	break;
 8002030:	e140      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 11: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR11;
 8002032:	4b50      	ldr	r3, [pc, #320]	; (8002174 <exti_select_edge+0x2c4>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4a4f      	ldr	r2, [pc, #316]	; (8002174 <exti_select_edge+0x2c4>)
 8002038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800203c:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR11;
 800203e:	4b4d      	ldr	r3, [pc, #308]	; (8002174 <exti_select_edge+0x2c4>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <exti_select_edge+0x2c4>)
 8002044:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002048:	60d3      	str	r3, [r2, #12]
        	break;
 800204a:	e133      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 12: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR12;
 800204c:	4b49      	ldr	r3, [pc, #292]	; (8002174 <exti_select_edge+0x2c4>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <exti_select_edge+0x2c4>)
 8002052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002056:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR12;
 8002058:	4b46      	ldr	r3, [pc, #280]	; (8002174 <exti_select_edge+0x2c4>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a45      	ldr	r2, [pc, #276]	; (8002174 <exti_select_edge+0x2c4>)
 800205e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002062:	60d3      	str	r3, [r2, #12]
        	break;
 8002064:	e126      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 13: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR13;
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <exti_select_edge+0x2c4>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4a42      	ldr	r2, [pc, #264]	; (8002174 <exti_select_edge+0x2c4>)
 800206c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002070:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR13;
 8002072:	4b40      	ldr	r3, [pc, #256]	; (8002174 <exti_select_edge+0x2c4>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <exti_select_edge+0x2c4>)
 8002078:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800207c:	60d3      	str	r3, [r2, #12]
        	break;
 800207e:	e119      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 14: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR14;
 8002080:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <exti_select_edge+0x2c4>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <exti_select_edge+0x2c4>)
 8002086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800208a:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR14;
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <exti_select_edge+0x2c4>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a38      	ldr	r2, [pc, #224]	; (8002174 <exti_select_edge+0x2c4>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002096:	60d3      	str	r3, [r2, #12]
        	break;
 8002098:	e10c      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 15: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR15;
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <exti_select_edge+0x2c4>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a35      	ldr	r2, [pc, #212]	; (8002174 <exti_select_edge+0x2c4>)
 80020a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020a4:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR15;
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <exti_select_edge+0x2c4>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4a32      	ldr	r2, [pc, #200]	; (8002174 <exti_select_edge+0x2c4>)
 80020ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b0:	60d3      	str	r3, [r2, #12]
        	break;
 80020b2:	e0ff      	b.n	80022b4 <exti_select_edge+0x404>
        }
        default: {
        		__NOP();
 80020b4:	bf00      	nop
        		break;
 80020b6:	e0fd      	b.n	80022b4 <exti_select_edge+0x404>

	else{
		/* Rising Trigger selection register*/

		// Seleccionamos el canal al cual le queremos configurar el flanco como flanco de subida
        switch(extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	791b      	ldrb	r3, [r3, #4]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	f200 80f6 	bhi.w	80022b0 <exti_select_edge+0x400>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <exti_select_edge+0x21c>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	0800210d 	.word	0x0800210d
 80020d0:	08002127 	.word	0x08002127
 80020d4:	08002141 	.word	0x08002141
 80020d8:	0800215b 	.word	0x0800215b
 80020dc:	08002179 	.word	0x08002179
 80020e0:	08002193 	.word	0x08002193
 80020e4:	080021ad 	.word	0x080021ad
 80020e8:	080021c7 	.word	0x080021c7
 80020ec:	080021e1 	.word	0x080021e1
 80020f0:	080021fb 	.word	0x080021fb
 80020f4:	08002215 	.word	0x08002215
 80020f8:	0800222f 	.word	0x0800222f
 80020fc:	08002249 	.word	0x08002249
 8002100:	08002263 	.word	0x08002263
 8002104:	0800227d 	.word	0x0800227d
 8002108:	08002297 	.word	0x08002297

        // Configurando el flanco para el canal 0
        case 0: {

        	/* Nos aseguramos de que el flanco de bajada esté desactivado para este canal*/
        	EXTI->FTSR &= ~EXTI_FTSR_TR0;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <exti_select_edge+0x2c4>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <exti_select_edge+0x2c4>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	60d3      	str	r3, [r2, #12]

        	/* Configuramos el flanco de bajada para que lance la interrupción */
        	EXTI->RTSR |= EXTI_RTSR_TR0;
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <exti_select_edge+0x2c4>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a15      	ldr	r2, [pc, #84]	; (8002174 <exti_select_edge+0x2c4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6093      	str	r3, [r2, #8]
        	break;
 8002124:	e0c6      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 1: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR1;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <exti_select_edge+0x2c4>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <exti_select_edge+0x2c4>)
 800212c:	f023 0302 	bic.w	r3, r3, #2
 8002130:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR1;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <exti_select_edge+0x2c4>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <exti_select_edge+0x2c4>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6093      	str	r3, [r2, #8]
        	break;
 800213e:	e0b9      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 2: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR2;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <exti_select_edge+0x2c4>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <exti_select_edge+0x2c4>)
 8002146:	f023 0304 	bic.w	r3, r3, #4
 800214a:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR2;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <exti_select_edge+0x2c4>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <exti_select_edge+0x2c4>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6093      	str	r3, [r2, #8]
        	break;
 8002158:	e0ac      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 3: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR3;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <exti_select_edge+0x2c4>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <exti_select_edge+0x2c4>)
 8002160:	f023 0308 	bic.w	r3, r3, #8
 8002164:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR3;
 8002166:	4b03      	ldr	r3, [pc, #12]	; (8002174 <exti_select_edge+0x2c4>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4a02      	ldr	r2, [pc, #8]	; (8002174 <exti_select_edge+0x2c4>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	6093      	str	r3, [r2, #8]
        	break;
 8002172:	e09f      	b.n	80022b4 <exti_select_edge+0x404>
 8002174:	40013c00 	.word	0x40013c00
        }
        case 4: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR4;
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <exti_select_edge+0x410>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <exti_select_edge+0x410>)
 800217e:	f023 0310 	bic.w	r3, r3, #16
 8002182:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR4;
 8002184:	4b4e      	ldr	r3, [pc, #312]	; (80022c0 <exti_select_edge+0x410>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <exti_select_edge+0x410>)
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	6093      	str	r3, [r2, #8]
        	break;
 8002190:	e090      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 5: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR5;
 8002192:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <exti_select_edge+0x410>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <exti_select_edge+0x410>)
 8002198:	f023 0320 	bic.w	r3, r3, #32
 800219c:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR5;
 800219e:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <exti_select_edge+0x410>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <exti_select_edge+0x410>)
 80021a4:	f043 0320 	orr.w	r3, r3, #32
 80021a8:	6093      	str	r3, [r2, #8]
        	break;
 80021aa:	e083      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 6: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR6;
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <exti_select_edge+0x410>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a43      	ldr	r2, [pc, #268]	; (80022c0 <exti_select_edge+0x410>)
 80021b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b6:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR6;
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <exti_select_edge+0x410>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <exti_select_edge+0x410>)
 80021be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c2:	6093      	str	r3, [r2, #8]
        	break;
 80021c4:	e076      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 7: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR7;
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <exti_select_edge+0x410>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4a3d      	ldr	r2, [pc, #244]	; (80022c0 <exti_select_edge+0x410>)
 80021cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d0:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR7;
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <exti_select_edge+0x410>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <exti_select_edge+0x410>)
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	6093      	str	r3, [r2, #8]
        	break;
 80021de:	e069      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 8: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR8;
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <exti_select_edge+0x410>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a36      	ldr	r2, [pc, #216]	; (80022c0 <exti_select_edge+0x410>)
 80021e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ea:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR8;
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <exti_select_edge+0x410>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <exti_select_edge+0x410>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6093      	str	r3, [r2, #8]
        	break;
 80021f8:	e05c      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 9: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR9;
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <exti_select_edge+0x410>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a30      	ldr	r2, [pc, #192]	; (80022c0 <exti_select_edge+0x410>)
 8002200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002204:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR9;
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <exti_select_edge+0x410>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <exti_select_edge+0x410>)
 800220c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002210:	6093      	str	r3, [r2, #8]
        	break;
 8002212:	e04f      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 10: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR10;
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <exti_select_edge+0x410>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a29      	ldr	r2, [pc, #164]	; (80022c0 <exti_select_edge+0x410>)
 800221a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800221e:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR10;
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <exti_select_edge+0x410>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <exti_select_edge+0x410>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6093      	str	r3, [r2, #8]
        	break;
 800222c:	e042      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 11: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR11;
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <exti_select_edge+0x410>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <exti_select_edge+0x410>)
 8002234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002238:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR11;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <exti_select_edge+0x410>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <exti_select_edge+0x410>)
 8002240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002244:	6093      	str	r3, [r2, #8]
        	break;
 8002246:	e035      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 12: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR12;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <exti_select_edge+0x410>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <exti_select_edge+0x410>)
 800224e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002252:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR12;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <exti_select_edge+0x410>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <exti_select_edge+0x410>)
 800225a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800225e:	6093      	str	r3, [r2, #8]
        	break;
 8002260:	e028      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 13: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR13;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <exti_select_edge+0x410>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <exti_select_edge+0x410>)
 8002268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800226c:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR13;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <exti_select_edge+0x410>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <exti_select_edge+0x410>)
 8002274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002278:	6093      	str	r3, [r2, #8]
        	break;
 800227a:	e01b      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 14: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR14;
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <exti_select_edge+0x410>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <exti_select_edge+0x410>)
 8002282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002286:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR14;
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <exti_select_edge+0x410>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <exti_select_edge+0x410>)
 800228e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002292:	6093      	str	r3, [r2, #8]
        	break;
 8002294:	e00e      	b.n	80022b4 <exti_select_edge+0x404>
        }
        case 15: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR15;
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <exti_select_edge+0x410>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <exti_select_edge+0x410>)
 800229c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022a0:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR15;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <exti_select_edge+0x410>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <exti_select_edge+0x410>)
 80022a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ac:	6093      	str	r3, [r2, #8]
        	break;
 80022ae:	e001      	b.n	80022b4 <exti_select_edge+0x404>
        }
        default: {
        		__NOP();
 80022b0:	bf00      	nop
        		break;
 80022b2:	bf00      	nop
        	}
        }	// Fin del Switch

	}	// Fin del else

}	// Fin de la función exti_select_edge
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <exti_config_interrupt>:

/*
 * Funcion que configura las mascaras de interrupciones (registro de máscaras) y
 * además matricula cada una de las posibles interrupciones en el NVIC
 * */
static void exti_config_interrupt(EXTI_Config_t *extiConfig){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	/* 6.0 Activamos la interrupción del canal que estamos configurando */
		// Interrupt Mask Register

		/* Esta máscara se encarga de settear cuál será el canal (línea) que se va a usar */
		switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f200 8094 	bhi.w	8002400 <exti_config_interrupt+0x13c>
 80022d8:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <exti_config_interrupt+0x1c>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	08002321 	.word	0x08002321
 80022e4:	0800232f 	.word	0x0800232f
 80022e8:	0800233d 	.word	0x0800233d
 80022ec:	0800234b 	.word	0x0800234b
 80022f0:	08002359 	.word	0x08002359
 80022f4:	08002367 	.word	0x08002367
 80022f8:	08002375 	.word	0x08002375
 80022fc:	08002383 	.word	0x08002383
 8002300:	08002391 	.word	0x08002391
 8002304:	0800239f 	.word	0x0800239f
 8002308:	080023ad 	.word	0x080023ad
 800230c:	080023bb 	.word	0x080023bb
 8002310:	080023c9 	.word	0x080023c9
 8002314:	080023d7 	.word	0x080023d7
 8002318:	080023e5 	.word	0x080023e5
 800231c:	080023f3 	.word	0x080023f3

		case 0: {
			EXTI->IMR |= EXTI_IMR_IM0;
 8002320:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a5c      	ldr	r2, [pc, #368]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]
			break;
 800232c:	e069      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 1: {
			EXTI->IMR |= EXTI_IMR_IM1;
 800232e:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a59      	ldr	r2, [pc, #356]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6013      	str	r3, [r2, #0]
			break;
 800233a:	e062      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 2: {
			EXTI->IMR |= EXTI_IMR_IM2;
 800233c:	4b56      	ldr	r3, [pc, #344]	; (8002498 <exti_config_interrupt+0x1d4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a55      	ldr	r2, [pc, #340]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6013      	str	r3, [r2, #0]
			break;
 8002348:	e05b      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 3: {
			EXTI->IMR |= EXTI_IMR_IM3;
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <exti_config_interrupt+0x1d4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a52      	ldr	r2, [pc, #328]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6013      	str	r3, [r2, #0]
			break;
 8002356:	e054      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 4: {
			EXTI->IMR |= EXTI_IMR_IM4;
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <exti_config_interrupt+0x1d4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <exti_config_interrupt+0x1d4>)
 800235e:	f043 0310 	orr.w	r3, r3, #16
 8002362:	6013      	str	r3, [r2, #0]
			break;
 8002364:	e04d      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 5: {
			EXTI->IMR |= EXTI_IMR_IM5;
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <exti_config_interrupt+0x1d4>)
 800236c:	f043 0320 	orr.w	r3, r3, #32
 8002370:	6013      	str	r3, [r2, #0]
			break;
 8002372:	e046      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 6: {
			EXTI->IMR |= EXTI_IMR_IM6;
 8002374:	4b48      	ldr	r3, [pc, #288]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a47      	ldr	r2, [pc, #284]	; (8002498 <exti_config_interrupt+0x1d4>)
 800237a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237e:	6013      	str	r3, [r2, #0]
			break;
 8002380:	e03f      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 7: {
			EXTI->IMR |= EXTI_IMR_IM7;
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a44      	ldr	r2, [pc, #272]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	6013      	str	r3, [r2, #0]
			break;
 800238e:	e038      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 8: {
			EXTI->IMR |= EXTI_IMR_IM8;
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a40      	ldr	r2, [pc, #256]	; (8002498 <exti_config_interrupt+0x1d4>)
 8002396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239a:	6013      	str	r3, [r2, #0]
			break;
 800239c:	e031      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 9: {
			EXTI->IMR |= EXTI_IMR_IM9;
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a3d      	ldr	r2, [pc, #244]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a8:	6013      	str	r3, [r2, #0]
			break;
 80023aa:	e02a      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 10: {
			EXTI->IMR |= EXTI_IMR_IM10;
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b6:	6013      	str	r3, [r2, #0]
			break;
 80023b8:	e023      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 11: {
			EXTI->IMR |= EXTI_IMR_IM11;
 80023ba:	4b37      	ldr	r3, [pc, #220]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a36      	ldr	r2, [pc, #216]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023c4:	6013      	str	r3, [r2, #0]
			break;
 80023c6:	e01c      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 12: {
			EXTI->IMR |= EXTI_IMR_IM12;
 80023c8:	4b33      	ldr	r3, [pc, #204]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a32      	ldr	r2, [pc, #200]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023d2:	6013      	str	r3, [r2, #0]
			break;
 80023d4:	e015      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 13: {
			EXTI->IMR |= EXTI_IMR_IM13;
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023e0:	6013      	str	r3, [r2, #0]
			break;
 80023e2:	e00e      	b.n	8002402 <exti_config_interrupt+0x13e>
		}


		case 14: {
			EXTI->IMR |= EXTI_IMR_IM14;
 80023e4:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ee:	6013      	str	r3, [r2, #0]
			break;
 80023f0:	e007      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		case 15: {
			EXTI->IMR |= EXTI_IMR_IM15;
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a28      	ldr	r2, [pc, #160]	; (8002498 <exti_config_interrupt+0x1d4>)
 80023f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fc:	6013      	str	r3, [r2, #0]
			break;
 80023fe:	e000      	b.n	8002402 <exti_config_interrupt+0x13e>
		}

		default: {
			break;
 8002400:	bf00      	nop
		/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
		 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
		 *
		 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
		 * */
		switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d83f      	bhi.n	800248c <exti_config_interrupt+0x1c8>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <exti_config_interrupt+0x150>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002455 	.word	0x08002455
 8002418:	0800245d 	.word	0x0800245d
 800241c:	08002465 	.word	0x08002465
 8002420:	0800246d 	.word	0x0800246d
 8002424:	08002475 	.word	0x08002475
 8002428:	0800247d 	.word	0x0800247d
 800242c:	0800247d 	.word	0x0800247d
 8002430:	0800247d 	.word	0x0800247d
 8002434:	0800247d 	.word	0x0800247d
 8002438:	0800247d 	.word	0x0800247d
 800243c:	08002485 	.word	0x08002485
 8002440:	08002485 	.word	0x08002485
 8002444:	08002485 	.word	0x08002485
 8002448:	08002485 	.word	0x08002485
 800244c:	08002485 	.word	0x08002485
 8002450:	08002485 	.word	0x08002485

		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8002454:	2006      	movs	r0, #6
 8002456:	f7fe fefd 	bl	8001254 <__NVIC_EnableIRQ>
			break;
 800245a:	e018      	b.n	800248e <exti_config_interrupt+0x1ca>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800245c:	2007      	movs	r0, #7
 800245e:	f7fe fef9 	bl	8001254 <__NVIC_EnableIRQ>
			break;
 8002462:	e014      	b.n	800248e <exti_config_interrupt+0x1ca>
		}

		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8002464:	2008      	movs	r0, #8
 8002466:	f7fe fef5 	bl	8001254 <__NVIC_EnableIRQ>
			break;
 800246a:	e010      	b.n	800248e <exti_config_interrupt+0x1ca>
		}

		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800246c:	2009      	movs	r0, #9
 800246e:	f7fe fef1 	bl	8001254 <__NVIC_EnableIRQ>
			break;
 8002472:	e00c      	b.n	800248e <exti_config_interrupt+0x1ca>
		}

		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8002474:	200a      	movs	r0, #10
 8002476:	f7fe feed 	bl	8001254 <__NVIC_EnableIRQ>
			break;
 800247a:	e008      	b.n	800248e <exti_config_interrupt+0x1ca>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800247c:	2017      	movs	r0, #23
 800247e:	f7fe fee9 	bl	8001254 <__NVIC_EnableIRQ>
			break;
 8002482:	e004      	b.n	800248e <exti_config_interrupt+0x1ca>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002484:	2028      	movs	r0, #40	; 0x28
 8002486:	f7fe fee5 	bl	8001254 <__NVIC_EnableIRQ>
			break;
 800248a:	e000      	b.n	800248e <exti_config_interrupt+0x1ca>
		}

		default: {
			break;
 800248c:	bf00      	nop
		}
		}
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40013c00 	.word	0x40013c00

0800249c <callback_ExtInt0>:


/* Definición de los callbacks de las interrupciones de los EXTI, para que además puedan ser sobreescritos */
__attribute__ ((weak)) void callback_ExtInt0(void){
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
	__NOP();
 80024a0:	bf00      	nop
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <callback_ExtInt2>:

__attribute__ ((weak)) void callback_ExtInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_ExtInt2(void){
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
	__NOP();
 80024b0:	bf00      	nop
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <callback_ExtInt3>:

__attribute__ ((weak)) void callback_ExtInt3(void){
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
	__NOP();
 80024c0:	bf00      	nop
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <callback_ExtInt4>:

__attribute__ ((weak)) void callback_ExtInt4(void){
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	__NOP();
 80024d0:	bf00      	nop
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <callback_ExtInt5>:

__attribute__ ((weak)) void callback_ExtInt5(void){
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	__NOP();
 80024e0:	bf00      	nop
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <callback_ExtInt6>:

__attribute__ ((weak)) void callback_ExtInt6(void){
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
	__NOP();
 80024f0:	bf00      	nop
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <callback_ExtInt7>:

__attribute__ ((weak)) void callback_ExtInt7(void){
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
	__NOP();
 8002500:	bf00      	nop
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <callback_ExtInt8>:

__attribute__ ((weak)) void callback_ExtInt8(void){
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	__NOP();
 8002510:	bf00      	nop
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <callback_ExtInt9>:

__attribute__ ((weak)) void callback_ExtInt9(void){
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
	__NOP();
 8002520:	bf00      	nop
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <callback_ExtInt10>:

__attribute__ ((weak)) void callback_ExtInt10(void){
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
	__NOP();
 8002530:	bf00      	nop
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <callback_ExtInt11>:

__attribute__ ((weak)) void callback_ExtInt11(void){
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	__NOP();
 8002540:	bf00      	nop
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <callback_ExtInt12>:

__attribute__ ((weak)) void callback_ExtInt12(void){
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
	__NOP();
 8002550:	bf00      	nop
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <callback_ExtInt13>:

__attribute__ ((weak)) void callback_ExtInt13(void){
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	__NOP();
 8002560:	bf00      	nop
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <callback_ExtInt14>:

__attribute__ ((weak)) void callback_ExtInt14(void){
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
	__NOP();
 8002570:	bf00      	nop
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <callback_ExtInt15>:

__attribute__ ((weak)) void callback_ExtInt15(void){
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	__NOP();
 8002580:	bf00      	nop
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <EXTI0_IRQHandler>:
 * bajando la bandera  del registro PR (Pending Register -> La bandera en este
 * registro se "setea" inmediatamente se lanza la interrupción), ejecutando
 * la función callback_ExtIntX y dando por atendido el request*/

/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <EXTI0_IRQHandler+0x24>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <EXTI0_IRQHandler+0x24>)
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <EXTI0_IRQHandler+0x24>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6153      	str	r3, [r2, #20]
		// Llamamos al callback
		callback_ExtInt0();
 80025a8:	f7ff ff78 	bl	800249c <callback_ExtInt0>
	}
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013c00 	.word	0x40013c00

080025b4 <EXTI1_IRQHandler>:

/* ISR de la interrupción canal 1*/
void EXTI1_IRQHandler(void){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_1 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <EXTI1_IRQHandler+0x24>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <EXTI1_IRQHandler+0x24>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <EXTI1_IRQHandler+0x24>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt1();
 80025d0:	f7fe fd2e 	bl	8001030 <callback_ExtInt1>
	}
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40013c00 	.word	0x40013c00

080025dc <EXTI2_IRQHandler>:

/* ISR de la interrupción canal 2*/
void EXTI2_IRQHandler(void){
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_2 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <EXTI2_IRQHandler+0x24>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <EXTI2_IRQHandler+0x24>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	4a03      	ldr	r2, [pc, #12]	; (8002600 <EXTI2_IRQHandler+0x24>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt2();
 80025f8:	f7ff ff58 	bl	80024ac <callback_ExtInt2>
	}
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40013c00 	.word	0x40013c00

08002604 <EXTI3_IRQHandler>:

/* ISR de la interrupción canal 3*/
void EXTI3_IRQHandler(void){
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_3 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <EXTI3_IRQHandler+0x24>)
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <EXTI3_IRQHandler+0x24>)
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	4a03      	ldr	r2, [pc, #12]	; (8002628 <EXTI3_IRQHandler+0x24>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt3();
 8002620:	f7ff ff4c 	bl	80024bc <callback_ExtInt3>
	}
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40013c00 	.word	0x40013c00

0800262c <EXTI4_IRQHandler>:

/* ISR de la interrupción canal 4*/
void EXTI4_IRQHandler(void){
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_4 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <EXTI4_IRQHandler+0x24>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <EXTI4_IRQHandler+0x24>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4a03      	ldr	r2, [pc, #12]	; (8002650 <EXTI4_IRQHandler+0x24>)
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt4();
 8002648:	f7ff ff40 	bl	80024cc <callback_ExtInt4>
	}
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40013c00 	.word	0x40013c00

08002654 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0

	// Evaluamos cuál canal del EXTI se está atendiendo y llamamos la función pública callbakc_ExtIntX
	if(EXTI->PR & EXTI_PR_PR5){
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <EXTI9_5_IRQHandler+0x22>
		// Bajamos la bandera de la interrupción
		EXTI->PR |= EXTI_PR_PR5;
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 800266a:	f043 0320 	orr.w	r3, r3, #32
 800266e:	6153      	str	r3, [r2, #20]

		callback_ExtInt5();
 8002670:	f7ff ff34 	bl	80024dc <callback_ExtInt5>
	}
	else{
		__NOP();
	}

}	// Fin del EXTI9_5_IRQHandler
 8002674:	e03c      	b.n	80026f0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6){
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 8002688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268c:	6153      	str	r3, [r2, #20]
		callback_ExtInt6();
 800268e:	f7ff ff2d 	bl	80024ec <callback_ExtInt6>
}	// Fin del EXTI9_5_IRQHandler
 8002692:	e02d      	b.n	80026f0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7){
 8002694:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026aa:	6153      	str	r3, [r2, #20]
		callback_ExtInt7();
 80026ac:	f7ff ff26 	bl	80024fc <callback_ExtInt7>
}	// Fin del EXTI9_5_IRQHandler
 80026b0:	e01e      	b.n	80026f0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8){
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6153      	str	r3, [r2, #20]
		callback_ExtInt8();
 80026ca:	f7ff ff1f 	bl	800250c <callback_ExtInt8>
}	// Fin del EXTI9_5_IRQHandler
 80026ce:	e00f      	b.n	80026f0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9){
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <EXTI9_5_IRQHandler+0xa0>)
 80026e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e6:	6153      	str	r3, [r2, #20]
		callback_ExtInt9();
 80026e8:	f7ff ff18 	bl	800251c <callback_ExtInt9>
}	// Fin del EXTI9_5_IRQHandler
 80026ec:	e000      	b.n	80026f0 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80026ee:	bf00      	nop
}	// Fin del EXTI9_5_IRQHandler
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 80026fc:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 800270e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002712:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt10();
 8002714:	f7ff ff0a 	bl	800252c <callback_ExtInt10>
	}
	else{
		__NOP();
	}
	
}	// Fin del EXTI15_10_IRQHandler
 8002718:	e04b      	b.n	80027b2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11){
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 800272c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002730:	6153      	str	r3, [r2, #20]
		callback_ExtInt11();
 8002732:	f7ff ff03 	bl	800253c <callback_ExtInt11>
}	// Fin del EXTI15_10_IRQHandler
 8002736:	e03c      	b.n	80027b2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12){
 8002738:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 800274a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800274e:	6153      	str	r3, [r2, #20]
		callback_ExtInt12();
 8002750:	f7ff fefc 	bl	800254c <callback_ExtInt12>
}	// Fin del EXTI15_10_IRQHandler
 8002754:	e02d      	b.n	80027b2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13){
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800276c:	6153      	str	r3, [r2, #20]
		callback_ExtInt13();
 800276e:	f7ff fef5 	bl	800255c <callback_ExtInt13>
}	// Fin del EXTI15_10_IRQHandler
 8002772:	e01e      	b.n	80027b2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14){
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278a:	6153      	str	r3, [r2, #20]
		callback_ExtInt14();
 800278c:	f7ff feee 	bl	800256c <callback_ExtInt14>
}	// Fin del EXTI15_10_IRQHandler
 8002790:	e00f      	b.n	80027b2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15){
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= EXTI_PR_PR15;
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <EXTI15_10_IRQHandler+0xc0>)
 80027a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a8:	6153      	str	r3, [r2, #20]
		callback_ExtInt15();
 80027aa:	f7ff fee7 	bl	800257c <callback_ExtInt15>
}	// Fin del EXTI15_10_IRQHandler
 80027ae:	e000      	b.n	80027b2 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 80027b0:	bf00      	nop
}	// Fin del EXTI15_10_IRQHandler
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40013c00 	.word	0x40013c00

080027bc <gpio_Config>:
 * ese elemento específico (relacionado con el periférico RCC, se activa el
 * periférico en dicho registro), a eso llamaremos simplemente "activar el
 * periférico o activar la señal de reloj del periférico".
 */

void gpio_Config(GPIO_Handler_t *pGPIOHandler){	// Función pública
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	/* Verificamos que el pin seleccionado es correcto */
	assert_param(IS_GPIO_PIN(pGPIOHandler->pinConfig.GPIO_PinNumber));

	// 1) Activamos el periférico (Señal de reloj)
	gpio_enable_clock_peripheral(pGPIOHandler);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f813 	bl	80027f0 <gpio_enable_clock_peripheral>

	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	gpio_config_mode(pGPIOHandler);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f870 	bl	80028b0 <gpio_config_mode>

	// 3) Configurando el registro GPIOx_OTYPER
	gpio_config_output_type(pGPIOHandler);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f899 	bl	8002908 <gpio_config_output_type>

	// 4) Configurando el registro GPIOx_SPEED (velocidad de salida)
	gpio_config_output_speed(pGPIOHandler);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8c0 	bl	800295c <gpio_config_output_speed>

	// 5) Configurando el registro GPIOx_PUPDR o(pull-up, pull-dpwn o flotante)
	gpio_config_pullup_pulldown(pGPIOHandler);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f8e9 	bl	80029b4 <gpio_config_pullup_pulldown>

	// 6) Configurando el registro GPIOx_ALTFN de función alternativa
	gpio_config_alternate_function(pGPIOHandler);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f912 	bl	8002a0c <gpio_config_alternate_function>

} // Fin del GPIO_config
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <gpio_enable_clock_peripheral>:



/* Enable Clock Signal for specific GPIOx_Port */
void gpio_enable_clock_peripheral(GPIO_Handler_t *pGPIOHandler){	// Función privada
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

	// Verificamos que el puerto configurado si es permitido
	assert_param(IS_GPIO_ALL_INSTANCE(pGPIOHandler->pGPIOx));

	// Verificamos para GPIOA
		if(pGPIOHandler->pGPIOx == GPIOA){
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <gpio_enable_clock_peripheral+0xa4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d106      	bne.n	8002810 <gpio_enable_clock_peripheral+0x20>
			// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a24      	ldr	r2, [pc, #144]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOHandler->pGPIOx == GPIOH){
			// Escribimos 1 (SET) en la posicion correspondiente al GPIOH
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
		}

} // Fin función privada Config Enable Clock Peripheral
 800280e:	e03a      	b.n	8002886 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOB){
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a21      	ldr	r2, [pc, #132]	; (800289c <gpio_enable_clock_peripheral+0xac>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d106      	bne.n	8002828 <gpio_enable_clock_peripheral+0x38>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800281a:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002826:	e02e      	b.n	8002886 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOC){
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <gpio_enable_clock_peripheral+0xb0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d106      	bne.n	8002840 <gpio_enable_clock_peripheral+0x50>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a18      	ldr	r2, [pc, #96]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 800283e:	e022      	b.n	8002886 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOD){
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <gpio_enable_clock_peripheral+0xb4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d106      	bne.n	8002858 <gpio_enable_clock_peripheral+0x68>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002856:	e016      	b.n	8002886 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOE){
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <gpio_enable_clock_peripheral+0xb8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d106      	bne.n	8002870 <gpio_enable_clock_peripheral+0x80>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 800286e:	e00a      	b.n	8002886 <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOH){
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <gpio_enable_clock_peripheral+0xbc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d105      	bne.n	8002886 <gpio_enable_clock_peripheral+0x96>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a06      	ldr	r2, [pc, #24]	; (8002898 <gpio_enable_clock_peripheral+0xa8>)
 8002880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40020000 	.word	0x40020000
 8002898:	40023800 	.word	0x40023800
 800289c:	40020400 	.word	0x40020400
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40021c00 	.word	0x40021c00

080028b0 <gpio_config_mode>:
 * - Input
 * - Output
 * - Analog
 * - Alternate function
 */
void gpio_config_mode(GPIO_Handler_t *pGPIOHandler){	// Función privada
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]

	/*
	 * Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda
	 * ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinMode << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	795b      	ldrb	r3, [r3, #5]
 80028c0:	461a      	mov	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	791b      	ldrb	r3, [r3, #4]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro
	 * (debemos escribir 0b00), para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	791b      	ldrb	r3, [r3, #4]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2103      	movs	r1, #3
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4619      	mov	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	400a      	ands	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

	/* Cargamos a auxConfig en el registro MODER */
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <gpio_config_output_type>:
/*
 * Configures which type of output the PinX will use:
 * - Push-Pull (Entrada-Salida)
 * - OpenDrain (Alta Impedancia)
 */
void gpio_config_output_type(GPIO_Handler_t *pGPIOHandler){	//Función privada
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputType << pGPIOHandler->pinConfig.GPIO_PinNumber);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7a1b      	ldrb	r3, [r3, #8]
 8002918:	461a      	mov	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	791b      	ldrb	r3, [r3, #4]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->pinConfig.GPIO_PinNumber);	// SET = 0b1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	791b      	ldrb	r3, [r3, #4]
 800292e:	4619      	mov	r1, r3
 8002930:	2301      	movs	r3, #1
 8002932:	408b      	lsls	r3, r1
 8002934:	43db      	mvns	r3, r3
 8002936:	4619      	mov	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	400a      	ands	r2, r1
 800293e:	605a      	str	r2, [r3, #4]

	/* Cargamos el resultado sobre el registro OTYPER */
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]

}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <gpio_config_output_speed>:
 * - Low
 * - Medium
 * - Fast
 * - HighSpeed
 */
void gpio_config_output_speed(GPIO_Handler_t *pGPIOHandler){	//Función privada
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputSpeed << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	799b      	ldrb	r3, [r3, #6]
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	791b      	ldrb	r3, [r3, #4]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2103      	movs	r1, #3
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	4619      	mov	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	400a      	ands	r2, r1
 8002996:	609a      	str	r2, [r3, #8]

	/* Cargamos el resultado sobre el registro OSPEEDR */
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]

}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <gpio_config_pullup_pulldown>:

/*
 * Turns ON/OFF the pull-up pull-down resistor for each PinX in selected GPIO Port
 */
void gpio_config_pullup_pulldown(GPIO_Handler_t *pGPIOHandler){	//Función privada
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	79db      	ldrb	r3, [r3, #7]
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	791b      	ldrb	r3, [r3, #4]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	791b      	ldrb	r3, [r3, #4]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2103      	movs	r1, #3
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	400a      	ands	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]

	/* Cargamos el resultado sobre el registro OTYPER */
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	60da      	str	r2, [r3, #12]

}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <gpio_config_alternate_function>:

/*
 * Allows to configure other functions (more specialized) on the selected PinX
 * (Revisar Tabla 8 del Datasheet del STM32F411)
 */
void gpio_config_alternate_function(GPIO_Handler_t *pGPIOHandler){	//Función privada
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

	uint32_t auxPosition = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]

	if(pGPIOHandler->pinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	795b      	ldrb	r3, [r3, #5]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d143      	bne.n	8002aa8 <gpio_config_alternate_function+0x9c>

		// Seleccionamos primero si se puede utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->pinConfig.GPIO_PinNumber < 8){
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	791b      	ldrb	r3, [r3, #4]
 8002a24:	2b07      	cmp	r3, #7
 8002a26:	d81f      	bhi.n	8002a68 <gpio_config_alternate_function+0x5c>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * (pGPIOHandler->pinConfig.GPIO_PinNumber);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	791b      	ldrb	r3, [r3, #4]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	60fb      	str	r3, [r7, #12]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	210f      	movs	r1, #15
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	400a      	ands	r2, r1
 8002a48:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7a5b      	ldrb	r3, [r3, #9]
 8002a54:	4619      	mov	r1, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8002a66:	e01f      	b.n	8002aa8 <gpio_config_alternate_function+0x9c>
			auxPosition = 4 * (pGPIOHandler->pinConfig.GPIO_PinNumber -8);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	791b      	ldrb	r3, [r3, #4]
 8002a6c:	3b08      	subs	r3, #8
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	60fb      	str	r3, [r7, #12]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a78:	210f      	movs	r1, #15
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	400a      	ands	r2, r1
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7a5b      	ldrb	r3, [r3, #9]
 8002a96:	4619      	mov	r1, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <gpio_WritePin>:

/*
 * Función utilizada para cambiar de estado el pin entregado en el handler,
 * asignando el valor entregado en la variable newState
 */
void gpio_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){	// Función pública
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]

	/* Verificamos si la acción que deseamos realizar es permitida */
	assert_param(IS_GPIO_PIN_ACTION(newState));

	/* Limpiams la posición que deseamos */
	if(newState == SET){
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10d      	bne.n	8002ae2 <gpio_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->pinConfig.GPIO_PinNumber);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	791b      	ldrb	r3, [r3, #4]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	408b      	lsls	r3, r1
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
	}

}
 8002ae0:	e00d      	b.n	8002afe <gpio_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	3310      	adds	r3, #16
 8002aee:	2101      	movs	r1, #1
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	4619      	mov	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <gpio_ReadPin>:


/*
 * Función para leer el estado de un pin específico
 */
uint32_t gpio_ReadPin(GPIO_Handler_t *pPinHandler){
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]

	// Creamos unas variable auxiliares para la máscara y para devolver el valor leído del PinX
	uint32_t pinValue = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]

	/*
	 * Cargamos una variable con el valor del registro IDR del periférico GPIOx
	 */
	pinValue = pPinHandler->pGPIOx->IDR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	60fb      	str	r3, [r7, #12]

	/*
	 * - Creamos una máscara para obtener un binario que contiene únicamente el valor del pin que nos interesa (PinX).
	 * - Hacemos un AND bitwise entre el valor del registro IDR y la máscara para extraer el valor del PinX
	 */
	mask = SET << pPinHandler->pinConfig.GPIO_PinNumber;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	791b      	ldrb	r3, [r3, #4]
 8002b26:	461a      	mov	r2, r3
 8002b28:	2301      	movs	r3, #1
 8002b2a:	4093      	lsls	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
	pinValue &= mask;
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
	/*
	 * Desplazamos el valor del bit del pin que acabamos obtener, "PinNumber" veces a la derecha para que quede en
	 * el bit 0, y lo asignamos a la variable pinValue
	 */

	pinValue >>= pPinHandler->pinConfig.GPIO_PinNumber;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	791b      	ldrb	r3, [r3, #4]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	40d3      	lsrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

	/* Devolvemos el valor leído del PinX */
	return (uint8_t)pinValue;	// Se hace un casting de la variable pinValue de 32-bits a 8 bits
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	b2db      	uxtb	r3, r3

}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <gpio_TooglePin>:

/* =============== PREGUNTA 2 DE LA PARTE_B DE LA TAREA_1 ================
 *
 * Función para cambiar el estado de un PinX, al estado opuesto del actual
 */
void gpio_TooglePin(GPIO_Handler_t *pPinHandler){
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
	// Definimos una variable auxiliar para guardar el estado del PinX
	uint8_t auxVal = 0; // Se define de 8-bits para poder utilizarla como parámetro en la función gpio_WritePin, sin que hayan truncamientos
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Leemos el estado del PinX y aplicamos la operación booleana BANG, que devuelve el valor binario justamente
	 * contrario al estado actual (0b1 si el estado del PinX es 0b0, 0b0 si el estado del PinX es 0b1).
	 * Cargamos el estado "negado" en la variable auxVal
	 */
	auxVal = !gpio_ReadPin(pPinHandler);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffd3 	bl	8002b0a <gpio_ReadPin>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	73fb      	strb	r3, [r7, #15]

	/* Se cambia el estado del PinX al estado opuesto */
	gpio_WritePin(pPinHandler, auxVal);
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff9c 	bl	8002ab4 <gpio_WritePin>

}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <PLL_config>:
void PLL_reFactorM(PLL_Config_t *ptrPLL);
void PLL_reFactorN(PLL_Config_t *ptrPLL);
void PLL_reFactorP(PLL_Config_t *ptrPLL);
void restartBits(PLL_Config_t *ptrPLL);

void PLL_config(PLL_Config_t *ptrPLL){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

	actual_Frequency = 16;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <PLL_config+0x48>)
 8002b8e:	2210      	movs	r2, #16
 8002b90:	701a      	strb	r2, [r3, #0]

	/* Asegurar que el PLL está apagado para configuración */
	PLL_DriverOnOff(ptrPLL,ptrPLL->state);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	799b      	ldrb	r3, [r3, #6]
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f819 	bl	8002bd0 <PLL_DriverOnOff>

	/* Selección de reloj de entrada para PLL */
	PLL_chooseClock(ptrPLL);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f834 	bl	8002c0c <PLL_chooseClock>

	/* División de reloj principal para entrar a VCO */
	PLL_reFactorM(ptrPLL);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f84d 	bl	8002c44 <PLL_reFactorM>

	/* Multiplicación de salida VCO (2MHz) a 200MHz */
	PLL_reFactorN(ptrPLL);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f87a 	bl	8002ca4 <PLL_reFactorN>

	/* División de salida para sistema principal (200MHz) a 100MHz */
	/* Reinicio de bits */
	restartBits(ptrPLL);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f8c3 	bl	8002d3c <restartBits>

	/*Aplicamos el valor final para P*/
	PLL_reFactorP(ptrPLL);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8a4 	bl	8002d04 <PLL_reFactorP>

	/* Guardar frecuencia final configurada */
	ptrPLL->final_Frequency = actual_Frequency;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <PLL_config+0x48>)
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	715a      	strb	r2, [r3, #5]
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200002c4 	.word	0x200002c4

08002bd0 <PLL_DriverOnOff>:


/* Asegurar que el PLL está apagado para configuración */
void PLL_DriverOnOff(PLL_Config_t *ptrPLL,uint8_t state){
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
	if(state){
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <PLL_DriverOnOff+0x20>
		RCC->CR |= RCC_CR_PLLON;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <PLL_DriverOnOff+0x38>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <PLL_DriverOnOff+0x38>)
 8002be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bec:	6013      	str	r3, [r2, #0]
	}
	else{
		RCC->CR &= ~RCC_CR_PLLON;
	}
}
 8002bee:	e005      	b.n	8002bfc <PLL_DriverOnOff+0x2c>
		RCC->CR &= ~RCC_CR_PLLON;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <PLL_DriverOnOff+0x38>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <PLL_DriverOnOff+0x38>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40023800 	.word	0x40023800

08002c0c <PLL_chooseClock>:


/* Selección de reloj de entrada para PLL */
void PLL_chooseClock(PLL_Config_t *ptrPLL){
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	if(ptrPLL->input_Clock == HSI_CLOCK){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <PLL_chooseClock+0x1c>
		RCC->PLLCFGR &= RCC_PLLCFGR_PLLSRC_HSI;
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <PLL_chooseClock+0x34>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <PLL_chooseClock+0x34>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	605a      	str	r2, [r3, #4]
	} else {
		RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
	}
}
 8002c26:	e005      	b.n	8002c34 <PLL_chooseClock+0x28>
		RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <PLL_chooseClock+0x34>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <PLL_chooseClock+0x34>)
 8002c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c32:	6053      	str	r3, [r2, #4]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40023800 	.word	0x40023800

08002c44 <PLL_reFactorM>:


/* División de reloj principal para entrar a VCO */
void PLL_reFactorM(PLL_Config_t *ptrPLL){
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

	/* Reinicio de bits en divisor /M*/
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <PLL_reFactorM+0x58>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <PLL_reFactorM+0x58>)
 8002c52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c56:	6053      	str	r3, [r2, #4]

	/* Divisón por M */
	actual_Frequency = actual_Frequency/(ptrPLL->m_Factor);
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <PLL_reFactorM+0x5c>)
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <PLL_reFactorM+0x5c>)
 8002c68:	701a      	strb	r2, [r3, #0]

	// No configurar si supera los límites
	if(actual_Frequency < 1 || 2 < actual_Frequency){
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <PLL_reFactorM+0x5c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <PLL_reFactorM+0x36>
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <PLL_reFactorM+0x5c>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <PLL_reFactorM+0x3a>
		while(1){
			// Supera los límites
			__NOP();
 8002c7a:	bf00      	nop
 8002c7c:	e7fd      	b.n	8002c7a <PLL_reFactorM+0x36>
		}
	}

	// Configurar factor M
	RCC->PLLCFGR |= (ptrPLL->m_Factor << RCC_PLLCFGR_PLLM_Pos);
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <PLL_reFactorM+0x58>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	7852      	ldrb	r2, [r2, #1]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <PLL_reFactorM+0x58>)
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	6053      	str	r3, [r2, #4]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	200002c4 	.word	0x200002c4

08002ca4 <PLL_reFactorN>:


/* Multiplicación de salida VCO (2MHz) a 200MHz */
void PLL_reFactorN(PLL_Config_t *ptrPLL){
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

	/* Reinicio de bits xN */
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <PLL_reFactorN+0x58>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <PLL_reFactorN+0x58>)
 8002cb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cba:	6053      	str	r3, [r2, #4]

	/* Multiplicación por N */
	actual_Frequency = actual_Frequency * (ptrPLL->n_Factor);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	885b      	ldrh	r3, [r3, #2]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <PLL_reFactorN+0x5c>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	fb12 f303 	smulbb	r3, r2, r3
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <PLL_reFactorN+0x5c>)
 8002cce:	701a      	strb	r2, [r3, #0]

	// No configurar si supera los límites
	if(actual_Frequency < 100 || 432 < actual_Frequency){
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <PLL_reFactorN+0x5c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b63      	cmp	r3, #99	; 0x63
 8002cd6:	d801      	bhi.n	8002cdc <PLL_reFactorN+0x38>
		while(1){
			// Supera los límites
			__NOP();
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <PLL_reFactorN+0x34>
		}
	}
	// Configurar factor N
	RCC->PLLCFGR |= (ptrPLL->n_Factor << RCC_PLLCFGR_PLLN_Pos);
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <PLL_reFactorN+0x58>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	8852      	ldrh	r2, [r2, #2]
 8002ce4:	0192      	lsls	r2, r2, #6
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <PLL_reFactorN+0x58>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	6053      	str	r3, [r2, #4]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	200002c4 	.word	0x200002c4

08002d04 <PLL_reFactorP>:


/*Aplicamos el valor final para P*/
void PLL_reFactorP(PLL_Config_t *ptrPLL){
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

	/* División por P */
	actual_Frequency = actual_Frequency/(ptrPLL->p_Factor);
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <PLL_reFactorP+0x34>)
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	791b      	ldrb	r3, [r3, #4]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <PLL_reFactorP+0x34>)
 8002d1c:	701a      	strb	r2, [r3, #0]
	// No configurar si supera los límites
	if(actual_Frequency > 100){
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <PLL_reFactorP+0x34>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <PLL_reFactorP+0x26>
		while(1){
			// Supera los límites
			__NOP();
 8002d26:	bf00      	nop
 8002d28:	e7fd      	b.n	8002d26 <PLL_reFactorP+0x22>
		}
	}

}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200002c4 	.word	0x200002c4

08002d3c <restartBits>:


/* División de salida para sistema principal (200MHz) a 100MHz */
/* Reinicio de bits */
void restartBits(PLL_Config_t *ptrPLL){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <restartBits+0x88>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <restartBits+0x88>)
 8002d4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d4e:	6053      	str	r3, [r2, #4]

	switch(ptrPLL->p_Factor){
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	791b      	ldrb	r3, [r3, #4]
 8002d54:	3b02      	subs	r3, #2
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d82c      	bhi.n	8002db4 <restartBits+0x78>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <restartBits+0x24>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d7d 	.word	0x08002d7d
 8002d64:	08002db5 	.word	0x08002db5
 8002d68:	08002d8b 	.word	0x08002d8b
 8002d6c:	08002db5 	.word	0x08002db5
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002db5 	.word	0x08002db5
 8002d78:	08002da7 	.word	0x08002da7
	case 2:{
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <restartBits+0x88>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <restartBits+0x88>)
 8002d82:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d86:	6053      	str	r3, [r2, #4]
		break;
 8002d88:	e016      	b.n	8002db8 <restartBits+0x7c>
	}
	case 4:{
		RCC->PLLCFGR |= 1 << RCC_PLLCFGR_PLLP_Pos;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <restartBits+0x88>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <restartBits+0x88>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6053      	str	r3, [r2, #4]
		break;
 8002d96:	e00f      	b.n	8002db8 <restartBits+0x7c>
	}
	case 6:{
		RCC->PLLCFGR |= 2 << RCC_PLLCFGR_PLLP_Pos;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <restartBits+0x88>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <restartBits+0x88>)
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da2:	6053      	str	r3, [r2, #4]
		break;
 8002da4:	e008      	b.n	8002db8 <restartBits+0x7c>
	}
	case 8:{
		RCC->PLLCFGR |= 3 << RCC_PLLCFGR_PLLP_Pos;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <restartBits+0x88>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <restartBits+0x88>)
 8002dac:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002db0:	6053      	str	r3, [r2, #4]
		break;
 8002db2:	e001      	b.n	8002db8 <restartBits+0x7c>
	}
	default:{
		while(1){
			// Worong P factor
			__NOP();
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <restartBits+0x78>
		}
	}
	}
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <PLL_ON_forSystem>:
	}
}


// Sistema para encender PLL a configuración seleccionada
void PLL_ON_forSystem(PLL_Config_t *ptrPLL){
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

	/* Configuración de memoria flash y buses para nueva frecuencia */
	FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk; // Reset flash
 8002dd0:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a36      	ldr	r2, [pc, #216]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // Reset APB1
 8002ddc:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a34      	ldr	r2, [pc, #208]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002de2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // Reset APB2
 8002de8:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a31      	ldr	r2, [pc, #196]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002dee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002df2:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_HPRE; // Reset AHB
 8002df4:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfe:	6093      	str	r3, [r2, #8]

	if(ptrPLL->final_Frequency <= 30){
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	795b      	ldrb	r3, [r3, #5]
 8002e04:	2b1e      	cmp	r3, #30
 8002e06:	d806      	bhi.n	8002e16 <PLL_ON_forSystem+0x4e>
		FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk;
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e0e:	f023 0307 	bic.w	r3, r3, #7
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e031      	b.n	8002e7a <PLL_ON_forSystem+0xb2>
	}
	else if (ptrPLL->final_Frequency <= 64){
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	795b      	ldrb	r3, [r3, #5]
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d810      	bhi.n	8002e40 <PLL_ON_forSystem+0x78>
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6013      	str	r3, [r2, #0]

		if(ptrPLL->final_Frequency > 50){
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	795b      	ldrb	r3, [r3, #5]
 8002e2e:	2b32      	cmp	r3, #50	; 0x32
 8002e30:	d923      	bls.n	8002e7a <PLL_ON_forSystem+0xb2>
			/* División mínima para no superar limites del bus */
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e01c      	b.n	8002e7a <PLL_ON_forSystem+0xb2>
		}
	}
	else if (ptrPLL->final_Frequency <= 90){
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	795b      	ldrb	r3, [r3, #5]
 8002e44:	2b5a      	cmp	r3, #90	; 0x5a
 8002e46:	d80c      	bhi.n	8002e62 <PLL_ON_forSystem+0x9a>
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	6013      	str	r3, [r2, #0]
		/* División mínima para no superar limites del bus */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	e00b      	b.n	8002e7a <PLL_ON_forSystem+0xb2>
	}
	else {
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <PLL_ON_forSystem+0xe8>)
 8002e68:	f043 0303 	orr.w	r3, r3, #3
 8002e6c:	6013      	str	r3, [r2, #0]
		/* División mínima para no superar limites del bus */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e78:	6093      	str	r3, [r2, #8]
	}

	// Endender señal de PLL
	RCC->CR |= RCC_CR_PLLON;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a0d      	ldr	r2, [pc, #52]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e84:	6013      	str	r3, [r2, #0]


	/* Confirmación de PLL listo */
	while(!(RCC->CR & RCC_CR_PLLRDY)){
 8002e86:	e000      	b.n	8002e8a <PLL_ON_forSystem+0xc2>
		__NOP();
 8002e88:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY)){
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f8      	beq.n	8002e88 <PLL_ON_forSystem+0xc0>
	}

	/* Configuración multiplexor que envia reloj a todo el hardware */
	/* Enviar señal PLL */
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <PLL_ON_forSystem+0xec>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	6093      	str	r3, [r2, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <systemClock_100MHz>:
	/* Enviar señal desde HSI */
	RCC->CFGR &= RCC_CFGR_SWS_HSI;
}


void systemClock_100MHz(PLL_Config_t *ptrPLL){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

	ptrPLL->input_Clock = HSI_CLOCK;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
	ptrPLL->m_Factor = 8;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	705a      	strb	r2, [r3, #1]
	ptrPLL->n_Factor = 100;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2264      	movs	r2, #100	; 0x64
 8002ed0:	805a      	strh	r2, [r3, #2]
	ptrPLL->p_Factor = 2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	711a      	strb	r2, [r3, #4]
	PLL_config(ptrPLL); // Apaga y configura PLL
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fe53 	bl	8002b84 <PLL_config>

	PLL_ON_forSystem(ptrPLL);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ff72 	bl	8002dc8 <PLL_ON_forSystem>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <systemClock_Output>:

	PLL_ON_forSystem(ptrPLL);
}


void systemClock_Output(void){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0

	GPIO_Handler_t ptrC9;
	/* Encendido GPIO A8 */
	ptrC9.pGPIOx = GPIOC;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <systemClock_Output+0x4c>)
 8002ef4:	607b      	str	r3, [r7, #4]
	ptrC9.pinConfig.GPIO_PinNumber = PIN_9;
 8002ef6:	2309      	movs	r3, #9
 8002ef8:	723b      	strb	r3, [r7, #8]
	ptrC9.pinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8002efa:	2302      	movs	r3, #2
 8002efc:	727b      	strb	r3, [r7, #9]
	ptrC9.pinConfig.GPIO_PinAltFunMode = AF0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	737b      	strb	r3, [r7, #13]
	gpio_Config(&ptrC9);
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fc59 	bl	80027bc <gpio_Config>

	/* Configuración prescaler de MCO2 SysCLK/5 */
	RCC->CFGR &= ~RCC_CFGR_MCO2PRE_Msk;
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <systemClock_Output+0x50>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <systemClock_Output+0x50>)
 8002f10:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8002f14:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b111 << RCC_CFGR_MCO2PRE_Pos);
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <systemClock_Output+0x50>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <systemClock_Output+0x50>)
 8002f1c:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002f20:	6093      	str	r3, [r2, #8]

	/* Encendido señal para lectura MCO2 */
	RCC->CFGR |= RCC_CFGR_MCO2;
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <systemClock_Output+0x50>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <systemClock_Output+0x50>)
 8002f28:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f2c:	6093      	str	r3, [r2, #8]

}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40023800 	.word	0x40023800

08002f40 <pwm_Config>:


/*
 * Función para cargar las configuraciones desde el Handler del PWM
 */
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del Timer requerido */
	timer_enable_clock_peripheral(ptrPwmHandler);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8af 	bl	80030ac <timer_enable_clock_peripheral>

	/* 2. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f9f0 	bl	8003334 <setFrequency>

	/* 3. Cargamos el valor del dutty-Cycle*/
	setDutyCycle(ptrPwmHandler);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fa01 	bl	800335c <setDutyCycle>

	/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */

	// Configruamos el contador en Up-Count
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0210 	bic.w	r2, r2, #16
 8002f68:	601a      	str	r2, [r3, #0]

	// Cargamos el límite del contador (periodo) TIMx -> ARR
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	899a      	ldrh	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
	 *
	 * 5. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 6. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	791b      	ldrb	r3, [r3, #4]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	f200 808f 	bhi.w	800309c <pwm_Config+0x15c>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <pwm_Config+0x44>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002fd7 	.word	0x08002fd7
 8002f8c:	08003019 	.word	0x08003019
 8002f90:	0800305b 	.word	0x0800305b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0203 	bic.w	r2, r2, #3
 8002fa2:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1M; // Limpiamos el registro primero
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fb2:	619a      	str	r2, [r3, #24]

		/* Configuramos el PWM en mode 1, donde el contador aumenta hasta el valor ARR,
		 * y la señal está en alto (1), y se pone en bajo cuando se alcanza el valor del CCR
		 */
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos); // PWM - mode 1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002fc2:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0208 	orr.w	r2, r2, #8
 8002fd2:	619a      	str	r2, [r3, #24]

		break;
 8002fd4:	e063      	b.n	800309e <pwm_Config+0x15e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fe4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2M; // Limpiamos el registro primero
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ff4:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos); // PWM - mode 1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003004:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003014:	619a      	str	r2, [r3, #24]
		break;
 8003016:	e042      	b.n	800309e <pwm_Config+0x15e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0203 	bic.w	r2, r2, #3
 8003026:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3M; // Limpiamos el registro primero
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003036:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos); // PWM - mode 1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003046:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0208 	orr.w	r2, r2, #8
 8003056:	61da      	str	r2, [r3, #28]
		break;
 8003058:	e021      	b.n	800309e <pwm_Config+0x15e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003068:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4M; // Limpiamos el registro primero
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003078:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos); // PWM - mode 1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003088:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003098:	61da      	str	r2, [r3, #28]
		break;
 800309a:	e000      	b.n	800309e <pwm_Config+0x15e>
	}

	default:{
		break;
 800309c:	bf00      	nop
	}

	} //fin del switch-case

	/* 7. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f89a 	bl	80031d8 <enableOutput>


} //Fin de la función de configuración
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <timer_enable_clock_peripheral>:


/* Función para activar la señal de reloj del Timer */
void timer_enable_clock_peripheral(PWM_Handler_t *ptrPwmHandler){
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	  *
	  * ===== TIMERS 32 BITS =====
	  * TIM2 - TIM5
	  * */

	 if(ptrPwmHandler->ptrTIMx == TIM2){
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030bc:	d106      	bne.n	80030cc <timer_enable_clock_peripheral+0x20>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a2a      	ldr	r2, [pc, #168]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
	 }
	 else{
		 __NOP();
	 }
 } // Fin activar señal reloj Timers
 80030ca:	e048      	b.n	800315e <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM3){
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <timer_enable_clock_peripheral+0xc4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d106      	bne.n	80030e4 <timer_enable_clock_peripheral+0x38>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80030d6:	4b25      	ldr	r3, [pc, #148]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a24      	ldr	r2, [pc, #144]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 } // Fin activar señal reloj Timers
 80030e2:	e03c      	b.n	800315e <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM4){
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a22      	ldr	r2, [pc, #136]	; (8003174 <timer_enable_clock_peripheral+0xc8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d106      	bne.n	80030fc <timer_enable_clock_peripheral+0x50>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80030ee:	4b1f      	ldr	r3, [pc, #124]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a1e      	ldr	r2, [pc, #120]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 } // Fin activar señal reloj Timers
 80030fa:	e030      	b.n	800315e <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM5){
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <timer_enable_clock_peripheral+0xcc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d106      	bne.n	8003114 <timer_enable_clock_peripheral+0x68>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003106:	4b19      	ldr	r3, [pc, #100]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 } // Fin activar señal reloj Timers
 8003112:	e024      	b.n	800315e <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM9){
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <timer_enable_clock_peripheral+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d106      	bne.n	800312c <timer_enable_clock_peripheral+0x80>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 } // Fin activar señal reloj Timers
 800312a:	e018      	b.n	800315e <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM10){
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <timer_enable_clock_peripheral+0xd4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d106      	bne.n	8003144 <timer_enable_clock_peripheral+0x98>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	6453      	str	r3, [r2, #68]	; 0x44
 } // Fin activar señal reloj Timers
 8003142:	e00c      	b.n	800315e <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM11){
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <timer_enable_clock_peripheral+0xd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d106      	bne.n	800315c <timer_enable_clock_peripheral+0xb0>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a06      	ldr	r2, [pc, #24]	; (800316c <timer_enable_clock_peripheral+0xc0>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 } // Fin activar señal reloj Timers
 800315a:	e000      	b.n	800315e <timer_enable_clock_peripheral+0xb2>
		 __NOP();
 800315c:	bf00      	nop
 } // Fin activar señal reloj Timers
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40014000 	.word	0x40014000
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800

08003188 <startPwmSignal>:


/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	// Limpiamos el contador
	ptrPwmHandler->ptrTIMx->CNT = 0;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

	// Activamos el Counter del Timer, el cual activa también el PWM
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <stopPwmSignal>:


/* Función para desactivar el Timer y detener todo el módulo PWM*/
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

	// Desactiva el Counter del Timer, y así mismo el módulo PWM
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <enableOutput>:


/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	791b      	ldrb	r3, [r3, #4]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d82f      	bhi.n	8003248 <enableOutput+0x70>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <enableOutput+0x18>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003201 	.word	0x08003201
 80031f4:	08003213 	.word	0x08003213
 80031f8:	08003225 	.word	0x08003225
 80031fc:	08003237 	.word	0x08003237
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	621a      	str	r2, [r3, #32]
		break;
 8003210:	e01b      	b.n	800324a <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0210 	orr.w	r2, r2, #16
 8003220:	621a      	str	r2, [r3, #32]
		break;
 8003222:	e012      	b.n	800324a <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003232:	621a      	str	r2, [r3, #32]
		break;
 8003234:	e009      	b.n	800324a <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a1a      	ldr	r2, [r3, #32]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003244:	621a      	str	r2, [r3, #32]
		break;
 8003246:	e000      	b.n	800324a <enableOutput+0x72>
	}

	default: {
		break;
 8003248:	bf00      	nop
	}
	}

} // Fin de la función enableOutput()
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <selectPolarity>:

/*
 * Esta funcion modifica la polaridad del PWM, es decir, el "tiempo activo" es una señal LOW,
 * y el "tiempo inactivo" es una señal HIGH. Esto significa que se invierte la señal del PWM.
 */
void selectPolarity(PWM_Handler_t *ptrPwmHandler){
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

	// Miramos cuál Timer se está utilizando
	switch(ptrPwmHandler->config.channel){
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d85f      	bhi.n	8003328 <selectPolarity+0xd0>
 8003268:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <selectPolarity+0x18>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003281 	.word	0x08003281
 8003274:	080032ab 	.word	0x080032ab
 8003278:	080032d5 	.word	0x080032d5
 800327c:	080032ff 	.word	0x080032ff
	case PWM_CHANNEL_1:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7c9b      	ldrb	r3, [r3, #18]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <selectPolarity+0x42>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0202 	bic.w	r2, r2, #2
 8003296:	621a      	str	r2, [r3, #32]
 8003298:	e007      	b.n	80032aa <selectPolarity+0x52>
		}
		else{
			//Configuramos el registro para configurar la polaridad inversa del PWM
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0202 	orr.w	r2, r2, #2
 80032a8:	621a      	str	r2, [r3, #32]
		}
	}
	case PWM_CHANNEL_2:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7c9b      	ldrb	r3, [r3, #18]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <selectPolarity+0x6c>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0220 	bic.w	r2, r2, #32
 80032c0:	621a      	str	r2, [r3, #32]
 80032c2:	e007      	b.n	80032d4 <selectPolarity+0x7c>
		}
		else{
			//Configuramos el registro para configurar la polaridad inversa del PWM
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0220 	orr.w	r2, r2, #32
 80032d2:	621a      	str	r2, [r3, #32]
		}
	}
	case PWM_CHANNEL_3:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7c9b      	ldrb	r3, [r3, #18]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d108      	bne.n	80032ee <selectPolarity+0x96>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032ea:	621a      	str	r2, [r3, #32]
 80032ec:	e007      	b.n	80032fe <selectPolarity+0xa6>
		}
		else{
			//Configuramos el registro para configurar la polaridad inversa del PWM
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fc:	621a      	str	r2, [r3, #32]
		}
	}
	case PWM_CHANNEL_4:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7c9b      	ldrb	r3, [r3, #18]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d108      	bne.n	8003318 <selectPolarity+0xc0>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003314:	621a      	str	r2, [r3, #32]
		}
	}

	}// Fin switch case

}// Fin funcion de seleccion de polaridad
 8003316:	e007      	b.n	8003328 <selectPolarity+0xd0>
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003326:	621a      	str	r2, [r3, #32]
}// Fin funcion de seleccion de polaridad
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ms) a la cual
	// se incrementa el Timer. (Define la escala de tiempo. 1ms -> PSC = 16000 -> Signal Clock = 16 MHz
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;	// Determina un valor de referencia para el tiempo
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;	// Determina cuántas unidades de tiempo pasan (Periodo)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	899a      	ldrh	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c

	/*
	 * El producto PSC * ARR determina el periodo del PWM
	 */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <setDutyCycle>:


/* El valor del dutty es una fracción del valor del ARR.
 * Se puede determinar porcentualmente como ( CCRx / ARR * 100 )
 */
void setDutyCycle(PWM_Handler_t *ptrPwmHandler){
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	791b      	ldrb	r3, [r3, #4]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d84f      	bhi.n	800340c <setDutyCycle+0xb0>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <setDutyCycle+0x18>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	08003385 	.word	0x08003385
 8003378:	080033a7 	.word	0x080033a7
 800337c:	080033c9 	.word	0x080033c9
 8003380:	080033eb 	.word	0x080033eb
	case PWM_CHANNEL_1:{
		// Cargamos el valor del Duty Cycle en el registro CCR1
		ptrPwmHandler->ptrTIMx->CCR1 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8a1b      	ldrh	r3, [r3, #16]
 8003388:	461a      	mov	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	899b      	ldrh	r3, [r3, #12]
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a22      	ldr	r2, [pc, #136]	; (800341c <setDutyCycle+0xc0>)
 8003394:	fb82 1203 	smull	r1, r2, r2, r3
 8003398:	1152      	asrs	r2, r2, #5
 800339a:	17db      	asrs	r3, r3, #31
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80033a4:	e033      	b.n	800340e <setDutyCycle+0xb2>
	}

	case PWM_CHANNEL_2:{
		// Cargamos el valor del Duty Cycle en el registro CCR2
		ptrPwmHandler->ptrTIMx->CCR2 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8a1b      	ldrh	r3, [r3, #16]
 80033aa:	461a      	mov	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	899b      	ldrh	r3, [r3, #12]
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <setDutyCycle+0xc0>)
 80033b6:	fb82 1203 	smull	r1, r2, r2, r3
 80033ba:	1152      	asrs	r2, r2, #5
 80033bc:	17db      	asrs	r3, r3, #31
 80033be:	1ad2      	subs	r2, r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80033c6:	e022      	b.n	800340e <setDutyCycle+0xb2>
	}

	case PWM_CHANNEL_3:{
		// Cargamos el valor del Duty Cycle en el registro CCR3
		ptrPwmHandler->ptrTIMx->CCR3 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8a1b      	ldrh	r3, [r3, #16]
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	899b      	ldrh	r3, [r3, #12]
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	4a11      	ldr	r2, [pc, #68]	; (800341c <setDutyCycle+0xc0>)
 80033d8:	fb82 1203 	smull	r1, r2, r2, r3
 80033dc:	1152      	asrs	r2, r2, #5
 80033de:	17db      	asrs	r3, r3, #31
 80033e0:	1ad2      	subs	r2, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80033e8:	e011      	b.n	800340e <setDutyCycle+0xb2>
	}

	case PWM_CHANNEL_4:{
		// Cargamos el valor del Duty Cycle en el registro CCR4
		ptrPwmHandler->ptrTIMx->CCR4 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8a1b      	ldrh	r3, [r3, #16]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	899b      	ldrh	r3, [r3, #12]
 80033f4:	fb02 f303 	mul.w	r3, r2, r3
 80033f8:	4a08      	ldr	r2, [pc, #32]	; (800341c <setDutyCycle+0xc0>)
 80033fa:	fb82 1203 	smull	r1, r2, r2, r3
 80033fe:	1152      	asrs	r2, r2, #5
 8003400:	17db      	asrs	r3, r3, #31
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800340a:	e000      	b.n	800340e <setDutyCycle+0xb2>
	}

	default:{
		break;
 800340c:	bf00      	nop
	}

	}// fin del switch-case

} // Fin de la función setDutyCycle()
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	51eb851f 	.word	0x51eb851f

08003420 <updateDutyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDutyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDuty){
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
    ptrPwmHandler->config.percDuty = newDuty;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	821a      	strh	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDutyCycle(ptrPwmHandler);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ff92 	bl	800335c <setDutyCycle>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <__NVIC_EnableIRQ>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	; (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db12      	blt.n	80034b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	490a      	ldr	r1, [pc, #40]	; (80034c0 <__NVIC_DisableIRQ+0x44>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	3320      	adds	r3, #32
 80034a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034a8:	f3bf 8f4f 	dsb	sy
}
 80034ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034ae:	f3bf 8f6f 	isb	sy
}
 80034b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <systick_Config>:
static void systick_config_interrupt(Systick_Handler_t *pSystickHandler);

/*
 * Función para configurar el Systick
 */
void systick_Config(Systick_Handler_t *pSystickHandler){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

	// La variable que cuenta los Ticks del sistema empieza en 0, para asegurarnos mejor.
	// Con ella, podemos llevar una "Cuenta" del tiempo activo del sistema
	countTicks = 0;
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <systick_Config+0x60>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
	/*
	 * 1. Asignar el valor del Reload
	 */

	// Asignamos el valor del Reload cargado en la estructura de configuración, en el registro correspondiente
	pSystickHandler->pSystick->LOAD = SYSTICK_PSC_1ms;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80034da:	605a      	str	r2, [r3, #4]

	/*
	 * 2. Limpiamos el valor actual del contador del Systick
	 */
	pSystickHandler->pSystick->VAL = 0;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]

	/* Configurar el registro CTRL
	 * 	3a. Configuramos la fuente de la señal (en este caso, la signa clock del procesador)
	 */
	// Limpiamos el registro
	pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0204 	bic.w	r2, r2, #4
 80034f2:	601a      	str	r2, [r3, #0]

	// Asignamos la señal de reloj principal (Fosc -> Frecuencia de oscilanción) al Systick
	pSystickHandler->pSystick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0204 	orr.w	r2, r2, #4
 8003502:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003504:	b672      	cpsid	i
}
 8003506:	bf00      	nop
	 */
	// Desactivamos las interrupciones globales
	__disable_irq();

	// Configuramos las interrupciones del Systick
	systick_config_interrupt(pSystickHandler);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f845 	bl	8003598 <systick_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 800350e:	b662      	cpsie	i
}
 8003510:	bf00      	nop
	__enable_irq();

	/*
	 * 4. Arrancamos con el Timer Systick apagado
	 */
	systick_SetState(pSystickHandler, SYSTICK_OFF);
 8003512:	2100      	movs	r1, #0
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f807 	bl	8003528 <systick_SetState>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200002c8 	.word	0x200002c8

08003528 <systick_SetState>:


/*
 * Con esta función encendemos o apagamos el Timer
 */
void systick_SetState(Systick_Handler_t *pSystickHandler, uint8_t newState){
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]

	/* Mirammos cuál estado queremos configurar */
	switch(newState){
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <systick_SetState+0x28>
 800353a:	2b01      	cmp	r3, #1
 800353c:	d111      	bne.n	8003562 <systick_SetState+0x3a>
	case SYSTICK_ON: {
		pSystickHandler->pSystick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
		break;
 800354e:	e00a      	b.n	8003566 <systick_SetState+0x3e>
	}
	case SYSTICK_OFF: {
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
		break;
 8003560:	e001      	b.n	8003566 <systick_SetState+0x3e>
	}
	default: {
		__NOP();
 8003562:	bf00      	nop
		break;
 8003564:	bf00      	nop
	}
	}

}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <systick_GetTicks>:


/*
 * Devuelve la cantidad de Ticks (cuenta los ticks, o del tiempo según el Reload d)
 */
uint64_t systick_GetTicks(void){
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
	return countTicks;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <systick_GetTicks+0x20>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2200      	movs	r2, #0
 800357e:	4618      	mov	r0, r3
 8003580:	4611      	mov	r1, r2
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
}
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	200002c8 	.word	0x200002c8

08003598 <systick_config_interrupt>:


/*
 * Activamos o desactivamos las interrupciones. También las matriculamos o desmatriculamos del NVIC
 */
static void systick_config_interrupt(Systick_Handler_t *pSystickHandler){
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

	if(pSystickHandler->Systick_Config.Systick_IntState == SYSTICK_INT_ENABLE){
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7a1b      	ldrb	r3, [r3, #8]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d114      	bne.n	80035d2 <systick_config_interrupt+0x3a>
		// Limpiamos la posición
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0202 	bic.w	r2, r2, #2
 80035b6:	601a      	str	r2, [r3, #0]

		// Activamos la interrupción
		pSystickHandler->pSystick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0202 	orr.w	r2, r2, #2
 80035c6:	601a      	str	r2, [r3, #0]

		// Matriculamos la interrupción en el NVIC
		NVIC_EnableIRQ(SysTick_IRQn);
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035cc:	f7ff ff38 	bl	8003440 <__NVIC_EnableIRQ>
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;

		// Desmatriculamos la interrupción en el NVIC
		NVIC_DisableIRQ(SysTick_IRQn);
	}
}
 80035d0:	e00b      	b.n	80035ea <systick_config_interrupt+0x52>
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0202 	bic.w	r2, r2, #2
 80035e0:	601a      	str	r2, [r3, #0]
		NVIC_DisableIRQ(SysTick_IRQn);
 80035e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e6:	f7ff ff49 	bl	800347c <__NVIC_DisableIRQ>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <systick_Delay_ms>:
/*
 * Función para generar un Delay, es decir, una "pausa controlado del main", usando el SysTick.
 * (El valor del Prescaler para que el tiempo cuente en intervalos de 1 ms, debe ser
 * PSC -> 16000
 */
void systick_Delay_ms(uint32_t wait_time_ms){
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]

	// Obtenemos el Tick actual del contador
	startTick = systick_GetTicks();
 80035fe:	f7ff ffb9 	bl	8003574 <systick_GetTicks>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <systick_Delay_ms+0x70>)
 8003608:	601a      	str	r2, [r3, #0]

	// Obtiene el valor de tiempo para comparar inicialmente
	countTicks = systick_GetTicks();
 800360a:	f7ff ffb3 	bl	8003574 <systick_GetTicks>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <systick_Delay_ms+0x74>)
 8003614:	601a      	str	r2, [r3, #0]

	/* Comparamos el valor de cada actualización, con el valor de referencia
	 * startTick + wait_time_ms, para que entre en un ciclo hasta que pase
	 * el intervalo de tiempo deseado
	 */
	while(countTicks < (startTick + (uint64_t)wait_time_ms)){
 8003616:	e005      	b.n	8003624 <systick_Delay_ms+0x30>
		// Guardamos el valor de la cuenta actual
		countTicks = systick_GetTicks();
 8003618:	f7ff ffac 	bl	8003574 <systick_GetTicks>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <systick_Delay_ms+0x74>)
 8003622:	601a      	str	r2, [r3, #0]
	while(countTicks < (startTick + (uint64_t)wait_time_ms)){
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <systick_Delay_ms+0x74>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2200      	movs	r2, #0
 800362a:	4698      	mov	r8, r3
 800362c:	4691      	mov	r9, r2
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <systick_Delay_ms+0x70>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	469a      	mov	sl, r3
 800363e:	4693      	mov	fp, r2
 8003640:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003644:	460b      	mov	r3, r1
 8003646:	eb13 040a 	adds.w	r4, r3, sl
 800364a:	4613      	mov	r3, r2
 800364c:	eb43 050b 	adc.w	r5, r3, fp
 8003650:	45a0      	cmp	r8, r4
 8003652:	eb79 0305 	sbcs.w	r3, r9, r5
 8003656:	d3df      	bcc.n	8003618 <systick_Delay_ms+0x24>
	}


} // Fin systick_Delay_ms()
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003664:	200002cc 	.word	0x200002cc
 8003668:	200002c8 	.word	0x200002c8

0800366c <systick_Callback>:


__attribute__((weak)) void systick_Callback(void){
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
	__NOP();
 8003670:	bf00      	nop
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <SysTick_Handler>:

/*
 * El Handler de IRQ del Systick (El nombre de esta función es propio de las librerías del Cortex M4 -> )
 */
void SysTick_Handler(void){
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0

	// Verificamos si la interrupción se dio por el Systick
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <SysTick_Handler+0x30>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <SysTick_Handler+0x2a>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <SysTick_Handler+0x30>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a06      	ldr	r2, [pc, #24]	; (80036ac <SysTick_Handler+0x30>)
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]

		/* Cada que se de una interrupción, aumentamos en 1 el contador de ticks */
		countTicks++;
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SysTick_Handler+0x34>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <SysTick_Handler+0x34>)
 80036a0:	6013      	str	r3, [r2, #0]

		/* Llamamos a la función que se debe encargar de hacer algo con esta interrupción */
		systick_Callback();
 80036a2:	f7ff ffe3 	bl	800366c <systick_Callback>
	}

}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	e000e010 	.word	0xe000e010
 80036b0:	200002c8 	.word	0x200002c8

080036b4 <__NVIC_EnableIRQ>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db0b      	blt.n	80036de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4907      	ldr	r1, [pc, #28]	; (80036ec <__NVIC_EnableIRQ+0x38>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_DisableIRQ>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db12      	blt.n	8003728 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	490a      	ldr	r1, [pc, #40]	; (8003734 <__NVIC_DisableIRQ+0x44>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	3320      	adds	r3, #32
 8003718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800371c:	f3bf 8f4f 	dsb	sy
}
 8003720:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003722:	f3bf 8f6f 	isb	sy
}
 8003726:	bf00      	nop
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000e100 	.word	0xe000e100

08003738 <timer_Config>:
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva,
 *  debemos desactivar el sistema global de interrupciones, activar la IRQ específica
 *  y luego volver a encender el sistema
 */

void timer_Config(Timer_Handler_t *pTimerHandler){	// Llamamos la función pública timer_Config
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periférico que estamos utilizando...
	ptrTimerUsed = pTimerHandler->pTIMx;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <timer_Config+0x48>)
 8003746:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003748:	b672      	cpsid	i
}
 800374a:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema */
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	timer_enable_clock_peripheral(pTimerHandler);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f819 	bl	8003784 <timer_enable_clock_peripheral>

	/* 2. Configuramos el Pre-scaler */
	timer_set_prescaler(pTimerHandler);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f884 	bl	8003860 <timer_set_prescaler>

	/* 3. Configuramos si UP_COUNT o DOWN_COUNT (mode) */
	timer_set_mode(pTimerHandler);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f891 	bl	8003880 <timer_set_mode>

	/* 4. Configuramos el Auto-reload */
	timer_set_period(pTimerHandler);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8ad 	bl	80038be <timer_set_period>

	/* 5. Configuramos la interrupción */
	timer_config_interrupt(pTimerHandler);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8bb 	bl	80038e0 <timer_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 800376a:	b662      	cpsie	i
}
 800376c:	bf00      	nop

	/* X. Volvemos a activar las interrupciones del sistema */
	__enable_irq();

	/* El timer inicia apagado */
	timer_SetState(pTimerHandler, TIMER_OFF);	// Esta es la función pública timer_SetState
 800376e:	2100      	movs	r1, #0
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f95f 	bl	8003a34 <timer_SetState>

}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200002d0 	.word	0x200002d0

08003784 <timer_enable_clock_peripheral>:
/*
 * Funciones privadas que realizarán la configuración del Timer
 *
 * La siguiente función activa la señal de reloj según el Timer que estemos configurando
 */
 void timer_enable_clock_peripheral(Timer_Handler_t *pTimerHandler){
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	  * TIM11
	  *
	  * ===== TIMERS 32 BITS =====
	  * TIM2 - TIM5
	  * */
	 if(pTimerHandler->pTIMx == TIM2){
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d106      	bne.n	80037a4 <timer_enable_clock_peripheral+0x20>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003796:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
	 }
	 else{
		 __NOP();
	 }
 }
 80037a2:	e048      	b.n	8003836 <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM3){
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a27      	ldr	r2, [pc, #156]	; (8003848 <timer_enable_clock_peripheral+0xc4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d106      	bne.n	80037bc <timer_enable_clock_peripheral+0x38>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80037ae:	4b25      	ldr	r3, [pc, #148]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a24      	ldr	r2, [pc, #144]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 }
 80037ba:	e03c      	b.n	8003836 <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM4){
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a22      	ldr	r2, [pc, #136]	; (800384c <timer_enable_clock_peripheral+0xc8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d106      	bne.n	80037d4 <timer_enable_clock_peripheral+0x50>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 }
 80037d2:	e030      	b.n	8003836 <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM5){
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <timer_enable_clock_peripheral+0xcc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d106      	bne.n	80037ec <timer_enable_clock_peripheral+0x68>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037e4:	f043 0308 	orr.w	r3, r3, #8
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 }
 80037ea:	e024      	b.n	8003836 <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM9){
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <timer_enable_clock_peripheral+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d106      	bne.n	8003804 <timer_enable_clock_peripheral+0x80>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 }
 8003802:	e018      	b.n	8003836 <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM10){
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a13      	ldr	r2, [pc, #76]	; (8003858 <timer_enable_clock_peripheral+0xd4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d106      	bne.n	800381c <timer_enable_clock_peripheral+0x98>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 8003814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003818:	6453      	str	r3, [r2, #68]	; 0x44
 }
 800381a:	e00c      	b.n	8003836 <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM11){
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0e      	ldr	r2, [pc, #56]	; (800385c <timer_enable_clock_peripheral+0xd8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d106      	bne.n	8003834 <timer_enable_clock_peripheral+0xb0>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	4a06      	ldr	r2, [pc, #24]	; (8003844 <timer_enable_clock_peripheral+0xc0>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6453      	str	r3, [r2, #68]	; 0x44
 }
 8003832:	e000      	b.n	8003836 <timer_enable_clock_peripheral+0xb2>
		 __NOP();
 8003834:	bf00      	nop
 }
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <timer_set_prescaler>:
 /*
  * El Pre-scaler nos configura la velocidad a la que se incrementa
  * el registro CNT del Timer (Este registro es el que se usa para
  * determinar cuando se dispara la interrupción)
  */
 void timer_set_prescaler(Timer_Handler_t *pTimerHandler){
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

	 // Verificamos que el valor del prescaler es válido
	 assert_param(IS_TIMER_PRESC(pTimerHandler->TIMx_Config.TIMx_Prescaler));

	 // Configuramos el valor del Pre-scaler
	 pTimerHandler->pTIMx->PSC = pTimerHandler->TIMx_Config.TIMx_Prescaler - 1; // (16000000)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3a01      	subs	r2, #1
 8003872:	629a      	str	r2, [r3, #40]	; 0x28
	 	 	 	 	 	 	 	 	 	 // Restamos 1 al valor del prescaler por indicación de la hoja de datos
 }
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <timer_set_mode>:


 /*
  * Upcounter o DownCounter
  */
 void timer_set_mode(Timer_Handler_t *pTimerHandler){
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

	 // Verificamos que el modo de funcionamiento es correcto
	 assert_param(IS_TIMER_MODE()(pTimerHandler->TIMx_Config.TIMx_mode));

	 // Verificamos cuál es el modo que se desea configurar.
	 if(pTimerHandler->TIMx_Config.TIMx_mode == TIMER_UP_COUNTER){
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d108      	bne.n	80038a2 <timer_set_mode+0x22>
		 // Configuramos en modo Upcounter DIR = 0
		 pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_DIR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0210 	bic.w	r2, r2, #16
 800389e:	601a      	str	r2, [r3, #0]
	 }
	 else{
		 // Configuramos en modo downcounter DIR = 1
		 pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
	 }
 }
 80038a0:	e007      	b.n	80038b2 <timer_set_mode+0x32>
		 pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0210 	orr.w	r2, r2, #16
 80038b0:	601a      	str	r2, [r3, #0]
 }
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <timer_set_period>:
  * Esta función configura el límite hasta donde cuenta el Timer para generar un
  * evento "update" (cuando esta contando de forma ascendente), o configura
  * el valor desde donde se comienza a contar, cuando el sistema funciona de forma
  * descendente.
  */
 void timer_set_period(Timer_Handler_t *pTimerHandler){
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]

	 // Verificamos que el valor que genera el periodo es válido
	 assert_param(IS_TIMER_PERIOD(pTimerHandler->TIMx_Config.TIMx_Period));

	 // Configuramos el valor del autoreload (El periodo, tiene sentido)
	 pTimerHandler->pTIMx->ARR = pTimerHandler->TIMx_Config.TIMx_Period - 1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3a01      	subs	r2, #1
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c
 }
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <timer_config_interrupt>:


 /*
  * Función que permite configurar la interrupción
  */
 void timer_config_interrupt(Timer_Handler_t *pTimerHandler){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

	 // Verificamos el posible valor configurado
	 assert_param(IS_TIMER_INTERRUP(pTimerHandler->TIMx_Config.TIMx_InterruptEnable));

	 if(pTimerHandler->TIMx_Config.TIMx_InterruptEnable == TIMER_INT_ENABLE){
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7c1b      	ldrb	r3, [r3, #16]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d148      	bne.n	8003982 <timer_config_interrupt+0xa2>
		 /* Activamos la interrupción debida al Timerx utilizado */
		 pTimerHandler->pTIMx->DIER |= TIM_DIER_UIE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	60da      	str	r2, [r3, #12]

		 /* Activamos el canal del sistema NVIC para que lea la interrupción */
		 if(pTimerHandler->pTIMx == TIM2){
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d103      	bne.n	8003912 <timer_config_interrupt+0x32>
			 NVIC_EnableIRQ(TIM2_IRQn);
 800390a:	201c      	movs	r0, #28
 800390c:	f7ff fed2 	bl	80036b4 <__NVIC_EnableIRQ>
		 else{
			 __NOP();
		 }
	 }

 }
 8003910:	e07f      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM3){
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a41      	ldr	r2, [pc, #260]	; (8003a1c <timer_config_interrupt+0x13c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <timer_config_interrupt+0x44>
			 NVIC_EnableIRQ(TIM3_IRQn);
 800391c:	201d      	movs	r0, #29
 800391e:	f7ff fec9 	bl	80036b4 <__NVIC_EnableIRQ>
 }
 8003922:	e076      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM4){
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3d      	ldr	r2, [pc, #244]	; (8003a20 <timer_config_interrupt+0x140>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d103      	bne.n	8003936 <timer_config_interrupt+0x56>
			 NVIC_EnableIRQ(TIM4_IRQn);
 800392e:	201e      	movs	r0, #30
 8003930:	f7ff fec0 	bl	80036b4 <__NVIC_EnableIRQ>
 }
 8003934:	e06d      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM5){
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3a      	ldr	r2, [pc, #232]	; (8003a24 <timer_config_interrupt+0x144>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <timer_config_interrupt+0x68>
			 NVIC_EnableIRQ(TIM5_IRQn);
 8003940:	2032      	movs	r0, #50	; 0x32
 8003942:	f7ff feb7 	bl	80036b4 <__NVIC_EnableIRQ>
 }
 8003946:	e064      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM9){
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a36      	ldr	r2, [pc, #216]	; (8003a28 <timer_config_interrupt+0x148>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d103      	bne.n	800395a <timer_config_interrupt+0x7a>
			 NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003952:	2018      	movs	r0, #24
 8003954:	f7ff feae 	bl	80036b4 <__NVIC_EnableIRQ>
 }
 8003958:	e05b      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM10){
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <timer_config_interrupt+0x14c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d103      	bne.n	800396c <timer_config_interrupt+0x8c>
			 NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003964:	2019      	movs	r0, #25
 8003966:	f7ff fea5 	bl	80036b4 <__NVIC_EnableIRQ>
 }
 800396a:	e052      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM11){
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <timer_config_interrupt+0x150>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d103      	bne.n	800397e <timer_config_interrupt+0x9e>
			 NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003976:	201a      	movs	r0, #26
 8003978:	f7ff fe9c 	bl	80036b4 <__NVIC_EnableIRQ>
 }
 800397c:	e049      	b.n	8003a12 <timer_config_interrupt+0x132>
			 __NOP();
 800397e:	bf00      	nop
 }
 8003980:	e047      	b.n	8003a12 <timer_config_interrupt+0x132>
		 pTimerHandler->pTIMx->DIER &= ~TIM_DIER_UIE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	60da      	str	r2, [r3, #12]
		 if(pTimerHandler->pTIMx == TIM2){
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d103      	bne.n	80039a4 <timer_config_interrupt+0xc4>
			 NVIC_DisableIRQ(TIM2_IRQn);
 800399c:	201c      	movs	r0, #28
 800399e:	f7ff fea7 	bl	80036f0 <__NVIC_DisableIRQ>
 }
 80039a2:	e036      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM3){
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <timer_config_interrupt+0x13c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d103      	bne.n	80039b6 <timer_config_interrupt+0xd6>
			 NVIC_DisableIRQ(TIM3_IRQn);
 80039ae:	201d      	movs	r0, #29
 80039b0:	f7ff fe9e 	bl	80036f0 <__NVIC_DisableIRQ>
 }
 80039b4:	e02d      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM4){
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <timer_config_interrupt+0x140>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d103      	bne.n	80039c8 <timer_config_interrupt+0xe8>
			 NVIC_DisableIRQ(TIM4_IRQn);
 80039c0:	201e      	movs	r0, #30
 80039c2:	f7ff fe95 	bl	80036f0 <__NVIC_DisableIRQ>
 }
 80039c6:	e024      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM5){
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <timer_config_interrupt+0x144>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d103      	bne.n	80039da <timer_config_interrupt+0xfa>
			 NVIC_DisableIRQ(TIM5_IRQn);
 80039d2:	2032      	movs	r0, #50	; 0x32
 80039d4:	f7ff fe8c 	bl	80036f0 <__NVIC_DisableIRQ>
 }
 80039d8:	e01b      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM9){
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <timer_config_interrupt+0x148>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d103      	bne.n	80039ec <timer_config_interrupt+0x10c>
			 NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 80039e4:	2018      	movs	r0, #24
 80039e6:	f7ff fe83 	bl	80036f0 <__NVIC_DisableIRQ>
 }
 80039ea:	e012      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM10){
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <timer_config_interrupt+0x14c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d103      	bne.n	80039fe <timer_config_interrupt+0x11e>
			 NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 80039f6:	2019      	movs	r0, #25
 80039f8:	f7ff fe7a 	bl	80036f0 <__NVIC_DisableIRQ>
 }
 80039fc:	e009      	b.n	8003a12 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM11){
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <timer_config_interrupt+0x150>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <timer_config_interrupt+0x130>
			 NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003a08:	201a      	movs	r0, #26
 8003a0a:	f7ff fe71 	bl	80036f0 <__NVIC_DisableIRQ>
 }
 8003a0e:	e000      	b.n	8003a12 <timer_config_interrupt+0x132>
			 __NOP();
 8003a10:	bf00      	nop
 }
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800
 8003a24:	40000c00 	.word	0x40000c00
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800

08003a34 <timer_SetState>:

/*
 * Configuramos el encendido o apagado el contador del timer
 */
 void timer_SetState(Timer_Handler_t *pTimerHandler, uint8_t newState){
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]

	 // Verificamos que el estado ingresado es adecuado
	 assert_param(IS_TIMER_STATE(newState));

	 /* 4. Reiniciamos el registro counter */
	 pTimerHandler->pTIMx->CNT = 0;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2200      	movs	r2, #0
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

	 if(newState == TIMER_ON){
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d108      	bne.n	8003a60 <timer_SetState+0x2c>
		 /* 5a. Activamos el Timer (el CNT debe comenzar a contar) por medio del CR1 (Control Register)  */
		 pTimerHandler->pTIMx->CR1 |= TIM_CR1_CEN;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
	 else{
		 /* 5b. Desactivamos el Timer (el CNT debe detenerse) */
		 pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
	 }

 }
 8003a5e:	e007      	b.n	8003a70 <timer_SetState+0x3c>
		 pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
 }
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <Timer3_Callback>:
 /**/
 __attribute__((weak)) void Timer2_Callback(void){		// El atributo (weak) permite sobreescribir la función Callback
	 __NOP();
 }

 __attribute__((weak)) void Timer3_Callback(void){
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	 __NOP();
 8003a80:	bf00      	nop
 }
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <Timer4_Callback>:

 __attribute__((weak)) void Timer4_Callback(void){
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
	 __NOP();
 8003a90:	bf00      	nop
 }
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <Timer5_Callback>:

 __attribute__((weak)) void Timer5_Callback(void){
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
	 __NOP();
 8003aa0:	bf00      	nop
 }
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM2_IRQHandler>:
  * interrupciones.
  * Al hacerlo correctamnete, el sistema apunta a esta función y cuando la interrupción
  * se lanza, el sistema inmediatamente salta a este lugar en la memoria
  */

void TIM2_IRQHandler(void){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8003ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6113      	str	r3, [r2, #16]

	/* Llamamos a la función que se debe encargar de hacer algo con esta interrupción */
	Timer2_Callback();
 8003ac0:	f7fd fac6 	bl	8001050 <Timer2_Callback>
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <TIM3_IRQHandler+0x18>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	4a03      	ldr	r2, [pc, #12]	; (8003ae0 <TIM3_IRQHandler+0x18>)
 8003ad2:	f023 0301 	bic.w	r3, r3, #1
 8003ad6:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8003ad8:	f7ff ffd0 	bl	8003a7c <Timer3_Callback>
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40000400 	.word	0x40000400

08003ae4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <TIM4_IRQHandler+0x18>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	4a03      	ldr	r2, [pc, #12]	; (8003afc <TIM4_IRQHandler+0x18>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8003af4:	f7ff ffca 	bl	8003a8c <Timer4_Callback>
}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40000800 	.word	0x40000800

08003b00 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <TIM5_IRQHandler+0x18>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	4a03      	ldr	r2, [pc, #12]	; (8003b18 <TIM5_IRQHandler+0x18>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8003b10:	f7ff ffc4 	bl	8003a9c <Timer5_Callback>
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40000c00 	.word	0x40000c00

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000000 	.word	0x20000000

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1b64      	subs	r4, r4, r5
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2600      	movs	r6, #0
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4d0b      	ldr	r5, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f004 fc90 	bl	8008460 <_init>
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2600      	movs	r6, #0
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	0800891c 	.word	0x0800891c
 8003b64:	0800891c 	.word	0x0800891c
 8003b68:	0800891c 	.word	0x0800891c
 8003b6c:	08008920 	.word	0x08008920

08003b70 <memset>:
 8003b70:	4402      	add	r2, r0
 8003b72:	4603      	mov	r3, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <__cvt>:
 8003b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b84:	ec55 4b10 	vmov	r4, r5, d0
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	460e      	mov	r6, r1
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	462b      	mov	r3, r5
 8003b90:	bfbb      	ittet	lt
 8003b92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b96:	461d      	movlt	r5, r3
 8003b98:	2300      	movge	r3, #0
 8003b9a:	232d      	movlt	r3, #45	; 0x2d
 8003b9c:	700b      	strb	r3, [r1, #0]
 8003b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ba4:	4691      	mov	r9, r2
 8003ba6:	f023 0820 	bic.w	r8, r3, #32
 8003baa:	bfbc      	itt	lt
 8003bac:	4622      	movlt	r2, r4
 8003bae:	4614      	movlt	r4, r2
 8003bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bb4:	d005      	beq.n	8003bc2 <__cvt+0x42>
 8003bb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003bba:	d100      	bne.n	8003bbe <__cvt+0x3e>
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	e000      	b.n	8003bc4 <__cvt+0x44>
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	ab03      	add	r3, sp, #12
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	ab02      	add	r3, sp, #8
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	ec45 4b10 	vmov	d0, r4, r5
 8003bd0:	4653      	mov	r3, sl
 8003bd2:	4632      	mov	r2, r6
 8003bd4:	f001 fdac 	bl	8005730 <_dtoa_r>
 8003bd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003bdc:	4607      	mov	r7, r0
 8003bde:	d102      	bne.n	8003be6 <__cvt+0x66>
 8003be0:	f019 0f01 	tst.w	r9, #1
 8003be4:	d022      	beq.n	8003c2c <__cvt+0xac>
 8003be6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bea:	eb07 0906 	add.w	r9, r7, r6
 8003bee:	d110      	bne.n	8003c12 <__cvt+0x92>
 8003bf0:	783b      	ldrb	r3, [r7, #0]
 8003bf2:	2b30      	cmp	r3, #48	; 0x30
 8003bf4:	d10a      	bne.n	8003c0c <__cvt+0x8c>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7fc ff6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c02:	b918      	cbnz	r0, 8003c0c <__cvt+0x8c>
 8003c04:	f1c6 0601 	rsb	r6, r6, #1
 8003c08:	f8ca 6000 	str.w	r6, [sl]
 8003c0c:	f8da 3000 	ldr.w	r3, [sl]
 8003c10:	4499      	add	r9, r3
 8003c12:	2200      	movs	r2, #0
 8003c14:	2300      	movs	r3, #0
 8003c16:	4620      	mov	r0, r4
 8003c18:	4629      	mov	r1, r5
 8003c1a:	f7fc ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c1e:	b108      	cbz	r0, 8003c24 <__cvt+0xa4>
 8003c20:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c24:	2230      	movs	r2, #48	; 0x30
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	454b      	cmp	r3, r9
 8003c2a:	d307      	bcc.n	8003c3c <__cvt+0xbc>
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c30:	1bdb      	subs	r3, r3, r7
 8003c32:	4638      	mov	r0, r7
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	b004      	add	sp, #16
 8003c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3c:	1c59      	adds	r1, r3, #1
 8003c3e:	9103      	str	r1, [sp, #12]
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e7f0      	b.n	8003c26 <__cvt+0xa6>

08003c44 <__exponent>:
 8003c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c46:	4603      	mov	r3, r0
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	bfb8      	it	lt
 8003c4c:	4249      	neglt	r1, r1
 8003c4e:	f803 2b02 	strb.w	r2, [r3], #2
 8003c52:	bfb4      	ite	lt
 8003c54:	222d      	movlt	r2, #45	; 0x2d
 8003c56:	222b      	movge	r2, #43	; 0x2b
 8003c58:	2909      	cmp	r1, #9
 8003c5a:	7042      	strb	r2, [r0, #1]
 8003c5c:	dd2a      	ble.n	8003cb4 <__exponent+0x70>
 8003c5e:	f10d 0407 	add.w	r4, sp, #7
 8003c62:	46a4      	mov	ip, r4
 8003c64:	270a      	movs	r7, #10
 8003c66:	46a6      	mov	lr, r4
 8003c68:	460a      	mov	r2, r1
 8003c6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c6e:	fb07 1516 	mls	r5, r7, r6, r1
 8003c72:	3530      	adds	r5, #48	; 0x30
 8003c74:	2a63      	cmp	r2, #99	; 0x63
 8003c76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003c7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c7e:	4631      	mov	r1, r6
 8003c80:	dcf1      	bgt.n	8003c66 <__exponent+0x22>
 8003c82:	3130      	adds	r1, #48	; 0x30
 8003c84:	f1ae 0502 	sub.w	r5, lr, #2
 8003c88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c8c:	1c44      	adds	r4, r0, #1
 8003c8e:	4629      	mov	r1, r5
 8003c90:	4561      	cmp	r1, ip
 8003c92:	d30a      	bcc.n	8003caa <__exponent+0x66>
 8003c94:	f10d 0209 	add.w	r2, sp, #9
 8003c98:	eba2 020e 	sub.w	r2, r2, lr
 8003c9c:	4565      	cmp	r5, ip
 8003c9e:	bf88      	it	hi
 8003ca0:	2200      	movhi	r2, #0
 8003ca2:	4413      	add	r3, r2
 8003ca4:	1a18      	subs	r0, r3, r0
 8003ca6:	b003      	add	sp, #12
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003cb2:	e7ed      	b.n	8003c90 <__exponent+0x4c>
 8003cb4:	2330      	movs	r3, #48	; 0x30
 8003cb6:	3130      	adds	r1, #48	; 0x30
 8003cb8:	7083      	strb	r3, [r0, #2]
 8003cba:	70c1      	strb	r1, [r0, #3]
 8003cbc:	1d03      	adds	r3, r0, #4
 8003cbe:	e7f1      	b.n	8003ca4 <__exponent+0x60>

08003cc0 <_printf_float>:
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	ed2d 8b02 	vpush	{d8}
 8003cc8:	b08d      	sub	sp, #52	; 0x34
 8003cca:	460c      	mov	r4, r1
 8003ccc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003cd0:	4616      	mov	r6, r2
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	f002 fe89 	bl	80069ec <_localeconv_r>
 8003cda:	f8d0 a000 	ldr.w	sl, [r0]
 8003cde:	4650      	mov	r0, sl
 8003ce0:	f7fc fa7e 	bl	80001e0 <strlen>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	f8d8 3000 	ldr.w	r3, [r8]
 8003cf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003cf4:	3307      	adds	r3, #7
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	f103 0208 	add.w	r2, r3, #8
 8003cfe:	f8c8 2000 	str.w	r2, [r8]
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003d0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d12:	9307      	str	r3, [sp, #28]
 8003d14:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d18:	ee08 0a10 	vmov	s16, r0
 8003d1c:	4b9f      	ldr	r3, [pc, #636]	; (8003f9c <_printf_float+0x2dc>)
 8003d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d26:	f7fc ff09 	bl	8000b3c <__aeabi_dcmpun>
 8003d2a:	bb88      	cbnz	r0, 8003d90 <_printf_float+0xd0>
 8003d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d30:	4b9a      	ldr	r3, [pc, #616]	; (8003f9c <_printf_float+0x2dc>)
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d36:	f7fc fee3 	bl	8000b00 <__aeabi_dcmple>
 8003d3a:	bb48      	cbnz	r0, 8003d90 <_printf_float+0xd0>
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2300      	movs	r3, #0
 8003d40:	4640      	mov	r0, r8
 8003d42:	4649      	mov	r1, r9
 8003d44:	f7fc fed2 	bl	8000aec <__aeabi_dcmplt>
 8003d48:	b110      	cbz	r0, 8003d50 <_printf_float+0x90>
 8003d4a:	232d      	movs	r3, #45	; 0x2d
 8003d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d50:	4b93      	ldr	r3, [pc, #588]	; (8003fa0 <_printf_float+0x2e0>)
 8003d52:	4894      	ldr	r0, [pc, #592]	; (8003fa4 <_printf_float+0x2e4>)
 8003d54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d58:	bf94      	ite	ls
 8003d5a:	4698      	movls	r8, r3
 8003d5c:	4680      	movhi	r8, r0
 8003d5e:	2303      	movs	r3, #3
 8003d60:	6123      	str	r3, [r4, #16]
 8003d62:	9b05      	ldr	r3, [sp, #20]
 8003d64:	f023 0204 	bic.w	r2, r3, #4
 8003d68:	6022      	str	r2, [r4, #0]
 8003d6a:	f04f 0900 	mov.w	r9, #0
 8003d6e:	9700      	str	r7, [sp, #0]
 8003d70:	4633      	mov	r3, r6
 8003d72:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d74:	4621      	mov	r1, r4
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f9d8 	bl	800412c <_printf_common>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	f040 8090 	bne.w	8003ea2 <_printf_float+0x1e2>
 8003d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d86:	b00d      	add	sp, #52	; 0x34
 8003d88:	ecbd 8b02 	vpop	{d8}
 8003d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	4640      	mov	r0, r8
 8003d96:	4649      	mov	r1, r9
 8003d98:	f7fc fed0 	bl	8000b3c <__aeabi_dcmpun>
 8003d9c:	b140      	cbz	r0, 8003db0 <_printf_float+0xf0>
 8003d9e:	464b      	mov	r3, r9
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bfbc      	itt	lt
 8003da4:	232d      	movlt	r3, #45	; 0x2d
 8003da6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003daa:	487f      	ldr	r0, [pc, #508]	; (8003fa8 <_printf_float+0x2e8>)
 8003dac:	4b7f      	ldr	r3, [pc, #508]	; (8003fac <_printf_float+0x2ec>)
 8003dae:	e7d1      	b.n	8003d54 <_printf_float+0x94>
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003db6:	9206      	str	r2, [sp, #24]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	d13f      	bne.n	8003e3c <_printf_float+0x17c>
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	6063      	str	r3, [r4, #4]
 8003dc0:	9b05      	ldr	r3, [sp, #20]
 8003dc2:	6861      	ldr	r1, [r4, #4]
 8003dc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9303      	str	r3, [sp, #12]
 8003dcc:	ab0a      	add	r3, sp, #40	; 0x28
 8003dce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003dd2:	ab09      	add	r3, sp, #36	; 0x24
 8003dd4:	ec49 8b10 	vmov	d0, r8, r9
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6022      	str	r2, [r4, #0]
 8003ddc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003de0:	4628      	mov	r0, r5
 8003de2:	f7ff fecd 	bl	8003b80 <__cvt>
 8003de6:	9b06      	ldr	r3, [sp, #24]
 8003de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dea:	2b47      	cmp	r3, #71	; 0x47
 8003dec:	4680      	mov	r8, r0
 8003dee:	d108      	bne.n	8003e02 <_printf_float+0x142>
 8003df0:	1cc8      	adds	r0, r1, #3
 8003df2:	db02      	blt.n	8003dfa <_printf_float+0x13a>
 8003df4:	6863      	ldr	r3, [r4, #4]
 8003df6:	4299      	cmp	r1, r3
 8003df8:	dd41      	ble.n	8003e7e <_printf_float+0x1be>
 8003dfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8003dfe:	fa5f fb8b 	uxtb.w	fp, fp
 8003e02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e06:	d820      	bhi.n	8003e4a <_printf_float+0x18a>
 8003e08:	3901      	subs	r1, #1
 8003e0a:	465a      	mov	r2, fp
 8003e0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e10:	9109      	str	r1, [sp, #36]	; 0x24
 8003e12:	f7ff ff17 	bl	8003c44 <__exponent>
 8003e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e18:	1813      	adds	r3, r2, r0
 8003e1a:	2a01      	cmp	r2, #1
 8003e1c:	4681      	mov	r9, r0
 8003e1e:	6123      	str	r3, [r4, #16]
 8003e20:	dc02      	bgt.n	8003e28 <_printf_float+0x168>
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	07d2      	lsls	r2, r2, #31
 8003e26:	d501      	bpl.n	8003e2c <_printf_float+0x16c>
 8003e28:	3301      	adds	r3, #1
 8003e2a:	6123      	str	r3, [r4, #16]
 8003e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d09c      	beq.n	8003d6e <_printf_float+0xae>
 8003e34:	232d      	movs	r3, #45	; 0x2d
 8003e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e3a:	e798      	b.n	8003d6e <_printf_float+0xae>
 8003e3c:	9a06      	ldr	r2, [sp, #24]
 8003e3e:	2a47      	cmp	r2, #71	; 0x47
 8003e40:	d1be      	bne.n	8003dc0 <_printf_float+0x100>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1bc      	bne.n	8003dc0 <_printf_float+0x100>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e7b9      	b.n	8003dbe <_printf_float+0xfe>
 8003e4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e4e:	d118      	bne.n	8003e82 <_printf_float+0x1c2>
 8003e50:	2900      	cmp	r1, #0
 8003e52:	6863      	ldr	r3, [r4, #4]
 8003e54:	dd0b      	ble.n	8003e6e <_printf_float+0x1ae>
 8003e56:	6121      	str	r1, [r4, #16]
 8003e58:	b913      	cbnz	r3, 8003e60 <_printf_float+0x1a0>
 8003e5a:	6822      	ldr	r2, [r4, #0]
 8003e5c:	07d0      	lsls	r0, r2, #31
 8003e5e:	d502      	bpl.n	8003e66 <_printf_float+0x1a6>
 8003e60:	3301      	adds	r3, #1
 8003e62:	440b      	add	r3, r1
 8003e64:	6123      	str	r3, [r4, #16]
 8003e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e68:	f04f 0900 	mov.w	r9, #0
 8003e6c:	e7de      	b.n	8003e2c <_printf_float+0x16c>
 8003e6e:	b913      	cbnz	r3, 8003e76 <_printf_float+0x1b6>
 8003e70:	6822      	ldr	r2, [r4, #0]
 8003e72:	07d2      	lsls	r2, r2, #31
 8003e74:	d501      	bpl.n	8003e7a <_printf_float+0x1ba>
 8003e76:	3302      	adds	r3, #2
 8003e78:	e7f4      	b.n	8003e64 <_printf_float+0x1a4>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e7f2      	b.n	8003e64 <_printf_float+0x1a4>
 8003e7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e84:	4299      	cmp	r1, r3
 8003e86:	db05      	blt.n	8003e94 <_printf_float+0x1d4>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	6121      	str	r1, [r4, #16]
 8003e8c:	07d8      	lsls	r0, r3, #31
 8003e8e:	d5ea      	bpl.n	8003e66 <_printf_float+0x1a6>
 8003e90:	1c4b      	adds	r3, r1, #1
 8003e92:	e7e7      	b.n	8003e64 <_printf_float+0x1a4>
 8003e94:	2900      	cmp	r1, #0
 8003e96:	bfd4      	ite	le
 8003e98:	f1c1 0202 	rsble	r2, r1, #2
 8003e9c:	2201      	movgt	r2, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	e7e0      	b.n	8003e64 <_printf_float+0x1a4>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	055a      	lsls	r2, r3, #21
 8003ea6:	d407      	bmi.n	8003eb8 <_printf_float+0x1f8>
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	4642      	mov	r2, r8
 8003eac:	4631      	mov	r1, r6
 8003eae:	4628      	mov	r0, r5
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d12c      	bne.n	8003f10 <_printf_float+0x250>
 8003eb6:	e764      	b.n	8003d82 <_printf_float+0xc2>
 8003eb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ebc:	f240 80e0 	bls.w	8004080 <_printf_float+0x3c0>
 8003ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f7fc fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d034      	beq.n	8003f3a <_printf_float+0x27a>
 8003ed0:	4a37      	ldr	r2, [pc, #220]	; (8003fb0 <_printf_float+0x2f0>)
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b8      	blx	r7
 8003eda:	3001      	adds	r0, #1
 8003edc:	f43f af51 	beq.w	8003d82 <_printf_float+0xc2>
 8003ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	db02      	blt.n	8003eee <_printf_float+0x22e>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	07d8      	lsls	r0, r3, #31
 8003eec:	d510      	bpl.n	8003f10 <_printf_float+0x250>
 8003eee:	ee18 3a10 	vmov	r3, s16
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	47b8      	blx	r7
 8003efa:	3001      	adds	r0, #1
 8003efc:	f43f af41 	beq.w	8003d82 <_printf_float+0xc2>
 8003f00:	f04f 0800 	mov.w	r8, #0
 8003f04:	f104 091a 	add.w	r9, r4, #26
 8003f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	4543      	cmp	r3, r8
 8003f0e:	dc09      	bgt.n	8003f24 <_printf_float+0x264>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	079b      	lsls	r3, r3, #30
 8003f14:	f100 8105 	bmi.w	8004122 <_printf_float+0x462>
 8003f18:	68e0      	ldr	r0, [r4, #12]
 8003f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f1c:	4298      	cmp	r0, r3
 8003f1e:	bfb8      	it	lt
 8003f20:	4618      	movlt	r0, r3
 8003f22:	e730      	b.n	8003d86 <_printf_float+0xc6>
 8003f24:	2301      	movs	r3, #1
 8003f26:	464a      	mov	r2, r9
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f af27 	beq.w	8003d82 <_printf_float+0xc2>
 8003f34:	f108 0801 	add.w	r8, r8, #1
 8003f38:	e7e6      	b.n	8003f08 <_printf_float+0x248>
 8003f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	dc39      	bgt.n	8003fb4 <_printf_float+0x2f4>
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <_printf_float+0x2f0>)
 8003f42:	2301      	movs	r3, #1
 8003f44:	4631      	mov	r1, r6
 8003f46:	4628      	mov	r0, r5
 8003f48:	47b8      	blx	r7
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f43f af19 	beq.w	8003d82 <_printf_float+0xc2>
 8003f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d102      	bne.n	8003f5e <_printf_float+0x29e>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	07d9      	lsls	r1, r3, #31
 8003f5c:	d5d8      	bpl.n	8003f10 <_printf_float+0x250>
 8003f5e:	ee18 3a10 	vmov	r3, s16
 8003f62:	4652      	mov	r2, sl
 8003f64:	4631      	mov	r1, r6
 8003f66:	4628      	mov	r0, r5
 8003f68:	47b8      	blx	r7
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	f43f af09 	beq.w	8003d82 <_printf_float+0xc2>
 8003f70:	f04f 0900 	mov.w	r9, #0
 8003f74:	f104 0a1a 	add.w	sl, r4, #26
 8003f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f7a:	425b      	negs	r3, r3
 8003f7c:	454b      	cmp	r3, r9
 8003f7e:	dc01      	bgt.n	8003f84 <_printf_float+0x2c4>
 8003f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f82:	e792      	b.n	8003eaa <_printf_float+0x1ea>
 8003f84:	2301      	movs	r3, #1
 8003f86:	4652      	mov	r2, sl
 8003f88:	4631      	mov	r1, r6
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	47b8      	blx	r7
 8003f8e:	3001      	adds	r0, #1
 8003f90:	f43f aef7 	beq.w	8003d82 <_printf_float+0xc2>
 8003f94:	f109 0901 	add.w	r9, r9, #1
 8003f98:	e7ee      	b.n	8003f78 <_printf_float+0x2b8>
 8003f9a:	bf00      	nop
 8003f9c:	7fefffff 	.word	0x7fefffff
 8003fa0:	0800847c 	.word	0x0800847c
 8003fa4:	08008480 	.word	0x08008480
 8003fa8:	08008488 	.word	0x08008488
 8003fac:	08008484 	.word	0x08008484
 8003fb0:	0800848c 	.word	0x0800848c
 8003fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	bfa8      	it	ge
 8003fbc:	461a      	movge	r2, r3
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	4691      	mov	r9, r2
 8003fc2:	dc37      	bgt.n	8004034 <_printf_float+0x374>
 8003fc4:	f04f 0b00 	mov.w	fp, #0
 8003fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fcc:	f104 021a 	add.w	r2, r4, #26
 8003fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fd2:	9305      	str	r3, [sp, #20]
 8003fd4:	eba3 0309 	sub.w	r3, r3, r9
 8003fd8:	455b      	cmp	r3, fp
 8003fda:	dc33      	bgt.n	8004044 <_printf_float+0x384>
 8003fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	db3b      	blt.n	800405c <_printf_float+0x39c>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	07da      	lsls	r2, r3, #31
 8003fe8:	d438      	bmi.n	800405c <_printf_float+0x39c>
 8003fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fec:	9a05      	ldr	r2, [sp, #20]
 8003fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ff0:	1a9a      	subs	r2, r3, r2
 8003ff2:	eba3 0901 	sub.w	r9, r3, r1
 8003ff6:	4591      	cmp	r9, r2
 8003ff8:	bfa8      	it	ge
 8003ffa:	4691      	movge	r9, r2
 8003ffc:	f1b9 0f00 	cmp.w	r9, #0
 8004000:	dc35      	bgt.n	800406e <_printf_float+0x3ae>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800400a:	f104 0a1a 	add.w	sl, r4, #26
 800400e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	eba3 0309 	sub.w	r3, r3, r9
 8004018:	4543      	cmp	r3, r8
 800401a:	f77f af79 	ble.w	8003f10 <_printf_float+0x250>
 800401e:	2301      	movs	r3, #1
 8004020:	4652      	mov	r2, sl
 8004022:	4631      	mov	r1, r6
 8004024:	4628      	mov	r0, r5
 8004026:	47b8      	blx	r7
 8004028:	3001      	adds	r0, #1
 800402a:	f43f aeaa 	beq.w	8003d82 <_printf_float+0xc2>
 800402e:	f108 0801 	add.w	r8, r8, #1
 8004032:	e7ec      	b.n	800400e <_printf_float+0x34e>
 8004034:	4613      	mov	r3, r2
 8004036:	4631      	mov	r1, r6
 8004038:	4642      	mov	r2, r8
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	d1c0      	bne.n	8003fc4 <_printf_float+0x304>
 8004042:	e69e      	b.n	8003d82 <_printf_float+0xc2>
 8004044:	2301      	movs	r3, #1
 8004046:	4631      	mov	r1, r6
 8004048:	4628      	mov	r0, r5
 800404a:	9205      	str	r2, [sp, #20]
 800404c:	47b8      	blx	r7
 800404e:	3001      	adds	r0, #1
 8004050:	f43f ae97 	beq.w	8003d82 <_printf_float+0xc2>
 8004054:	9a05      	ldr	r2, [sp, #20]
 8004056:	f10b 0b01 	add.w	fp, fp, #1
 800405a:	e7b9      	b.n	8003fd0 <_printf_float+0x310>
 800405c:	ee18 3a10 	vmov	r3, s16
 8004060:	4652      	mov	r2, sl
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	d1be      	bne.n	8003fea <_printf_float+0x32a>
 800406c:	e689      	b.n	8003d82 <_printf_float+0xc2>
 800406e:	9a05      	ldr	r2, [sp, #20]
 8004070:	464b      	mov	r3, r9
 8004072:	4442      	add	r2, r8
 8004074:	4631      	mov	r1, r6
 8004076:	4628      	mov	r0, r5
 8004078:	47b8      	blx	r7
 800407a:	3001      	adds	r0, #1
 800407c:	d1c1      	bne.n	8004002 <_printf_float+0x342>
 800407e:	e680      	b.n	8003d82 <_printf_float+0xc2>
 8004080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004082:	2a01      	cmp	r2, #1
 8004084:	dc01      	bgt.n	800408a <_printf_float+0x3ca>
 8004086:	07db      	lsls	r3, r3, #31
 8004088:	d538      	bpl.n	80040fc <_printf_float+0x43c>
 800408a:	2301      	movs	r3, #1
 800408c:	4642      	mov	r2, r8
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	f43f ae74 	beq.w	8003d82 <_printf_float+0xc2>
 800409a:	ee18 3a10 	vmov	r3, s16
 800409e:	4652      	mov	r2, sl
 80040a0:	4631      	mov	r1, r6
 80040a2:	4628      	mov	r0, r5
 80040a4:	47b8      	blx	r7
 80040a6:	3001      	adds	r0, #1
 80040a8:	f43f ae6b 	beq.w	8003d82 <_printf_float+0xc2>
 80040ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040b0:	2200      	movs	r2, #0
 80040b2:	2300      	movs	r3, #0
 80040b4:	f7fc fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 80040b8:	b9d8      	cbnz	r0, 80040f2 <_printf_float+0x432>
 80040ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040bc:	f108 0201 	add.w	r2, r8, #1
 80040c0:	3b01      	subs	r3, #1
 80040c2:	4631      	mov	r1, r6
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	d10e      	bne.n	80040ea <_printf_float+0x42a>
 80040cc:	e659      	b.n	8003d82 <_printf_float+0xc2>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4652      	mov	r2, sl
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f ae52 	beq.w	8003d82 <_printf_float+0xc2>
 80040de:	f108 0801 	add.w	r8, r8, #1
 80040e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	4543      	cmp	r3, r8
 80040e8:	dcf1      	bgt.n	80040ce <_printf_float+0x40e>
 80040ea:	464b      	mov	r3, r9
 80040ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040f0:	e6dc      	b.n	8003eac <_printf_float+0x1ec>
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	f104 0a1a 	add.w	sl, r4, #26
 80040fa:	e7f2      	b.n	80040e2 <_printf_float+0x422>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4642      	mov	r2, r8
 8004100:	e7df      	b.n	80040c2 <_printf_float+0x402>
 8004102:	2301      	movs	r3, #1
 8004104:	464a      	mov	r2, r9
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	f43f ae38 	beq.w	8003d82 <_printf_float+0xc2>
 8004112:	f108 0801 	add.w	r8, r8, #1
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800411a:	1a5b      	subs	r3, r3, r1
 800411c:	4543      	cmp	r3, r8
 800411e:	dcf0      	bgt.n	8004102 <_printf_float+0x442>
 8004120:	e6fa      	b.n	8003f18 <_printf_float+0x258>
 8004122:	f04f 0800 	mov.w	r8, #0
 8004126:	f104 0919 	add.w	r9, r4, #25
 800412a:	e7f4      	b.n	8004116 <_printf_float+0x456>

0800412c <_printf_common>:
 800412c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004130:	4616      	mov	r6, r2
 8004132:	4699      	mov	r9, r3
 8004134:	688a      	ldr	r2, [r1, #8]
 8004136:	690b      	ldr	r3, [r1, #16]
 8004138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800413c:	4293      	cmp	r3, r2
 800413e:	bfb8      	it	lt
 8004140:	4613      	movlt	r3, r2
 8004142:	6033      	str	r3, [r6, #0]
 8004144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004148:	4607      	mov	r7, r0
 800414a:	460c      	mov	r4, r1
 800414c:	b10a      	cbz	r2, 8004152 <_printf_common+0x26>
 800414e:	3301      	adds	r3, #1
 8004150:	6033      	str	r3, [r6, #0]
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	0699      	lsls	r1, r3, #26
 8004156:	bf42      	ittt	mi
 8004158:	6833      	ldrmi	r3, [r6, #0]
 800415a:	3302      	addmi	r3, #2
 800415c:	6033      	strmi	r3, [r6, #0]
 800415e:	6825      	ldr	r5, [r4, #0]
 8004160:	f015 0506 	ands.w	r5, r5, #6
 8004164:	d106      	bne.n	8004174 <_printf_common+0x48>
 8004166:	f104 0a19 	add.w	sl, r4, #25
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	6832      	ldr	r2, [r6, #0]
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	42ab      	cmp	r3, r5
 8004172:	dc26      	bgt.n	80041c2 <_printf_common+0x96>
 8004174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004178:	1e13      	subs	r3, r2, #0
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	bf18      	it	ne
 800417e:	2301      	movne	r3, #1
 8004180:	0692      	lsls	r2, r2, #26
 8004182:	d42b      	bmi.n	80041dc <_printf_common+0xb0>
 8004184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004188:	4649      	mov	r1, r9
 800418a:	4638      	mov	r0, r7
 800418c:	47c0      	blx	r8
 800418e:	3001      	adds	r0, #1
 8004190:	d01e      	beq.n	80041d0 <_printf_common+0xa4>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	68e5      	ldr	r5, [r4, #12]
 8004196:	6832      	ldr	r2, [r6, #0]
 8004198:	f003 0306 	and.w	r3, r3, #6
 800419c:	2b04      	cmp	r3, #4
 800419e:	bf08      	it	eq
 80041a0:	1aad      	subeq	r5, r5, r2
 80041a2:	68a3      	ldr	r3, [r4, #8]
 80041a4:	6922      	ldr	r2, [r4, #16]
 80041a6:	bf0c      	ite	eq
 80041a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041ac:	2500      	movne	r5, #0
 80041ae:	4293      	cmp	r3, r2
 80041b0:	bfc4      	itt	gt
 80041b2:	1a9b      	subgt	r3, r3, r2
 80041b4:	18ed      	addgt	r5, r5, r3
 80041b6:	2600      	movs	r6, #0
 80041b8:	341a      	adds	r4, #26
 80041ba:	42b5      	cmp	r5, r6
 80041bc:	d11a      	bne.n	80041f4 <_printf_common+0xc8>
 80041be:	2000      	movs	r0, #0
 80041c0:	e008      	b.n	80041d4 <_printf_common+0xa8>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4652      	mov	r2, sl
 80041c6:	4649      	mov	r1, r9
 80041c8:	4638      	mov	r0, r7
 80041ca:	47c0      	blx	r8
 80041cc:	3001      	adds	r0, #1
 80041ce:	d103      	bne.n	80041d8 <_printf_common+0xac>
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	3501      	adds	r5, #1
 80041da:	e7c6      	b.n	800416a <_printf_common+0x3e>
 80041dc:	18e1      	adds	r1, r4, r3
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	2030      	movs	r0, #48	; 0x30
 80041e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041e6:	4422      	add	r2, r4
 80041e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041f0:	3302      	adds	r3, #2
 80041f2:	e7c7      	b.n	8004184 <_printf_common+0x58>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4622      	mov	r2, r4
 80041f8:	4649      	mov	r1, r9
 80041fa:	4638      	mov	r0, r7
 80041fc:	47c0      	blx	r8
 80041fe:	3001      	adds	r0, #1
 8004200:	d0e6      	beq.n	80041d0 <_printf_common+0xa4>
 8004202:	3601      	adds	r6, #1
 8004204:	e7d9      	b.n	80041ba <_printf_common+0x8e>
	...

08004208 <_printf_i>:
 8004208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	7e0f      	ldrb	r7, [r1, #24]
 800420e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004210:	2f78      	cmp	r7, #120	; 0x78
 8004212:	4691      	mov	r9, r2
 8004214:	4680      	mov	r8, r0
 8004216:	460c      	mov	r4, r1
 8004218:	469a      	mov	sl, r3
 800421a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800421e:	d807      	bhi.n	8004230 <_printf_i+0x28>
 8004220:	2f62      	cmp	r7, #98	; 0x62
 8004222:	d80a      	bhi.n	800423a <_printf_i+0x32>
 8004224:	2f00      	cmp	r7, #0
 8004226:	f000 80d8 	beq.w	80043da <_printf_i+0x1d2>
 800422a:	2f58      	cmp	r7, #88	; 0x58
 800422c:	f000 80a3 	beq.w	8004376 <_printf_i+0x16e>
 8004230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004238:	e03a      	b.n	80042b0 <_printf_i+0xa8>
 800423a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800423e:	2b15      	cmp	r3, #21
 8004240:	d8f6      	bhi.n	8004230 <_printf_i+0x28>
 8004242:	a101      	add	r1, pc, #4	; (adr r1, 8004248 <_printf_i+0x40>)
 8004244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004248:	080042a1 	.word	0x080042a1
 800424c:	080042b5 	.word	0x080042b5
 8004250:	08004231 	.word	0x08004231
 8004254:	08004231 	.word	0x08004231
 8004258:	08004231 	.word	0x08004231
 800425c:	08004231 	.word	0x08004231
 8004260:	080042b5 	.word	0x080042b5
 8004264:	08004231 	.word	0x08004231
 8004268:	08004231 	.word	0x08004231
 800426c:	08004231 	.word	0x08004231
 8004270:	08004231 	.word	0x08004231
 8004274:	080043c1 	.word	0x080043c1
 8004278:	080042e5 	.word	0x080042e5
 800427c:	080043a3 	.word	0x080043a3
 8004280:	08004231 	.word	0x08004231
 8004284:	08004231 	.word	0x08004231
 8004288:	080043e3 	.word	0x080043e3
 800428c:	08004231 	.word	0x08004231
 8004290:	080042e5 	.word	0x080042e5
 8004294:	08004231 	.word	0x08004231
 8004298:	08004231 	.word	0x08004231
 800429c:	080043ab 	.word	0x080043ab
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	1d1a      	adds	r2, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	602a      	str	r2, [r5, #0]
 80042a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0a3      	b.n	80043fc <_printf_i+0x1f4>
 80042b4:	6820      	ldr	r0, [r4, #0]
 80042b6:	6829      	ldr	r1, [r5, #0]
 80042b8:	0606      	lsls	r6, r0, #24
 80042ba:	f101 0304 	add.w	r3, r1, #4
 80042be:	d50a      	bpl.n	80042d6 <_printf_i+0xce>
 80042c0:	680e      	ldr	r6, [r1, #0]
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	2e00      	cmp	r6, #0
 80042c6:	da03      	bge.n	80042d0 <_printf_i+0xc8>
 80042c8:	232d      	movs	r3, #45	; 0x2d
 80042ca:	4276      	negs	r6, r6
 80042cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d0:	485e      	ldr	r0, [pc, #376]	; (800444c <_printf_i+0x244>)
 80042d2:	230a      	movs	r3, #10
 80042d4:	e019      	b.n	800430a <_printf_i+0x102>
 80042d6:	680e      	ldr	r6, [r1, #0]
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042de:	bf18      	it	ne
 80042e0:	b236      	sxthne	r6, r6
 80042e2:	e7ef      	b.n	80042c4 <_printf_i+0xbc>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	6820      	ldr	r0, [r4, #0]
 80042e8:	1d19      	adds	r1, r3, #4
 80042ea:	6029      	str	r1, [r5, #0]
 80042ec:	0601      	lsls	r1, r0, #24
 80042ee:	d501      	bpl.n	80042f4 <_printf_i+0xec>
 80042f0:	681e      	ldr	r6, [r3, #0]
 80042f2:	e002      	b.n	80042fa <_printf_i+0xf2>
 80042f4:	0646      	lsls	r6, r0, #25
 80042f6:	d5fb      	bpl.n	80042f0 <_printf_i+0xe8>
 80042f8:	881e      	ldrh	r6, [r3, #0]
 80042fa:	4854      	ldr	r0, [pc, #336]	; (800444c <_printf_i+0x244>)
 80042fc:	2f6f      	cmp	r7, #111	; 0x6f
 80042fe:	bf0c      	ite	eq
 8004300:	2308      	moveq	r3, #8
 8004302:	230a      	movne	r3, #10
 8004304:	2100      	movs	r1, #0
 8004306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800430a:	6865      	ldr	r5, [r4, #4]
 800430c:	60a5      	str	r5, [r4, #8]
 800430e:	2d00      	cmp	r5, #0
 8004310:	bfa2      	ittt	ge
 8004312:	6821      	ldrge	r1, [r4, #0]
 8004314:	f021 0104 	bicge.w	r1, r1, #4
 8004318:	6021      	strge	r1, [r4, #0]
 800431a:	b90e      	cbnz	r6, 8004320 <_printf_i+0x118>
 800431c:	2d00      	cmp	r5, #0
 800431e:	d04d      	beq.n	80043bc <_printf_i+0x1b4>
 8004320:	4615      	mov	r5, r2
 8004322:	fbb6 f1f3 	udiv	r1, r6, r3
 8004326:	fb03 6711 	mls	r7, r3, r1, r6
 800432a:	5dc7      	ldrb	r7, [r0, r7]
 800432c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004330:	4637      	mov	r7, r6
 8004332:	42bb      	cmp	r3, r7
 8004334:	460e      	mov	r6, r1
 8004336:	d9f4      	bls.n	8004322 <_printf_i+0x11a>
 8004338:	2b08      	cmp	r3, #8
 800433a:	d10b      	bne.n	8004354 <_printf_i+0x14c>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	07de      	lsls	r6, r3, #31
 8004340:	d508      	bpl.n	8004354 <_printf_i+0x14c>
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	6861      	ldr	r1, [r4, #4]
 8004346:	4299      	cmp	r1, r3
 8004348:	bfde      	ittt	le
 800434a:	2330      	movle	r3, #48	; 0x30
 800434c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004350:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004354:	1b52      	subs	r2, r2, r5
 8004356:	6122      	str	r2, [r4, #16]
 8004358:	f8cd a000 	str.w	sl, [sp]
 800435c:	464b      	mov	r3, r9
 800435e:	aa03      	add	r2, sp, #12
 8004360:	4621      	mov	r1, r4
 8004362:	4640      	mov	r0, r8
 8004364:	f7ff fee2 	bl	800412c <_printf_common>
 8004368:	3001      	adds	r0, #1
 800436a:	d14c      	bne.n	8004406 <_printf_i+0x1fe>
 800436c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004370:	b004      	add	sp, #16
 8004372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004376:	4835      	ldr	r0, [pc, #212]	; (800444c <_printf_i+0x244>)
 8004378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800437c:	6829      	ldr	r1, [r5, #0]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f851 6b04 	ldr.w	r6, [r1], #4
 8004384:	6029      	str	r1, [r5, #0]
 8004386:	061d      	lsls	r5, r3, #24
 8004388:	d514      	bpl.n	80043b4 <_printf_i+0x1ac>
 800438a:	07df      	lsls	r7, r3, #31
 800438c:	bf44      	itt	mi
 800438e:	f043 0320 	orrmi.w	r3, r3, #32
 8004392:	6023      	strmi	r3, [r4, #0]
 8004394:	b91e      	cbnz	r6, 800439e <_printf_i+0x196>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	f023 0320 	bic.w	r3, r3, #32
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	2310      	movs	r3, #16
 80043a0:	e7b0      	b.n	8004304 <_printf_i+0xfc>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	f043 0320 	orr.w	r3, r3, #32
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	2378      	movs	r3, #120	; 0x78
 80043ac:	4828      	ldr	r0, [pc, #160]	; (8004450 <_printf_i+0x248>)
 80043ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043b2:	e7e3      	b.n	800437c <_printf_i+0x174>
 80043b4:	0659      	lsls	r1, r3, #25
 80043b6:	bf48      	it	mi
 80043b8:	b2b6      	uxthmi	r6, r6
 80043ba:	e7e6      	b.n	800438a <_printf_i+0x182>
 80043bc:	4615      	mov	r5, r2
 80043be:	e7bb      	b.n	8004338 <_printf_i+0x130>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	6826      	ldr	r6, [r4, #0]
 80043c4:	6961      	ldr	r1, [r4, #20]
 80043c6:	1d18      	adds	r0, r3, #4
 80043c8:	6028      	str	r0, [r5, #0]
 80043ca:	0635      	lsls	r5, r6, #24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	d501      	bpl.n	80043d4 <_printf_i+0x1cc>
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	e002      	b.n	80043da <_printf_i+0x1d2>
 80043d4:	0670      	lsls	r0, r6, #25
 80043d6:	d5fb      	bpl.n	80043d0 <_printf_i+0x1c8>
 80043d8:	8019      	strh	r1, [r3, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	4615      	mov	r5, r2
 80043e0:	e7ba      	b.n	8004358 <_printf_i+0x150>
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	1d1a      	adds	r2, r3, #4
 80043e6:	602a      	str	r2, [r5, #0]
 80043e8:	681d      	ldr	r5, [r3, #0]
 80043ea:	6862      	ldr	r2, [r4, #4]
 80043ec:	2100      	movs	r1, #0
 80043ee:	4628      	mov	r0, r5
 80043f0:	f7fb fefe 	bl	80001f0 <memchr>
 80043f4:	b108      	cbz	r0, 80043fa <_printf_i+0x1f2>
 80043f6:	1b40      	subs	r0, r0, r5
 80043f8:	6060      	str	r0, [r4, #4]
 80043fa:	6863      	ldr	r3, [r4, #4]
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	2300      	movs	r3, #0
 8004400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004404:	e7a8      	b.n	8004358 <_printf_i+0x150>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	462a      	mov	r2, r5
 800440a:	4649      	mov	r1, r9
 800440c:	4640      	mov	r0, r8
 800440e:	47d0      	blx	sl
 8004410:	3001      	adds	r0, #1
 8004412:	d0ab      	beq.n	800436c <_printf_i+0x164>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	079b      	lsls	r3, r3, #30
 8004418:	d413      	bmi.n	8004442 <_printf_i+0x23a>
 800441a:	68e0      	ldr	r0, [r4, #12]
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	4298      	cmp	r0, r3
 8004420:	bfb8      	it	lt
 8004422:	4618      	movlt	r0, r3
 8004424:	e7a4      	b.n	8004370 <_printf_i+0x168>
 8004426:	2301      	movs	r3, #1
 8004428:	4632      	mov	r2, r6
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	47d0      	blx	sl
 8004430:	3001      	adds	r0, #1
 8004432:	d09b      	beq.n	800436c <_printf_i+0x164>
 8004434:	3501      	adds	r5, #1
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	9903      	ldr	r1, [sp, #12]
 800443a:	1a5b      	subs	r3, r3, r1
 800443c:	42ab      	cmp	r3, r5
 800443e:	dcf2      	bgt.n	8004426 <_printf_i+0x21e>
 8004440:	e7eb      	b.n	800441a <_printf_i+0x212>
 8004442:	2500      	movs	r5, #0
 8004444:	f104 0619 	add.w	r6, r4, #25
 8004448:	e7f5      	b.n	8004436 <_printf_i+0x22e>
 800444a:	bf00      	nop
 800444c:	0800848e 	.word	0x0800848e
 8004450:	0800849f 	.word	0x0800849f

08004454 <_scanf_float>:
 8004454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004458:	b087      	sub	sp, #28
 800445a:	4617      	mov	r7, r2
 800445c:	9303      	str	r3, [sp, #12]
 800445e:	688b      	ldr	r3, [r1, #8]
 8004460:	1e5a      	subs	r2, r3, #1
 8004462:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004466:	bf83      	ittte	hi
 8004468:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800446c:	195b      	addhi	r3, r3, r5
 800446e:	9302      	strhi	r3, [sp, #8]
 8004470:	2300      	movls	r3, #0
 8004472:	bf86      	itte	hi
 8004474:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004478:	608b      	strhi	r3, [r1, #8]
 800447a:	9302      	strls	r3, [sp, #8]
 800447c:	680b      	ldr	r3, [r1, #0]
 800447e:	468b      	mov	fp, r1
 8004480:	2500      	movs	r5, #0
 8004482:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004486:	f84b 3b1c 	str.w	r3, [fp], #28
 800448a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800448e:	4680      	mov	r8, r0
 8004490:	460c      	mov	r4, r1
 8004492:	465e      	mov	r6, fp
 8004494:	46aa      	mov	sl, r5
 8004496:	46a9      	mov	r9, r5
 8004498:	9501      	str	r5, [sp, #4]
 800449a:	68a2      	ldr	r2, [r4, #8]
 800449c:	b152      	cbz	r2, 80044b4 <_scanf_float+0x60>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b4e      	cmp	r3, #78	; 0x4e
 80044a4:	d864      	bhi.n	8004570 <_scanf_float+0x11c>
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d83c      	bhi.n	8004524 <_scanf_float+0xd0>
 80044aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80044ae:	b2c8      	uxtb	r0, r1
 80044b0:	280e      	cmp	r0, #14
 80044b2:	d93a      	bls.n	800452a <_scanf_float+0xd6>
 80044b4:	f1b9 0f00 	cmp.w	r9, #0
 80044b8:	d003      	beq.n	80044c2 <_scanf_float+0x6e>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044c6:	f1ba 0f01 	cmp.w	sl, #1
 80044ca:	f200 8113 	bhi.w	80046f4 <_scanf_float+0x2a0>
 80044ce:	455e      	cmp	r6, fp
 80044d0:	f200 8105 	bhi.w	80046de <_scanf_float+0x28a>
 80044d4:	2501      	movs	r5, #1
 80044d6:	4628      	mov	r0, r5
 80044d8:	b007      	add	sp, #28
 80044da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80044e2:	2a0d      	cmp	r2, #13
 80044e4:	d8e6      	bhi.n	80044b4 <_scanf_float+0x60>
 80044e6:	a101      	add	r1, pc, #4	; (adr r1, 80044ec <_scanf_float+0x98>)
 80044e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044ec:	0800462b 	.word	0x0800462b
 80044f0:	080044b5 	.word	0x080044b5
 80044f4:	080044b5 	.word	0x080044b5
 80044f8:	080044b5 	.word	0x080044b5
 80044fc:	0800468b 	.word	0x0800468b
 8004500:	08004663 	.word	0x08004663
 8004504:	080044b5 	.word	0x080044b5
 8004508:	080044b5 	.word	0x080044b5
 800450c:	08004639 	.word	0x08004639
 8004510:	080044b5 	.word	0x080044b5
 8004514:	080044b5 	.word	0x080044b5
 8004518:	080044b5 	.word	0x080044b5
 800451c:	080044b5 	.word	0x080044b5
 8004520:	080045f1 	.word	0x080045f1
 8004524:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004528:	e7db      	b.n	80044e2 <_scanf_float+0x8e>
 800452a:	290e      	cmp	r1, #14
 800452c:	d8c2      	bhi.n	80044b4 <_scanf_float+0x60>
 800452e:	a001      	add	r0, pc, #4	; (adr r0, 8004534 <_scanf_float+0xe0>)
 8004530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004534:	080045e3 	.word	0x080045e3
 8004538:	080044b5 	.word	0x080044b5
 800453c:	080045e3 	.word	0x080045e3
 8004540:	08004677 	.word	0x08004677
 8004544:	080044b5 	.word	0x080044b5
 8004548:	08004591 	.word	0x08004591
 800454c:	080045cd 	.word	0x080045cd
 8004550:	080045cd 	.word	0x080045cd
 8004554:	080045cd 	.word	0x080045cd
 8004558:	080045cd 	.word	0x080045cd
 800455c:	080045cd 	.word	0x080045cd
 8004560:	080045cd 	.word	0x080045cd
 8004564:	080045cd 	.word	0x080045cd
 8004568:	080045cd 	.word	0x080045cd
 800456c:	080045cd 	.word	0x080045cd
 8004570:	2b6e      	cmp	r3, #110	; 0x6e
 8004572:	d809      	bhi.n	8004588 <_scanf_float+0x134>
 8004574:	2b60      	cmp	r3, #96	; 0x60
 8004576:	d8b2      	bhi.n	80044de <_scanf_float+0x8a>
 8004578:	2b54      	cmp	r3, #84	; 0x54
 800457a:	d077      	beq.n	800466c <_scanf_float+0x218>
 800457c:	2b59      	cmp	r3, #89	; 0x59
 800457e:	d199      	bne.n	80044b4 <_scanf_float+0x60>
 8004580:	2d07      	cmp	r5, #7
 8004582:	d197      	bne.n	80044b4 <_scanf_float+0x60>
 8004584:	2508      	movs	r5, #8
 8004586:	e029      	b.n	80045dc <_scanf_float+0x188>
 8004588:	2b74      	cmp	r3, #116	; 0x74
 800458a:	d06f      	beq.n	800466c <_scanf_float+0x218>
 800458c:	2b79      	cmp	r3, #121	; 0x79
 800458e:	e7f6      	b.n	800457e <_scanf_float+0x12a>
 8004590:	6821      	ldr	r1, [r4, #0]
 8004592:	05c8      	lsls	r0, r1, #23
 8004594:	d51a      	bpl.n	80045cc <_scanf_float+0x178>
 8004596:	9b02      	ldr	r3, [sp, #8]
 8004598:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800459c:	6021      	str	r1, [r4, #0]
 800459e:	f109 0901 	add.w	r9, r9, #1
 80045a2:	b11b      	cbz	r3, 80045ac <_scanf_float+0x158>
 80045a4:	3b01      	subs	r3, #1
 80045a6:	3201      	adds	r2, #1
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	60a2      	str	r2, [r4, #8]
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	3301      	adds	r3, #1
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	f340 8084 	ble.w	80046cc <_scanf_float+0x278>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	e766      	b.n	800449a <_scanf_float+0x46>
 80045cc:	eb1a 0f05 	cmn.w	sl, r5
 80045d0:	f47f af70 	bne.w	80044b4 <_scanf_float+0x60>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80045da:	6022      	str	r2, [r4, #0]
 80045dc:	f806 3b01 	strb.w	r3, [r6], #1
 80045e0:	e7e4      	b.n	80045ac <_scanf_float+0x158>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	0610      	lsls	r0, r2, #24
 80045e6:	f57f af65 	bpl.w	80044b4 <_scanf_float+0x60>
 80045ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ee:	e7f4      	b.n	80045da <_scanf_float+0x186>
 80045f0:	f1ba 0f00 	cmp.w	sl, #0
 80045f4:	d10e      	bne.n	8004614 <_scanf_float+0x1c0>
 80045f6:	f1b9 0f00 	cmp.w	r9, #0
 80045fa:	d10e      	bne.n	800461a <_scanf_float+0x1c6>
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004602:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004606:	d108      	bne.n	800461a <_scanf_float+0x1c6>
 8004608:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800460c:	6022      	str	r2, [r4, #0]
 800460e:	f04f 0a01 	mov.w	sl, #1
 8004612:	e7e3      	b.n	80045dc <_scanf_float+0x188>
 8004614:	f1ba 0f02 	cmp.w	sl, #2
 8004618:	d055      	beq.n	80046c6 <_scanf_float+0x272>
 800461a:	2d01      	cmp	r5, #1
 800461c:	d002      	beq.n	8004624 <_scanf_float+0x1d0>
 800461e:	2d04      	cmp	r5, #4
 8004620:	f47f af48 	bne.w	80044b4 <_scanf_float+0x60>
 8004624:	3501      	adds	r5, #1
 8004626:	b2ed      	uxtb	r5, r5
 8004628:	e7d8      	b.n	80045dc <_scanf_float+0x188>
 800462a:	f1ba 0f01 	cmp.w	sl, #1
 800462e:	f47f af41 	bne.w	80044b4 <_scanf_float+0x60>
 8004632:	f04f 0a02 	mov.w	sl, #2
 8004636:	e7d1      	b.n	80045dc <_scanf_float+0x188>
 8004638:	b97d      	cbnz	r5, 800465a <_scanf_float+0x206>
 800463a:	f1b9 0f00 	cmp.w	r9, #0
 800463e:	f47f af3c 	bne.w	80044ba <_scanf_float+0x66>
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004648:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800464c:	f47f af39 	bne.w	80044c2 <_scanf_float+0x6e>
 8004650:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004654:	6022      	str	r2, [r4, #0]
 8004656:	2501      	movs	r5, #1
 8004658:	e7c0      	b.n	80045dc <_scanf_float+0x188>
 800465a:	2d03      	cmp	r5, #3
 800465c:	d0e2      	beq.n	8004624 <_scanf_float+0x1d0>
 800465e:	2d05      	cmp	r5, #5
 8004660:	e7de      	b.n	8004620 <_scanf_float+0x1cc>
 8004662:	2d02      	cmp	r5, #2
 8004664:	f47f af26 	bne.w	80044b4 <_scanf_float+0x60>
 8004668:	2503      	movs	r5, #3
 800466a:	e7b7      	b.n	80045dc <_scanf_float+0x188>
 800466c:	2d06      	cmp	r5, #6
 800466e:	f47f af21 	bne.w	80044b4 <_scanf_float+0x60>
 8004672:	2507      	movs	r5, #7
 8004674:	e7b2      	b.n	80045dc <_scanf_float+0x188>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	0591      	lsls	r1, r2, #22
 800467a:	f57f af1b 	bpl.w	80044b4 <_scanf_float+0x60>
 800467e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004682:	6022      	str	r2, [r4, #0]
 8004684:	f8cd 9004 	str.w	r9, [sp, #4]
 8004688:	e7a8      	b.n	80045dc <_scanf_float+0x188>
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004690:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004694:	d006      	beq.n	80046a4 <_scanf_float+0x250>
 8004696:	0550      	lsls	r0, r2, #21
 8004698:	f57f af0c 	bpl.w	80044b4 <_scanf_float+0x60>
 800469c:	f1b9 0f00 	cmp.w	r9, #0
 80046a0:	f43f af0f 	beq.w	80044c2 <_scanf_float+0x6e>
 80046a4:	0591      	lsls	r1, r2, #22
 80046a6:	bf58      	it	pl
 80046a8:	9901      	ldrpl	r1, [sp, #4]
 80046aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046ae:	bf58      	it	pl
 80046b0:	eba9 0101 	subpl.w	r1, r9, r1
 80046b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80046b8:	bf58      	it	pl
 80046ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80046be:	6022      	str	r2, [r4, #0]
 80046c0:	f04f 0900 	mov.w	r9, #0
 80046c4:	e78a      	b.n	80045dc <_scanf_float+0x188>
 80046c6:	f04f 0a03 	mov.w	sl, #3
 80046ca:	e787      	b.n	80045dc <_scanf_float+0x188>
 80046cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80046d0:	4639      	mov	r1, r7
 80046d2:	4640      	mov	r0, r8
 80046d4:	4798      	blx	r3
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f43f aedf 	beq.w	800449a <_scanf_float+0x46>
 80046dc:	e6ea      	b.n	80044b4 <_scanf_float+0x60>
 80046de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046e6:	463a      	mov	r2, r7
 80046e8:	4640      	mov	r0, r8
 80046ea:	4798      	blx	r3
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	e6ec      	b.n	80044ce <_scanf_float+0x7a>
 80046f4:	1e6b      	subs	r3, r5, #1
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d825      	bhi.n	8004746 <_scanf_float+0x2f2>
 80046fa:	2d02      	cmp	r5, #2
 80046fc:	d836      	bhi.n	800476c <_scanf_float+0x318>
 80046fe:	455e      	cmp	r6, fp
 8004700:	f67f aee8 	bls.w	80044d4 <_scanf_float+0x80>
 8004704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004708:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800470c:	463a      	mov	r2, r7
 800470e:	4640      	mov	r0, r8
 8004710:	4798      	blx	r3
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	3b01      	subs	r3, #1
 8004716:	6123      	str	r3, [r4, #16]
 8004718:	e7f1      	b.n	80046fe <_scanf_float+0x2aa>
 800471a:	9802      	ldr	r0, [sp, #8]
 800471c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004720:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004724:	9002      	str	r0, [sp, #8]
 8004726:	463a      	mov	r2, r7
 8004728:	4640      	mov	r0, r8
 800472a:	4798      	blx	r3
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	3b01      	subs	r3, #1
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004736:	fa5f fa8a 	uxtb.w	sl, sl
 800473a:	f1ba 0f02 	cmp.w	sl, #2
 800473e:	d1ec      	bne.n	800471a <_scanf_float+0x2c6>
 8004740:	3d03      	subs	r5, #3
 8004742:	b2ed      	uxtb	r5, r5
 8004744:	1b76      	subs	r6, r6, r5
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	05da      	lsls	r2, r3, #23
 800474a:	d52f      	bpl.n	80047ac <_scanf_float+0x358>
 800474c:	055b      	lsls	r3, r3, #21
 800474e:	d510      	bpl.n	8004772 <_scanf_float+0x31e>
 8004750:	455e      	cmp	r6, fp
 8004752:	f67f aebf 	bls.w	80044d4 <_scanf_float+0x80>
 8004756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800475a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800475e:	463a      	mov	r2, r7
 8004760:	4640      	mov	r0, r8
 8004762:	4798      	blx	r3
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	3b01      	subs	r3, #1
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	e7f1      	b.n	8004750 <_scanf_float+0x2fc>
 800476c:	46aa      	mov	sl, r5
 800476e:	9602      	str	r6, [sp, #8]
 8004770:	e7df      	b.n	8004732 <_scanf_float+0x2de>
 8004772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	2965      	cmp	r1, #101	; 0x65
 800477a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800477e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	d00c      	beq.n	80047a0 <_scanf_float+0x34c>
 8004786:	2945      	cmp	r1, #69	; 0x45
 8004788:	d00a      	beq.n	80047a0 <_scanf_float+0x34c>
 800478a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800478e:	463a      	mov	r2, r7
 8004790:	4640      	mov	r0, r8
 8004792:	4798      	blx	r3
 8004794:	6923      	ldr	r3, [r4, #16]
 8004796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800479a:	3b01      	subs	r3, #1
 800479c:	1eb5      	subs	r5, r6, #2
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047a4:	463a      	mov	r2, r7
 80047a6:	4640      	mov	r0, r8
 80047a8:	4798      	blx	r3
 80047aa:	462e      	mov	r6, r5
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	f015 0510 	ands.w	r5, r5, #16
 80047b2:	d159      	bne.n	8004868 <_scanf_float+0x414>
 80047b4:	7035      	strb	r5, [r6, #0]
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c0:	d11b      	bne.n	80047fa <_scanf_float+0x3a6>
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	454b      	cmp	r3, r9
 80047c6:	eba3 0209 	sub.w	r2, r3, r9
 80047ca:	d123      	bne.n	8004814 <_scanf_float+0x3c0>
 80047cc:	2200      	movs	r2, #0
 80047ce:	4659      	mov	r1, fp
 80047d0:	4640      	mov	r0, r8
 80047d2:	f000 fe97 	bl	8005504 <_strtod_r>
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	f012 0f02 	tst.w	r2, #2
 80047de:	ec57 6b10 	vmov	r6, r7, d0
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	d021      	beq.n	800482a <_scanf_float+0x3d6>
 80047e6:	9903      	ldr	r1, [sp, #12]
 80047e8:	1d1a      	adds	r2, r3, #4
 80047ea:	600a      	str	r2, [r1, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	e9c3 6700 	strd	r6, r7, [r3]
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60e3      	str	r3, [r4, #12]
 80047f8:	e66d      	b.n	80044d6 <_scanf_float+0x82>
 80047fa:	9b04      	ldr	r3, [sp, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0e5      	beq.n	80047cc <_scanf_float+0x378>
 8004800:	9905      	ldr	r1, [sp, #20]
 8004802:	230a      	movs	r3, #10
 8004804:	462a      	mov	r2, r5
 8004806:	3101      	adds	r1, #1
 8004808:	4640      	mov	r0, r8
 800480a:	f000 ff03 	bl	8005614 <_strtol_r>
 800480e:	9b04      	ldr	r3, [sp, #16]
 8004810:	9e05      	ldr	r6, [sp, #20]
 8004812:	1ac2      	subs	r2, r0, r3
 8004814:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004818:	429e      	cmp	r6, r3
 800481a:	bf28      	it	cs
 800481c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004820:	4912      	ldr	r1, [pc, #72]	; (800486c <_scanf_float+0x418>)
 8004822:	4630      	mov	r0, r6
 8004824:	f000 f82c 	bl	8004880 <siprintf>
 8004828:	e7d0      	b.n	80047cc <_scanf_float+0x378>
 800482a:	9903      	ldr	r1, [sp, #12]
 800482c:	f012 0f04 	tst.w	r2, #4
 8004830:	f103 0204 	add.w	r2, r3, #4
 8004834:	600a      	str	r2, [r1, #0]
 8004836:	d1d9      	bne.n	80047ec <_scanf_float+0x398>
 8004838:	f8d3 8000 	ldr.w	r8, [r3]
 800483c:	ee10 2a10 	vmov	r2, s0
 8004840:	ee10 0a10 	vmov	r0, s0
 8004844:	463b      	mov	r3, r7
 8004846:	4639      	mov	r1, r7
 8004848:	f7fc f978 	bl	8000b3c <__aeabi_dcmpun>
 800484c:	b128      	cbz	r0, 800485a <_scanf_float+0x406>
 800484e:	4808      	ldr	r0, [pc, #32]	; (8004870 <_scanf_float+0x41c>)
 8004850:	f000 f810 	bl	8004874 <nanf>
 8004854:	ed88 0a00 	vstr	s0, [r8]
 8004858:	e7cb      	b.n	80047f2 <_scanf_float+0x39e>
 800485a:	4630      	mov	r0, r6
 800485c:	4639      	mov	r1, r7
 800485e:	f7fc f9cb 	bl	8000bf8 <__aeabi_d2f>
 8004862:	f8c8 0000 	str.w	r0, [r8]
 8004866:	e7c4      	b.n	80047f2 <_scanf_float+0x39e>
 8004868:	2500      	movs	r5, #0
 800486a:	e634      	b.n	80044d6 <_scanf_float+0x82>
 800486c:	080084b0 	.word	0x080084b0
 8004870:	080088b8 	.word	0x080088b8

08004874 <nanf>:
 8004874:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800487c <nanf+0x8>
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	7fc00000 	.word	0x7fc00000

08004880 <siprintf>:
 8004880:	b40e      	push	{r1, r2, r3}
 8004882:	b500      	push	{lr}
 8004884:	b09c      	sub	sp, #112	; 0x70
 8004886:	ab1d      	add	r3, sp, #116	; 0x74
 8004888:	9002      	str	r0, [sp, #8]
 800488a:	9006      	str	r0, [sp, #24]
 800488c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004890:	4809      	ldr	r0, [pc, #36]	; (80048b8 <siprintf+0x38>)
 8004892:	9107      	str	r1, [sp, #28]
 8004894:	9104      	str	r1, [sp, #16]
 8004896:	4909      	ldr	r1, [pc, #36]	; (80048bc <siprintf+0x3c>)
 8004898:	f853 2b04 	ldr.w	r2, [r3], #4
 800489c:	9105      	str	r1, [sp, #20]
 800489e:	6800      	ldr	r0, [r0, #0]
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	a902      	add	r1, sp, #8
 80048a4:	f002 fee2 	bl	800766c <_svfiprintf_r>
 80048a8:	9b02      	ldr	r3, [sp, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	b01c      	add	sp, #112	; 0x70
 80048b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b4:	b003      	add	sp, #12
 80048b6:	4770      	bx	lr
 80048b8:	20000000 	.word	0x20000000
 80048bc:	ffff0208 	.word	0xffff0208

080048c0 <sulp>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	460d      	mov	r5, r1
 80048c6:	ec45 4b10 	vmov	d0, r4, r5
 80048ca:	4616      	mov	r6, r2
 80048cc:	f002 fc2c 	bl	8007128 <__ulp>
 80048d0:	ec51 0b10 	vmov	r0, r1, d0
 80048d4:	b17e      	cbz	r6, 80048f6 <sulp+0x36>
 80048d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80048da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dd09      	ble.n	80048f6 <sulp+0x36>
 80048e2:	051b      	lsls	r3, r3, #20
 80048e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80048e8:	2400      	movs	r4, #0
 80048ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	f7fb fe89 	bl	8000608 <__aeabi_dmul>
 80048f6:	bd70      	pop	{r4, r5, r6, pc}

080048f8 <_strtod_l>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	ed2d 8b02 	vpush	{d8}
 8004900:	b09d      	sub	sp, #116	; 0x74
 8004902:	461f      	mov	r7, r3
 8004904:	2300      	movs	r3, #0
 8004906:	9318      	str	r3, [sp, #96]	; 0x60
 8004908:	4ba2      	ldr	r3, [pc, #648]	; (8004b94 <_strtod_l+0x29c>)
 800490a:	9213      	str	r2, [sp, #76]	; 0x4c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	9305      	str	r3, [sp, #20]
 8004910:	4604      	mov	r4, r0
 8004912:	4618      	mov	r0, r3
 8004914:	4688      	mov	r8, r1
 8004916:	f7fb fc63 	bl	80001e0 <strlen>
 800491a:	f04f 0a00 	mov.w	sl, #0
 800491e:	4605      	mov	r5, r0
 8004920:	f04f 0b00 	mov.w	fp, #0
 8004924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	2a2b      	cmp	r2, #43	; 0x2b
 800492e:	d04e      	beq.n	80049ce <_strtod_l+0xd6>
 8004930:	d83b      	bhi.n	80049aa <_strtod_l+0xb2>
 8004932:	2a0d      	cmp	r2, #13
 8004934:	d834      	bhi.n	80049a0 <_strtod_l+0xa8>
 8004936:	2a08      	cmp	r2, #8
 8004938:	d834      	bhi.n	80049a4 <_strtod_l+0xac>
 800493a:	2a00      	cmp	r2, #0
 800493c:	d03e      	beq.n	80049bc <_strtod_l+0xc4>
 800493e:	2300      	movs	r3, #0
 8004940:	930a      	str	r3, [sp, #40]	; 0x28
 8004942:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004944:	7833      	ldrb	r3, [r6, #0]
 8004946:	2b30      	cmp	r3, #48	; 0x30
 8004948:	f040 80b0 	bne.w	8004aac <_strtod_l+0x1b4>
 800494c:	7873      	ldrb	r3, [r6, #1]
 800494e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004952:	2b58      	cmp	r3, #88	; 0x58
 8004954:	d168      	bne.n	8004a28 <_strtod_l+0x130>
 8004956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	ab18      	add	r3, sp, #96	; 0x60
 800495c:	9702      	str	r7, [sp, #8]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4a8d      	ldr	r2, [pc, #564]	; (8004b98 <_strtod_l+0x2a0>)
 8004962:	ab19      	add	r3, sp, #100	; 0x64
 8004964:	a917      	add	r1, sp, #92	; 0x5c
 8004966:	4620      	mov	r0, r4
 8004968:	f001 fd38 	bl	80063dc <__gethex>
 800496c:	f010 0707 	ands.w	r7, r0, #7
 8004970:	4605      	mov	r5, r0
 8004972:	d005      	beq.n	8004980 <_strtod_l+0x88>
 8004974:	2f06      	cmp	r7, #6
 8004976:	d12c      	bne.n	80049d2 <_strtod_l+0xda>
 8004978:	3601      	adds	r6, #1
 800497a:	2300      	movs	r3, #0
 800497c:	9617      	str	r6, [sp, #92]	; 0x5c
 800497e:	930a      	str	r3, [sp, #40]	; 0x28
 8004980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004982:	2b00      	cmp	r3, #0
 8004984:	f040 8590 	bne.w	80054a8 <_strtod_l+0xbb0>
 8004988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800498a:	b1eb      	cbz	r3, 80049c8 <_strtod_l+0xd0>
 800498c:	4652      	mov	r2, sl
 800498e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004992:	ec43 2b10 	vmov	d0, r2, r3
 8004996:	b01d      	add	sp, #116	; 0x74
 8004998:	ecbd 8b02 	vpop	{d8}
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	2a20      	cmp	r2, #32
 80049a2:	d1cc      	bne.n	800493e <_strtod_l+0x46>
 80049a4:	3301      	adds	r3, #1
 80049a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80049a8:	e7be      	b.n	8004928 <_strtod_l+0x30>
 80049aa:	2a2d      	cmp	r2, #45	; 0x2d
 80049ac:	d1c7      	bne.n	800493e <_strtod_l+0x46>
 80049ae:	2201      	movs	r2, #1
 80049b0:	920a      	str	r2, [sp, #40]	; 0x28
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1c2      	bne.n	8004942 <_strtod_l+0x4a>
 80049bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80049be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 856e 	bne.w	80054a4 <_strtod_l+0xbac>
 80049c8:	4652      	mov	r2, sl
 80049ca:	465b      	mov	r3, fp
 80049cc:	e7e1      	b.n	8004992 <_strtod_l+0x9a>
 80049ce:	2200      	movs	r2, #0
 80049d0:	e7ee      	b.n	80049b0 <_strtod_l+0xb8>
 80049d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80049d4:	b13a      	cbz	r2, 80049e6 <_strtod_l+0xee>
 80049d6:	2135      	movs	r1, #53	; 0x35
 80049d8:	a81a      	add	r0, sp, #104	; 0x68
 80049da:	f002 fcb0 	bl	800733e <__copybits>
 80049de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049e0:	4620      	mov	r0, r4
 80049e2:	f002 f86f 	bl	8006ac4 <_Bfree>
 80049e6:	3f01      	subs	r7, #1
 80049e8:	2f04      	cmp	r7, #4
 80049ea:	d806      	bhi.n	80049fa <_strtod_l+0x102>
 80049ec:	e8df f007 	tbb	[pc, r7]
 80049f0:	1714030a 	.word	0x1714030a
 80049f4:	0a          	.byte	0x0a
 80049f5:	00          	.byte	0x00
 80049f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80049fa:	0728      	lsls	r0, r5, #28
 80049fc:	d5c0      	bpl.n	8004980 <_strtod_l+0x88>
 80049fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004a02:	e7bd      	b.n	8004980 <_strtod_l+0x88>
 8004a04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004a12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a16:	e7f0      	b.n	80049fa <_strtod_l+0x102>
 8004a18:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004b9c <_strtod_l+0x2a4>
 8004a1c:	e7ed      	b.n	80049fa <_strtod_l+0x102>
 8004a1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004a22:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004a26:	e7e8      	b.n	80049fa <_strtod_l+0x102>
 8004a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	2b30      	cmp	r3, #48	; 0x30
 8004a32:	d0f9      	beq.n	8004a28 <_strtod_l+0x130>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0a3      	beq.n	8004980 <_strtod_l+0x88>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f04f 0900 	mov.w	r9, #0
 8004a3e:	9304      	str	r3, [sp, #16]
 8004a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a42:	9308      	str	r3, [sp, #32]
 8004a44:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a48:	464f      	mov	r7, r9
 8004a4a:	220a      	movs	r2, #10
 8004a4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004a4e:	7806      	ldrb	r6, [r0, #0]
 8004a50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004a54:	b2d9      	uxtb	r1, r3
 8004a56:	2909      	cmp	r1, #9
 8004a58:	d92a      	bls.n	8004ab0 <_strtod_l+0x1b8>
 8004a5a:	9905      	ldr	r1, [sp, #20]
 8004a5c:	462a      	mov	r2, r5
 8004a5e:	f002 ff1f 	bl	80078a0 <strncmp>
 8004a62:	b398      	cbz	r0, 8004acc <_strtod_l+0x1d4>
 8004a64:	2000      	movs	r0, #0
 8004a66:	4632      	mov	r2, r6
 8004a68:	463d      	mov	r5, r7
 8004a6a:	9005      	str	r0, [sp, #20]
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2a65      	cmp	r2, #101	; 0x65
 8004a70:	d001      	beq.n	8004a76 <_strtod_l+0x17e>
 8004a72:	2a45      	cmp	r2, #69	; 0x45
 8004a74:	d118      	bne.n	8004aa8 <_strtod_l+0x1b0>
 8004a76:	b91d      	cbnz	r5, 8004a80 <_strtod_l+0x188>
 8004a78:	9a04      	ldr	r2, [sp, #16]
 8004a7a:	4302      	orrs	r2, r0
 8004a7c:	d09e      	beq.n	80049bc <_strtod_l+0xc4>
 8004a7e:	2500      	movs	r5, #0
 8004a80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004a84:	f108 0201 	add.w	r2, r8, #1
 8004a88:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004a8e:	2a2b      	cmp	r2, #43	; 0x2b
 8004a90:	d075      	beq.n	8004b7e <_strtod_l+0x286>
 8004a92:	2a2d      	cmp	r2, #45	; 0x2d
 8004a94:	d07b      	beq.n	8004b8e <_strtod_l+0x296>
 8004a96:	f04f 0c00 	mov.w	ip, #0
 8004a9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004a9e:	2909      	cmp	r1, #9
 8004aa0:	f240 8082 	bls.w	8004ba8 <_strtod_l+0x2b0>
 8004aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	e09d      	b.n	8004be8 <_strtod_l+0x2f0>
 8004aac:	2300      	movs	r3, #0
 8004aae:	e7c4      	b.n	8004a3a <_strtod_l+0x142>
 8004ab0:	2f08      	cmp	r7, #8
 8004ab2:	bfd8      	it	le
 8004ab4:	9907      	ldrle	r1, [sp, #28]
 8004ab6:	f100 0001 	add.w	r0, r0, #1
 8004aba:	bfda      	itte	le
 8004abc:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ac0:	9307      	strle	r3, [sp, #28]
 8004ac2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004ac6:	3701      	adds	r7, #1
 8004ac8:	9017      	str	r0, [sp, #92]	; 0x5c
 8004aca:	e7bf      	b.n	8004a4c <_strtod_l+0x154>
 8004acc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ace:	195a      	adds	r2, r3, r5
 8004ad0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ad2:	5d5a      	ldrb	r2, [r3, r5]
 8004ad4:	2f00      	cmp	r7, #0
 8004ad6:	d037      	beq.n	8004b48 <_strtod_l+0x250>
 8004ad8:	9005      	str	r0, [sp, #20]
 8004ada:	463d      	mov	r5, r7
 8004adc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004ae0:	2b09      	cmp	r3, #9
 8004ae2:	d912      	bls.n	8004b0a <_strtod_l+0x212>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e7c2      	b.n	8004a6e <_strtod_l+0x176>
 8004ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	9217      	str	r2, [sp, #92]	; 0x5c
 8004aee:	785a      	ldrb	r2, [r3, #1]
 8004af0:	3001      	adds	r0, #1
 8004af2:	2a30      	cmp	r2, #48	; 0x30
 8004af4:	d0f8      	beq.n	8004ae8 <_strtod_l+0x1f0>
 8004af6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	f200 84d9 	bhi.w	80054b2 <_strtod_l+0xbba>
 8004b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b02:	9005      	str	r0, [sp, #20]
 8004b04:	2000      	movs	r0, #0
 8004b06:	9308      	str	r3, [sp, #32]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	3a30      	subs	r2, #48	; 0x30
 8004b0c:	f100 0301 	add.w	r3, r0, #1
 8004b10:	d014      	beq.n	8004b3c <_strtod_l+0x244>
 8004b12:	9905      	ldr	r1, [sp, #20]
 8004b14:	4419      	add	r1, r3
 8004b16:	9105      	str	r1, [sp, #20]
 8004b18:	462b      	mov	r3, r5
 8004b1a:	eb00 0e05 	add.w	lr, r0, r5
 8004b1e:	210a      	movs	r1, #10
 8004b20:	4573      	cmp	r3, lr
 8004b22:	d113      	bne.n	8004b4c <_strtod_l+0x254>
 8004b24:	182b      	adds	r3, r5, r0
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	f105 0501 	add.w	r5, r5, #1
 8004b2c:	4405      	add	r5, r0
 8004b2e:	dc1c      	bgt.n	8004b6a <_strtod_l+0x272>
 8004b30:	9907      	ldr	r1, [sp, #28]
 8004b32:	230a      	movs	r3, #10
 8004b34:	fb03 2301 	mla	r3, r3, r1, r2
 8004b38:	9307      	str	r3, [sp, #28]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b3e:	1c51      	adds	r1, r2, #1
 8004b40:	9117      	str	r1, [sp, #92]	; 0x5c
 8004b42:	7852      	ldrb	r2, [r2, #1]
 8004b44:	4618      	mov	r0, r3
 8004b46:	e7c9      	b.n	8004adc <_strtod_l+0x1e4>
 8004b48:	4638      	mov	r0, r7
 8004b4a:	e7d2      	b.n	8004af2 <_strtod_l+0x1fa>
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	dc04      	bgt.n	8004b5a <_strtod_l+0x262>
 8004b50:	9e07      	ldr	r6, [sp, #28]
 8004b52:	434e      	muls	r6, r1
 8004b54:	9607      	str	r6, [sp, #28]
 8004b56:	3301      	adds	r3, #1
 8004b58:	e7e2      	b.n	8004b20 <_strtod_l+0x228>
 8004b5a:	f103 0c01 	add.w	ip, r3, #1
 8004b5e:	f1bc 0f10 	cmp.w	ip, #16
 8004b62:	bfd8      	it	le
 8004b64:	fb01 f909 	mulle.w	r9, r1, r9
 8004b68:	e7f5      	b.n	8004b56 <_strtod_l+0x25e>
 8004b6a:	2d10      	cmp	r5, #16
 8004b6c:	bfdc      	itt	le
 8004b6e:	230a      	movle	r3, #10
 8004b70:	fb03 2909 	mlale	r9, r3, r9, r2
 8004b74:	e7e1      	b.n	8004b3a <_strtod_l+0x242>
 8004b76:	2300      	movs	r3, #0
 8004b78:	9305      	str	r3, [sp, #20]
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e77c      	b.n	8004a78 <_strtod_l+0x180>
 8004b7e:	f04f 0c00 	mov.w	ip, #0
 8004b82:	f108 0202 	add.w	r2, r8, #2
 8004b86:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b88:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004b8c:	e785      	b.n	8004a9a <_strtod_l+0x1a2>
 8004b8e:	f04f 0c01 	mov.w	ip, #1
 8004b92:	e7f6      	b.n	8004b82 <_strtod_l+0x28a>
 8004b94:	08008700 	.word	0x08008700
 8004b98:	080084b8 	.word	0x080084b8
 8004b9c:	7ff00000 	.word	0x7ff00000
 8004ba0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ba2:	1c51      	adds	r1, r2, #1
 8004ba4:	9117      	str	r1, [sp, #92]	; 0x5c
 8004ba6:	7852      	ldrb	r2, [r2, #1]
 8004ba8:	2a30      	cmp	r2, #48	; 0x30
 8004baa:	d0f9      	beq.n	8004ba0 <_strtod_l+0x2a8>
 8004bac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004bb0:	2908      	cmp	r1, #8
 8004bb2:	f63f af79 	bhi.w	8004aa8 <_strtod_l+0x1b0>
 8004bb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004bba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004bbc:	9206      	str	r2, [sp, #24]
 8004bbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004bc0:	1c51      	adds	r1, r2, #1
 8004bc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8004bc4:	7852      	ldrb	r2, [r2, #1]
 8004bc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004bca:	2e09      	cmp	r6, #9
 8004bcc:	d937      	bls.n	8004c3e <_strtod_l+0x346>
 8004bce:	9e06      	ldr	r6, [sp, #24]
 8004bd0:	1b89      	subs	r1, r1, r6
 8004bd2:	2908      	cmp	r1, #8
 8004bd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004bd8:	dc02      	bgt.n	8004be0 <_strtod_l+0x2e8>
 8004bda:	4576      	cmp	r6, lr
 8004bdc:	bfa8      	it	ge
 8004bde:	4676      	movge	r6, lr
 8004be0:	f1bc 0f00 	cmp.w	ip, #0
 8004be4:	d000      	beq.n	8004be8 <_strtod_l+0x2f0>
 8004be6:	4276      	negs	r6, r6
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	d14d      	bne.n	8004c88 <_strtod_l+0x390>
 8004bec:	9904      	ldr	r1, [sp, #16]
 8004bee:	4301      	orrs	r1, r0
 8004bf0:	f47f aec6 	bne.w	8004980 <_strtod_l+0x88>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f47f aee1 	bne.w	80049bc <_strtod_l+0xc4>
 8004bfa:	2a69      	cmp	r2, #105	; 0x69
 8004bfc:	d027      	beq.n	8004c4e <_strtod_l+0x356>
 8004bfe:	dc24      	bgt.n	8004c4a <_strtod_l+0x352>
 8004c00:	2a49      	cmp	r2, #73	; 0x49
 8004c02:	d024      	beq.n	8004c4e <_strtod_l+0x356>
 8004c04:	2a4e      	cmp	r2, #78	; 0x4e
 8004c06:	f47f aed9 	bne.w	80049bc <_strtod_l+0xc4>
 8004c0a:	499f      	ldr	r1, [pc, #636]	; (8004e88 <_strtod_l+0x590>)
 8004c0c:	a817      	add	r0, sp, #92	; 0x5c
 8004c0e:	f001 fe3d 	bl	800688c <__match>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	f43f aed2 	beq.w	80049bc <_strtod_l+0xc4>
 8004c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b28      	cmp	r3, #40	; 0x28
 8004c1e:	d12d      	bne.n	8004c7c <_strtod_l+0x384>
 8004c20:	499a      	ldr	r1, [pc, #616]	; (8004e8c <_strtod_l+0x594>)
 8004c22:	aa1a      	add	r2, sp, #104	; 0x68
 8004c24:	a817      	add	r0, sp, #92	; 0x5c
 8004c26:	f001 fe45 	bl	80068b4 <__hexnan>
 8004c2a:	2805      	cmp	r0, #5
 8004c2c:	d126      	bne.n	8004c7c <_strtod_l+0x384>
 8004c2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004c34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004c38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004c3c:	e6a0      	b.n	8004980 <_strtod_l+0x88>
 8004c3e:	210a      	movs	r1, #10
 8004c40:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004c44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004c48:	e7b9      	b.n	8004bbe <_strtod_l+0x2c6>
 8004c4a:	2a6e      	cmp	r2, #110	; 0x6e
 8004c4c:	e7db      	b.n	8004c06 <_strtod_l+0x30e>
 8004c4e:	4990      	ldr	r1, [pc, #576]	; (8004e90 <_strtod_l+0x598>)
 8004c50:	a817      	add	r0, sp, #92	; 0x5c
 8004c52:	f001 fe1b 	bl	800688c <__match>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f43f aeb0 	beq.w	80049bc <_strtod_l+0xc4>
 8004c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c5e:	498d      	ldr	r1, [pc, #564]	; (8004e94 <_strtod_l+0x59c>)
 8004c60:	3b01      	subs	r3, #1
 8004c62:	a817      	add	r0, sp, #92	; 0x5c
 8004c64:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c66:	f001 fe11 	bl	800688c <__match>
 8004c6a:	b910      	cbnz	r0, 8004c72 <_strtod_l+0x37a>
 8004c6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c6e:	3301      	adds	r3, #1
 8004c70:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c72:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004ea4 <_strtod_l+0x5ac>
 8004c76:	f04f 0a00 	mov.w	sl, #0
 8004c7a:	e681      	b.n	8004980 <_strtod_l+0x88>
 8004c7c:	4886      	ldr	r0, [pc, #536]	; (8004e98 <_strtod_l+0x5a0>)
 8004c7e:	f002 fdf7 	bl	8007870 <nan>
 8004c82:	ec5b ab10 	vmov	sl, fp, d0
 8004c86:	e67b      	b.n	8004980 <_strtod_l+0x88>
 8004c88:	9b05      	ldr	r3, [sp, #20]
 8004c8a:	9807      	ldr	r0, [sp, #28]
 8004c8c:	1af3      	subs	r3, r6, r3
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	bf08      	it	eq
 8004c92:	462f      	moveq	r7, r5
 8004c94:	2d10      	cmp	r5, #16
 8004c96:	9306      	str	r3, [sp, #24]
 8004c98:	46a8      	mov	r8, r5
 8004c9a:	bfa8      	it	ge
 8004c9c:	f04f 0810 	movge.w	r8, #16
 8004ca0:	f7fb fc38 	bl	8000514 <__aeabi_ui2d>
 8004ca4:	2d09      	cmp	r5, #9
 8004ca6:	4682      	mov	sl, r0
 8004ca8:	468b      	mov	fp, r1
 8004caa:	dd13      	ble.n	8004cd4 <_strtod_l+0x3dc>
 8004cac:	4b7b      	ldr	r3, [pc, #492]	; (8004e9c <_strtod_l+0x5a4>)
 8004cae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004cb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004cb6:	f7fb fca7 	bl	8000608 <__aeabi_dmul>
 8004cba:	4682      	mov	sl, r0
 8004cbc:	4648      	mov	r0, r9
 8004cbe:	468b      	mov	fp, r1
 8004cc0:	f7fb fc28 	bl	8000514 <__aeabi_ui2d>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4650      	mov	r0, sl
 8004cca:	4659      	mov	r1, fp
 8004ccc:	f7fb fae6 	bl	800029c <__adddf3>
 8004cd0:	4682      	mov	sl, r0
 8004cd2:	468b      	mov	fp, r1
 8004cd4:	2d0f      	cmp	r5, #15
 8004cd6:	dc38      	bgt.n	8004d4a <_strtod_l+0x452>
 8004cd8:	9b06      	ldr	r3, [sp, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f43f ae50 	beq.w	8004980 <_strtod_l+0x88>
 8004ce0:	dd24      	ble.n	8004d2c <_strtod_l+0x434>
 8004ce2:	2b16      	cmp	r3, #22
 8004ce4:	dc0b      	bgt.n	8004cfe <_strtod_l+0x406>
 8004ce6:	496d      	ldr	r1, [pc, #436]	; (8004e9c <_strtod_l+0x5a4>)
 8004ce8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cf0:	4652      	mov	r2, sl
 8004cf2:	465b      	mov	r3, fp
 8004cf4:	f7fb fc88 	bl	8000608 <__aeabi_dmul>
 8004cf8:	4682      	mov	sl, r0
 8004cfa:	468b      	mov	fp, r1
 8004cfc:	e640      	b.n	8004980 <_strtod_l+0x88>
 8004cfe:	9a06      	ldr	r2, [sp, #24]
 8004d00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004d04:	4293      	cmp	r3, r2
 8004d06:	db20      	blt.n	8004d4a <_strtod_l+0x452>
 8004d08:	4c64      	ldr	r4, [pc, #400]	; (8004e9c <_strtod_l+0x5a4>)
 8004d0a:	f1c5 050f 	rsb	r5, r5, #15
 8004d0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004d12:	4652      	mov	r2, sl
 8004d14:	465b      	mov	r3, fp
 8004d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d1a:	f7fb fc75 	bl	8000608 <__aeabi_dmul>
 8004d1e:	9b06      	ldr	r3, [sp, #24]
 8004d20:	1b5d      	subs	r5, r3, r5
 8004d22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004d26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004d2a:	e7e3      	b.n	8004cf4 <_strtod_l+0x3fc>
 8004d2c:	9b06      	ldr	r3, [sp, #24]
 8004d2e:	3316      	adds	r3, #22
 8004d30:	db0b      	blt.n	8004d4a <_strtod_l+0x452>
 8004d32:	9b05      	ldr	r3, [sp, #20]
 8004d34:	1b9e      	subs	r6, r3, r6
 8004d36:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <_strtod_l+0x5a4>)
 8004d38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d40:	4650      	mov	r0, sl
 8004d42:	4659      	mov	r1, fp
 8004d44:	f7fb fd8a 	bl	800085c <__aeabi_ddiv>
 8004d48:	e7d6      	b.n	8004cf8 <_strtod_l+0x400>
 8004d4a:	9b06      	ldr	r3, [sp, #24]
 8004d4c:	eba5 0808 	sub.w	r8, r5, r8
 8004d50:	4498      	add	r8, r3
 8004d52:	f1b8 0f00 	cmp.w	r8, #0
 8004d56:	dd74      	ble.n	8004e42 <_strtod_l+0x54a>
 8004d58:	f018 030f 	ands.w	r3, r8, #15
 8004d5c:	d00a      	beq.n	8004d74 <_strtod_l+0x47c>
 8004d5e:	494f      	ldr	r1, [pc, #316]	; (8004e9c <_strtod_l+0x5a4>)
 8004d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d64:	4652      	mov	r2, sl
 8004d66:	465b      	mov	r3, fp
 8004d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d6c:	f7fb fc4c 	bl	8000608 <__aeabi_dmul>
 8004d70:	4682      	mov	sl, r0
 8004d72:	468b      	mov	fp, r1
 8004d74:	f038 080f 	bics.w	r8, r8, #15
 8004d78:	d04f      	beq.n	8004e1a <_strtod_l+0x522>
 8004d7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004d7e:	dd22      	ble.n	8004dc6 <_strtod_l+0x4ce>
 8004d80:	2500      	movs	r5, #0
 8004d82:	462e      	mov	r6, r5
 8004d84:	9507      	str	r5, [sp, #28]
 8004d86:	9505      	str	r5, [sp, #20]
 8004d88:	2322      	movs	r3, #34	; 0x22
 8004d8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004ea4 <_strtod_l+0x5ac>
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	f04f 0a00 	mov.w	sl, #0
 8004d94:	9b07      	ldr	r3, [sp, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f43f adf2 	beq.w	8004980 <_strtod_l+0x88>
 8004d9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f001 fe90 	bl	8006ac4 <_Bfree>
 8004da4:	9905      	ldr	r1, [sp, #20]
 8004da6:	4620      	mov	r0, r4
 8004da8:	f001 fe8c 	bl	8006ac4 <_Bfree>
 8004dac:	4631      	mov	r1, r6
 8004dae:	4620      	mov	r0, r4
 8004db0:	f001 fe88 	bl	8006ac4 <_Bfree>
 8004db4:	9907      	ldr	r1, [sp, #28]
 8004db6:	4620      	mov	r0, r4
 8004db8:	f001 fe84 	bl	8006ac4 <_Bfree>
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f001 fe80 	bl	8006ac4 <_Bfree>
 8004dc4:	e5dc      	b.n	8004980 <_strtod_l+0x88>
 8004dc6:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <_strtod_l+0x5a8>)
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004dd0:	4650      	mov	r0, sl
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	4699      	mov	r9, r3
 8004dd6:	f1b8 0f01 	cmp.w	r8, #1
 8004dda:	dc21      	bgt.n	8004e20 <_strtod_l+0x528>
 8004ddc:	b10b      	cbz	r3, 8004de2 <_strtod_l+0x4ea>
 8004dde:	4682      	mov	sl, r0
 8004de0:	468b      	mov	fp, r1
 8004de2:	4b2f      	ldr	r3, [pc, #188]	; (8004ea0 <_strtod_l+0x5a8>)
 8004de4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004de8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004dec:	4652      	mov	r2, sl
 8004dee:	465b      	mov	r3, fp
 8004df0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004df4:	f7fb fc08 	bl	8000608 <__aeabi_dmul>
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <_strtod_l+0x5ac>)
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	400b      	ands	r3, r1
 8004dfe:	492a      	ldr	r1, [pc, #168]	; (8004ea8 <_strtod_l+0x5b0>)
 8004e00:	428b      	cmp	r3, r1
 8004e02:	4682      	mov	sl, r0
 8004e04:	d8bc      	bhi.n	8004d80 <_strtod_l+0x488>
 8004e06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004e0a:	428b      	cmp	r3, r1
 8004e0c:	bf86      	itte	hi
 8004e0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004eac <_strtod_l+0x5b4>
 8004e12:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004e16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	e084      	b.n	8004f2a <_strtod_l+0x632>
 8004e20:	f018 0f01 	tst.w	r8, #1
 8004e24:	d005      	beq.n	8004e32 <_strtod_l+0x53a>
 8004e26:	9b04      	ldr	r3, [sp, #16]
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f7fb fbec 	bl	8000608 <__aeabi_dmul>
 8004e30:	2301      	movs	r3, #1
 8004e32:	9a04      	ldr	r2, [sp, #16]
 8004e34:	3208      	adds	r2, #8
 8004e36:	f109 0901 	add.w	r9, r9, #1
 8004e3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e3e:	9204      	str	r2, [sp, #16]
 8004e40:	e7c9      	b.n	8004dd6 <_strtod_l+0x4de>
 8004e42:	d0ea      	beq.n	8004e1a <_strtod_l+0x522>
 8004e44:	f1c8 0800 	rsb	r8, r8, #0
 8004e48:	f018 020f 	ands.w	r2, r8, #15
 8004e4c:	d00a      	beq.n	8004e64 <_strtod_l+0x56c>
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <_strtod_l+0x5a4>)
 8004e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e54:	4650      	mov	r0, sl
 8004e56:	4659      	mov	r1, fp
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fcfe 	bl	800085c <__aeabi_ddiv>
 8004e60:	4682      	mov	sl, r0
 8004e62:	468b      	mov	fp, r1
 8004e64:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004e68:	d0d7      	beq.n	8004e1a <_strtod_l+0x522>
 8004e6a:	f1b8 0f1f 	cmp.w	r8, #31
 8004e6e:	dd1f      	ble.n	8004eb0 <_strtod_l+0x5b8>
 8004e70:	2500      	movs	r5, #0
 8004e72:	462e      	mov	r6, r5
 8004e74:	9507      	str	r5, [sp, #28]
 8004e76:	9505      	str	r5, [sp, #20]
 8004e78:	2322      	movs	r3, #34	; 0x22
 8004e7a:	f04f 0a00 	mov.w	sl, #0
 8004e7e:	f04f 0b00 	mov.w	fp, #0
 8004e82:	6023      	str	r3, [r4, #0]
 8004e84:	e786      	b.n	8004d94 <_strtod_l+0x49c>
 8004e86:	bf00      	nop
 8004e88:	08008489 	.word	0x08008489
 8004e8c:	080084cc 	.word	0x080084cc
 8004e90:	08008481 	.word	0x08008481
 8004e94:	0800860c 	.word	0x0800860c
 8004e98:	080088b8 	.word	0x080088b8
 8004e9c:	08008798 	.word	0x08008798
 8004ea0:	08008770 	.word	0x08008770
 8004ea4:	7ff00000 	.word	0x7ff00000
 8004ea8:	7ca00000 	.word	0x7ca00000
 8004eac:	7fefffff 	.word	0x7fefffff
 8004eb0:	f018 0310 	ands.w	r3, r8, #16
 8004eb4:	bf18      	it	ne
 8004eb6:	236a      	movne	r3, #106	; 0x6a
 8004eb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005268 <_strtod_l+0x970>
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	4650      	mov	r0, sl
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f018 0f01 	tst.w	r8, #1
 8004ec8:	d004      	beq.n	8004ed4 <_strtod_l+0x5dc>
 8004eca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004ece:	f7fb fb9b 	bl	8000608 <__aeabi_dmul>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004ed8:	f109 0908 	add.w	r9, r9, #8
 8004edc:	d1f2      	bne.n	8004ec4 <_strtod_l+0x5cc>
 8004ede:	b10b      	cbz	r3, 8004ee4 <_strtod_l+0x5ec>
 8004ee0:	4682      	mov	sl, r0
 8004ee2:	468b      	mov	fp, r1
 8004ee4:	9b04      	ldr	r3, [sp, #16]
 8004ee6:	b1c3      	cbz	r3, 8004f1a <_strtod_l+0x622>
 8004ee8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004eec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	dd11      	ble.n	8004f1a <_strtod_l+0x622>
 8004ef6:	2b1f      	cmp	r3, #31
 8004ef8:	f340 8124 	ble.w	8005144 <_strtod_l+0x84c>
 8004efc:	2b34      	cmp	r3, #52	; 0x34
 8004efe:	bfde      	ittt	le
 8004f00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004f04:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004f08:	fa03 f202 	lslle.w	r2, r3, r2
 8004f0c:	f04f 0a00 	mov.w	sl, #0
 8004f10:	bfcc      	ite	gt
 8004f12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004f16:	ea02 0b01 	andle.w	fp, r2, r1
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4650      	mov	r0, sl
 8004f20:	4659      	mov	r1, fp
 8004f22:	f7fb fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d1a2      	bne.n	8004e70 <_strtod_l+0x578>
 8004f2a:	9b07      	ldr	r3, [sp, #28]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	9908      	ldr	r1, [sp, #32]
 8004f30:	462b      	mov	r3, r5
 8004f32:	463a      	mov	r2, r7
 8004f34:	4620      	mov	r0, r4
 8004f36:	f001 fe2d 	bl	8006b94 <__s2b>
 8004f3a:	9007      	str	r0, [sp, #28]
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f43f af1f 	beq.w	8004d80 <_strtod_l+0x488>
 8004f42:	9b05      	ldr	r3, [sp, #20]
 8004f44:	1b9e      	subs	r6, r3, r6
 8004f46:	9b06      	ldr	r3, [sp, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bfb4      	ite	lt
 8004f4c:	4633      	movlt	r3, r6
 8004f4e:	2300      	movge	r3, #0
 8004f50:	930c      	str	r3, [sp, #48]	; 0x30
 8004f52:	9b06      	ldr	r3, [sp, #24]
 8004f54:	2500      	movs	r5, #0
 8004f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f5a:	9312      	str	r3, [sp, #72]	; 0x48
 8004f5c:	462e      	mov	r6, r5
 8004f5e:	9b07      	ldr	r3, [sp, #28]
 8004f60:	4620      	mov	r0, r4
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	f001 fd6e 	bl	8006a44 <_Balloc>
 8004f68:	9005      	str	r0, [sp, #20]
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f43f af0c 	beq.w	8004d88 <_strtod_l+0x490>
 8004f70:	9b07      	ldr	r3, [sp, #28]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	3202      	adds	r2, #2
 8004f76:	f103 010c 	add.w	r1, r3, #12
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	300c      	adds	r0, #12
 8004f7e:	f001 fd53 	bl	8006a28 <memcpy>
 8004f82:	ec4b ab10 	vmov	d0, sl, fp
 8004f86:	aa1a      	add	r2, sp, #104	; 0x68
 8004f88:	a919      	add	r1, sp, #100	; 0x64
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f002 f948 	bl	8007220 <__d2b>
 8004f90:	ec4b ab18 	vmov	d8, sl, fp
 8004f94:	9018      	str	r0, [sp, #96]	; 0x60
 8004f96:	2800      	cmp	r0, #0
 8004f98:	f43f aef6 	beq.w	8004d88 <_strtod_l+0x490>
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f001 fe92 	bl	8006cc8 <__i2b>
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f43f aeee 	beq.w	8004d88 <_strtod_l+0x490>
 8004fac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fae:	9904      	ldr	r1, [sp, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bfab      	itete	ge
 8004fb4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004fb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004fb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004fba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004fbe:	bfac      	ite	ge
 8004fc0:	eb03 0902 	addge.w	r9, r3, r2
 8004fc4:	1ad7      	sublt	r7, r2, r3
 8004fc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004fc8:	eba3 0801 	sub.w	r8, r3, r1
 8004fcc:	4490      	add	r8, r2
 8004fce:	4ba1      	ldr	r3, [pc, #644]	; (8005254 <_strtod_l+0x95c>)
 8004fd0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004fd4:	4598      	cmp	r8, r3
 8004fd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004fda:	f280 80c7 	bge.w	800516c <_strtod_l+0x874>
 8004fde:	eba3 0308 	sub.w	r3, r3, r8
 8004fe2:	2b1f      	cmp	r3, #31
 8004fe4:	eba2 0203 	sub.w	r2, r2, r3
 8004fe8:	f04f 0101 	mov.w	r1, #1
 8004fec:	f300 80b1 	bgt.w	8005152 <_strtod_l+0x85a>
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	930d      	str	r3, [sp, #52]	; 0x34
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9308      	str	r3, [sp, #32]
 8004ffa:	eb09 0802 	add.w	r8, r9, r2
 8004ffe:	9b04      	ldr	r3, [sp, #16]
 8005000:	45c1      	cmp	r9, r8
 8005002:	4417      	add	r7, r2
 8005004:	441f      	add	r7, r3
 8005006:	464b      	mov	r3, r9
 8005008:	bfa8      	it	ge
 800500a:	4643      	movge	r3, r8
 800500c:	42bb      	cmp	r3, r7
 800500e:	bfa8      	it	ge
 8005010:	463b      	movge	r3, r7
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfc2      	ittt	gt
 8005016:	eba8 0803 	subgt.w	r8, r8, r3
 800501a:	1aff      	subgt	r7, r7, r3
 800501c:	eba9 0903 	subgt.w	r9, r9, r3
 8005020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005022:	2b00      	cmp	r3, #0
 8005024:	dd17      	ble.n	8005056 <_strtod_l+0x75e>
 8005026:	4631      	mov	r1, r6
 8005028:	461a      	mov	r2, r3
 800502a:	4620      	mov	r0, r4
 800502c:	f001 ff0c 	bl	8006e48 <__pow5mult>
 8005030:	4606      	mov	r6, r0
 8005032:	2800      	cmp	r0, #0
 8005034:	f43f aea8 	beq.w	8004d88 <_strtod_l+0x490>
 8005038:	4601      	mov	r1, r0
 800503a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800503c:	4620      	mov	r0, r4
 800503e:	f001 fe59 	bl	8006cf4 <__multiply>
 8005042:	900b      	str	r0, [sp, #44]	; 0x2c
 8005044:	2800      	cmp	r0, #0
 8005046:	f43f ae9f 	beq.w	8004d88 <_strtod_l+0x490>
 800504a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800504c:	4620      	mov	r0, r4
 800504e:	f001 fd39 	bl	8006ac4 <_Bfree>
 8005052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005054:	9318      	str	r3, [sp, #96]	; 0x60
 8005056:	f1b8 0f00 	cmp.w	r8, #0
 800505a:	f300 808c 	bgt.w	8005176 <_strtod_l+0x87e>
 800505e:	9b06      	ldr	r3, [sp, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	dd08      	ble.n	8005076 <_strtod_l+0x77e>
 8005064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005066:	9905      	ldr	r1, [sp, #20]
 8005068:	4620      	mov	r0, r4
 800506a:	f001 feed 	bl	8006e48 <__pow5mult>
 800506e:	9005      	str	r0, [sp, #20]
 8005070:	2800      	cmp	r0, #0
 8005072:	f43f ae89 	beq.w	8004d88 <_strtod_l+0x490>
 8005076:	2f00      	cmp	r7, #0
 8005078:	dd08      	ble.n	800508c <_strtod_l+0x794>
 800507a:	9905      	ldr	r1, [sp, #20]
 800507c:	463a      	mov	r2, r7
 800507e:	4620      	mov	r0, r4
 8005080:	f001 ff3c 	bl	8006efc <__lshift>
 8005084:	9005      	str	r0, [sp, #20]
 8005086:	2800      	cmp	r0, #0
 8005088:	f43f ae7e 	beq.w	8004d88 <_strtod_l+0x490>
 800508c:	f1b9 0f00 	cmp.w	r9, #0
 8005090:	dd08      	ble.n	80050a4 <_strtod_l+0x7ac>
 8005092:	4631      	mov	r1, r6
 8005094:	464a      	mov	r2, r9
 8005096:	4620      	mov	r0, r4
 8005098:	f001 ff30 	bl	8006efc <__lshift>
 800509c:	4606      	mov	r6, r0
 800509e:	2800      	cmp	r0, #0
 80050a0:	f43f ae72 	beq.w	8004d88 <_strtod_l+0x490>
 80050a4:	9a05      	ldr	r2, [sp, #20]
 80050a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050a8:	4620      	mov	r0, r4
 80050aa:	f001 ffb3 	bl	8007014 <__mdiff>
 80050ae:	4605      	mov	r5, r0
 80050b0:	2800      	cmp	r0, #0
 80050b2:	f43f ae69 	beq.w	8004d88 <_strtod_l+0x490>
 80050b6:	68c3      	ldr	r3, [r0, #12]
 80050b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ba:	2300      	movs	r3, #0
 80050bc:	60c3      	str	r3, [r0, #12]
 80050be:	4631      	mov	r1, r6
 80050c0:	f001 ff8c 	bl	8006fdc <__mcmp>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	da60      	bge.n	800518a <_strtod_l+0x892>
 80050c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ca:	ea53 030a 	orrs.w	r3, r3, sl
 80050ce:	f040 8082 	bne.w	80051d6 <_strtod_l+0x8de>
 80050d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d17d      	bne.n	80051d6 <_strtod_l+0x8de>
 80050da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80050de:	0d1b      	lsrs	r3, r3, #20
 80050e0:	051b      	lsls	r3, r3, #20
 80050e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80050e6:	d976      	bls.n	80051d6 <_strtod_l+0x8de>
 80050e8:	696b      	ldr	r3, [r5, #20]
 80050ea:	b913      	cbnz	r3, 80050f2 <_strtod_l+0x7fa>
 80050ec:	692b      	ldr	r3, [r5, #16]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	dd71      	ble.n	80051d6 <_strtod_l+0x8de>
 80050f2:	4629      	mov	r1, r5
 80050f4:	2201      	movs	r2, #1
 80050f6:	4620      	mov	r0, r4
 80050f8:	f001 ff00 	bl	8006efc <__lshift>
 80050fc:	4631      	mov	r1, r6
 80050fe:	4605      	mov	r5, r0
 8005100:	f001 ff6c 	bl	8006fdc <__mcmp>
 8005104:	2800      	cmp	r0, #0
 8005106:	dd66      	ble.n	80051d6 <_strtod_l+0x8de>
 8005108:	9904      	ldr	r1, [sp, #16]
 800510a:	4a53      	ldr	r2, [pc, #332]	; (8005258 <_strtod_l+0x960>)
 800510c:	465b      	mov	r3, fp
 800510e:	2900      	cmp	r1, #0
 8005110:	f000 8081 	beq.w	8005216 <_strtod_l+0x91e>
 8005114:	ea02 010b 	and.w	r1, r2, fp
 8005118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800511c:	dc7b      	bgt.n	8005216 <_strtod_l+0x91e>
 800511e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005122:	f77f aea9 	ble.w	8004e78 <_strtod_l+0x580>
 8005126:	4b4d      	ldr	r3, [pc, #308]	; (800525c <_strtod_l+0x964>)
 8005128:	4650      	mov	r0, sl
 800512a:	4659      	mov	r1, fp
 800512c:	2200      	movs	r2, #0
 800512e:	f7fb fa6b 	bl	8000608 <__aeabi_dmul>
 8005132:	460b      	mov	r3, r1
 8005134:	4303      	orrs	r3, r0
 8005136:	bf08      	it	eq
 8005138:	2322      	moveq	r3, #34	; 0x22
 800513a:	4682      	mov	sl, r0
 800513c:	468b      	mov	fp, r1
 800513e:	bf08      	it	eq
 8005140:	6023      	streq	r3, [r4, #0]
 8005142:	e62b      	b.n	8004d9c <_strtod_l+0x4a4>
 8005144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	ea03 0a0a 	and.w	sl, r3, sl
 8005150:	e6e3      	b.n	8004f1a <_strtod_l+0x622>
 8005152:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005156:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800515a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800515e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005162:	fa01 f308 	lsl.w	r3, r1, r8
 8005166:	9308      	str	r3, [sp, #32]
 8005168:	910d      	str	r1, [sp, #52]	; 0x34
 800516a:	e746      	b.n	8004ffa <_strtod_l+0x702>
 800516c:	2300      	movs	r3, #0
 800516e:	9308      	str	r3, [sp, #32]
 8005170:	2301      	movs	r3, #1
 8005172:	930d      	str	r3, [sp, #52]	; 0x34
 8005174:	e741      	b.n	8004ffa <_strtod_l+0x702>
 8005176:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005178:	4642      	mov	r2, r8
 800517a:	4620      	mov	r0, r4
 800517c:	f001 febe 	bl	8006efc <__lshift>
 8005180:	9018      	str	r0, [sp, #96]	; 0x60
 8005182:	2800      	cmp	r0, #0
 8005184:	f47f af6b 	bne.w	800505e <_strtod_l+0x766>
 8005188:	e5fe      	b.n	8004d88 <_strtod_l+0x490>
 800518a:	465f      	mov	r7, fp
 800518c:	d16e      	bne.n	800526c <_strtod_l+0x974>
 800518e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005194:	b342      	cbz	r2, 80051e8 <_strtod_l+0x8f0>
 8005196:	4a32      	ldr	r2, [pc, #200]	; (8005260 <_strtod_l+0x968>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d128      	bne.n	80051ee <_strtod_l+0x8f6>
 800519c:	9b04      	ldr	r3, [sp, #16]
 800519e:	4651      	mov	r1, sl
 80051a0:	b1eb      	cbz	r3, 80051de <_strtod_l+0x8e6>
 80051a2:	4b2d      	ldr	r3, [pc, #180]	; (8005258 <_strtod_l+0x960>)
 80051a4:	403b      	ands	r3, r7
 80051a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051ae:	d819      	bhi.n	80051e4 <_strtod_l+0x8ec>
 80051b0:	0d1b      	lsrs	r3, r3, #20
 80051b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	4299      	cmp	r1, r3
 80051bc:	d117      	bne.n	80051ee <_strtod_l+0x8f6>
 80051be:	4b29      	ldr	r3, [pc, #164]	; (8005264 <_strtod_l+0x96c>)
 80051c0:	429f      	cmp	r7, r3
 80051c2:	d102      	bne.n	80051ca <_strtod_l+0x8d2>
 80051c4:	3101      	adds	r1, #1
 80051c6:	f43f addf 	beq.w	8004d88 <_strtod_l+0x490>
 80051ca:	4b23      	ldr	r3, [pc, #140]	; (8005258 <_strtod_l+0x960>)
 80051cc:	403b      	ands	r3, r7
 80051ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80051d2:	f04f 0a00 	mov.w	sl, #0
 80051d6:	9b04      	ldr	r3, [sp, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1a4      	bne.n	8005126 <_strtod_l+0x82e>
 80051dc:	e5de      	b.n	8004d9c <_strtod_l+0x4a4>
 80051de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e2:	e7ea      	b.n	80051ba <_strtod_l+0x8c2>
 80051e4:	4613      	mov	r3, r2
 80051e6:	e7e8      	b.n	80051ba <_strtod_l+0x8c2>
 80051e8:	ea53 030a 	orrs.w	r3, r3, sl
 80051ec:	d08c      	beq.n	8005108 <_strtod_l+0x810>
 80051ee:	9b08      	ldr	r3, [sp, #32]
 80051f0:	b1db      	cbz	r3, 800522a <_strtod_l+0x932>
 80051f2:	423b      	tst	r3, r7
 80051f4:	d0ef      	beq.n	80051d6 <_strtod_l+0x8de>
 80051f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f8:	9a04      	ldr	r2, [sp, #16]
 80051fa:	4650      	mov	r0, sl
 80051fc:	4659      	mov	r1, fp
 80051fe:	b1c3      	cbz	r3, 8005232 <_strtod_l+0x93a>
 8005200:	f7ff fb5e 	bl	80048c0 <sulp>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	ec51 0b18 	vmov	r0, r1, d8
 800520c:	f7fb f846 	bl	800029c <__adddf3>
 8005210:	4682      	mov	sl, r0
 8005212:	468b      	mov	fp, r1
 8005214:	e7df      	b.n	80051d6 <_strtod_l+0x8de>
 8005216:	4013      	ands	r3, r2
 8005218:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800521c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005220:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005224:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005228:	e7d5      	b.n	80051d6 <_strtod_l+0x8de>
 800522a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800522c:	ea13 0f0a 	tst.w	r3, sl
 8005230:	e7e0      	b.n	80051f4 <_strtod_l+0x8fc>
 8005232:	f7ff fb45 	bl	80048c0 <sulp>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	ec51 0b18 	vmov	r0, r1, d8
 800523e:	f7fb f82b 	bl	8000298 <__aeabi_dsub>
 8005242:	2200      	movs	r2, #0
 8005244:	2300      	movs	r3, #0
 8005246:	4682      	mov	sl, r0
 8005248:	468b      	mov	fp, r1
 800524a:	f7fb fc45 	bl	8000ad8 <__aeabi_dcmpeq>
 800524e:	2800      	cmp	r0, #0
 8005250:	d0c1      	beq.n	80051d6 <_strtod_l+0x8de>
 8005252:	e611      	b.n	8004e78 <_strtod_l+0x580>
 8005254:	fffffc02 	.word	0xfffffc02
 8005258:	7ff00000 	.word	0x7ff00000
 800525c:	39500000 	.word	0x39500000
 8005260:	000fffff 	.word	0x000fffff
 8005264:	7fefffff 	.word	0x7fefffff
 8005268:	080084e0 	.word	0x080084e0
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	f002 f832 	bl	80072d8 <__ratio>
 8005274:	ec59 8b10 	vmov	r8, r9, d0
 8005278:	ee10 0a10 	vmov	r0, s0
 800527c:	2200      	movs	r2, #0
 800527e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005282:	4649      	mov	r1, r9
 8005284:	f7fb fc3c 	bl	8000b00 <__aeabi_dcmple>
 8005288:	2800      	cmp	r0, #0
 800528a:	d07a      	beq.n	8005382 <_strtod_l+0xa8a>
 800528c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d04a      	beq.n	8005328 <_strtod_l+0xa30>
 8005292:	4b95      	ldr	r3, [pc, #596]	; (80054e8 <_strtod_l+0xbf0>)
 8005294:	2200      	movs	r2, #0
 8005296:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800529a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80054e8 <_strtod_l+0xbf0>
 800529e:	f04f 0800 	mov.w	r8, #0
 80052a2:	4b92      	ldr	r3, [pc, #584]	; (80054ec <_strtod_l+0xbf4>)
 80052a4:	403b      	ands	r3, r7
 80052a6:	930d      	str	r3, [sp, #52]	; 0x34
 80052a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052aa:	4b91      	ldr	r3, [pc, #580]	; (80054f0 <_strtod_l+0xbf8>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	f040 80b0 	bne.w	8005412 <_strtod_l+0xb1a>
 80052b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80052ba:	ec4b ab10 	vmov	d0, sl, fp
 80052be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052c2:	f001 ff31 	bl	8007128 <__ulp>
 80052c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052ca:	ec53 2b10 	vmov	r2, r3, d0
 80052ce:	f7fb f99b 	bl	8000608 <__aeabi_dmul>
 80052d2:	4652      	mov	r2, sl
 80052d4:	465b      	mov	r3, fp
 80052d6:	f7fa ffe1 	bl	800029c <__adddf3>
 80052da:	460b      	mov	r3, r1
 80052dc:	4983      	ldr	r1, [pc, #524]	; (80054ec <_strtod_l+0xbf4>)
 80052de:	4a85      	ldr	r2, [pc, #532]	; (80054f4 <_strtod_l+0xbfc>)
 80052e0:	4019      	ands	r1, r3
 80052e2:	4291      	cmp	r1, r2
 80052e4:	4682      	mov	sl, r0
 80052e6:	d960      	bls.n	80053aa <_strtod_l+0xab2>
 80052e8:	ee18 3a90 	vmov	r3, s17
 80052ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d104      	bne.n	80052fe <_strtod_l+0xa06>
 80052f4:	ee18 3a10 	vmov	r3, s16
 80052f8:	3301      	adds	r3, #1
 80052fa:	f43f ad45 	beq.w	8004d88 <_strtod_l+0x490>
 80052fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005500 <_strtod_l+0xc08>
 8005302:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005308:	4620      	mov	r0, r4
 800530a:	f001 fbdb 	bl	8006ac4 <_Bfree>
 800530e:	9905      	ldr	r1, [sp, #20]
 8005310:	4620      	mov	r0, r4
 8005312:	f001 fbd7 	bl	8006ac4 <_Bfree>
 8005316:	4631      	mov	r1, r6
 8005318:	4620      	mov	r0, r4
 800531a:	f001 fbd3 	bl	8006ac4 <_Bfree>
 800531e:	4629      	mov	r1, r5
 8005320:	4620      	mov	r0, r4
 8005322:	f001 fbcf 	bl	8006ac4 <_Bfree>
 8005326:	e61a      	b.n	8004f5e <_strtod_l+0x666>
 8005328:	f1ba 0f00 	cmp.w	sl, #0
 800532c:	d11b      	bne.n	8005366 <_strtod_l+0xa6e>
 800532e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005332:	b9f3      	cbnz	r3, 8005372 <_strtod_l+0xa7a>
 8005334:	4b6c      	ldr	r3, [pc, #432]	; (80054e8 <_strtod_l+0xbf0>)
 8005336:	2200      	movs	r2, #0
 8005338:	4640      	mov	r0, r8
 800533a:	4649      	mov	r1, r9
 800533c:	f7fb fbd6 	bl	8000aec <__aeabi_dcmplt>
 8005340:	b9d0      	cbnz	r0, 8005378 <_strtod_l+0xa80>
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	4b6c      	ldr	r3, [pc, #432]	; (80054f8 <_strtod_l+0xc00>)
 8005348:	2200      	movs	r2, #0
 800534a:	f7fb f95d 	bl	8000608 <__aeabi_dmul>
 800534e:	4680      	mov	r8, r0
 8005350:	4689      	mov	r9, r1
 8005352:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005356:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800535a:	9315      	str	r3, [sp, #84]	; 0x54
 800535c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005360:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005364:	e79d      	b.n	80052a2 <_strtod_l+0x9aa>
 8005366:	f1ba 0f01 	cmp.w	sl, #1
 800536a:	d102      	bne.n	8005372 <_strtod_l+0xa7a>
 800536c:	2f00      	cmp	r7, #0
 800536e:	f43f ad83 	beq.w	8004e78 <_strtod_l+0x580>
 8005372:	4b62      	ldr	r3, [pc, #392]	; (80054fc <_strtod_l+0xc04>)
 8005374:	2200      	movs	r2, #0
 8005376:	e78e      	b.n	8005296 <_strtod_l+0x99e>
 8005378:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80054f8 <_strtod_l+0xc00>
 800537c:	f04f 0800 	mov.w	r8, #0
 8005380:	e7e7      	b.n	8005352 <_strtod_l+0xa5a>
 8005382:	4b5d      	ldr	r3, [pc, #372]	; (80054f8 <_strtod_l+0xc00>)
 8005384:	4640      	mov	r0, r8
 8005386:	4649      	mov	r1, r9
 8005388:	2200      	movs	r2, #0
 800538a:	f7fb f93d 	bl	8000608 <__aeabi_dmul>
 800538e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005390:	4680      	mov	r8, r0
 8005392:	4689      	mov	r9, r1
 8005394:	b933      	cbnz	r3, 80053a4 <_strtod_l+0xaac>
 8005396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800539a:	900e      	str	r0, [sp, #56]	; 0x38
 800539c:	930f      	str	r3, [sp, #60]	; 0x3c
 800539e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80053a2:	e7dd      	b.n	8005360 <_strtod_l+0xa68>
 80053a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80053a8:	e7f9      	b.n	800539e <_strtod_l+0xaa6>
 80053aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1a8      	bne.n	8005306 <_strtod_l+0xa0e>
 80053b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053ba:	0d1b      	lsrs	r3, r3, #20
 80053bc:	051b      	lsls	r3, r3, #20
 80053be:	429a      	cmp	r2, r3
 80053c0:	d1a1      	bne.n	8005306 <_strtod_l+0xa0e>
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fb fc67 	bl	8000c98 <__aeabi_d2lz>
 80053ca:	f7fb f8ef 	bl	80005ac <__aeabi_l2d>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4640      	mov	r0, r8
 80053d4:	4649      	mov	r1, r9
 80053d6:	f7fa ff5f 	bl	8000298 <__aeabi_dsub>
 80053da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053e0:	ea43 030a 	orr.w	r3, r3, sl
 80053e4:	4313      	orrs	r3, r2
 80053e6:	4680      	mov	r8, r0
 80053e8:	4689      	mov	r9, r1
 80053ea:	d055      	beq.n	8005498 <_strtod_l+0xba0>
 80053ec:	a336      	add	r3, pc, #216	; (adr r3, 80054c8 <_strtod_l+0xbd0>)
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f7fb fb7b 	bl	8000aec <__aeabi_dcmplt>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f47f acd0 	bne.w	8004d9c <_strtod_l+0x4a4>
 80053fc:	a334      	add	r3, pc, #208	; (adr r3, 80054d0 <_strtod_l+0xbd8>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	4640      	mov	r0, r8
 8005404:	4649      	mov	r1, r9
 8005406:	f7fb fb8f 	bl	8000b28 <__aeabi_dcmpgt>
 800540a:	2800      	cmp	r0, #0
 800540c:	f43f af7b 	beq.w	8005306 <_strtod_l+0xa0e>
 8005410:	e4c4      	b.n	8004d9c <_strtod_l+0x4a4>
 8005412:	9b04      	ldr	r3, [sp, #16]
 8005414:	b333      	cbz	r3, 8005464 <_strtod_l+0xb6c>
 8005416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005418:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800541c:	d822      	bhi.n	8005464 <_strtod_l+0xb6c>
 800541e:	a32e      	add	r3, pc, #184	; (adr r3, 80054d8 <_strtod_l+0xbe0>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	4640      	mov	r0, r8
 8005426:	4649      	mov	r1, r9
 8005428:	f7fb fb6a 	bl	8000b00 <__aeabi_dcmple>
 800542c:	b1a0      	cbz	r0, 8005458 <_strtod_l+0xb60>
 800542e:	4649      	mov	r1, r9
 8005430:	4640      	mov	r0, r8
 8005432:	f7fb fbc1 	bl	8000bb8 <__aeabi_d2uiz>
 8005436:	2801      	cmp	r0, #1
 8005438:	bf38      	it	cc
 800543a:	2001      	movcc	r0, #1
 800543c:	f7fb f86a 	bl	8000514 <__aeabi_ui2d>
 8005440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005442:	4680      	mov	r8, r0
 8005444:	4689      	mov	r9, r1
 8005446:	bb23      	cbnz	r3, 8005492 <_strtod_l+0xb9a>
 8005448:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800544c:	9010      	str	r0, [sp, #64]	; 0x40
 800544e:	9311      	str	r3, [sp, #68]	; 0x44
 8005450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005454:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800545c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	9309      	str	r3, [sp, #36]	; 0x24
 8005464:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005468:	eeb0 0a48 	vmov.f32	s0, s16
 800546c:	eef0 0a68 	vmov.f32	s1, s17
 8005470:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005474:	f001 fe58 	bl	8007128 <__ulp>
 8005478:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800547c:	ec53 2b10 	vmov	r2, r3, d0
 8005480:	f7fb f8c2 	bl	8000608 <__aeabi_dmul>
 8005484:	ec53 2b18 	vmov	r2, r3, d8
 8005488:	f7fa ff08 	bl	800029c <__adddf3>
 800548c:	4682      	mov	sl, r0
 800548e:	468b      	mov	fp, r1
 8005490:	e78d      	b.n	80053ae <_strtod_l+0xab6>
 8005492:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005496:	e7db      	b.n	8005450 <_strtod_l+0xb58>
 8005498:	a311      	add	r3, pc, #68	; (adr r3, 80054e0 <_strtod_l+0xbe8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb fb25 	bl	8000aec <__aeabi_dcmplt>
 80054a2:	e7b2      	b.n	800540a <_strtod_l+0xb12>
 80054a4:	2300      	movs	r3, #0
 80054a6:	930a      	str	r3, [sp, #40]	; 0x28
 80054a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	f7ff ba6b 	b.w	8004988 <_strtod_l+0x90>
 80054b2:	2a65      	cmp	r2, #101	; 0x65
 80054b4:	f43f ab5f 	beq.w	8004b76 <_strtod_l+0x27e>
 80054b8:	2a45      	cmp	r2, #69	; 0x45
 80054ba:	f43f ab5c 	beq.w	8004b76 <_strtod_l+0x27e>
 80054be:	2301      	movs	r3, #1
 80054c0:	f7ff bb94 	b.w	8004bec <_strtod_l+0x2f4>
 80054c4:	f3af 8000 	nop.w
 80054c8:	94a03595 	.word	0x94a03595
 80054cc:	3fdfffff 	.word	0x3fdfffff
 80054d0:	35afe535 	.word	0x35afe535
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	ffc00000 	.word	0xffc00000
 80054dc:	41dfffff 	.word	0x41dfffff
 80054e0:	94a03595 	.word	0x94a03595
 80054e4:	3fcfffff 	.word	0x3fcfffff
 80054e8:	3ff00000 	.word	0x3ff00000
 80054ec:	7ff00000 	.word	0x7ff00000
 80054f0:	7fe00000 	.word	0x7fe00000
 80054f4:	7c9fffff 	.word	0x7c9fffff
 80054f8:	3fe00000 	.word	0x3fe00000
 80054fc:	bff00000 	.word	0xbff00000
 8005500:	7fefffff 	.word	0x7fefffff

08005504 <_strtod_r>:
 8005504:	4b01      	ldr	r3, [pc, #4]	; (800550c <_strtod_r+0x8>)
 8005506:	f7ff b9f7 	b.w	80048f8 <_strtod_l>
 800550a:	bf00      	nop
 800550c:	20000068 	.word	0x20000068

08005510 <_strtol_l.constprop.0>:
 8005510:	2b01      	cmp	r3, #1
 8005512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005516:	d001      	beq.n	800551c <_strtol_l.constprop.0+0xc>
 8005518:	2b24      	cmp	r3, #36	; 0x24
 800551a:	d906      	bls.n	800552a <_strtol_l.constprop.0+0x1a>
 800551c:	f7fe fafe 	bl	8003b1c <__errno>
 8005520:	2316      	movs	r3, #22
 8005522:	6003      	str	r3, [r0, #0]
 8005524:	2000      	movs	r0, #0
 8005526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005610 <_strtol_l.constprop.0+0x100>
 800552e:	460d      	mov	r5, r1
 8005530:	462e      	mov	r6, r5
 8005532:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005536:	f814 700c 	ldrb.w	r7, [r4, ip]
 800553a:	f017 0708 	ands.w	r7, r7, #8
 800553e:	d1f7      	bne.n	8005530 <_strtol_l.constprop.0+0x20>
 8005540:	2c2d      	cmp	r4, #45	; 0x2d
 8005542:	d132      	bne.n	80055aa <_strtol_l.constprop.0+0x9a>
 8005544:	782c      	ldrb	r4, [r5, #0]
 8005546:	2701      	movs	r7, #1
 8005548:	1cb5      	adds	r5, r6, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d05b      	beq.n	8005606 <_strtol_l.constprop.0+0xf6>
 800554e:	2b10      	cmp	r3, #16
 8005550:	d109      	bne.n	8005566 <_strtol_l.constprop.0+0x56>
 8005552:	2c30      	cmp	r4, #48	; 0x30
 8005554:	d107      	bne.n	8005566 <_strtol_l.constprop.0+0x56>
 8005556:	782c      	ldrb	r4, [r5, #0]
 8005558:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800555c:	2c58      	cmp	r4, #88	; 0x58
 800555e:	d14d      	bne.n	80055fc <_strtol_l.constprop.0+0xec>
 8005560:	786c      	ldrb	r4, [r5, #1]
 8005562:	2310      	movs	r3, #16
 8005564:	3502      	adds	r5, #2
 8005566:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800556a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800556e:	f04f 0c00 	mov.w	ip, #0
 8005572:	fbb8 f9f3 	udiv	r9, r8, r3
 8005576:	4666      	mov	r6, ip
 8005578:	fb03 8a19 	mls	sl, r3, r9, r8
 800557c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005580:	f1be 0f09 	cmp.w	lr, #9
 8005584:	d816      	bhi.n	80055b4 <_strtol_l.constprop.0+0xa4>
 8005586:	4674      	mov	r4, lr
 8005588:	42a3      	cmp	r3, r4
 800558a:	dd24      	ble.n	80055d6 <_strtol_l.constprop.0+0xc6>
 800558c:	f1bc 0f00 	cmp.w	ip, #0
 8005590:	db1e      	blt.n	80055d0 <_strtol_l.constprop.0+0xc0>
 8005592:	45b1      	cmp	r9, r6
 8005594:	d31c      	bcc.n	80055d0 <_strtol_l.constprop.0+0xc0>
 8005596:	d101      	bne.n	800559c <_strtol_l.constprop.0+0x8c>
 8005598:	45a2      	cmp	sl, r4
 800559a:	db19      	blt.n	80055d0 <_strtol_l.constprop.0+0xc0>
 800559c:	fb06 4603 	mla	r6, r6, r3, r4
 80055a0:	f04f 0c01 	mov.w	ip, #1
 80055a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055a8:	e7e8      	b.n	800557c <_strtol_l.constprop.0+0x6c>
 80055aa:	2c2b      	cmp	r4, #43	; 0x2b
 80055ac:	bf04      	itt	eq
 80055ae:	782c      	ldrbeq	r4, [r5, #0]
 80055b0:	1cb5      	addeq	r5, r6, #2
 80055b2:	e7ca      	b.n	800554a <_strtol_l.constprop.0+0x3a>
 80055b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80055b8:	f1be 0f19 	cmp.w	lr, #25
 80055bc:	d801      	bhi.n	80055c2 <_strtol_l.constprop.0+0xb2>
 80055be:	3c37      	subs	r4, #55	; 0x37
 80055c0:	e7e2      	b.n	8005588 <_strtol_l.constprop.0+0x78>
 80055c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80055c6:	f1be 0f19 	cmp.w	lr, #25
 80055ca:	d804      	bhi.n	80055d6 <_strtol_l.constprop.0+0xc6>
 80055cc:	3c57      	subs	r4, #87	; 0x57
 80055ce:	e7db      	b.n	8005588 <_strtol_l.constprop.0+0x78>
 80055d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80055d4:	e7e6      	b.n	80055a4 <_strtol_l.constprop.0+0x94>
 80055d6:	f1bc 0f00 	cmp.w	ip, #0
 80055da:	da05      	bge.n	80055e8 <_strtol_l.constprop.0+0xd8>
 80055dc:	2322      	movs	r3, #34	; 0x22
 80055de:	6003      	str	r3, [r0, #0]
 80055e0:	4646      	mov	r6, r8
 80055e2:	b942      	cbnz	r2, 80055f6 <_strtol_l.constprop.0+0xe6>
 80055e4:	4630      	mov	r0, r6
 80055e6:	e79e      	b.n	8005526 <_strtol_l.constprop.0+0x16>
 80055e8:	b107      	cbz	r7, 80055ec <_strtol_l.constprop.0+0xdc>
 80055ea:	4276      	negs	r6, r6
 80055ec:	2a00      	cmp	r2, #0
 80055ee:	d0f9      	beq.n	80055e4 <_strtol_l.constprop.0+0xd4>
 80055f0:	f1bc 0f00 	cmp.w	ip, #0
 80055f4:	d000      	beq.n	80055f8 <_strtol_l.constprop.0+0xe8>
 80055f6:	1e69      	subs	r1, r5, #1
 80055f8:	6011      	str	r1, [r2, #0]
 80055fa:	e7f3      	b.n	80055e4 <_strtol_l.constprop.0+0xd4>
 80055fc:	2430      	movs	r4, #48	; 0x30
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1b1      	bne.n	8005566 <_strtol_l.constprop.0+0x56>
 8005602:	2308      	movs	r3, #8
 8005604:	e7af      	b.n	8005566 <_strtol_l.constprop.0+0x56>
 8005606:	2c30      	cmp	r4, #48	; 0x30
 8005608:	d0a5      	beq.n	8005556 <_strtol_l.constprop.0+0x46>
 800560a:	230a      	movs	r3, #10
 800560c:	e7ab      	b.n	8005566 <_strtol_l.constprop.0+0x56>
 800560e:	bf00      	nop
 8005610:	08008509 	.word	0x08008509

08005614 <_strtol_r>:
 8005614:	f7ff bf7c 	b.w	8005510 <_strtol_l.constprop.0>

08005618 <quorem>:
 8005618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	6903      	ldr	r3, [r0, #16]
 800561e:	690c      	ldr	r4, [r1, #16]
 8005620:	42a3      	cmp	r3, r4
 8005622:	4607      	mov	r7, r0
 8005624:	f2c0 8081 	blt.w	800572a <quorem+0x112>
 8005628:	3c01      	subs	r4, #1
 800562a:	f101 0814 	add.w	r8, r1, #20
 800562e:	f100 0514 	add.w	r5, r0, #20
 8005632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800563c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005640:	3301      	adds	r3, #1
 8005642:	429a      	cmp	r2, r3
 8005644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800564c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005650:	d331      	bcc.n	80056b6 <quorem+0x9e>
 8005652:	f04f 0e00 	mov.w	lr, #0
 8005656:	4640      	mov	r0, r8
 8005658:	46ac      	mov	ip, r5
 800565a:	46f2      	mov	sl, lr
 800565c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005660:	b293      	uxth	r3, r2
 8005662:	fb06 e303 	mla	r3, r6, r3, lr
 8005666:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800566a:	b29b      	uxth	r3, r3
 800566c:	ebaa 0303 	sub.w	r3, sl, r3
 8005670:	f8dc a000 	ldr.w	sl, [ip]
 8005674:	0c12      	lsrs	r2, r2, #16
 8005676:	fa13 f38a 	uxtah	r3, r3, sl
 800567a:	fb06 e202 	mla	r2, r6, r2, lr
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	9b00      	ldr	r3, [sp, #0]
 8005682:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005686:	b292      	uxth	r2, r2
 8005688:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800568c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005690:	f8bd 3000 	ldrh.w	r3, [sp]
 8005694:	4581      	cmp	r9, r0
 8005696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800569a:	f84c 3b04 	str.w	r3, [ip], #4
 800569e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056a2:	d2db      	bcs.n	800565c <quorem+0x44>
 80056a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80056a8:	b92b      	cbnz	r3, 80056b6 <quorem+0x9e>
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	3b04      	subs	r3, #4
 80056ae:	429d      	cmp	r5, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	d32e      	bcc.n	8005712 <quorem+0xfa>
 80056b4:	613c      	str	r4, [r7, #16]
 80056b6:	4638      	mov	r0, r7
 80056b8:	f001 fc90 	bl	8006fdc <__mcmp>
 80056bc:	2800      	cmp	r0, #0
 80056be:	db24      	blt.n	800570a <quorem+0xf2>
 80056c0:	3601      	adds	r6, #1
 80056c2:	4628      	mov	r0, r5
 80056c4:	f04f 0c00 	mov.w	ip, #0
 80056c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80056cc:	f8d0 e000 	ldr.w	lr, [r0]
 80056d0:	b293      	uxth	r3, r2
 80056d2:	ebac 0303 	sub.w	r3, ip, r3
 80056d6:	0c12      	lsrs	r2, r2, #16
 80056d8:	fa13 f38e 	uxtah	r3, r3, lr
 80056dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ea:	45c1      	cmp	r9, r8
 80056ec:	f840 3b04 	str.w	r3, [r0], #4
 80056f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056f4:	d2e8      	bcs.n	80056c8 <quorem+0xb0>
 80056f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056fe:	b922      	cbnz	r2, 800570a <quorem+0xf2>
 8005700:	3b04      	subs	r3, #4
 8005702:	429d      	cmp	r5, r3
 8005704:	461a      	mov	r2, r3
 8005706:	d30a      	bcc.n	800571e <quorem+0x106>
 8005708:	613c      	str	r4, [r7, #16]
 800570a:	4630      	mov	r0, r6
 800570c:	b003      	add	sp, #12
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	3b04      	subs	r3, #4
 8005716:	2a00      	cmp	r2, #0
 8005718:	d1cc      	bne.n	80056b4 <quorem+0x9c>
 800571a:	3c01      	subs	r4, #1
 800571c:	e7c7      	b.n	80056ae <quorem+0x96>
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	3b04      	subs	r3, #4
 8005722:	2a00      	cmp	r2, #0
 8005724:	d1f0      	bne.n	8005708 <quorem+0xf0>
 8005726:	3c01      	subs	r4, #1
 8005728:	e7eb      	b.n	8005702 <quorem+0xea>
 800572a:	2000      	movs	r0, #0
 800572c:	e7ee      	b.n	800570c <quorem+0xf4>
	...

08005730 <_dtoa_r>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	ed2d 8b04 	vpush	{d8-d9}
 8005738:	ec57 6b10 	vmov	r6, r7, d0
 800573c:	b093      	sub	sp, #76	; 0x4c
 800573e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005744:	9106      	str	r1, [sp, #24]
 8005746:	ee10 aa10 	vmov	sl, s0
 800574a:	4604      	mov	r4, r0
 800574c:	9209      	str	r2, [sp, #36]	; 0x24
 800574e:	930c      	str	r3, [sp, #48]	; 0x30
 8005750:	46bb      	mov	fp, r7
 8005752:	b975      	cbnz	r5, 8005772 <_dtoa_r+0x42>
 8005754:	2010      	movs	r0, #16
 8005756:	f001 f94d 	bl	80069f4 <malloc>
 800575a:	4602      	mov	r2, r0
 800575c:	6260      	str	r0, [r4, #36]	; 0x24
 800575e:	b920      	cbnz	r0, 800576a <_dtoa_r+0x3a>
 8005760:	4ba7      	ldr	r3, [pc, #668]	; (8005a00 <_dtoa_r+0x2d0>)
 8005762:	21ea      	movs	r1, #234	; 0xea
 8005764:	48a7      	ldr	r0, [pc, #668]	; (8005a04 <_dtoa_r+0x2d4>)
 8005766:	f002 f8bd 	bl	80078e4 <__assert_func>
 800576a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800576e:	6005      	str	r5, [r0, #0]
 8005770:	60c5      	str	r5, [r0, #12]
 8005772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	b151      	cbz	r1, 800578e <_dtoa_r+0x5e>
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	604a      	str	r2, [r1, #4]
 800577c:	2301      	movs	r3, #1
 800577e:	4093      	lsls	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
 8005782:	4620      	mov	r0, r4
 8005784:	f001 f99e 	bl	8006ac4 <_Bfree>
 8005788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	1e3b      	subs	r3, r7, #0
 8005790:	bfaa      	itet	ge
 8005792:	2300      	movge	r3, #0
 8005794:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005798:	f8c8 3000 	strge.w	r3, [r8]
 800579c:	4b9a      	ldr	r3, [pc, #616]	; (8005a08 <_dtoa_r+0x2d8>)
 800579e:	bfbc      	itt	lt
 80057a0:	2201      	movlt	r2, #1
 80057a2:	f8c8 2000 	strlt.w	r2, [r8]
 80057a6:	ea33 030b 	bics.w	r3, r3, fp
 80057aa:	d11b      	bne.n	80057e4 <_dtoa_r+0xb4>
 80057ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057b8:	4333      	orrs	r3, r6
 80057ba:	f000 8592 	beq.w	80062e2 <_dtoa_r+0xbb2>
 80057be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057c0:	b963      	cbnz	r3, 80057dc <_dtoa_r+0xac>
 80057c2:	4b92      	ldr	r3, [pc, #584]	; (8005a0c <_dtoa_r+0x2dc>)
 80057c4:	e022      	b.n	800580c <_dtoa_r+0xdc>
 80057c6:	4b92      	ldr	r3, [pc, #584]	; (8005a10 <_dtoa_r+0x2e0>)
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	3308      	adds	r3, #8
 80057cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	9801      	ldr	r0, [sp, #4]
 80057d2:	b013      	add	sp, #76	; 0x4c
 80057d4:	ecbd 8b04 	vpop	{d8-d9}
 80057d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057dc:	4b8b      	ldr	r3, [pc, #556]	; (8005a0c <_dtoa_r+0x2dc>)
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	3303      	adds	r3, #3
 80057e2:	e7f3      	b.n	80057cc <_dtoa_r+0x9c>
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	4650      	mov	r0, sl
 80057ea:	4659      	mov	r1, fp
 80057ec:	f7fb f974 	bl	8000ad8 <__aeabi_dcmpeq>
 80057f0:	ec4b ab19 	vmov	d9, sl, fp
 80057f4:	4680      	mov	r8, r0
 80057f6:	b158      	cbz	r0, 8005810 <_dtoa_r+0xe0>
 80057f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057fa:	2301      	movs	r3, #1
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 856b 	beq.w	80062dc <_dtoa_r+0xbac>
 8005806:	4883      	ldr	r0, [pc, #524]	; (8005a14 <_dtoa_r+0x2e4>)
 8005808:	6018      	str	r0, [r3, #0]
 800580a:	1e43      	subs	r3, r0, #1
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	e7df      	b.n	80057d0 <_dtoa_r+0xa0>
 8005810:	ec4b ab10 	vmov	d0, sl, fp
 8005814:	aa10      	add	r2, sp, #64	; 0x40
 8005816:	a911      	add	r1, sp, #68	; 0x44
 8005818:	4620      	mov	r0, r4
 800581a:	f001 fd01 	bl	8007220 <__d2b>
 800581e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005822:	ee08 0a10 	vmov	s16, r0
 8005826:	2d00      	cmp	r5, #0
 8005828:	f000 8084 	beq.w	8005934 <_dtoa_r+0x204>
 800582c:	ee19 3a90 	vmov	r3, s19
 8005830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005834:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005838:	4656      	mov	r6, sl
 800583a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800583e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005842:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005846:	4b74      	ldr	r3, [pc, #464]	; (8005a18 <_dtoa_r+0x2e8>)
 8005848:	2200      	movs	r2, #0
 800584a:	4630      	mov	r0, r6
 800584c:	4639      	mov	r1, r7
 800584e:	f7fa fd23 	bl	8000298 <__aeabi_dsub>
 8005852:	a365      	add	r3, pc, #404	; (adr r3, 80059e8 <_dtoa_r+0x2b8>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fed6 	bl	8000608 <__aeabi_dmul>
 800585c:	a364      	add	r3, pc, #400	; (adr r3, 80059f0 <_dtoa_r+0x2c0>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fd1b 	bl	800029c <__adddf3>
 8005866:	4606      	mov	r6, r0
 8005868:	4628      	mov	r0, r5
 800586a:	460f      	mov	r7, r1
 800586c:	f7fa fe62 	bl	8000534 <__aeabi_i2d>
 8005870:	a361      	add	r3, pc, #388	; (adr r3, 80059f8 <_dtoa_r+0x2c8>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fec7 	bl	8000608 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4630      	mov	r0, r6
 8005880:	4639      	mov	r1, r7
 8005882:	f7fa fd0b 	bl	800029c <__adddf3>
 8005886:	4606      	mov	r6, r0
 8005888:	460f      	mov	r7, r1
 800588a:	f7fb f96d 	bl	8000b68 <__aeabi_d2iz>
 800588e:	2200      	movs	r2, #0
 8005890:	9000      	str	r0, [sp, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	4630      	mov	r0, r6
 8005896:	4639      	mov	r1, r7
 8005898:	f7fb f928 	bl	8000aec <__aeabi_dcmplt>
 800589c:	b150      	cbz	r0, 80058b4 <_dtoa_r+0x184>
 800589e:	9800      	ldr	r0, [sp, #0]
 80058a0:	f7fa fe48 	bl	8000534 <__aeabi_i2d>
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	f7fb f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80058ac:	b910      	cbnz	r0, 80058b4 <_dtoa_r+0x184>
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	9b00      	ldr	r3, [sp, #0]
 80058b6:	2b16      	cmp	r3, #22
 80058b8:	d85a      	bhi.n	8005970 <_dtoa_r+0x240>
 80058ba:	9a00      	ldr	r2, [sp, #0]
 80058bc:	4b57      	ldr	r3, [pc, #348]	; (8005a1c <_dtoa_r+0x2ec>)
 80058be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	ec51 0b19 	vmov	r0, r1, d9
 80058ca:	f7fb f90f 	bl	8000aec <__aeabi_dcmplt>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d050      	beq.n	8005974 <_dtoa_r+0x244>
 80058d2:	9b00      	ldr	r3, [sp, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2300      	movs	r3, #0
 80058da:	930b      	str	r3, [sp, #44]	; 0x2c
 80058dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058de:	1b5d      	subs	r5, r3, r5
 80058e0:	1e6b      	subs	r3, r5, #1
 80058e2:	9305      	str	r3, [sp, #20]
 80058e4:	bf45      	ittet	mi
 80058e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80058ea:	9304      	strmi	r3, [sp, #16]
 80058ec:	2300      	movpl	r3, #0
 80058ee:	2300      	movmi	r3, #0
 80058f0:	bf4c      	ite	mi
 80058f2:	9305      	strmi	r3, [sp, #20]
 80058f4:	9304      	strpl	r3, [sp, #16]
 80058f6:	9b00      	ldr	r3, [sp, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	db3d      	blt.n	8005978 <_dtoa_r+0x248>
 80058fc:	9b05      	ldr	r3, [sp, #20]
 80058fe:	9a00      	ldr	r2, [sp, #0]
 8005900:	920a      	str	r2, [sp, #40]	; 0x28
 8005902:	4413      	add	r3, r2
 8005904:	9305      	str	r3, [sp, #20]
 8005906:	2300      	movs	r3, #0
 8005908:	9307      	str	r3, [sp, #28]
 800590a:	9b06      	ldr	r3, [sp, #24]
 800590c:	2b09      	cmp	r3, #9
 800590e:	f200 8089 	bhi.w	8005a24 <_dtoa_r+0x2f4>
 8005912:	2b05      	cmp	r3, #5
 8005914:	bfc4      	itt	gt
 8005916:	3b04      	subgt	r3, #4
 8005918:	9306      	strgt	r3, [sp, #24]
 800591a:	9b06      	ldr	r3, [sp, #24]
 800591c:	f1a3 0302 	sub.w	r3, r3, #2
 8005920:	bfcc      	ite	gt
 8005922:	2500      	movgt	r5, #0
 8005924:	2501      	movle	r5, #1
 8005926:	2b03      	cmp	r3, #3
 8005928:	f200 8087 	bhi.w	8005a3a <_dtoa_r+0x30a>
 800592c:	e8df f003 	tbb	[pc, r3]
 8005930:	59383a2d 	.word	0x59383a2d
 8005934:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005938:	441d      	add	r5, r3
 800593a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800593e:	2b20      	cmp	r3, #32
 8005940:	bfc1      	itttt	gt
 8005942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005946:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800594a:	fa0b f303 	lslgt.w	r3, fp, r3
 800594e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005952:	bfda      	itte	le
 8005954:	f1c3 0320 	rsble	r3, r3, #32
 8005958:	fa06 f003 	lslle.w	r0, r6, r3
 800595c:	4318      	orrgt	r0, r3
 800595e:	f7fa fdd9 	bl	8000514 <__aeabi_ui2d>
 8005962:	2301      	movs	r3, #1
 8005964:	4606      	mov	r6, r0
 8005966:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800596a:	3d01      	subs	r5, #1
 800596c:	930e      	str	r3, [sp, #56]	; 0x38
 800596e:	e76a      	b.n	8005846 <_dtoa_r+0x116>
 8005970:	2301      	movs	r3, #1
 8005972:	e7b2      	b.n	80058da <_dtoa_r+0x1aa>
 8005974:	900b      	str	r0, [sp, #44]	; 0x2c
 8005976:	e7b1      	b.n	80058dc <_dtoa_r+0x1ac>
 8005978:	9b04      	ldr	r3, [sp, #16]
 800597a:	9a00      	ldr	r2, [sp, #0]
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	4253      	negs	r3, r2
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	2300      	movs	r3, #0
 8005986:	930a      	str	r3, [sp, #40]	; 0x28
 8005988:	e7bf      	b.n	800590a <_dtoa_r+0x1da>
 800598a:	2300      	movs	r3, #0
 800598c:	9308      	str	r3, [sp, #32]
 800598e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	dc55      	bgt.n	8005a40 <_dtoa_r+0x310>
 8005994:	2301      	movs	r3, #1
 8005996:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800599a:	461a      	mov	r2, r3
 800599c:	9209      	str	r2, [sp, #36]	; 0x24
 800599e:	e00c      	b.n	80059ba <_dtoa_r+0x28a>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e7f3      	b.n	800598c <_dtoa_r+0x25c>
 80059a4:	2300      	movs	r3, #0
 80059a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a8:	9308      	str	r3, [sp, #32]
 80059aa:	9b00      	ldr	r3, [sp, #0]
 80059ac:	4413      	add	r3, r2
 80059ae:	9302      	str	r3, [sp, #8]
 80059b0:	3301      	adds	r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	9303      	str	r3, [sp, #12]
 80059b6:	bfb8      	it	lt
 80059b8:	2301      	movlt	r3, #1
 80059ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059bc:	2200      	movs	r2, #0
 80059be:	6042      	str	r2, [r0, #4]
 80059c0:	2204      	movs	r2, #4
 80059c2:	f102 0614 	add.w	r6, r2, #20
 80059c6:	429e      	cmp	r6, r3
 80059c8:	6841      	ldr	r1, [r0, #4]
 80059ca:	d93d      	bls.n	8005a48 <_dtoa_r+0x318>
 80059cc:	4620      	mov	r0, r4
 80059ce:	f001 f839 	bl	8006a44 <_Balloc>
 80059d2:	9001      	str	r0, [sp, #4]
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d13b      	bne.n	8005a50 <_dtoa_r+0x320>
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <_dtoa_r+0x2f0>)
 80059da:	4602      	mov	r2, r0
 80059dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059e0:	e6c0      	b.n	8005764 <_dtoa_r+0x34>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7df      	b.n	80059a6 <_dtoa_r+0x276>
 80059e6:	bf00      	nop
 80059e8:	636f4361 	.word	0x636f4361
 80059ec:	3fd287a7 	.word	0x3fd287a7
 80059f0:	8b60c8b3 	.word	0x8b60c8b3
 80059f4:	3fc68a28 	.word	0x3fc68a28
 80059f8:	509f79fb 	.word	0x509f79fb
 80059fc:	3fd34413 	.word	0x3fd34413
 8005a00:	08008616 	.word	0x08008616
 8005a04:	0800862d 	.word	0x0800862d
 8005a08:	7ff00000 	.word	0x7ff00000
 8005a0c:	08008612 	.word	0x08008612
 8005a10:	08008609 	.word	0x08008609
 8005a14:	0800848d 	.word	0x0800848d
 8005a18:	3ff80000 	.word	0x3ff80000
 8005a1c:	08008798 	.word	0x08008798
 8005a20:	08008688 	.word	0x08008688
 8005a24:	2501      	movs	r5, #1
 8005a26:	2300      	movs	r3, #0
 8005a28:	9306      	str	r3, [sp, #24]
 8005a2a:	9508      	str	r5, [sp, #32]
 8005a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2312      	movs	r3, #18
 8005a38:	e7b0      	b.n	800599c <_dtoa_r+0x26c>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	9308      	str	r3, [sp, #32]
 8005a3e:	e7f5      	b.n	8005a2c <_dtoa_r+0x2fc>
 8005a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a46:	e7b8      	b.n	80059ba <_dtoa_r+0x28a>
 8005a48:	3101      	adds	r1, #1
 8005a4a:	6041      	str	r1, [r0, #4]
 8005a4c:	0052      	lsls	r2, r2, #1
 8005a4e:	e7b8      	b.n	80059c2 <_dtoa_r+0x292>
 8005a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a52:	9a01      	ldr	r2, [sp, #4]
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	2b0e      	cmp	r3, #14
 8005a5a:	f200 809d 	bhi.w	8005b98 <_dtoa_r+0x468>
 8005a5e:	2d00      	cmp	r5, #0
 8005a60:	f000 809a 	beq.w	8005b98 <_dtoa_r+0x468>
 8005a64:	9b00      	ldr	r3, [sp, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	dd32      	ble.n	8005ad0 <_dtoa_r+0x3a0>
 8005a6a:	4ab7      	ldr	r2, [pc, #732]	; (8005d48 <_dtoa_r+0x618>)
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a78:	9b00      	ldr	r3, [sp, #0]
 8005a7a:	05d8      	lsls	r0, r3, #23
 8005a7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005a80:	d516      	bpl.n	8005ab0 <_dtoa_r+0x380>
 8005a82:	4bb2      	ldr	r3, [pc, #712]	; (8005d4c <_dtoa_r+0x61c>)
 8005a84:	ec51 0b19 	vmov	r0, r1, d9
 8005a88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a8c:	f7fa fee6 	bl	800085c <__aeabi_ddiv>
 8005a90:	f007 070f 	and.w	r7, r7, #15
 8005a94:	4682      	mov	sl, r0
 8005a96:	468b      	mov	fp, r1
 8005a98:	2503      	movs	r5, #3
 8005a9a:	4eac      	ldr	r6, [pc, #688]	; (8005d4c <_dtoa_r+0x61c>)
 8005a9c:	b957      	cbnz	r7, 8005ab4 <_dtoa_r+0x384>
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	4650      	mov	r0, sl
 8005aa4:	4659      	mov	r1, fp
 8005aa6:	f7fa fed9 	bl	800085c <__aeabi_ddiv>
 8005aaa:	4682      	mov	sl, r0
 8005aac:	468b      	mov	fp, r1
 8005aae:	e028      	b.n	8005b02 <_dtoa_r+0x3d2>
 8005ab0:	2502      	movs	r5, #2
 8005ab2:	e7f2      	b.n	8005a9a <_dtoa_r+0x36a>
 8005ab4:	07f9      	lsls	r1, r7, #31
 8005ab6:	d508      	bpl.n	8005aca <_dtoa_r+0x39a>
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ac0:	f7fa fda2 	bl	8000608 <__aeabi_dmul>
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	4680      	mov	r8, r0
 8005ac8:	4689      	mov	r9, r1
 8005aca:	107f      	asrs	r7, r7, #1
 8005acc:	3608      	adds	r6, #8
 8005ace:	e7e5      	b.n	8005a9c <_dtoa_r+0x36c>
 8005ad0:	f000 809b 	beq.w	8005c0a <_dtoa_r+0x4da>
 8005ad4:	9b00      	ldr	r3, [sp, #0]
 8005ad6:	4f9d      	ldr	r7, [pc, #628]	; (8005d4c <_dtoa_r+0x61c>)
 8005ad8:	425e      	negs	r6, r3
 8005ada:	4b9b      	ldr	r3, [pc, #620]	; (8005d48 <_dtoa_r+0x618>)
 8005adc:	f006 020f 	and.w	r2, r6, #15
 8005ae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	ec51 0b19 	vmov	r0, r1, d9
 8005aec:	f7fa fd8c 	bl	8000608 <__aeabi_dmul>
 8005af0:	1136      	asrs	r6, r6, #4
 8005af2:	4682      	mov	sl, r0
 8005af4:	468b      	mov	fp, r1
 8005af6:	2300      	movs	r3, #0
 8005af8:	2502      	movs	r5, #2
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	d17a      	bne.n	8005bf4 <_dtoa_r+0x4c4>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1d3      	bne.n	8005aaa <_dtoa_r+0x37a>
 8005b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8082 	beq.w	8005c0e <_dtoa_r+0x4de>
 8005b0a:	4b91      	ldr	r3, [pc, #580]	; (8005d50 <_dtoa_r+0x620>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4650      	mov	r0, sl
 8005b10:	4659      	mov	r1, fp
 8005b12:	f7fa ffeb 	bl	8000aec <__aeabi_dcmplt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d079      	beq.n	8005c0e <_dtoa_r+0x4de>
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d076      	beq.n	8005c0e <_dtoa_r+0x4de>
 8005b20:	9b02      	ldr	r3, [sp, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dd36      	ble.n	8005b94 <_dtoa_r+0x464>
 8005b26:	9b00      	ldr	r3, [sp, #0]
 8005b28:	4650      	mov	r0, sl
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	1e5f      	subs	r7, r3, #1
 8005b2e:	2200      	movs	r2, #0
 8005b30:	4b88      	ldr	r3, [pc, #544]	; (8005d54 <_dtoa_r+0x624>)
 8005b32:	f7fa fd69 	bl	8000608 <__aeabi_dmul>
 8005b36:	9e02      	ldr	r6, [sp, #8]
 8005b38:	4682      	mov	sl, r0
 8005b3a:	468b      	mov	fp, r1
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f7fa fcf8 	bl	8000534 <__aeabi_i2d>
 8005b44:	4652      	mov	r2, sl
 8005b46:	465b      	mov	r3, fp
 8005b48:	f7fa fd5e 	bl	8000608 <__aeabi_dmul>
 8005b4c:	4b82      	ldr	r3, [pc, #520]	; (8005d58 <_dtoa_r+0x628>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f7fa fba4 	bl	800029c <__adddf3>
 8005b54:	46d0      	mov	r8, sl
 8005b56:	46d9      	mov	r9, fp
 8005b58:	4682      	mov	sl, r0
 8005b5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	d158      	bne.n	8005c14 <_dtoa_r+0x4e4>
 8005b62:	4b7e      	ldr	r3, [pc, #504]	; (8005d5c <_dtoa_r+0x62c>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fb95 	bl	8000298 <__aeabi_dsub>
 8005b6e:	4652      	mov	r2, sl
 8005b70:	465b      	mov	r3, fp
 8005b72:	4680      	mov	r8, r0
 8005b74:	4689      	mov	r9, r1
 8005b76:	f7fa ffd7 	bl	8000b28 <__aeabi_dcmpgt>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f040 8295 	bne.w	80060aa <_dtoa_r+0x97a>
 8005b80:	4652      	mov	r2, sl
 8005b82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b86:	4640      	mov	r0, r8
 8005b88:	4649      	mov	r1, r9
 8005b8a:	f7fa ffaf 	bl	8000aec <__aeabi_dcmplt>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f040 8289 	bne.w	80060a6 <_dtoa_r+0x976>
 8005b94:	ec5b ab19 	vmov	sl, fp, d9
 8005b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f2c0 8148 	blt.w	8005e30 <_dtoa_r+0x700>
 8005ba0:	9a00      	ldr	r2, [sp, #0]
 8005ba2:	2a0e      	cmp	r2, #14
 8005ba4:	f300 8144 	bgt.w	8005e30 <_dtoa_r+0x700>
 8005ba8:	4b67      	ldr	r3, [pc, #412]	; (8005d48 <_dtoa_r+0x618>)
 8005baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f280 80d5 	bge.w	8005d64 <_dtoa_r+0x634>
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f300 80d1 	bgt.w	8005d64 <_dtoa_r+0x634>
 8005bc2:	f040 826f 	bne.w	80060a4 <_dtoa_r+0x974>
 8005bc6:	4b65      	ldr	r3, [pc, #404]	; (8005d5c <_dtoa_r+0x62c>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fd1b 	bl	8000608 <__aeabi_dmul>
 8005bd2:	4652      	mov	r2, sl
 8005bd4:	465b      	mov	r3, fp
 8005bd6:	f7fa ff9d 	bl	8000b14 <__aeabi_dcmpge>
 8005bda:	9e03      	ldr	r6, [sp, #12]
 8005bdc:	4637      	mov	r7, r6
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f040 8245 	bne.w	800606e <_dtoa_r+0x93e>
 8005be4:	9d01      	ldr	r5, [sp, #4]
 8005be6:	2331      	movs	r3, #49	; 0x31
 8005be8:	f805 3b01 	strb.w	r3, [r5], #1
 8005bec:	9b00      	ldr	r3, [sp, #0]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	e240      	b.n	8006076 <_dtoa_r+0x946>
 8005bf4:	07f2      	lsls	r2, r6, #31
 8005bf6:	d505      	bpl.n	8005c04 <_dtoa_r+0x4d4>
 8005bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfc:	f7fa fd04 	bl	8000608 <__aeabi_dmul>
 8005c00:	3501      	adds	r5, #1
 8005c02:	2301      	movs	r3, #1
 8005c04:	1076      	asrs	r6, r6, #1
 8005c06:	3708      	adds	r7, #8
 8005c08:	e777      	b.n	8005afa <_dtoa_r+0x3ca>
 8005c0a:	2502      	movs	r5, #2
 8005c0c:	e779      	b.n	8005b02 <_dtoa_r+0x3d2>
 8005c0e:	9f00      	ldr	r7, [sp, #0]
 8005c10:	9e03      	ldr	r6, [sp, #12]
 8005c12:	e794      	b.n	8005b3e <_dtoa_r+0x40e>
 8005c14:	9901      	ldr	r1, [sp, #4]
 8005c16:	4b4c      	ldr	r3, [pc, #304]	; (8005d48 <_dtoa_r+0x618>)
 8005c18:	4431      	add	r1, r6
 8005c1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005c1c:	9908      	ldr	r1, [sp, #32]
 8005c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c26:	2900      	cmp	r1, #0
 8005c28:	d043      	beq.n	8005cb2 <_dtoa_r+0x582>
 8005c2a:	494d      	ldr	r1, [pc, #308]	; (8005d60 <_dtoa_r+0x630>)
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f7fa fe15 	bl	800085c <__aeabi_ddiv>
 8005c32:	4652      	mov	r2, sl
 8005c34:	465b      	mov	r3, fp
 8005c36:	f7fa fb2f 	bl	8000298 <__aeabi_dsub>
 8005c3a:	9d01      	ldr	r5, [sp, #4]
 8005c3c:	4682      	mov	sl, r0
 8005c3e:	468b      	mov	fp, r1
 8005c40:	4649      	mov	r1, r9
 8005c42:	4640      	mov	r0, r8
 8005c44:	f7fa ff90 	bl	8000b68 <__aeabi_d2iz>
 8005c48:	4606      	mov	r6, r0
 8005c4a:	f7fa fc73 	bl	8000534 <__aeabi_i2d>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f7fa fb1f 	bl	8000298 <__aeabi_dsub>
 8005c5a:	3630      	adds	r6, #48	; 0x30
 8005c5c:	f805 6b01 	strb.w	r6, [r5], #1
 8005c60:	4652      	mov	r2, sl
 8005c62:	465b      	mov	r3, fp
 8005c64:	4680      	mov	r8, r0
 8005c66:	4689      	mov	r9, r1
 8005c68:	f7fa ff40 	bl	8000aec <__aeabi_dcmplt>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d163      	bne.n	8005d38 <_dtoa_r+0x608>
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	4936      	ldr	r1, [pc, #216]	; (8005d50 <_dtoa_r+0x620>)
 8005c76:	2000      	movs	r0, #0
 8005c78:	f7fa fb0e 	bl	8000298 <__aeabi_dsub>
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	465b      	mov	r3, fp
 8005c80:	f7fa ff34 	bl	8000aec <__aeabi_dcmplt>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	f040 80b5 	bne.w	8005df4 <_dtoa_r+0x6c4>
 8005c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c8c:	429d      	cmp	r5, r3
 8005c8e:	d081      	beq.n	8005b94 <_dtoa_r+0x464>
 8005c90:	4b30      	ldr	r3, [pc, #192]	; (8005d54 <_dtoa_r+0x624>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	4650      	mov	r0, sl
 8005c96:	4659      	mov	r1, fp
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	4b2d      	ldr	r3, [pc, #180]	; (8005d54 <_dtoa_r+0x624>)
 8005c9e:	4682      	mov	sl, r0
 8005ca0:	468b      	mov	fp, r1
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f7fa fcae 	bl	8000608 <__aeabi_dmul>
 8005cac:	4680      	mov	r8, r0
 8005cae:	4689      	mov	r9, r1
 8005cb0:	e7c6      	b.n	8005c40 <_dtoa_r+0x510>
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	f7fa fca7 	bl	8000608 <__aeabi_dmul>
 8005cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cbc:	9d01      	ldr	r5, [sp, #4]
 8005cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cc0:	4682      	mov	sl, r0
 8005cc2:	468b      	mov	fp, r1
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f7fa ff4e 	bl	8000b68 <__aeabi_d2iz>
 8005ccc:	4606      	mov	r6, r0
 8005cce:	f7fa fc31 	bl	8000534 <__aeabi_i2d>
 8005cd2:	3630      	adds	r6, #48	; 0x30
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4640      	mov	r0, r8
 8005cda:	4649      	mov	r1, r9
 8005cdc:	f7fa fadc 	bl	8000298 <__aeabi_dsub>
 8005ce0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce6:	429d      	cmp	r5, r3
 8005ce8:	4680      	mov	r8, r0
 8005cea:	4689      	mov	r9, r1
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	d124      	bne.n	8005d3c <_dtoa_r+0x60c>
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <_dtoa_r+0x630>)
 8005cf4:	4650      	mov	r0, sl
 8005cf6:	4659      	mov	r1, fp
 8005cf8:	f7fa fad0 	bl	800029c <__adddf3>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4640      	mov	r0, r8
 8005d02:	4649      	mov	r1, r9
 8005d04:	f7fa ff10 	bl	8000b28 <__aeabi_dcmpgt>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d173      	bne.n	8005df4 <_dtoa_r+0x6c4>
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	465b      	mov	r3, fp
 8005d10:	4913      	ldr	r1, [pc, #76]	; (8005d60 <_dtoa_r+0x630>)
 8005d12:	2000      	movs	r0, #0
 8005d14:	f7fa fac0 	bl	8000298 <__aeabi_dsub>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	4649      	mov	r1, r9
 8005d20:	f7fa fee4 	bl	8000aec <__aeabi_dcmplt>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	f43f af35 	beq.w	8005b94 <_dtoa_r+0x464>
 8005d2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005d2c:	1e6b      	subs	r3, r5, #1
 8005d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d34:	2b30      	cmp	r3, #48	; 0x30
 8005d36:	d0f8      	beq.n	8005d2a <_dtoa_r+0x5fa>
 8005d38:	9700      	str	r7, [sp, #0]
 8005d3a:	e049      	b.n	8005dd0 <_dtoa_r+0x6a0>
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <_dtoa_r+0x624>)
 8005d3e:	f7fa fc63 	bl	8000608 <__aeabi_dmul>
 8005d42:	4680      	mov	r8, r0
 8005d44:	4689      	mov	r9, r1
 8005d46:	e7bd      	b.n	8005cc4 <_dtoa_r+0x594>
 8005d48:	08008798 	.word	0x08008798
 8005d4c:	08008770 	.word	0x08008770
 8005d50:	3ff00000 	.word	0x3ff00000
 8005d54:	40240000 	.word	0x40240000
 8005d58:	401c0000 	.word	0x401c0000
 8005d5c:	40140000 	.word	0x40140000
 8005d60:	3fe00000 	.word	0x3fe00000
 8005d64:	9d01      	ldr	r5, [sp, #4]
 8005d66:	4656      	mov	r6, sl
 8005d68:	465f      	mov	r7, fp
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fd73 	bl	800085c <__aeabi_ddiv>
 8005d76:	f7fa fef7 	bl	8000b68 <__aeabi_d2iz>
 8005d7a:	4682      	mov	sl, r0
 8005d7c:	f7fa fbda 	bl	8000534 <__aeabi_i2d>
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	f7fa fc40 	bl	8000608 <__aeabi_dmul>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	4639      	mov	r1, r7
 8005d90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005d94:	f7fa fa80 	bl	8000298 <__aeabi_dsub>
 8005d98:	f805 6b01 	strb.w	r6, [r5], #1
 8005d9c:	9e01      	ldr	r6, [sp, #4]
 8005d9e:	9f03      	ldr	r7, [sp, #12]
 8005da0:	1bae      	subs	r6, r5, r6
 8005da2:	42b7      	cmp	r7, r6
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	d135      	bne.n	8005e16 <_dtoa_r+0x6e6>
 8005daa:	f7fa fa77 	bl	800029c <__adddf3>
 8005dae:	4642      	mov	r2, r8
 8005db0:	464b      	mov	r3, r9
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	f7fa feb7 	bl	8000b28 <__aeabi_dcmpgt>
 8005dba:	b9d0      	cbnz	r0, 8005df2 <_dtoa_r+0x6c2>
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fe88 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dc8:	b110      	cbz	r0, 8005dd0 <_dtoa_r+0x6a0>
 8005dca:	f01a 0f01 	tst.w	sl, #1
 8005dce:	d110      	bne.n	8005df2 <_dtoa_r+0x6c2>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	ee18 1a10 	vmov	r1, s16
 8005dd6:	f000 fe75 	bl	8006ac4 <_Bfree>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9800      	ldr	r0, [sp, #0]
 8005dde:	702b      	strb	r3, [r5, #0]
 8005de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005de2:	3001      	adds	r0, #1
 8005de4:	6018      	str	r0, [r3, #0]
 8005de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f43f acf1 	beq.w	80057d0 <_dtoa_r+0xa0>
 8005dee:	601d      	str	r5, [r3, #0]
 8005df0:	e4ee      	b.n	80057d0 <_dtoa_r+0xa0>
 8005df2:	9f00      	ldr	r7, [sp, #0]
 8005df4:	462b      	mov	r3, r5
 8005df6:	461d      	mov	r5, r3
 8005df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dfc:	2a39      	cmp	r2, #57	; 0x39
 8005dfe:	d106      	bne.n	8005e0e <_dtoa_r+0x6de>
 8005e00:	9a01      	ldr	r2, [sp, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d1f7      	bne.n	8005df6 <_dtoa_r+0x6c6>
 8005e06:	9901      	ldr	r1, [sp, #4]
 8005e08:	2230      	movs	r2, #48	; 0x30
 8005e0a:	3701      	adds	r7, #1
 8005e0c:	700a      	strb	r2, [r1, #0]
 8005e0e:	781a      	ldrb	r2, [r3, #0]
 8005e10:	3201      	adds	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e790      	b.n	8005d38 <_dtoa_r+0x608>
 8005e16:	4ba6      	ldr	r3, [pc, #664]	; (80060b0 <_dtoa_r+0x980>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f7fa fbf5 	bl	8000608 <__aeabi_dmul>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2300      	movs	r3, #0
 8005e22:	4606      	mov	r6, r0
 8005e24:	460f      	mov	r7, r1
 8005e26:	f7fa fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d09d      	beq.n	8005d6a <_dtoa_r+0x63a>
 8005e2e:	e7cf      	b.n	8005dd0 <_dtoa_r+0x6a0>
 8005e30:	9a08      	ldr	r2, [sp, #32]
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	f000 80d7 	beq.w	8005fe6 <_dtoa_r+0x8b6>
 8005e38:	9a06      	ldr	r2, [sp, #24]
 8005e3a:	2a01      	cmp	r2, #1
 8005e3c:	f300 80ba 	bgt.w	8005fb4 <_dtoa_r+0x884>
 8005e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	f000 80b2 	beq.w	8005fac <_dtoa_r+0x87c>
 8005e48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e4c:	9e07      	ldr	r6, [sp, #28]
 8005e4e:	9d04      	ldr	r5, [sp, #16]
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	441a      	add	r2, r3
 8005e54:	9204      	str	r2, [sp, #16]
 8005e56:	9a05      	ldr	r2, [sp, #20]
 8005e58:	2101      	movs	r1, #1
 8005e5a:	441a      	add	r2, r3
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	9205      	str	r2, [sp, #20]
 8005e60:	f000 ff32 	bl	8006cc8 <__i2b>
 8005e64:	4607      	mov	r7, r0
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	dd0c      	ble.n	8005e84 <_dtoa_r+0x754>
 8005e6a:	9b05      	ldr	r3, [sp, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dd09      	ble.n	8005e84 <_dtoa_r+0x754>
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	9a04      	ldr	r2, [sp, #16]
 8005e74:	bfa8      	it	ge
 8005e76:	462b      	movge	r3, r5
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	9204      	str	r2, [sp, #16]
 8005e7c:	9a05      	ldr	r2, [sp, #20]
 8005e7e:	1aed      	subs	r5, r5, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	9305      	str	r3, [sp, #20]
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	b31b      	cbz	r3, 8005ed0 <_dtoa_r+0x7a0>
 8005e88:	9b08      	ldr	r3, [sp, #32]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80af 	beq.w	8005fee <_dtoa_r+0x8be>
 8005e90:	2e00      	cmp	r6, #0
 8005e92:	dd13      	ble.n	8005ebc <_dtoa_r+0x78c>
 8005e94:	4639      	mov	r1, r7
 8005e96:	4632      	mov	r2, r6
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 ffd5 	bl	8006e48 <__pow5mult>
 8005e9e:	ee18 2a10 	vmov	r2, s16
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 ff24 	bl	8006cf4 <__multiply>
 8005eac:	ee18 1a10 	vmov	r1, s16
 8005eb0:	4680      	mov	r8, r0
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fe06 	bl	8006ac4 <_Bfree>
 8005eb8:	ee08 8a10 	vmov	s16, r8
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	1b9a      	subs	r2, r3, r6
 8005ec0:	d006      	beq.n	8005ed0 <_dtoa_r+0x7a0>
 8005ec2:	ee18 1a10 	vmov	r1, s16
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 ffbe 	bl	8006e48 <__pow5mult>
 8005ecc:	ee08 0a10 	vmov	s16, r0
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 fef8 	bl	8006cc8 <__i2b>
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	4606      	mov	r6, r0
 8005ede:	f340 8088 	ble.w	8005ff2 <_dtoa_r+0x8c2>
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4601      	mov	r1, r0
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f000 ffae 	bl	8006e48 <__pow5mult>
 8005eec:	9b06      	ldr	r3, [sp, #24]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	f340 8081 	ble.w	8005ff8 <_dtoa_r+0x8c8>
 8005ef6:	f04f 0800 	mov.w	r8, #0
 8005efa:	6933      	ldr	r3, [r6, #16]
 8005efc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f00:	6918      	ldr	r0, [r3, #16]
 8005f02:	f000 fe91 	bl	8006c28 <__hi0bits>
 8005f06:	f1c0 0020 	rsb	r0, r0, #32
 8005f0a:	9b05      	ldr	r3, [sp, #20]
 8005f0c:	4418      	add	r0, r3
 8005f0e:	f010 001f 	ands.w	r0, r0, #31
 8005f12:	f000 8092 	beq.w	800603a <_dtoa_r+0x90a>
 8005f16:	f1c0 0320 	rsb	r3, r0, #32
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	f340 808a 	ble.w	8006034 <_dtoa_r+0x904>
 8005f20:	f1c0 001c 	rsb	r0, r0, #28
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	4403      	add	r3, r0
 8005f28:	9304      	str	r3, [sp, #16]
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	4403      	add	r3, r0
 8005f2e:	4405      	add	r5, r0
 8005f30:	9305      	str	r3, [sp, #20]
 8005f32:	9b04      	ldr	r3, [sp, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dd07      	ble.n	8005f48 <_dtoa_r+0x818>
 8005f38:	ee18 1a10 	vmov	r1, s16
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 ffdc 	bl	8006efc <__lshift>
 8005f44:	ee08 0a10 	vmov	s16, r0
 8005f48:	9b05      	ldr	r3, [sp, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dd05      	ble.n	8005f5a <_dtoa_r+0x82a>
 8005f4e:	4631      	mov	r1, r6
 8005f50:	461a      	mov	r2, r3
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 ffd2 	bl	8006efc <__lshift>
 8005f58:	4606      	mov	r6, r0
 8005f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d06e      	beq.n	800603e <_dtoa_r+0x90e>
 8005f60:	ee18 0a10 	vmov	r0, s16
 8005f64:	4631      	mov	r1, r6
 8005f66:	f001 f839 	bl	8006fdc <__mcmp>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	da67      	bge.n	800603e <_dtoa_r+0x90e>
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	ee18 1a10 	vmov	r1, s16
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	220a      	movs	r2, #10
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 fdc3 	bl	8006b08 <__multadd>
 8005f82:	9b08      	ldr	r3, [sp, #32]
 8005f84:	ee08 0a10 	vmov	s16, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 81b1 	beq.w	80062f0 <_dtoa_r+0xbc0>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	4639      	mov	r1, r7
 8005f92:	220a      	movs	r2, #10
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 fdb7 	bl	8006b08 <__multadd>
 8005f9a:	9b02      	ldr	r3, [sp, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	4607      	mov	r7, r0
 8005fa0:	f300 808e 	bgt.w	80060c0 <_dtoa_r+0x990>
 8005fa4:	9b06      	ldr	r3, [sp, #24]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	dc51      	bgt.n	800604e <_dtoa_r+0x91e>
 8005faa:	e089      	b.n	80060c0 <_dtoa_r+0x990>
 8005fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fb2:	e74b      	b.n	8005e4c <_dtoa_r+0x71c>
 8005fb4:	9b03      	ldr	r3, [sp, #12]
 8005fb6:	1e5e      	subs	r6, r3, #1
 8005fb8:	9b07      	ldr	r3, [sp, #28]
 8005fba:	42b3      	cmp	r3, r6
 8005fbc:	bfbf      	itttt	lt
 8005fbe:	9b07      	ldrlt	r3, [sp, #28]
 8005fc0:	9607      	strlt	r6, [sp, #28]
 8005fc2:	1af2      	sublt	r2, r6, r3
 8005fc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fc6:	bfb6      	itet	lt
 8005fc8:	189b      	addlt	r3, r3, r2
 8005fca:	1b9e      	subge	r6, r3, r6
 8005fcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	bfb8      	it	lt
 8005fd2:	2600      	movlt	r6, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bfb7      	itett	lt
 8005fd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005fdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005fe0:	1a9d      	sublt	r5, r3, r2
 8005fe2:	2300      	movlt	r3, #0
 8005fe4:	e734      	b.n	8005e50 <_dtoa_r+0x720>
 8005fe6:	9e07      	ldr	r6, [sp, #28]
 8005fe8:	9d04      	ldr	r5, [sp, #16]
 8005fea:	9f08      	ldr	r7, [sp, #32]
 8005fec:	e73b      	b.n	8005e66 <_dtoa_r+0x736>
 8005fee:	9a07      	ldr	r2, [sp, #28]
 8005ff0:	e767      	b.n	8005ec2 <_dtoa_r+0x792>
 8005ff2:	9b06      	ldr	r3, [sp, #24]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	dc18      	bgt.n	800602a <_dtoa_r+0x8fa>
 8005ff8:	f1ba 0f00 	cmp.w	sl, #0
 8005ffc:	d115      	bne.n	800602a <_dtoa_r+0x8fa>
 8005ffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006002:	b993      	cbnz	r3, 800602a <_dtoa_r+0x8fa>
 8006004:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006008:	0d1b      	lsrs	r3, r3, #20
 800600a:	051b      	lsls	r3, r3, #20
 800600c:	b183      	cbz	r3, 8006030 <_dtoa_r+0x900>
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	3301      	adds	r3, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	9b05      	ldr	r3, [sp, #20]
 8006016:	3301      	adds	r3, #1
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	f04f 0801 	mov.w	r8, #1
 800601e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006020:	2b00      	cmp	r3, #0
 8006022:	f47f af6a 	bne.w	8005efa <_dtoa_r+0x7ca>
 8006026:	2001      	movs	r0, #1
 8006028:	e76f      	b.n	8005f0a <_dtoa_r+0x7da>
 800602a:	f04f 0800 	mov.w	r8, #0
 800602e:	e7f6      	b.n	800601e <_dtoa_r+0x8ee>
 8006030:	4698      	mov	r8, r3
 8006032:	e7f4      	b.n	800601e <_dtoa_r+0x8ee>
 8006034:	f43f af7d 	beq.w	8005f32 <_dtoa_r+0x802>
 8006038:	4618      	mov	r0, r3
 800603a:	301c      	adds	r0, #28
 800603c:	e772      	b.n	8005f24 <_dtoa_r+0x7f4>
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	dc37      	bgt.n	80060b4 <_dtoa_r+0x984>
 8006044:	9b06      	ldr	r3, [sp, #24]
 8006046:	2b02      	cmp	r3, #2
 8006048:	dd34      	ble.n	80060b4 <_dtoa_r+0x984>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	9302      	str	r3, [sp, #8]
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	b96b      	cbnz	r3, 800606e <_dtoa_r+0x93e>
 8006052:	4631      	mov	r1, r6
 8006054:	2205      	movs	r2, #5
 8006056:	4620      	mov	r0, r4
 8006058:	f000 fd56 	bl	8006b08 <__multadd>
 800605c:	4601      	mov	r1, r0
 800605e:	4606      	mov	r6, r0
 8006060:	ee18 0a10 	vmov	r0, s16
 8006064:	f000 ffba 	bl	8006fdc <__mcmp>
 8006068:	2800      	cmp	r0, #0
 800606a:	f73f adbb 	bgt.w	8005be4 <_dtoa_r+0x4b4>
 800606e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006070:	9d01      	ldr	r5, [sp, #4]
 8006072:	43db      	mvns	r3, r3
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	4631      	mov	r1, r6
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fd21 	bl	8006ac4 <_Bfree>
 8006082:	2f00      	cmp	r7, #0
 8006084:	f43f aea4 	beq.w	8005dd0 <_dtoa_r+0x6a0>
 8006088:	f1b8 0f00 	cmp.w	r8, #0
 800608c:	d005      	beq.n	800609a <_dtoa_r+0x96a>
 800608e:	45b8      	cmp	r8, r7
 8006090:	d003      	beq.n	800609a <_dtoa_r+0x96a>
 8006092:	4641      	mov	r1, r8
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fd15 	bl	8006ac4 <_Bfree>
 800609a:	4639      	mov	r1, r7
 800609c:	4620      	mov	r0, r4
 800609e:	f000 fd11 	bl	8006ac4 <_Bfree>
 80060a2:	e695      	b.n	8005dd0 <_dtoa_r+0x6a0>
 80060a4:	2600      	movs	r6, #0
 80060a6:	4637      	mov	r7, r6
 80060a8:	e7e1      	b.n	800606e <_dtoa_r+0x93e>
 80060aa:	9700      	str	r7, [sp, #0]
 80060ac:	4637      	mov	r7, r6
 80060ae:	e599      	b.n	8005be4 <_dtoa_r+0x4b4>
 80060b0:	40240000 	.word	0x40240000
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 80ca 	beq.w	8006250 <_dtoa_r+0xb20>
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	2d00      	cmp	r5, #0
 80060c2:	dd05      	ble.n	80060d0 <_dtoa_r+0x9a0>
 80060c4:	4639      	mov	r1, r7
 80060c6:	462a      	mov	r2, r5
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 ff17 	bl	8006efc <__lshift>
 80060ce:	4607      	mov	r7, r0
 80060d0:	f1b8 0f00 	cmp.w	r8, #0
 80060d4:	d05b      	beq.n	800618e <_dtoa_r+0xa5e>
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fcb3 	bl	8006a44 <_Balloc>
 80060de:	4605      	mov	r5, r0
 80060e0:	b928      	cbnz	r0, 80060ee <_dtoa_r+0x9be>
 80060e2:	4b87      	ldr	r3, [pc, #540]	; (8006300 <_dtoa_r+0xbd0>)
 80060e4:	4602      	mov	r2, r0
 80060e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060ea:	f7ff bb3b 	b.w	8005764 <_dtoa_r+0x34>
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	3202      	adds	r2, #2
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	f107 010c 	add.w	r1, r7, #12
 80060f8:	300c      	adds	r0, #12
 80060fa:	f000 fc95 	bl	8006a28 <memcpy>
 80060fe:	2201      	movs	r2, #1
 8006100:	4629      	mov	r1, r5
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fefa 	bl	8006efc <__lshift>
 8006108:	9b01      	ldr	r3, [sp, #4]
 800610a:	f103 0901 	add.w	r9, r3, #1
 800610e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006112:	4413      	add	r3, r2
 8006114:	9305      	str	r3, [sp, #20]
 8006116:	f00a 0301 	and.w	r3, sl, #1
 800611a:	46b8      	mov	r8, r7
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	4607      	mov	r7, r0
 8006120:	4631      	mov	r1, r6
 8006122:	ee18 0a10 	vmov	r0, s16
 8006126:	f7ff fa77 	bl	8005618 <quorem>
 800612a:	4641      	mov	r1, r8
 800612c:	9002      	str	r0, [sp, #8]
 800612e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006132:	ee18 0a10 	vmov	r0, s16
 8006136:	f000 ff51 	bl	8006fdc <__mcmp>
 800613a:	463a      	mov	r2, r7
 800613c:	9003      	str	r0, [sp, #12]
 800613e:	4631      	mov	r1, r6
 8006140:	4620      	mov	r0, r4
 8006142:	f000 ff67 	bl	8007014 <__mdiff>
 8006146:	68c2      	ldr	r2, [r0, #12]
 8006148:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800614c:	4605      	mov	r5, r0
 800614e:	bb02      	cbnz	r2, 8006192 <_dtoa_r+0xa62>
 8006150:	4601      	mov	r1, r0
 8006152:	ee18 0a10 	vmov	r0, s16
 8006156:	f000 ff41 	bl	8006fdc <__mcmp>
 800615a:	4602      	mov	r2, r0
 800615c:	4629      	mov	r1, r5
 800615e:	4620      	mov	r0, r4
 8006160:	9207      	str	r2, [sp, #28]
 8006162:	f000 fcaf 	bl	8006ac4 <_Bfree>
 8006166:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800616a:	ea43 0102 	orr.w	r1, r3, r2
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	430b      	orrs	r3, r1
 8006172:	464d      	mov	r5, r9
 8006174:	d10f      	bne.n	8006196 <_dtoa_r+0xa66>
 8006176:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800617a:	d02a      	beq.n	80061d2 <_dtoa_r+0xaa2>
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	dd02      	ble.n	8006188 <_dtoa_r+0xa58>
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006188:	f88b a000 	strb.w	sl, [fp]
 800618c:	e775      	b.n	800607a <_dtoa_r+0x94a>
 800618e:	4638      	mov	r0, r7
 8006190:	e7ba      	b.n	8006108 <_dtoa_r+0x9d8>
 8006192:	2201      	movs	r2, #1
 8006194:	e7e2      	b.n	800615c <_dtoa_r+0xa2c>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	db04      	blt.n	80061a6 <_dtoa_r+0xa76>
 800619c:	9906      	ldr	r1, [sp, #24]
 800619e:	430b      	orrs	r3, r1
 80061a0:	9904      	ldr	r1, [sp, #16]
 80061a2:	430b      	orrs	r3, r1
 80061a4:	d122      	bne.n	80061ec <_dtoa_r+0xabc>
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	ddee      	ble.n	8006188 <_dtoa_r+0xa58>
 80061aa:	ee18 1a10 	vmov	r1, s16
 80061ae:	2201      	movs	r2, #1
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fea3 	bl	8006efc <__lshift>
 80061b6:	4631      	mov	r1, r6
 80061b8:	ee08 0a10 	vmov	s16, r0
 80061bc:	f000 ff0e 	bl	8006fdc <__mcmp>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	dc03      	bgt.n	80061cc <_dtoa_r+0xa9c>
 80061c4:	d1e0      	bne.n	8006188 <_dtoa_r+0xa58>
 80061c6:	f01a 0f01 	tst.w	sl, #1
 80061ca:	d0dd      	beq.n	8006188 <_dtoa_r+0xa58>
 80061cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80061d0:	d1d7      	bne.n	8006182 <_dtoa_r+0xa52>
 80061d2:	2339      	movs	r3, #57	; 0x39
 80061d4:	f88b 3000 	strb.w	r3, [fp]
 80061d8:	462b      	mov	r3, r5
 80061da:	461d      	mov	r5, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061e2:	2a39      	cmp	r2, #57	; 0x39
 80061e4:	d071      	beq.n	80062ca <_dtoa_r+0xb9a>
 80061e6:	3201      	adds	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e746      	b.n	800607a <_dtoa_r+0x94a>
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	dd07      	ble.n	8006200 <_dtoa_r+0xad0>
 80061f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80061f4:	d0ed      	beq.n	80061d2 <_dtoa_r+0xaa2>
 80061f6:	f10a 0301 	add.w	r3, sl, #1
 80061fa:	f88b 3000 	strb.w	r3, [fp]
 80061fe:	e73c      	b.n	800607a <_dtoa_r+0x94a>
 8006200:	9b05      	ldr	r3, [sp, #20]
 8006202:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006206:	4599      	cmp	r9, r3
 8006208:	d047      	beq.n	800629a <_dtoa_r+0xb6a>
 800620a:	ee18 1a10 	vmov	r1, s16
 800620e:	2300      	movs	r3, #0
 8006210:	220a      	movs	r2, #10
 8006212:	4620      	mov	r0, r4
 8006214:	f000 fc78 	bl	8006b08 <__multadd>
 8006218:	45b8      	cmp	r8, r7
 800621a:	ee08 0a10 	vmov	s16, r0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	f04f 020a 	mov.w	r2, #10
 8006226:	4641      	mov	r1, r8
 8006228:	4620      	mov	r0, r4
 800622a:	d106      	bne.n	800623a <_dtoa_r+0xb0a>
 800622c:	f000 fc6c 	bl	8006b08 <__multadd>
 8006230:	4680      	mov	r8, r0
 8006232:	4607      	mov	r7, r0
 8006234:	f109 0901 	add.w	r9, r9, #1
 8006238:	e772      	b.n	8006120 <_dtoa_r+0x9f0>
 800623a:	f000 fc65 	bl	8006b08 <__multadd>
 800623e:	4639      	mov	r1, r7
 8006240:	4680      	mov	r8, r0
 8006242:	2300      	movs	r3, #0
 8006244:	220a      	movs	r2, #10
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fc5e 	bl	8006b08 <__multadd>
 800624c:	4607      	mov	r7, r0
 800624e:	e7f1      	b.n	8006234 <_dtoa_r+0xb04>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	9302      	str	r3, [sp, #8]
 8006254:	9d01      	ldr	r5, [sp, #4]
 8006256:	ee18 0a10 	vmov	r0, s16
 800625a:	4631      	mov	r1, r6
 800625c:	f7ff f9dc 	bl	8005618 <quorem>
 8006260:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	f805 ab01 	strb.w	sl, [r5], #1
 800626a:	1aea      	subs	r2, r5, r3
 800626c:	9b02      	ldr	r3, [sp, #8]
 800626e:	4293      	cmp	r3, r2
 8006270:	dd09      	ble.n	8006286 <_dtoa_r+0xb56>
 8006272:	ee18 1a10 	vmov	r1, s16
 8006276:	2300      	movs	r3, #0
 8006278:	220a      	movs	r2, #10
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fc44 	bl	8006b08 <__multadd>
 8006280:	ee08 0a10 	vmov	s16, r0
 8006284:	e7e7      	b.n	8006256 <_dtoa_r+0xb26>
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	bfc8      	it	gt
 800628c:	461d      	movgt	r5, r3
 800628e:	9b01      	ldr	r3, [sp, #4]
 8006290:	bfd8      	it	le
 8006292:	2501      	movle	r5, #1
 8006294:	441d      	add	r5, r3
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	ee18 1a10 	vmov	r1, s16
 800629e:	2201      	movs	r2, #1
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fe2b 	bl	8006efc <__lshift>
 80062a6:	4631      	mov	r1, r6
 80062a8:	ee08 0a10 	vmov	s16, r0
 80062ac:	f000 fe96 	bl	8006fdc <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dc91      	bgt.n	80061d8 <_dtoa_r+0xaa8>
 80062b4:	d102      	bne.n	80062bc <_dtoa_r+0xb8c>
 80062b6:	f01a 0f01 	tst.w	sl, #1
 80062ba:	d18d      	bne.n	80061d8 <_dtoa_r+0xaa8>
 80062bc:	462b      	mov	r3, r5
 80062be:	461d      	mov	r5, r3
 80062c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062c4:	2a30      	cmp	r2, #48	; 0x30
 80062c6:	d0fa      	beq.n	80062be <_dtoa_r+0xb8e>
 80062c8:	e6d7      	b.n	800607a <_dtoa_r+0x94a>
 80062ca:	9a01      	ldr	r2, [sp, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d184      	bne.n	80061da <_dtoa_r+0xaaa>
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2331      	movs	r3, #49	; 0x31
 80062d8:	7013      	strb	r3, [r2, #0]
 80062da:	e6ce      	b.n	800607a <_dtoa_r+0x94a>
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <_dtoa_r+0xbd4>)
 80062de:	f7ff ba95 	b.w	800580c <_dtoa_r+0xdc>
 80062e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f47f aa6e 	bne.w	80057c6 <_dtoa_r+0x96>
 80062ea:	4b07      	ldr	r3, [pc, #28]	; (8006308 <_dtoa_r+0xbd8>)
 80062ec:	f7ff ba8e 	b.w	800580c <_dtoa_r+0xdc>
 80062f0:	9b02      	ldr	r3, [sp, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	dcae      	bgt.n	8006254 <_dtoa_r+0xb24>
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	f73f aea8 	bgt.w	800604e <_dtoa_r+0x91e>
 80062fe:	e7a9      	b.n	8006254 <_dtoa_r+0xb24>
 8006300:	08008688 	.word	0x08008688
 8006304:	0800848c 	.word	0x0800848c
 8006308:	08008609 	.word	0x08008609

0800630c <rshift>:
 800630c:	6903      	ldr	r3, [r0, #16]
 800630e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006316:	ea4f 1261 	mov.w	r2, r1, asr #5
 800631a:	f100 0414 	add.w	r4, r0, #20
 800631e:	dd45      	ble.n	80063ac <rshift+0xa0>
 8006320:	f011 011f 	ands.w	r1, r1, #31
 8006324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800632c:	d10c      	bne.n	8006348 <rshift+0x3c>
 800632e:	f100 0710 	add.w	r7, r0, #16
 8006332:	4629      	mov	r1, r5
 8006334:	42b1      	cmp	r1, r6
 8006336:	d334      	bcc.n	80063a2 <rshift+0x96>
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	1eea      	subs	r2, r5, #3
 800633e:	4296      	cmp	r6, r2
 8006340:	bf38      	it	cc
 8006342:	2300      	movcc	r3, #0
 8006344:	4423      	add	r3, r4
 8006346:	e015      	b.n	8006374 <rshift+0x68>
 8006348:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800634c:	f1c1 0820 	rsb	r8, r1, #32
 8006350:	40cf      	lsrs	r7, r1
 8006352:	f105 0e04 	add.w	lr, r5, #4
 8006356:	46a1      	mov	r9, r4
 8006358:	4576      	cmp	r6, lr
 800635a:	46f4      	mov	ip, lr
 800635c:	d815      	bhi.n	800638a <rshift+0x7e>
 800635e:	1a9a      	subs	r2, r3, r2
 8006360:	0092      	lsls	r2, r2, #2
 8006362:	3a04      	subs	r2, #4
 8006364:	3501      	adds	r5, #1
 8006366:	42ae      	cmp	r6, r5
 8006368:	bf38      	it	cc
 800636a:	2200      	movcc	r2, #0
 800636c:	18a3      	adds	r3, r4, r2
 800636e:	50a7      	str	r7, [r4, r2]
 8006370:	b107      	cbz	r7, 8006374 <rshift+0x68>
 8006372:	3304      	adds	r3, #4
 8006374:	1b1a      	subs	r2, r3, r4
 8006376:	42a3      	cmp	r3, r4
 8006378:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800637c:	bf08      	it	eq
 800637e:	2300      	moveq	r3, #0
 8006380:	6102      	str	r2, [r0, #16]
 8006382:	bf08      	it	eq
 8006384:	6143      	streq	r3, [r0, #20]
 8006386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800638a:	f8dc c000 	ldr.w	ip, [ip]
 800638e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006392:	ea4c 0707 	orr.w	r7, ip, r7
 8006396:	f849 7b04 	str.w	r7, [r9], #4
 800639a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800639e:	40cf      	lsrs	r7, r1
 80063a0:	e7da      	b.n	8006358 <rshift+0x4c>
 80063a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80063a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80063aa:	e7c3      	b.n	8006334 <rshift+0x28>
 80063ac:	4623      	mov	r3, r4
 80063ae:	e7e1      	b.n	8006374 <rshift+0x68>

080063b0 <__hexdig_fun>:
 80063b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80063b4:	2b09      	cmp	r3, #9
 80063b6:	d802      	bhi.n	80063be <__hexdig_fun+0xe>
 80063b8:	3820      	subs	r0, #32
 80063ba:	b2c0      	uxtb	r0, r0
 80063bc:	4770      	bx	lr
 80063be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d801      	bhi.n	80063ca <__hexdig_fun+0x1a>
 80063c6:	3847      	subs	r0, #71	; 0x47
 80063c8:	e7f7      	b.n	80063ba <__hexdig_fun+0xa>
 80063ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d801      	bhi.n	80063d6 <__hexdig_fun+0x26>
 80063d2:	3827      	subs	r0, #39	; 0x27
 80063d4:	e7f1      	b.n	80063ba <__hexdig_fun+0xa>
 80063d6:	2000      	movs	r0, #0
 80063d8:	4770      	bx	lr
	...

080063dc <__gethex>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	ed2d 8b02 	vpush	{d8}
 80063e4:	b089      	sub	sp, #36	; 0x24
 80063e6:	ee08 0a10 	vmov	s16, r0
 80063ea:	9304      	str	r3, [sp, #16]
 80063ec:	4bb4      	ldr	r3, [pc, #720]	; (80066c0 <__gethex+0x2e4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	468b      	mov	fp, r1
 80063f6:	4690      	mov	r8, r2
 80063f8:	f7f9 fef2 	bl	80001e0 <strlen>
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	f8db 2000 	ldr.w	r2, [fp]
 8006402:	4403      	add	r3, r0
 8006404:	4682      	mov	sl, r0
 8006406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	1c93      	adds	r3, r2, #2
 800640e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006416:	32fe      	adds	r2, #254	; 0xfe
 8006418:	18d1      	adds	r1, r2, r3
 800641a:	461f      	mov	r7, r3
 800641c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006420:	9100      	str	r1, [sp, #0]
 8006422:	2830      	cmp	r0, #48	; 0x30
 8006424:	d0f8      	beq.n	8006418 <__gethex+0x3c>
 8006426:	f7ff ffc3 	bl	80063b0 <__hexdig_fun>
 800642a:	4604      	mov	r4, r0
 800642c:	2800      	cmp	r0, #0
 800642e:	d13a      	bne.n	80064a6 <__gethex+0xca>
 8006430:	9901      	ldr	r1, [sp, #4]
 8006432:	4652      	mov	r2, sl
 8006434:	4638      	mov	r0, r7
 8006436:	f001 fa33 	bl	80078a0 <strncmp>
 800643a:	4605      	mov	r5, r0
 800643c:	2800      	cmp	r0, #0
 800643e:	d168      	bne.n	8006512 <__gethex+0x136>
 8006440:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006444:	eb07 060a 	add.w	r6, r7, sl
 8006448:	f7ff ffb2 	bl	80063b0 <__hexdig_fun>
 800644c:	2800      	cmp	r0, #0
 800644e:	d062      	beq.n	8006516 <__gethex+0x13a>
 8006450:	4633      	mov	r3, r6
 8006452:	7818      	ldrb	r0, [r3, #0]
 8006454:	2830      	cmp	r0, #48	; 0x30
 8006456:	461f      	mov	r7, r3
 8006458:	f103 0301 	add.w	r3, r3, #1
 800645c:	d0f9      	beq.n	8006452 <__gethex+0x76>
 800645e:	f7ff ffa7 	bl	80063b0 <__hexdig_fun>
 8006462:	2301      	movs	r3, #1
 8006464:	fab0 f480 	clz	r4, r0
 8006468:	0964      	lsrs	r4, r4, #5
 800646a:	4635      	mov	r5, r6
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	463a      	mov	r2, r7
 8006470:	4616      	mov	r6, r2
 8006472:	3201      	adds	r2, #1
 8006474:	7830      	ldrb	r0, [r6, #0]
 8006476:	f7ff ff9b 	bl	80063b0 <__hexdig_fun>
 800647a:	2800      	cmp	r0, #0
 800647c:	d1f8      	bne.n	8006470 <__gethex+0x94>
 800647e:	9901      	ldr	r1, [sp, #4]
 8006480:	4652      	mov	r2, sl
 8006482:	4630      	mov	r0, r6
 8006484:	f001 fa0c 	bl	80078a0 <strncmp>
 8006488:	b980      	cbnz	r0, 80064ac <__gethex+0xd0>
 800648a:	b94d      	cbnz	r5, 80064a0 <__gethex+0xc4>
 800648c:	eb06 050a 	add.w	r5, r6, sl
 8006490:	462a      	mov	r2, r5
 8006492:	4616      	mov	r6, r2
 8006494:	3201      	adds	r2, #1
 8006496:	7830      	ldrb	r0, [r6, #0]
 8006498:	f7ff ff8a 	bl	80063b0 <__hexdig_fun>
 800649c:	2800      	cmp	r0, #0
 800649e:	d1f8      	bne.n	8006492 <__gethex+0xb6>
 80064a0:	1bad      	subs	r5, r5, r6
 80064a2:	00ad      	lsls	r5, r5, #2
 80064a4:	e004      	b.n	80064b0 <__gethex+0xd4>
 80064a6:	2400      	movs	r4, #0
 80064a8:	4625      	mov	r5, r4
 80064aa:	e7e0      	b.n	800646e <__gethex+0x92>
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	d1f7      	bne.n	80064a0 <__gethex+0xc4>
 80064b0:	7833      	ldrb	r3, [r6, #0]
 80064b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064b6:	2b50      	cmp	r3, #80	; 0x50
 80064b8:	d13b      	bne.n	8006532 <__gethex+0x156>
 80064ba:	7873      	ldrb	r3, [r6, #1]
 80064bc:	2b2b      	cmp	r3, #43	; 0x2b
 80064be:	d02c      	beq.n	800651a <__gethex+0x13e>
 80064c0:	2b2d      	cmp	r3, #45	; 0x2d
 80064c2:	d02e      	beq.n	8006522 <__gethex+0x146>
 80064c4:	1c71      	adds	r1, r6, #1
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	7808      	ldrb	r0, [r1, #0]
 80064cc:	f7ff ff70 	bl	80063b0 <__hexdig_fun>
 80064d0:	1e43      	subs	r3, r0, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b18      	cmp	r3, #24
 80064d6:	d82c      	bhi.n	8006532 <__gethex+0x156>
 80064d8:	f1a0 0210 	sub.w	r2, r0, #16
 80064dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80064e0:	f7ff ff66 	bl	80063b0 <__hexdig_fun>
 80064e4:	1e43      	subs	r3, r0, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b18      	cmp	r3, #24
 80064ea:	d91d      	bls.n	8006528 <__gethex+0x14c>
 80064ec:	f1b9 0f00 	cmp.w	r9, #0
 80064f0:	d000      	beq.n	80064f4 <__gethex+0x118>
 80064f2:	4252      	negs	r2, r2
 80064f4:	4415      	add	r5, r2
 80064f6:	f8cb 1000 	str.w	r1, [fp]
 80064fa:	b1e4      	cbz	r4, 8006536 <__gethex+0x15a>
 80064fc:	9b00      	ldr	r3, [sp, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf14      	ite	ne
 8006502:	2700      	movne	r7, #0
 8006504:	2706      	moveq	r7, #6
 8006506:	4638      	mov	r0, r7
 8006508:	b009      	add	sp, #36	; 0x24
 800650a:	ecbd 8b02 	vpop	{d8}
 800650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006512:	463e      	mov	r6, r7
 8006514:	4625      	mov	r5, r4
 8006516:	2401      	movs	r4, #1
 8006518:	e7ca      	b.n	80064b0 <__gethex+0xd4>
 800651a:	f04f 0900 	mov.w	r9, #0
 800651e:	1cb1      	adds	r1, r6, #2
 8006520:	e7d3      	b.n	80064ca <__gethex+0xee>
 8006522:	f04f 0901 	mov.w	r9, #1
 8006526:	e7fa      	b.n	800651e <__gethex+0x142>
 8006528:	230a      	movs	r3, #10
 800652a:	fb03 0202 	mla	r2, r3, r2, r0
 800652e:	3a10      	subs	r2, #16
 8006530:	e7d4      	b.n	80064dc <__gethex+0x100>
 8006532:	4631      	mov	r1, r6
 8006534:	e7df      	b.n	80064f6 <__gethex+0x11a>
 8006536:	1bf3      	subs	r3, r6, r7
 8006538:	3b01      	subs	r3, #1
 800653a:	4621      	mov	r1, r4
 800653c:	2b07      	cmp	r3, #7
 800653e:	dc0b      	bgt.n	8006558 <__gethex+0x17c>
 8006540:	ee18 0a10 	vmov	r0, s16
 8006544:	f000 fa7e 	bl	8006a44 <_Balloc>
 8006548:	4604      	mov	r4, r0
 800654a:	b940      	cbnz	r0, 800655e <__gethex+0x182>
 800654c:	4b5d      	ldr	r3, [pc, #372]	; (80066c4 <__gethex+0x2e8>)
 800654e:	4602      	mov	r2, r0
 8006550:	21de      	movs	r1, #222	; 0xde
 8006552:	485d      	ldr	r0, [pc, #372]	; (80066c8 <__gethex+0x2ec>)
 8006554:	f001 f9c6 	bl	80078e4 <__assert_func>
 8006558:	3101      	adds	r1, #1
 800655a:	105b      	asrs	r3, r3, #1
 800655c:	e7ee      	b.n	800653c <__gethex+0x160>
 800655e:	f100 0914 	add.w	r9, r0, #20
 8006562:	f04f 0b00 	mov.w	fp, #0
 8006566:	f1ca 0301 	rsb	r3, sl, #1
 800656a:	f8cd 9008 	str.w	r9, [sp, #8]
 800656e:	f8cd b000 	str.w	fp, [sp]
 8006572:	9306      	str	r3, [sp, #24]
 8006574:	42b7      	cmp	r7, r6
 8006576:	d340      	bcc.n	80065fa <__gethex+0x21e>
 8006578:	9802      	ldr	r0, [sp, #8]
 800657a:	9b00      	ldr	r3, [sp, #0]
 800657c:	f840 3b04 	str.w	r3, [r0], #4
 8006580:	eba0 0009 	sub.w	r0, r0, r9
 8006584:	1080      	asrs	r0, r0, #2
 8006586:	0146      	lsls	r6, r0, #5
 8006588:	6120      	str	r0, [r4, #16]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fb4c 	bl	8006c28 <__hi0bits>
 8006590:	1a30      	subs	r0, r6, r0
 8006592:	f8d8 6000 	ldr.w	r6, [r8]
 8006596:	42b0      	cmp	r0, r6
 8006598:	dd63      	ble.n	8006662 <__gethex+0x286>
 800659a:	1b87      	subs	r7, r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fef0 	bl	8007384 <__any_on>
 80065a4:	4682      	mov	sl, r0
 80065a6:	b1a8      	cbz	r0, 80065d4 <__gethex+0x1f8>
 80065a8:	1e7b      	subs	r3, r7, #1
 80065aa:	1159      	asrs	r1, r3, #5
 80065ac:	f003 021f 	and.w	r2, r3, #31
 80065b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80065b4:	f04f 0a01 	mov.w	sl, #1
 80065b8:	fa0a f202 	lsl.w	r2, sl, r2
 80065bc:	420a      	tst	r2, r1
 80065be:	d009      	beq.n	80065d4 <__gethex+0x1f8>
 80065c0:	4553      	cmp	r3, sl
 80065c2:	dd05      	ble.n	80065d0 <__gethex+0x1f4>
 80065c4:	1eb9      	subs	r1, r7, #2
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fedc 	bl	8007384 <__any_on>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d145      	bne.n	800665c <__gethex+0x280>
 80065d0:	f04f 0a02 	mov.w	sl, #2
 80065d4:	4639      	mov	r1, r7
 80065d6:	4620      	mov	r0, r4
 80065d8:	f7ff fe98 	bl	800630c <rshift>
 80065dc:	443d      	add	r5, r7
 80065de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065e2:	42ab      	cmp	r3, r5
 80065e4:	da4c      	bge.n	8006680 <__gethex+0x2a4>
 80065e6:	ee18 0a10 	vmov	r0, s16
 80065ea:	4621      	mov	r1, r4
 80065ec:	f000 fa6a 	bl	8006ac4 <_Bfree>
 80065f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065f2:	2300      	movs	r3, #0
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	27a3      	movs	r7, #163	; 0xa3
 80065f8:	e785      	b.n	8006506 <__gethex+0x12a>
 80065fa:	1e73      	subs	r3, r6, #1
 80065fc:	9a05      	ldr	r2, [sp, #20]
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006604:	4293      	cmp	r3, r2
 8006606:	d019      	beq.n	800663c <__gethex+0x260>
 8006608:	f1bb 0f20 	cmp.w	fp, #32
 800660c:	d107      	bne.n	800661e <__gethex+0x242>
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	9a00      	ldr	r2, [sp, #0]
 8006612:	f843 2b04 	str.w	r2, [r3], #4
 8006616:	9302      	str	r3, [sp, #8]
 8006618:	2300      	movs	r3, #0
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	469b      	mov	fp, r3
 800661e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006622:	f7ff fec5 	bl	80063b0 <__hexdig_fun>
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	f000 000f 	and.w	r0, r0, #15
 800662c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006630:	4303      	orrs	r3, r0
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	f10b 0b04 	add.w	fp, fp, #4
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	e00d      	b.n	8006658 <__gethex+0x27c>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	9a06      	ldr	r2, [sp, #24]
 8006640:	4413      	add	r3, r2
 8006642:	42bb      	cmp	r3, r7
 8006644:	d3e0      	bcc.n	8006608 <__gethex+0x22c>
 8006646:	4618      	mov	r0, r3
 8006648:	9901      	ldr	r1, [sp, #4]
 800664a:	9307      	str	r3, [sp, #28]
 800664c:	4652      	mov	r2, sl
 800664e:	f001 f927 	bl	80078a0 <strncmp>
 8006652:	9b07      	ldr	r3, [sp, #28]
 8006654:	2800      	cmp	r0, #0
 8006656:	d1d7      	bne.n	8006608 <__gethex+0x22c>
 8006658:	461e      	mov	r6, r3
 800665a:	e78b      	b.n	8006574 <__gethex+0x198>
 800665c:	f04f 0a03 	mov.w	sl, #3
 8006660:	e7b8      	b.n	80065d4 <__gethex+0x1f8>
 8006662:	da0a      	bge.n	800667a <__gethex+0x29e>
 8006664:	1a37      	subs	r7, r6, r0
 8006666:	4621      	mov	r1, r4
 8006668:	ee18 0a10 	vmov	r0, s16
 800666c:	463a      	mov	r2, r7
 800666e:	f000 fc45 	bl	8006efc <__lshift>
 8006672:	1bed      	subs	r5, r5, r7
 8006674:	4604      	mov	r4, r0
 8006676:	f100 0914 	add.w	r9, r0, #20
 800667a:	f04f 0a00 	mov.w	sl, #0
 800667e:	e7ae      	b.n	80065de <__gethex+0x202>
 8006680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006684:	42a8      	cmp	r0, r5
 8006686:	dd72      	ble.n	800676e <__gethex+0x392>
 8006688:	1b45      	subs	r5, r0, r5
 800668a:	42ae      	cmp	r6, r5
 800668c:	dc36      	bgt.n	80066fc <__gethex+0x320>
 800668e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d02a      	beq.n	80066ec <__gethex+0x310>
 8006696:	2b03      	cmp	r3, #3
 8006698:	d02c      	beq.n	80066f4 <__gethex+0x318>
 800669a:	2b01      	cmp	r3, #1
 800669c:	d11c      	bne.n	80066d8 <__gethex+0x2fc>
 800669e:	42ae      	cmp	r6, r5
 80066a0:	d11a      	bne.n	80066d8 <__gethex+0x2fc>
 80066a2:	2e01      	cmp	r6, #1
 80066a4:	d112      	bne.n	80066cc <__gethex+0x2f0>
 80066a6:	9a04      	ldr	r2, [sp, #16]
 80066a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	2301      	movs	r3, #1
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	f8c9 3000 	str.w	r3, [r9]
 80066b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066b8:	2762      	movs	r7, #98	; 0x62
 80066ba:	601c      	str	r4, [r3, #0]
 80066bc:	e723      	b.n	8006506 <__gethex+0x12a>
 80066be:	bf00      	nop
 80066c0:	08008700 	.word	0x08008700
 80066c4:	08008688 	.word	0x08008688
 80066c8:	08008699 	.word	0x08008699
 80066cc:	1e71      	subs	r1, r6, #1
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fe58 	bl	8007384 <__any_on>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d1e6      	bne.n	80066a6 <__gethex+0x2ca>
 80066d8:	ee18 0a10 	vmov	r0, s16
 80066dc:	4621      	mov	r1, r4
 80066de:	f000 f9f1 	bl	8006ac4 <_Bfree>
 80066e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066e4:	2300      	movs	r3, #0
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	2750      	movs	r7, #80	; 0x50
 80066ea:	e70c      	b.n	8006506 <__gethex+0x12a>
 80066ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f2      	bne.n	80066d8 <__gethex+0x2fc>
 80066f2:	e7d8      	b.n	80066a6 <__gethex+0x2ca>
 80066f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1d5      	bne.n	80066a6 <__gethex+0x2ca>
 80066fa:	e7ed      	b.n	80066d8 <__gethex+0x2fc>
 80066fc:	1e6f      	subs	r7, r5, #1
 80066fe:	f1ba 0f00 	cmp.w	sl, #0
 8006702:	d131      	bne.n	8006768 <__gethex+0x38c>
 8006704:	b127      	cbz	r7, 8006710 <__gethex+0x334>
 8006706:	4639      	mov	r1, r7
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fe3b 	bl	8007384 <__any_on>
 800670e:	4682      	mov	sl, r0
 8006710:	117b      	asrs	r3, r7, #5
 8006712:	2101      	movs	r1, #1
 8006714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006718:	f007 071f 	and.w	r7, r7, #31
 800671c:	fa01 f707 	lsl.w	r7, r1, r7
 8006720:	421f      	tst	r7, r3
 8006722:	4629      	mov	r1, r5
 8006724:	4620      	mov	r0, r4
 8006726:	bf18      	it	ne
 8006728:	f04a 0a02 	orrne.w	sl, sl, #2
 800672c:	1b76      	subs	r6, r6, r5
 800672e:	f7ff fded 	bl	800630c <rshift>
 8006732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006736:	2702      	movs	r7, #2
 8006738:	f1ba 0f00 	cmp.w	sl, #0
 800673c:	d048      	beq.n	80067d0 <__gethex+0x3f4>
 800673e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d015      	beq.n	8006772 <__gethex+0x396>
 8006746:	2b03      	cmp	r3, #3
 8006748:	d017      	beq.n	800677a <__gethex+0x39e>
 800674a:	2b01      	cmp	r3, #1
 800674c:	d109      	bne.n	8006762 <__gethex+0x386>
 800674e:	f01a 0f02 	tst.w	sl, #2
 8006752:	d006      	beq.n	8006762 <__gethex+0x386>
 8006754:	f8d9 0000 	ldr.w	r0, [r9]
 8006758:	ea4a 0a00 	orr.w	sl, sl, r0
 800675c:	f01a 0f01 	tst.w	sl, #1
 8006760:	d10e      	bne.n	8006780 <__gethex+0x3a4>
 8006762:	f047 0710 	orr.w	r7, r7, #16
 8006766:	e033      	b.n	80067d0 <__gethex+0x3f4>
 8006768:	f04f 0a01 	mov.w	sl, #1
 800676c:	e7d0      	b.n	8006710 <__gethex+0x334>
 800676e:	2701      	movs	r7, #1
 8006770:	e7e2      	b.n	8006738 <__gethex+0x35c>
 8006772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006774:	f1c3 0301 	rsb	r3, r3, #1
 8006778:	9315      	str	r3, [sp, #84]	; 0x54
 800677a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f0      	beq.n	8006762 <__gethex+0x386>
 8006780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006784:	f104 0314 	add.w	r3, r4, #20
 8006788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800678c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006790:	f04f 0c00 	mov.w	ip, #0
 8006794:	4618      	mov	r0, r3
 8006796:	f853 2b04 	ldr.w	r2, [r3], #4
 800679a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800679e:	d01c      	beq.n	80067da <__gethex+0x3fe>
 80067a0:	3201      	adds	r2, #1
 80067a2:	6002      	str	r2, [r0, #0]
 80067a4:	2f02      	cmp	r7, #2
 80067a6:	f104 0314 	add.w	r3, r4, #20
 80067aa:	d13f      	bne.n	800682c <__gethex+0x450>
 80067ac:	f8d8 2000 	ldr.w	r2, [r8]
 80067b0:	3a01      	subs	r2, #1
 80067b2:	42b2      	cmp	r2, r6
 80067b4:	d10a      	bne.n	80067cc <__gethex+0x3f0>
 80067b6:	1171      	asrs	r1, r6, #5
 80067b8:	2201      	movs	r2, #1
 80067ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067be:	f006 061f 	and.w	r6, r6, #31
 80067c2:	fa02 f606 	lsl.w	r6, r2, r6
 80067c6:	421e      	tst	r6, r3
 80067c8:	bf18      	it	ne
 80067ca:	4617      	movne	r7, r2
 80067cc:	f047 0720 	orr.w	r7, r7, #32
 80067d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067d2:	601c      	str	r4, [r3, #0]
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	601d      	str	r5, [r3, #0]
 80067d8:	e695      	b.n	8006506 <__gethex+0x12a>
 80067da:	4299      	cmp	r1, r3
 80067dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80067e0:	d8d8      	bhi.n	8006794 <__gethex+0x3b8>
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	459b      	cmp	fp, r3
 80067e6:	db19      	blt.n	800681c <__gethex+0x440>
 80067e8:	6861      	ldr	r1, [r4, #4]
 80067ea:	ee18 0a10 	vmov	r0, s16
 80067ee:	3101      	adds	r1, #1
 80067f0:	f000 f928 	bl	8006a44 <_Balloc>
 80067f4:	4681      	mov	r9, r0
 80067f6:	b918      	cbnz	r0, 8006800 <__gethex+0x424>
 80067f8:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <__gethex+0x488>)
 80067fa:	4602      	mov	r2, r0
 80067fc:	2184      	movs	r1, #132	; 0x84
 80067fe:	e6a8      	b.n	8006552 <__gethex+0x176>
 8006800:	6922      	ldr	r2, [r4, #16]
 8006802:	3202      	adds	r2, #2
 8006804:	f104 010c 	add.w	r1, r4, #12
 8006808:	0092      	lsls	r2, r2, #2
 800680a:	300c      	adds	r0, #12
 800680c:	f000 f90c 	bl	8006a28 <memcpy>
 8006810:	4621      	mov	r1, r4
 8006812:	ee18 0a10 	vmov	r0, s16
 8006816:	f000 f955 	bl	8006ac4 <_Bfree>
 800681a:	464c      	mov	r4, r9
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006824:	6122      	str	r2, [r4, #16]
 8006826:	2201      	movs	r2, #1
 8006828:	615a      	str	r2, [r3, #20]
 800682a:	e7bb      	b.n	80067a4 <__gethex+0x3c8>
 800682c:	6922      	ldr	r2, [r4, #16]
 800682e:	455a      	cmp	r2, fp
 8006830:	dd0b      	ble.n	800684a <__gethex+0x46e>
 8006832:	2101      	movs	r1, #1
 8006834:	4620      	mov	r0, r4
 8006836:	f7ff fd69 	bl	800630c <rshift>
 800683a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800683e:	3501      	adds	r5, #1
 8006840:	42ab      	cmp	r3, r5
 8006842:	f6ff aed0 	blt.w	80065e6 <__gethex+0x20a>
 8006846:	2701      	movs	r7, #1
 8006848:	e7c0      	b.n	80067cc <__gethex+0x3f0>
 800684a:	f016 061f 	ands.w	r6, r6, #31
 800684e:	d0fa      	beq.n	8006846 <__gethex+0x46a>
 8006850:	4453      	add	r3, sl
 8006852:	f1c6 0620 	rsb	r6, r6, #32
 8006856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800685a:	f000 f9e5 	bl	8006c28 <__hi0bits>
 800685e:	42b0      	cmp	r0, r6
 8006860:	dbe7      	blt.n	8006832 <__gethex+0x456>
 8006862:	e7f0      	b.n	8006846 <__gethex+0x46a>
 8006864:	08008688 	.word	0x08008688

08006868 <L_shift>:
 8006868:	f1c2 0208 	rsb	r2, r2, #8
 800686c:	0092      	lsls	r2, r2, #2
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	f1c2 0620 	rsb	r6, r2, #32
 8006874:	6843      	ldr	r3, [r0, #4]
 8006876:	6804      	ldr	r4, [r0, #0]
 8006878:	fa03 f506 	lsl.w	r5, r3, r6
 800687c:	432c      	orrs	r4, r5
 800687e:	40d3      	lsrs	r3, r2
 8006880:	6004      	str	r4, [r0, #0]
 8006882:	f840 3f04 	str.w	r3, [r0, #4]!
 8006886:	4288      	cmp	r0, r1
 8006888:	d3f4      	bcc.n	8006874 <L_shift+0xc>
 800688a:	bd70      	pop	{r4, r5, r6, pc}

0800688c <__match>:
 800688c:	b530      	push	{r4, r5, lr}
 800688e:	6803      	ldr	r3, [r0, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006896:	b914      	cbnz	r4, 800689e <__match+0x12>
 8006898:	6003      	str	r3, [r0, #0]
 800689a:	2001      	movs	r0, #1
 800689c:	bd30      	pop	{r4, r5, pc}
 800689e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80068a6:	2d19      	cmp	r5, #25
 80068a8:	bf98      	it	ls
 80068aa:	3220      	addls	r2, #32
 80068ac:	42a2      	cmp	r2, r4
 80068ae:	d0f0      	beq.n	8006892 <__match+0x6>
 80068b0:	2000      	movs	r0, #0
 80068b2:	e7f3      	b.n	800689c <__match+0x10>

080068b4 <__hexnan>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	680b      	ldr	r3, [r1, #0]
 80068ba:	115e      	asrs	r6, r3, #5
 80068bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80068c0:	f013 031f 	ands.w	r3, r3, #31
 80068c4:	b087      	sub	sp, #28
 80068c6:	bf18      	it	ne
 80068c8:	3604      	addne	r6, #4
 80068ca:	2500      	movs	r5, #0
 80068cc:	1f37      	subs	r7, r6, #4
 80068ce:	4690      	mov	r8, r2
 80068d0:	6802      	ldr	r2, [r0, #0]
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	4682      	mov	sl, r0
 80068d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80068da:	46b9      	mov	r9, r7
 80068dc:	463c      	mov	r4, r7
 80068de:	9502      	str	r5, [sp, #8]
 80068e0:	46ab      	mov	fp, r5
 80068e2:	7851      	ldrb	r1, [r2, #1]
 80068e4:	1c53      	adds	r3, r2, #1
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	b341      	cbz	r1, 800693c <__hexnan+0x88>
 80068ea:	4608      	mov	r0, r1
 80068ec:	9205      	str	r2, [sp, #20]
 80068ee:	9104      	str	r1, [sp, #16]
 80068f0:	f7ff fd5e 	bl	80063b0 <__hexdig_fun>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d14f      	bne.n	8006998 <__hexnan+0xe4>
 80068f8:	9904      	ldr	r1, [sp, #16]
 80068fa:	9a05      	ldr	r2, [sp, #20]
 80068fc:	2920      	cmp	r1, #32
 80068fe:	d818      	bhi.n	8006932 <__hexnan+0x7e>
 8006900:	9b02      	ldr	r3, [sp, #8]
 8006902:	459b      	cmp	fp, r3
 8006904:	dd13      	ble.n	800692e <__hexnan+0x7a>
 8006906:	454c      	cmp	r4, r9
 8006908:	d206      	bcs.n	8006918 <__hexnan+0x64>
 800690a:	2d07      	cmp	r5, #7
 800690c:	dc04      	bgt.n	8006918 <__hexnan+0x64>
 800690e:	462a      	mov	r2, r5
 8006910:	4649      	mov	r1, r9
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff ffa8 	bl	8006868 <L_shift>
 8006918:	4544      	cmp	r4, r8
 800691a:	d950      	bls.n	80069be <__hexnan+0x10a>
 800691c:	2300      	movs	r3, #0
 800691e:	f1a4 0904 	sub.w	r9, r4, #4
 8006922:	f844 3c04 	str.w	r3, [r4, #-4]
 8006926:	f8cd b008 	str.w	fp, [sp, #8]
 800692a:	464c      	mov	r4, r9
 800692c:	461d      	mov	r5, r3
 800692e:	9a03      	ldr	r2, [sp, #12]
 8006930:	e7d7      	b.n	80068e2 <__hexnan+0x2e>
 8006932:	2929      	cmp	r1, #41	; 0x29
 8006934:	d156      	bne.n	80069e4 <__hexnan+0x130>
 8006936:	3202      	adds	r2, #2
 8006938:	f8ca 2000 	str.w	r2, [sl]
 800693c:	f1bb 0f00 	cmp.w	fp, #0
 8006940:	d050      	beq.n	80069e4 <__hexnan+0x130>
 8006942:	454c      	cmp	r4, r9
 8006944:	d206      	bcs.n	8006954 <__hexnan+0xa0>
 8006946:	2d07      	cmp	r5, #7
 8006948:	dc04      	bgt.n	8006954 <__hexnan+0xa0>
 800694a:	462a      	mov	r2, r5
 800694c:	4649      	mov	r1, r9
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff ff8a 	bl	8006868 <L_shift>
 8006954:	4544      	cmp	r4, r8
 8006956:	d934      	bls.n	80069c2 <__hexnan+0x10e>
 8006958:	f1a8 0204 	sub.w	r2, r8, #4
 800695c:	4623      	mov	r3, r4
 800695e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006962:	f842 1f04 	str.w	r1, [r2, #4]!
 8006966:	429f      	cmp	r7, r3
 8006968:	d2f9      	bcs.n	800695e <__hexnan+0xaa>
 800696a:	1b3b      	subs	r3, r7, r4
 800696c:	f023 0303 	bic.w	r3, r3, #3
 8006970:	3304      	adds	r3, #4
 8006972:	3401      	adds	r4, #1
 8006974:	3e03      	subs	r6, #3
 8006976:	42b4      	cmp	r4, r6
 8006978:	bf88      	it	hi
 800697a:	2304      	movhi	r3, #4
 800697c:	4443      	add	r3, r8
 800697e:	2200      	movs	r2, #0
 8006980:	f843 2b04 	str.w	r2, [r3], #4
 8006984:	429f      	cmp	r7, r3
 8006986:	d2fb      	bcs.n	8006980 <__hexnan+0xcc>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	b91b      	cbnz	r3, 8006994 <__hexnan+0xe0>
 800698c:	4547      	cmp	r7, r8
 800698e:	d127      	bne.n	80069e0 <__hexnan+0x12c>
 8006990:	2301      	movs	r3, #1
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	2005      	movs	r0, #5
 8006996:	e026      	b.n	80069e6 <__hexnan+0x132>
 8006998:	3501      	adds	r5, #1
 800699a:	2d08      	cmp	r5, #8
 800699c:	f10b 0b01 	add.w	fp, fp, #1
 80069a0:	dd06      	ble.n	80069b0 <__hexnan+0xfc>
 80069a2:	4544      	cmp	r4, r8
 80069a4:	d9c3      	bls.n	800692e <__hexnan+0x7a>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80069ac:	2501      	movs	r5, #1
 80069ae:	3c04      	subs	r4, #4
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	f000 000f 	and.w	r0, r0, #15
 80069b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	e7b7      	b.n	800692e <__hexnan+0x7a>
 80069be:	2508      	movs	r5, #8
 80069c0:	e7b5      	b.n	800692e <__hexnan+0x7a>
 80069c2:	9b01      	ldr	r3, [sp, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0df      	beq.n	8006988 <__hexnan+0xd4>
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069cc:	f1c3 0320 	rsb	r3, r3, #32
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
 80069d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80069d8:	401a      	ands	r2, r3
 80069da:	f846 2c04 	str.w	r2, [r6, #-4]
 80069de:	e7d3      	b.n	8006988 <__hexnan+0xd4>
 80069e0:	3f04      	subs	r7, #4
 80069e2:	e7d1      	b.n	8006988 <__hexnan+0xd4>
 80069e4:	2004      	movs	r0, #4
 80069e6:	b007      	add	sp, #28
 80069e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080069ec <_localeconv_r>:
 80069ec:	4800      	ldr	r0, [pc, #0]	; (80069f0 <_localeconv_r+0x4>)
 80069ee:	4770      	bx	lr
 80069f0:	20000158 	.word	0x20000158

080069f4 <malloc>:
 80069f4:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <malloc+0xc>)
 80069f6:	4601      	mov	r1, r0
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	f000 bd67 	b.w	80074cc <_malloc_r>
 80069fe:	bf00      	nop
 8006a00:	20000000 	.word	0x20000000

08006a04 <__ascii_mbtowc>:
 8006a04:	b082      	sub	sp, #8
 8006a06:	b901      	cbnz	r1, 8006a0a <__ascii_mbtowc+0x6>
 8006a08:	a901      	add	r1, sp, #4
 8006a0a:	b142      	cbz	r2, 8006a1e <__ascii_mbtowc+0x1a>
 8006a0c:	b14b      	cbz	r3, 8006a22 <__ascii_mbtowc+0x1e>
 8006a0e:	7813      	ldrb	r3, [r2, #0]
 8006a10:	600b      	str	r3, [r1, #0]
 8006a12:	7812      	ldrb	r2, [r2, #0]
 8006a14:	1e10      	subs	r0, r2, #0
 8006a16:	bf18      	it	ne
 8006a18:	2001      	movne	r0, #1
 8006a1a:	b002      	add	sp, #8
 8006a1c:	4770      	bx	lr
 8006a1e:	4610      	mov	r0, r2
 8006a20:	e7fb      	b.n	8006a1a <__ascii_mbtowc+0x16>
 8006a22:	f06f 0001 	mvn.w	r0, #1
 8006a26:	e7f8      	b.n	8006a1a <__ascii_mbtowc+0x16>

08006a28 <memcpy>:
 8006a28:	440a      	add	r2, r1
 8006a2a:	4291      	cmp	r1, r2
 8006a2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a30:	d100      	bne.n	8006a34 <memcpy+0xc>
 8006a32:	4770      	bx	lr
 8006a34:	b510      	push	{r4, lr}
 8006a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	d1f9      	bne.n	8006a36 <memcpy+0xe>
 8006a42:	bd10      	pop	{r4, pc}

08006a44 <_Balloc>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	b976      	cbnz	r6, 8006a6c <_Balloc+0x28>
 8006a4e:	2010      	movs	r0, #16
 8006a50:	f7ff ffd0 	bl	80069f4 <malloc>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6260      	str	r0, [r4, #36]	; 0x24
 8006a58:	b920      	cbnz	r0, 8006a64 <_Balloc+0x20>
 8006a5a:	4b18      	ldr	r3, [pc, #96]	; (8006abc <_Balloc+0x78>)
 8006a5c:	4818      	ldr	r0, [pc, #96]	; (8006ac0 <_Balloc+0x7c>)
 8006a5e:	2166      	movs	r1, #102	; 0x66
 8006a60:	f000 ff40 	bl	80078e4 <__assert_func>
 8006a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a68:	6006      	str	r6, [r0, #0]
 8006a6a:	60c6      	str	r6, [r0, #12]
 8006a6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a6e:	68f3      	ldr	r3, [r6, #12]
 8006a70:	b183      	cbz	r3, 8006a94 <_Balloc+0x50>
 8006a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a7a:	b9b8      	cbnz	r0, 8006aac <_Balloc+0x68>
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8006a82:	1d72      	adds	r2, r6, #5
 8006a84:	0092      	lsls	r2, r2, #2
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fc9d 	bl	80073c6 <_calloc_r>
 8006a8c:	b160      	cbz	r0, 8006aa8 <_Balloc+0x64>
 8006a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a92:	e00e      	b.n	8006ab2 <_Balloc+0x6e>
 8006a94:	2221      	movs	r2, #33	; 0x21
 8006a96:	2104      	movs	r1, #4
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fc94 	bl	80073c6 <_calloc_r>
 8006a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa0:	60f0      	str	r0, [r6, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e4      	bne.n	8006a72 <_Balloc+0x2e>
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	6802      	ldr	r2, [r0, #0]
 8006aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ab8:	e7f7      	b.n	8006aaa <_Balloc+0x66>
 8006aba:	bf00      	nop
 8006abc:	08008616 	.word	0x08008616
 8006ac0:	08008714 	.word	0x08008714

08006ac4 <_Bfree>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b976      	cbnz	r6, 8006aec <_Bfree+0x28>
 8006ace:	2010      	movs	r0, #16
 8006ad0:	f7ff ff90 	bl	80069f4 <malloc>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6268      	str	r0, [r5, #36]	; 0x24
 8006ad8:	b920      	cbnz	r0, 8006ae4 <_Bfree+0x20>
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <_Bfree+0x3c>)
 8006adc:	4809      	ldr	r0, [pc, #36]	; (8006b04 <_Bfree+0x40>)
 8006ade:	218a      	movs	r1, #138	; 0x8a
 8006ae0:	f000 ff00 	bl	80078e4 <__assert_func>
 8006ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ae8:	6006      	str	r6, [r0, #0]
 8006aea:	60c6      	str	r6, [r0, #12]
 8006aec:	b13c      	cbz	r4, 8006afe <_Bfree+0x3a>
 8006aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006af0:	6862      	ldr	r2, [r4, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006af8:	6021      	str	r1, [r4, #0]
 8006afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	08008616 	.word	0x08008616
 8006b04:	08008714 	.word	0x08008714

08006b08 <__multadd>:
 8006b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0c:	690d      	ldr	r5, [r1, #16]
 8006b0e:	4607      	mov	r7, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	461e      	mov	r6, r3
 8006b14:	f101 0c14 	add.w	ip, r1, #20
 8006b18:	2000      	movs	r0, #0
 8006b1a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b1e:	b299      	uxth	r1, r3
 8006b20:	fb02 6101 	mla	r1, r2, r1, r6
 8006b24:	0c1e      	lsrs	r6, r3, #16
 8006b26:	0c0b      	lsrs	r3, r1, #16
 8006b28:	fb02 3306 	mla	r3, r2, r6, r3
 8006b2c:	b289      	uxth	r1, r1
 8006b2e:	3001      	adds	r0, #1
 8006b30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b34:	4285      	cmp	r5, r0
 8006b36:	f84c 1b04 	str.w	r1, [ip], #4
 8006b3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b3e:	dcec      	bgt.n	8006b1a <__multadd+0x12>
 8006b40:	b30e      	cbz	r6, 8006b86 <__multadd+0x7e>
 8006b42:	68a3      	ldr	r3, [r4, #8]
 8006b44:	42ab      	cmp	r3, r5
 8006b46:	dc19      	bgt.n	8006b7c <__multadd+0x74>
 8006b48:	6861      	ldr	r1, [r4, #4]
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	3101      	adds	r1, #1
 8006b4e:	f7ff ff79 	bl	8006a44 <_Balloc>
 8006b52:	4680      	mov	r8, r0
 8006b54:	b928      	cbnz	r0, 8006b62 <__multadd+0x5a>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <__multadd+0x84>)
 8006b5a:	480d      	ldr	r0, [pc, #52]	; (8006b90 <__multadd+0x88>)
 8006b5c:	21b5      	movs	r1, #181	; 0xb5
 8006b5e:	f000 fec1 	bl	80078e4 <__assert_func>
 8006b62:	6922      	ldr	r2, [r4, #16]
 8006b64:	3202      	adds	r2, #2
 8006b66:	f104 010c 	add.w	r1, r4, #12
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	300c      	adds	r0, #12
 8006b6e:	f7ff ff5b 	bl	8006a28 <memcpy>
 8006b72:	4621      	mov	r1, r4
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff ffa5 	bl	8006ac4 <_Bfree>
 8006b7a:	4644      	mov	r4, r8
 8006b7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b80:	3501      	adds	r5, #1
 8006b82:	615e      	str	r6, [r3, #20]
 8006b84:	6125      	str	r5, [r4, #16]
 8006b86:	4620      	mov	r0, r4
 8006b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8c:	08008688 	.word	0x08008688
 8006b90:	08008714 	.word	0x08008714

08006b94 <__s2b>:
 8006b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b98:	460c      	mov	r4, r1
 8006b9a:	4615      	mov	r5, r2
 8006b9c:	461f      	mov	r7, r3
 8006b9e:	2209      	movs	r2, #9
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ba8:	2100      	movs	r1, #0
 8006baa:	2201      	movs	r2, #1
 8006bac:	429a      	cmp	r2, r3
 8006bae:	db09      	blt.n	8006bc4 <__s2b+0x30>
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff ff47 	bl	8006a44 <_Balloc>
 8006bb6:	b940      	cbnz	r0, 8006bca <__s2b+0x36>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <__s2b+0x8c>)
 8006bbc:	4819      	ldr	r0, [pc, #100]	; (8006c24 <__s2b+0x90>)
 8006bbe:	21ce      	movs	r1, #206	; 0xce
 8006bc0:	f000 fe90 	bl	80078e4 <__assert_func>
 8006bc4:	0052      	lsls	r2, r2, #1
 8006bc6:	3101      	adds	r1, #1
 8006bc8:	e7f0      	b.n	8006bac <__s2b+0x18>
 8006bca:	9b08      	ldr	r3, [sp, #32]
 8006bcc:	6143      	str	r3, [r0, #20]
 8006bce:	2d09      	cmp	r5, #9
 8006bd0:	f04f 0301 	mov.w	r3, #1
 8006bd4:	6103      	str	r3, [r0, #16]
 8006bd6:	dd16      	ble.n	8006c06 <__s2b+0x72>
 8006bd8:	f104 0909 	add.w	r9, r4, #9
 8006bdc:	46c8      	mov	r8, r9
 8006bde:	442c      	add	r4, r5
 8006be0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006be4:	4601      	mov	r1, r0
 8006be6:	3b30      	subs	r3, #48	; 0x30
 8006be8:	220a      	movs	r2, #10
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ff8c 	bl	8006b08 <__multadd>
 8006bf0:	45a0      	cmp	r8, r4
 8006bf2:	d1f5      	bne.n	8006be0 <__s2b+0x4c>
 8006bf4:	f1a5 0408 	sub.w	r4, r5, #8
 8006bf8:	444c      	add	r4, r9
 8006bfa:	1b2d      	subs	r5, r5, r4
 8006bfc:	1963      	adds	r3, r4, r5
 8006bfe:	42bb      	cmp	r3, r7
 8006c00:	db04      	blt.n	8006c0c <__s2b+0x78>
 8006c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c06:	340a      	adds	r4, #10
 8006c08:	2509      	movs	r5, #9
 8006c0a:	e7f6      	b.n	8006bfa <__s2b+0x66>
 8006c0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c10:	4601      	mov	r1, r0
 8006c12:	3b30      	subs	r3, #48	; 0x30
 8006c14:	220a      	movs	r2, #10
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7ff ff76 	bl	8006b08 <__multadd>
 8006c1c:	e7ee      	b.n	8006bfc <__s2b+0x68>
 8006c1e:	bf00      	nop
 8006c20:	08008688 	.word	0x08008688
 8006c24:	08008714 	.word	0x08008714

08006c28 <__hi0bits>:
 8006c28:	0c03      	lsrs	r3, r0, #16
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	b9d3      	cbnz	r3, 8006c64 <__hi0bits+0x3c>
 8006c2e:	0400      	lsls	r0, r0, #16
 8006c30:	2310      	movs	r3, #16
 8006c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c36:	bf04      	itt	eq
 8006c38:	0200      	lsleq	r0, r0, #8
 8006c3a:	3308      	addeq	r3, #8
 8006c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c40:	bf04      	itt	eq
 8006c42:	0100      	lsleq	r0, r0, #4
 8006c44:	3304      	addeq	r3, #4
 8006c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c4a:	bf04      	itt	eq
 8006c4c:	0080      	lsleq	r0, r0, #2
 8006c4e:	3302      	addeq	r3, #2
 8006c50:	2800      	cmp	r0, #0
 8006c52:	db05      	blt.n	8006c60 <__hi0bits+0x38>
 8006c54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c58:	f103 0301 	add.w	r3, r3, #1
 8006c5c:	bf08      	it	eq
 8006c5e:	2320      	moveq	r3, #32
 8006c60:	4618      	mov	r0, r3
 8006c62:	4770      	bx	lr
 8006c64:	2300      	movs	r3, #0
 8006c66:	e7e4      	b.n	8006c32 <__hi0bits+0xa>

08006c68 <__lo0bits>:
 8006c68:	6803      	ldr	r3, [r0, #0]
 8006c6a:	f013 0207 	ands.w	r2, r3, #7
 8006c6e:	4601      	mov	r1, r0
 8006c70:	d00b      	beq.n	8006c8a <__lo0bits+0x22>
 8006c72:	07da      	lsls	r2, r3, #31
 8006c74:	d423      	bmi.n	8006cbe <__lo0bits+0x56>
 8006c76:	0798      	lsls	r0, r3, #30
 8006c78:	bf49      	itett	mi
 8006c7a:	085b      	lsrmi	r3, r3, #1
 8006c7c:	089b      	lsrpl	r3, r3, #2
 8006c7e:	2001      	movmi	r0, #1
 8006c80:	600b      	strmi	r3, [r1, #0]
 8006c82:	bf5c      	itt	pl
 8006c84:	600b      	strpl	r3, [r1, #0]
 8006c86:	2002      	movpl	r0, #2
 8006c88:	4770      	bx	lr
 8006c8a:	b298      	uxth	r0, r3
 8006c8c:	b9a8      	cbnz	r0, 8006cba <__lo0bits+0x52>
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	2010      	movs	r0, #16
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	b90a      	cbnz	r2, 8006c9a <__lo0bits+0x32>
 8006c96:	3008      	adds	r0, #8
 8006c98:	0a1b      	lsrs	r3, r3, #8
 8006c9a:	071a      	lsls	r2, r3, #28
 8006c9c:	bf04      	itt	eq
 8006c9e:	091b      	lsreq	r3, r3, #4
 8006ca0:	3004      	addeq	r0, #4
 8006ca2:	079a      	lsls	r2, r3, #30
 8006ca4:	bf04      	itt	eq
 8006ca6:	089b      	lsreq	r3, r3, #2
 8006ca8:	3002      	addeq	r0, #2
 8006caa:	07da      	lsls	r2, r3, #31
 8006cac:	d403      	bmi.n	8006cb6 <__lo0bits+0x4e>
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	f100 0001 	add.w	r0, r0, #1
 8006cb4:	d005      	beq.n	8006cc2 <__lo0bits+0x5a>
 8006cb6:	600b      	str	r3, [r1, #0]
 8006cb8:	4770      	bx	lr
 8006cba:	4610      	mov	r0, r2
 8006cbc:	e7e9      	b.n	8006c92 <__lo0bits+0x2a>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	4770      	bx	lr
 8006cc2:	2020      	movs	r0, #32
 8006cc4:	4770      	bx	lr
	...

08006cc8 <__i2b>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	460c      	mov	r4, r1
 8006ccc:	2101      	movs	r1, #1
 8006cce:	f7ff feb9 	bl	8006a44 <_Balloc>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	b928      	cbnz	r0, 8006ce2 <__i2b+0x1a>
 8006cd6:	4b05      	ldr	r3, [pc, #20]	; (8006cec <__i2b+0x24>)
 8006cd8:	4805      	ldr	r0, [pc, #20]	; (8006cf0 <__i2b+0x28>)
 8006cda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cde:	f000 fe01 	bl	80078e4 <__assert_func>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	6144      	str	r4, [r0, #20]
 8006ce6:	6103      	str	r3, [r0, #16]
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	bf00      	nop
 8006cec:	08008688 	.word	0x08008688
 8006cf0:	08008714 	.word	0x08008714

08006cf4 <__multiply>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	4691      	mov	r9, r2
 8006cfa:	690a      	ldr	r2, [r1, #16]
 8006cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	bfb8      	it	lt
 8006d04:	460b      	movlt	r3, r1
 8006d06:	460c      	mov	r4, r1
 8006d08:	bfbc      	itt	lt
 8006d0a:	464c      	movlt	r4, r9
 8006d0c:	4699      	movlt	r9, r3
 8006d0e:	6927      	ldr	r7, [r4, #16]
 8006d10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d14:	68a3      	ldr	r3, [r4, #8]
 8006d16:	6861      	ldr	r1, [r4, #4]
 8006d18:	eb07 060a 	add.w	r6, r7, sl
 8006d1c:	42b3      	cmp	r3, r6
 8006d1e:	b085      	sub	sp, #20
 8006d20:	bfb8      	it	lt
 8006d22:	3101      	addlt	r1, #1
 8006d24:	f7ff fe8e 	bl	8006a44 <_Balloc>
 8006d28:	b930      	cbnz	r0, 8006d38 <__multiply+0x44>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b44      	ldr	r3, [pc, #272]	; (8006e40 <__multiply+0x14c>)
 8006d2e:	4845      	ldr	r0, [pc, #276]	; (8006e44 <__multiply+0x150>)
 8006d30:	f240 115d 	movw	r1, #349	; 0x15d
 8006d34:	f000 fdd6 	bl	80078e4 <__assert_func>
 8006d38:	f100 0514 	add.w	r5, r0, #20
 8006d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d40:	462b      	mov	r3, r5
 8006d42:	2200      	movs	r2, #0
 8006d44:	4543      	cmp	r3, r8
 8006d46:	d321      	bcc.n	8006d8c <__multiply+0x98>
 8006d48:	f104 0314 	add.w	r3, r4, #20
 8006d4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d50:	f109 0314 	add.w	r3, r9, #20
 8006d54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d58:	9202      	str	r2, [sp, #8]
 8006d5a:	1b3a      	subs	r2, r7, r4
 8006d5c:	3a15      	subs	r2, #21
 8006d5e:	f022 0203 	bic.w	r2, r2, #3
 8006d62:	3204      	adds	r2, #4
 8006d64:	f104 0115 	add.w	r1, r4, #21
 8006d68:	428f      	cmp	r7, r1
 8006d6a:	bf38      	it	cc
 8006d6c:	2204      	movcc	r2, #4
 8006d6e:	9201      	str	r2, [sp, #4]
 8006d70:	9a02      	ldr	r2, [sp, #8]
 8006d72:	9303      	str	r3, [sp, #12]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d80c      	bhi.n	8006d92 <__multiply+0x9e>
 8006d78:	2e00      	cmp	r6, #0
 8006d7a:	dd03      	ble.n	8006d84 <__multiply+0x90>
 8006d7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d05a      	beq.n	8006e3a <__multiply+0x146>
 8006d84:	6106      	str	r6, [r0, #16]
 8006d86:	b005      	add	sp, #20
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	f843 2b04 	str.w	r2, [r3], #4
 8006d90:	e7d8      	b.n	8006d44 <__multiply+0x50>
 8006d92:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d96:	f1ba 0f00 	cmp.w	sl, #0
 8006d9a:	d024      	beq.n	8006de6 <__multiply+0xf2>
 8006d9c:	f104 0e14 	add.w	lr, r4, #20
 8006da0:	46a9      	mov	r9, r5
 8006da2:	f04f 0c00 	mov.w	ip, #0
 8006da6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006daa:	f8d9 1000 	ldr.w	r1, [r9]
 8006dae:	fa1f fb82 	uxth.w	fp, r2
 8006db2:	b289      	uxth	r1, r1
 8006db4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006db8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8006dc0:	4461      	add	r1, ip
 8006dc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006dc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006dce:	b289      	uxth	r1, r1
 8006dd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dd4:	4577      	cmp	r7, lr
 8006dd6:	f849 1b04 	str.w	r1, [r9], #4
 8006dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006dde:	d8e2      	bhi.n	8006da6 <__multiply+0xb2>
 8006de0:	9a01      	ldr	r2, [sp, #4]
 8006de2:	f845 c002 	str.w	ip, [r5, r2]
 8006de6:	9a03      	ldr	r2, [sp, #12]
 8006de8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006dec:	3304      	adds	r3, #4
 8006dee:	f1b9 0f00 	cmp.w	r9, #0
 8006df2:	d020      	beq.n	8006e36 <__multiply+0x142>
 8006df4:	6829      	ldr	r1, [r5, #0]
 8006df6:	f104 0c14 	add.w	ip, r4, #20
 8006dfa:	46ae      	mov	lr, r5
 8006dfc:	f04f 0a00 	mov.w	sl, #0
 8006e00:	f8bc b000 	ldrh.w	fp, [ip]
 8006e04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e08:	fb09 220b 	mla	r2, r9, fp, r2
 8006e0c:	4492      	add	sl, r2
 8006e0e:	b289      	uxth	r1, r1
 8006e10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e14:	f84e 1b04 	str.w	r1, [lr], #4
 8006e18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e1c:	f8be 1000 	ldrh.w	r1, [lr]
 8006e20:	0c12      	lsrs	r2, r2, #16
 8006e22:	fb09 1102 	mla	r1, r9, r2, r1
 8006e26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e2a:	4567      	cmp	r7, ip
 8006e2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e30:	d8e6      	bhi.n	8006e00 <__multiply+0x10c>
 8006e32:	9a01      	ldr	r2, [sp, #4]
 8006e34:	50a9      	str	r1, [r5, r2]
 8006e36:	3504      	adds	r5, #4
 8006e38:	e79a      	b.n	8006d70 <__multiply+0x7c>
 8006e3a:	3e01      	subs	r6, #1
 8006e3c:	e79c      	b.n	8006d78 <__multiply+0x84>
 8006e3e:	bf00      	nop
 8006e40:	08008688 	.word	0x08008688
 8006e44:	08008714 	.word	0x08008714

08006e48 <__pow5mult>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	4615      	mov	r5, r2
 8006e4e:	f012 0203 	ands.w	r2, r2, #3
 8006e52:	4606      	mov	r6, r0
 8006e54:	460f      	mov	r7, r1
 8006e56:	d007      	beq.n	8006e68 <__pow5mult+0x20>
 8006e58:	4c25      	ldr	r4, [pc, #148]	; (8006ef0 <__pow5mult+0xa8>)
 8006e5a:	3a01      	subs	r2, #1
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e62:	f7ff fe51 	bl	8006b08 <__multadd>
 8006e66:	4607      	mov	r7, r0
 8006e68:	10ad      	asrs	r5, r5, #2
 8006e6a:	d03d      	beq.n	8006ee8 <__pow5mult+0xa0>
 8006e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e6e:	b97c      	cbnz	r4, 8006e90 <__pow5mult+0x48>
 8006e70:	2010      	movs	r0, #16
 8006e72:	f7ff fdbf 	bl	80069f4 <malloc>
 8006e76:	4602      	mov	r2, r0
 8006e78:	6270      	str	r0, [r6, #36]	; 0x24
 8006e7a:	b928      	cbnz	r0, 8006e88 <__pow5mult+0x40>
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <__pow5mult+0xac>)
 8006e7e:	481e      	ldr	r0, [pc, #120]	; (8006ef8 <__pow5mult+0xb0>)
 8006e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e84:	f000 fd2e 	bl	80078e4 <__assert_func>
 8006e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e8c:	6004      	str	r4, [r0, #0]
 8006e8e:	60c4      	str	r4, [r0, #12]
 8006e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e98:	b94c      	cbnz	r4, 8006eae <__pow5mult+0x66>
 8006e9a:	f240 2171 	movw	r1, #625	; 0x271
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff ff12 	bl	8006cc8 <__i2b>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006eaa:	4604      	mov	r4, r0
 8006eac:	6003      	str	r3, [r0, #0]
 8006eae:	f04f 0900 	mov.w	r9, #0
 8006eb2:	07eb      	lsls	r3, r5, #31
 8006eb4:	d50a      	bpl.n	8006ecc <__pow5mult+0x84>
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7ff ff1a 	bl	8006cf4 <__multiply>
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff fdfd 	bl	8006ac4 <_Bfree>
 8006eca:	4647      	mov	r7, r8
 8006ecc:	106d      	asrs	r5, r5, #1
 8006ece:	d00b      	beq.n	8006ee8 <__pow5mult+0xa0>
 8006ed0:	6820      	ldr	r0, [r4, #0]
 8006ed2:	b938      	cbnz	r0, 8006ee4 <__pow5mult+0x9c>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff ff0b 	bl	8006cf4 <__multiply>
 8006ede:	6020      	str	r0, [r4, #0]
 8006ee0:	f8c0 9000 	str.w	r9, [r0]
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	e7e4      	b.n	8006eb2 <__pow5mult+0x6a>
 8006ee8:	4638      	mov	r0, r7
 8006eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eee:	bf00      	nop
 8006ef0:	08008860 	.word	0x08008860
 8006ef4:	08008616 	.word	0x08008616
 8006ef8:	08008714 	.word	0x08008714

08006efc <__lshift>:
 8006efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f00:	460c      	mov	r4, r1
 8006f02:	6849      	ldr	r1, [r1, #4]
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f0a:	68a3      	ldr	r3, [r4, #8]
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	4691      	mov	r9, r2
 8006f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f14:	f108 0601 	add.w	r6, r8, #1
 8006f18:	42b3      	cmp	r3, r6
 8006f1a:	db0b      	blt.n	8006f34 <__lshift+0x38>
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff fd91 	bl	8006a44 <_Balloc>
 8006f22:	4605      	mov	r5, r0
 8006f24:	b948      	cbnz	r0, 8006f3a <__lshift+0x3e>
 8006f26:	4602      	mov	r2, r0
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <__lshift+0xd8>)
 8006f2a:	482b      	ldr	r0, [pc, #172]	; (8006fd8 <__lshift+0xdc>)
 8006f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f30:	f000 fcd8 	bl	80078e4 <__assert_func>
 8006f34:	3101      	adds	r1, #1
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	e7ee      	b.n	8006f18 <__lshift+0x1c>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f100 0114 	add.w	r1, r0, #20
 8006f40:	f100 0210 	add.w	r2, r0, #16
 8006f44:	4618      	mov	r0, r3
 8006f46:	4553      	cmp	r3, sl
 8006f48:	db37      	blt.n	8006fba <__lshift+0xbe>
 8006f4a:	6920      	ldr	r0, [r4, #16]
 8006f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f50:	f104 0314 	add.w	r3, r4, #20
 8006f54:	f019 091f 	ands.w	r9, r9, #31
 8006f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f60:	d02f      	beq.n	8006fc2 <__lshift+0xc6>
 8006f62:	f1c9 0e20 	rsb	lr, r9, #32
 8006f66:	468a      	mov	sl, r1
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	fa02 f209 	lsl.w	r2, r2, r9
 8006f72:	ea42 020c 	orr.w	r2, r2, ip
 8006f76:	f84a 2b04 	str.w	r2, [sl], #4
 8006f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f7e:	4298      	cmp	r0, r3
 8006f80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006f84:	d8f2      	bhi.n	8006f6c <__lshift+0x70>
 8006f86:	1b03      	subs	r3, r0, r4
 8006f88:	3b15      	subs	r3, #21
 8006f8a:	f023 0303 	bic.w	r3, r3, #3
 8006f8e:	3304      	adds	r3, #4
 8006f90:	f104 0215 	add.w	r2, r4, #21
 8006f94:	4290      	cmp	r0, r2
 8006f96:	bf38      	it	cc
 8006f98:	2304      	movcc	r3, #4
 8006f9a:	f841 c003 	str.w	ip, [r1, r3]
 8006f9e:	f1bc 0f00 	cmp.w	ip, #0
 8006fa2:	d001      	beq.n	8006fa8 <__lshift+0xac>
 8006fa4:	f108 0602 	add.w	r6, r8, #2
 8006fa8:	3e01      	subs	r6, #1
 8006faa:	4638      	mov	r0, r7
 8006fac:	612e      	str	r6, [r5, #16]
 8006fae:	4621      	mov	r1, r4
 8006fb0:	f7ff fd88 	bl	8006ac4 <_Bfree>
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	e7c1      	b.n	8006f46 <__lshift+0x4a>
 8006fc2:	3904      	subs	r1, #4
 8006fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fcc:	4298      	cmp	r0, r3
 8006fce:	d8f9      	bhi.n	8006fc4 <__lshift+0xc8>
 8006fd0:	e7ea      	b.n	8006fa8 <__lshift+0xac>
 8006fd2:	bf00      	nop
 8006fd4:	08008688 	.word	0x08008688
 8006fd8:	08008714 	.word	0x08008714

08006fdc <__mcmp>:
 8006fdc:	b530      	push	{r4, r5, lr}
 8006fde:	6902      	ldr	r2, [r0, #16]
 8006fe0:	690c      	ldr	r4, [r1, #16]
 8006fe2:	1b12      	subs	r2, r2, r4
 8006fe4:	d10e      	bne.n	8007004 <__mcmp+0x28>
 8006fe6:	f100 0314 	add.w	r3, r0, #20
 8006fea:	3114      	adds	r1, #20
 8006fec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ffc:	42a5      	cmp	r5, r4
 8006ffe:	d003      	beq.n	8007008 <__mcmp+0x2c>
 8007000:	d305      	bcc.n	800700e <__mcmp+0x32>
 8007002:	2201      	movs	r2, #1
 8007004:	4610      	mov	r0, r2
 8007006:	bd30      	pop	{r4, r5, pc}
 8007008:	4283      	cmp	r3, r0
 800700a:	d3f3      	bcc.n	8006ff4 <__mcmp+0x18>
 800700c:	e7fa      	b.n	8007004 <__mcmp+0x28>
 800700e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007012:	e7f7      	b.n	8007004 <__mcmp+0x28>

08007014 <__mdiff>:
 8007014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	460c      	mov	r4, r1
 800701a:	4606      	mov	r6, r0
 800701c:	4611      	mov	r1, r2
 800701e:	4620      	mov	r0, r4
 8007020:	4690      	mov	r8, r2
 8007022:	f7ff ffdb 	bl	8006fdc <__mcmp>
 8007026:	1e05      	subs	r5, r0, #0
 8007028:	d110      	bne.n	800704c <__mdiff+0x38>
 800702a:	4629      	mov	r1, r5
 800702c:	4630      	mov	r0, r6
 800702e:	f7ff fd09 	bl	8006a44 <_Balloc>
 8007032:	b930      	cbnz	r0, 8007042 <__mdiff+0x2e>
 8007034:	4b3a      	ldr	r3, [pc, #232]	; (8007120 <__mdiff+0x10c>)
 8007036:	4602      	mov	r2, r0
 8007038:	f240 2132 	movw	r1, #562	; 0x232
 800703c:	4839      	ldr	r0, [pc, #228]	; (8007124 <__mdiff+0x110>)
 800703e:	f000 fc51 	bl	80078e4 <__assert_func>
 8007042:	2301      	movs	r3, #1
 8007044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	bfa4      	itt	ge
 800704e:	4643      	movge	r3, r8
 8007050:	46a0      	movge	r8, r4
 8007052:	4630      	mov	r0, r6
 8007054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007058:	bfa6      	itte	ge
 800705a:	461c      	movge	r4, r3
 800705c:	2500      	movge	r5, #0
 800705e:	2501      	movlt	r5, #1
 8007060:	f7ff fcf0 	bl	8006a44 <_Balloc>
 8007064:	b920      	cbnz	r0, 8007070 <__mdiff+0x5c>
 8007066:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <__mdiff+0x10c>)
 8007068:	4602      	mov	r2, r0
 800706a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800706e:	e7e5      	b.n	800703c <__mdiff+0x28>
 8007070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007074:	6926      	ldr	r6, [r4, #16]
 8007076:	60c5      	str	r5, [r0, #12]
 8007078:	f104 0914 	add.w	r9, r4, #20
 800707c:	f108 0514 	add.w	r5, r8, #20
 8007080:	f100 0e14 	add.w	lr, r0, #20
 8007084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800708c:	f108 0210 	add.w	r2, r8, #16
 8007090:	46f2      	mov	sl, lr
 8007092:	2100      	movs	r1, #0
 8007094:	f859 3b04 	ldr.w	r3, [r9], #4
 8007098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800709c:	fa1f f883 	uxth.w	r8, r3
 80070a0:	fa11 f18b 	uxtah	r1, r1, fp
 80070a4:	0c1b      	lsrs	r3, r3, #16
 80070a6:	eba1 0808 	sub.w	r8, r1, r8
 80070aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80070b2:	fa1f f888 	uxth.w	r8, r8
 80070b6:	1419      	asrs	r1, r3, #16
 80070b8:	454e      	cmp	r6, r9
 80070ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070be:	f84a 3b04 	str.w	r3, [sl], #4
 80070c2:	d8e7      	bhi.n	8007094 <__mdiff+0x80>
 80070c4:	1b33      	subs	r3, r6, r4
 80070c6:	3b15      	subs	r3, #21
 80070c8:	f023 0303 	bic.w	r3, r3, #3
 80070cc:	3304      	adds	r3, #4
 80070ce:	3415      	adds	r4, #21
 80070d0:	42a6      	cmp	r6, r4
 80070d2:	bf38      	it	cc
 80070d4:	2304      	movcc	r3, #4
 80070d6:	441d      	add	r5, r3
 80070d8:	4473      	add	r3, lr
 80070da:	469e      	mov	lr, r3
 80070dc:	462e      	mov	r6, r5
 80070de:	4566      	cmp	r6, ip
 80070e0:	d30e      	bcc.n	8007100 <__mdiff+0xec>
 80070e2:	f10c 0203 	add.w	r2, ip, #3
 80070e6:	1b52      	subs	r2, r2, r5
 80070e8:	f022 0203 	bic.w	r2, r2, #3
 80070ec:	3d03      	subs	r5, #3
 80070ee:	45ac      	cmp	ip, r5
 80070f0:	bf38      	it	cc
 80070f2:	2200      	movcc	r2, #0
 80070f4:	441a      	add	r2, r3
 80070f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070fa:	b17b      	cbz	r3, 800711c <__mdiff+0x108>
 80070fc:	6107      	str	r7, [r0, #16]
 80070fe:	e7a3      	b.n	8007048 <__mdiff+0x34>
 8007100:	f856 8b04 	ldr.w	r8, [r6], #4
 8007104:	fa11 f288 	uxtah	r2, r1, r8
 8007108:	1414      	asrs	r4, r2, #16
 800710a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800710e:	b292      	uxth	r2, r2
 8007110:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007114:	f84e 2b04 	str.w	r2, [lr], #4
 8007118:	1421      	asrs	r1, r4, #16
 800711a:	e7e0      	b.n	80070de <__mdiff+0xca>
 800711c:	3f01      	subs	r7, #1
 800711e:	e7ea      	b.n	80070f6 <__mdiff+0xe2>
 8007120:	08008688 	.word	0x08008688
 8007124:	08008714 	.word	0x08008714

08007128 <__ulp>:
 8007128:	b082      	sub	sp, #8
 800712a:	ed8d 0b00 	vstr	d0, [sp]
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	4912      	ldr	r1, [pc, #72]	; (800717c <__ulp+0x54>)
 8007132:	4019      	ands	r1, r3
 8007134:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007138:	2900      	cmp	r1, #0
 800713a:	dd05      	ble.n	8007148 <__ulp+0x20>
 800713c:	2200      	movs	r2, #0
 800713e:	460b      	mov	r3, r1
 8007140:	ec43 2b10 	vmov	d0, r2, r3
 8007144:	b002      	add	sp, #8
 8007146:	4770      	bx	lr
 8007148:	4249      	negs	r1, r1
 800714a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800714e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	da04      	bge.n	8007166 <__ulp+0x3e>
 800715c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007160:	fa41 f300 	asr.w	r3, r1, r0
 8007164:	e7ec      	b.n	8007140 <__ulp+0x18>
 8007166:	f1a0 0114 	sub.w	r1, r0, #20
 800716a:	291e      	cmp	r1, #30
 800716c:	bfda      	itte	le
 800716e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007172:	fa20 f101 	lsrle.w	r1, r0, r1
 8007176:	2101      	movgt	r1, #1
 8007178:	460a      	mov	r2, r1
 800717a:	e7e1      	b.n	8007140 <__ulp+0x18>
 800717c:	7ff00000 	.word	0x7ff00000

08007180 <__b2d>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	6905      	ldr	r5, [r0, #16]
 8007184:	f100 0714 	add.w	r7, r0, #20
 8007188:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800718c:	1f2e      	subs	r6, r5, #4
 800718e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007192:	4620      	mov	r0, r4
 8007194:	f7ff fd48 	bl	8006c28 <__hi0bits>
 8007198:	f1c0 0320 	rsb	r3, r0, #32
 800719c:	280a      	cmp	r0, #10
 800719e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800721c <__b2d+0x9c>
 80071a2:	600b      	str	r3, [r1, #0]
 80071a4:	dc14      	bgt.n	80071d0 <__b2d+0x50>
 80071a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80071aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80071ae:	42b7      	cmp	r7, r6
 80071b0:	ea41 030c 	orr.w	r3, r1, ip
 80071b4:	bf34      	ite	cc
 80071b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80071ba:	2100      	movcs	r1, #0
 80071bc:	3015      	adds	r0, #21
 80071be:	fa04 f000 	lsl.w	r0, r4, r0
 80071c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80071c6:	ea40 0201 	orr.w	r2, r0, r1
 80071ca:	ec43 2b10 	vmov	d0, r2, r3
 80071ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d0:	42b7      	cmp	r7, r6
 80071d2:	bf3a      	itte	cc
 80071d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80071d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80071dc:	2100      	movcs	r1, #0
 80071de:	380b      	subs	r0, #11
 80071e0:	d017      	beq.n	8007212 <__b2d+0x92>
 80071e2:	f1c0 0c20 	rsb	ip, r0, #32
 80071e6:	fa04 f500 	lsl.w	r5, r4, r0
 80071ea:	42be      	cmp	r6, r7
 80071ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80071f0:	ea45 0504 	orr.w	r5, r5, r4
 80071f4:	bf8c      	ite	hi
 80071f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80071fa:	2400      	movls	r4, #0
 80071fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007200:	fa01 f000 	lsl.w	r0, r1, r0
 8007204:	fa24 f40c 	lsr.w	r4, r4, ip
 8007208:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800720c:	ea40 0204 	orr.w	r2, r0, r4
 8007210:	e7db      	b.n	80071ca <__b2d+0x4a>
 8007212:	ea44 030c 	orr.w	r3, r4, ip
 8007216:	460a      	mov	r2, r1
 8007218:	e7d7      	b.n	80071ca <__b2d+0x4a>
 800721a:	bf00      	nop
 800721c:	3ff00000 	.word	0x3ff00000

08007220 <__d2b>:
 8007220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007224:	4689      	mov	r9, r1
 8007226:	2101      	movs	r1, #1
 8007228:	ec57 6b10 	vmov	r6, r7, d0
 800722c:	4690      	mov	r8, r2
 800722e:	f7ff fc09 	bl	8006a44 <_Balloc>
 8007232:	4604      	mov	r4, r0
 8007234:	b930      	cbnz	r0, 8007244 <__d2b+0x24>
 8007236:	4602      	mov	r2, r0
 8007238:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <__d2b+0xb0>)
 800723a:	4826      	ldr	r0, [pc, #152]	; (80072d4 <__d2b+0xb4>)
 800723c:	f240 310a 	movw	r1, #778	; 0x30a
 8007240:	f000 fb50 	bl	80078e4 <__assert_func>
 8007244:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800724c:	bb35      	cbnz	r5, 800729c <__d2b+0x7c>
 800724e:	2e00      	cmp	r6, #0
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	d028      	beq.n	80072a6 <__d2b+0x86>
 8007254:	4668      	mov	r0, sp
 8007256:	9600      	str	r6, [sp, #0]
 8007258:	f7ff fd06 	bl	8006c68 <__lo0bits>
 800725c:	9900      	ldr	r1, [sp, #0]
 800725e:	b300      	cbz	r0, 80072a2 <__d2b+0x82>
 8007260:	9a01      	ldr	r2, [sp, #4]
 8007262:	f1c0 0320 	rsb	r3, r0, #32
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	430b      	orrs	r3, r1
 800726c:	40c2      	lsrs	r2, r0
 800726e:	6163      	str	r3, [r4, #20]
 8007270:	9201      	str	r2, [sp, #4]
 8007272:	9b01      	ldr	r3, [sp, #4]
 8007274:	61a3      	str	r3, [r4, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bf14      	ite	ne
 800727a:	2202      	movne	r2, #2
 800727c:	2201      	moveq	r2, #1
 800727e:	6122      	str	r2, [r4, #16]
 8007280:	b1d5      	cbz	r5, 80072b8 <__d2b+0x98>
 8007282:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007286:	4405      	add	r5, r0
 8007288:	f8c9 5000 	str.w	r5, [r9]
 800728c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007290:	f8c8 0000 	str.w	r0, [r8]
 8007294:	4620      	mov	r0, r4
 8007296:	b003      	add	sp, #12
 8007298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800729c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072a0:	e7d5      	b.n	800724e <__d2b+0x2e>
 80072a2:	6161      	str	r1, [r4, #20]
 80072a4:	e7e5      	b.n	8007272 <__d2b+0x52>
 80072a6:	a801      	add	r0, sp, #4
 80072a8:	f7ff fcde 	bl	8006c68 <__lo0bits>
 80072ac:	9b01      	ldr	r3, [sp, #4]
 80072ae:	6163      	str	r3, [r4, #20]
 80072b0:	2201      	movs	r2, #1
 80072b2:	6122      	str	r2, [r4, #16]
 80072b4:	3020      	adds	r0, #32
 80072b6:	e7e3      	b.n	8007280 <__d2b+0x60>
 80072b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072c0:	f8c9 0000 	str.w	r0, [r9]
 80072c4:	6918      	ldr	r0, [r3, #16]
 80072c6:	f7ff fcaf 	bl	8006c28 <__hi0bits>
 80072ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072ce:	e7df      	b.n	8007290 <__d2b+0x70>
 80072d0:	08008688 	.word	0x08008688
 80072d4:	08008714 	.word	0x08008714

080072d8 <__ratio>:
 80072d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4688      	mov	r8, r1
 80072de:	4669      	mov	r1, sp
 80072e0:	4681      	mov	r9, r0
 80072e2:	f7ff ff4d 	bl	8007180 <__b2d>
 80072e6:	a901      	add	r1, sp, #4
 80072e8:	4640      	mov	r0, r8
 80072ea:	ec55 4b10 	vmov	r4, r5, d0
 80072ee:	f7ff ff47 	bl	8007180 <__b2d>
 80072f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80072fa:	eba3 0c02 	sub.w	ip, r3, r2
 80072fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007308:	ec51 0b10 	vmov	r0, r1, d0
 800730c:	2b00      	cmp	r3, #0
 800730e:	bfd6      	itet	le
 8007310:	460a      	movle	r2, r1
 8007312:	462a      	movgt	r2, r5
 8007314:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007318:	468b      	mov	fp, r1
 800731a:	462f      	mov	r7, r5
 800731c:	bfd4      	ite	le
 800731e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007322:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007326:	4620      	mov	r0, r4
 8007328:	ee10 2a10 	vmov	r2, s0
 800732c:	465b      	mov	r3, fp
 800732e:	4639      	mov	r1, r7
 8007330:	f7f9 fa94 	bl	800085c <__aeabi_ddiv>
 8007334:	ec41 0b10 	vmov	d0, r0, r1
 8007338:	b003      	add	sp, #12
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800733e <__copybits>:
 800733e:	3901      	subs	r1, #1
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	1149      	asrs	r1, r1, #5
 8007344:	6914      	ldr	r4, [r2, #16]
 8007346:	3101      	adds	r1, #1
 8007348:	f102 0314 	add.w	r3, r2, #20
 800734c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007350:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007354:	1f05      	subs	r5, r0, #4
 8007356:	42a3      	cmp	r3, r4
 8007358:	d30c      	bcc.n	8007374 <__copybits+0x36>
 800735a:	1aa3      	subs	r3, r4, r2
 800735c:	3b11      	subs	r3, #17
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	3211      	adds	r2, #17
 8007364:	42a2      	cmp	r2, r4
 8007366:	bf88      	it	hi
 8007368:	2300      	movhi	r3, #0
 800736a:	4418      	add	r0, r3
 800736c:	2300      	movs	r3, #0
 800736e:	4288      	cmp	r0, r1
 8007370:	d305      	bcc.n	800737e <__copybits+0x40>
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	f853 6b04 	ldr.w	r6, [r3], #4
 8007378:	f845 6f04 	str.w	r6, [r5, #4]!
 800737c:	e7eb      	b.n	8007356 <__copybits+0x18>
 800737e:	f840 3b04 	str.w	r3, [r0], #4
 8007382:	e7f4      	b.n	800736e <__copybits+0x30>

08007384 <__any_on>:
 8007384:	f100 0214 	add.w	r2, r0, #20
 8007388:	6900      	ldr	r0, [r0, #16]
 800738a:	114b      	asrs	r3, r1, #5
 800738c:	4298      	cmp	r0, r3
 800738e:	b510      	push	{r4, lr}
 8007390:	db11      	blt.n	80073b6 <__any_on+0x32>
 8007392:	dd0a      	ble.n	80073aa <__any_on+0x26>
 8007394:	f011 011f 	ands.w	r1, r1, #31
 8007398:	d007      	beq.n	80073aa <__any_on+0x26>
 800739a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800739e:	fa24 f001 	lsr.w	r0, r4, r1
 80073a2:	fa00 f101 	lsl.w	r1, r0, r1
 80073a6:	428c      	cmp	r4, r1
 80073a8:	d10b      	bne.n	80073c2 <__any_on+0x3e>
 80073aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d803      	bhi.n	80073ba <__any_on+0x36>
 80073b2:	2000      	movs	r0, #0
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	4603      	mov	r3, r0
 80073b8:	e7f7      	b.n	80073aa <__any_on+0x26>
 80073ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073be:	2900      	cmp	r1, #0
 80073c0:	d0f5      	beq.n	80073ae <__any_on+0x2a>
 80073c2:	2001      	movs	r0, #1
 80073c4:	e7f6      	b.n	80073b4 <__any_on+0x30>

080073c6 <_calloc_r>:
 80073c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073c8:	fba1 2402 	umull	r2, r4, r1, r2
 80073cc:	b94c      	cbnz	r4, 80073e2 <_calloc_r+0x1c>
 80073ce:	4611      	mov	r1, r2
 80073d0:	9201      	str	r2, [sp, #4]
 80073d2:	f000 f87b 	bl	80074cc <_malloc_r>
 80073d6:	9a01      	ldr	r2, [sp, #4]
 80073d8:	4605      	mov	r5, r0
 80073da:	b930      	cbnz	r0, 80073ea <_calloc_r+0x24>
 80073dc:	4628      	mov	r0, r5
 80073de:	b003      	add	sp, #12
 80073e0:	bd30      	pop	{r4, r5, pc}
 80073e2:	220c      	movs	r2, #12
 80073e4:	6002      	str	r2, [r0, #0]
 80073e6:	2500      	movs	r5, #0
 80073e8:	e7f8      	b.n	80073dc <_calloc_r+0x16>
 80073ea:	4621      	mov	r1, r4
 80073ec:	f7fc fbc0 	bl	8003b70 <memset>
 80073f0:	e7f4      	b.n	80073dc <_calloc_r+0x16>
	...

080073f4 <_free_r>:
 80073f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d044      	beq.n	8007484 <_free_r+0x90>
 80073fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fe:	9001      	str	r0, [sp, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f1a1 0404 	sub.w	r4, r1, #4
 8007406:	bfb8      	it	lt
 8007408:	18e4      	addlt	r4, r4, r3
 800740a:	f000 fab5 	bl	8007978 <__malloc_lock>
 800740e:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <_free_r+0x94>)
 8007410:	9801      	ldr	r0, [sp, #4]
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	b933      	cbnz	r3, 8007424 <_free_r+0x30>
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	6014      	str	r4, [r2, #0]
 800741a:	b003      	add	sp, #12
 800741c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007420:	f000 bab0 	b.w	8007984 <__malloc_unlock>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d908      	bls.n	800743a <_free_r+0x46>
 8007428:	6825      	ldr	r5, [r4, #0]
 800742a:	1961      	adds	r1, r4, r5
 800742c:	428b      	cmp	r3, r1
 800742e:	bf01      	itttt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	1949      	addeq	r1, r1, r5
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	e7ed      	b.n	8007416 <_free_r+0x22>
 800743a:	461a      	mov	r2, r3
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b10b      	cbz	r3, 8007444 <_free_r+0x50>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d9fa      	bls.n	800743a <_free_r+0x46>
 8007444:	6811      	ldr	r1, [r2, #0]
 8007446:	1855      	adds	r5, r2, r1
 8007448:	42a5      	cmp	r5, r4
 800744a:	d10b      	bne.n	8007464 <_free_r+0x70>
 800744c:	6824      	ldr	r4, [r4, #0]
 800744e:	4421      	add	r1, r4
 8007450:	1854      	adds	r4, r2, r1
 8007452:	42a3      	cmp	r3, r4
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	d1e0      	bne.n	800741a <_free_r+0x26>
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6053      	str	r3, [r2, #4]
 800745e:	4421      	add	r1, r4
 8007460:	6011      	str	r1, [r2, #0]
 8007462:	e7da      	b.n	800741a <_free_r+0x26>
 8007464:	d902      	bls.n	800746c <_free_r+0x78>
 8007466:	230c      	movs	r3, #12
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	e7d6      	b.n	800741a <_free_r+0x26>
 800746c:	6825      	ldr	r5, [r4, #0]
 800746e:	1961      	adds	r1, r4, r5
 8007470:	428b      	cmp	r3, r1
 8007472:	bf04      	itt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	bf04      	itt	eq
 800747c:	1949      	addeq	r1, r1, r5
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6054      	str	r4, [r2, #4]
 8007482:	e7ca      	b.n	800741a <_free_r+0x26>
 8007484:	b003      	add	sp, #12
 8007486:	bd30      	pop	{r4, r5, pc}
 8007488:	200002d4 	.word	0x200002d4

0800748c <sbrk_aligned>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0e      	ldr	r6, [pc, #56]	; (80074c8 <sbrk_aligned+0x3c>)
 8007490:	460c      	mov	r4, r1
 8007492:	6831      	ldr	r1, [r6, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	b911      	cbnz	r1, 800749e <sbrk_aligned+0x12>
 8007498:	f000 f9f2 	bl	8007880 <_sbrk_r>
 800749c:	6030      	str	r0, [r6, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 f9ed 	bl	8007880 <_sbrk_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d00a      	beq.n	80074c0 <sbrk_aligned+0x34>
 80074aa:	1cc4      	adds	r4, r0, #3
 80074ac:	f024 0403 	bic.w	r4, r4, #3
 80074b0:	42a0      	cmp	r0, r4
 80074b2:	d007      	beq.n	80074c4 <sbrk_aligned+0x38>
 80074b4:	1a21      	subs	r1, r4, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f9e2 	bl	8007880 <_sbrk_r>
 80074bc:	3001      	adds	r0, #1
 80074be:	d101      	bne.n	80074c4 <sbrk_aligned+0x38>
 80074c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074c4:	4620      	mov	r0, r4
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	200002d8 	.word	0x200002d8

080074cc <_malloc_r>:
 80074cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d0:	1ccd      	adds	r5, r1, #3
 80074d2:	f025 0503 	bic.w	r5, r5, #3
 80074d6:	3508      	adds	r5, #8
 80074d8:	2d0c      	cmp	r5, #12
 80074da:	bf38      	it	cc
 80074dc:	250c      	movcc	r5, #12
 80074de:	2d00      	cmp	r5, #0
 80074e0:	4607      	mov	r7, r0
 80074e2:	db01      	blt.n	80074e8 <_malloc_r+0x1c>
 80074e4:	42a9      	cmp	r1, r5
 80074e6:	d905      	bls.n	80074f4 <_malloc_r+0x28>
 80074e8:	230c      	movs	r3, #12
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	2600      	movs	r6, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f4:	4e2e      	ldr	r6, [pc, #184]	; (80075b0 <_malloc_r+0xe4>)
 80074f6:	f000 fa3f 	bl	8007978 <__malloc_lock>
 80074fa:	6833      	ldr	r3, [r6, #0]
 80074fc:	461c      	mov	r4, r3
 80074fe:	bb34      	cbnz	r4, 800754e <_malloc_r+0x82>
 8007500:	4629      	mov	r1, r5
 8007502:	4638      	mov	r0, r7
 8007504:	f7ff ffc2 	bl	800748c <sbrk_aligned>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	4604      	mov	r4, r0
 800750c:	d14d      	bne.n	80075aa <_malloc_r+0xde>
 800750e:	6834      	ldr	r4, [r6, #0]
 8007510:	4626      	mov	r6, r4
 8007512:	2e00      	cmp	r6, #0
 8007514:	d140      	bne.n	8007598 <_malloc_r+0xcc>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	4631      	mov	r1, r6
 800751a:	4638      	mov	r0, r7
 800751c:	eb04 0803 	add.w	r8, r4, r3
 8007520:	f000 f9ae 	bl	8007880 <_sbrk_r>
 8007524:	4580      	cmp	r8, r0
 8007526:	d13a      	bne.n	800759e <_malloc_r+0xd2>
 8007528:	6821      	ldr	r1, [r4, #0]
 800752a:	3503      	adds	r5, #3
 800752c:	1a6d      	subs	r5, r5, r1
 800752e:	f025 0503 	bic.w	r5, r5, #3
 8007532:	3508      	adds	r5, #8
 8007534:	2d0c      	cmp	r5, #12
 8007536:	bf38      	it	cc
 8007538:	250c      	movcc	r5, #12
 800753a:	4629      	mov	r1, r5
 800753c:	4638      	mov	r0, r7
 800753e:	f7ff ffa5 	bl	800748c <sbrk_aligned>
 8007542:	3001      	adds	r0, #1
 8007544:	d02b      	beq.n	800759e <_malloc_r+0xd2>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	442b      	add	r3, r5
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	e00e      	b.n	800756c <_malloc_r+0xa0>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	1b52      	subs	r2, r2, r5
 8007552:	d41e      	bmi.n	8007592 <_malloc_r+0xc6>
 8007554:	2a0b      	cmp	r2, #11
 8007556:	d916      	bls.n	8007586 <_malloc_r+0xba>
 8007558:	1961      	adds	r1, r4, r5
 800755a:	42a3      	cmp	r3, r4
 800755c:	6025      	str	r5, [r4, #0]
 800755e:	bf18      	it	ne
 8007560:	6059      	strne	r1, [r3, #4]
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	bf08      	it	eq
 8007566:	6031      	streq	r1, [r6, #0]
 8007568:	5162      	str	r2, [r4, r5]
 800756a:	604b      	str	r3, [r1, #4]
 800756c:	4638      	mov	r0, r7
 800756e:	f104 060b 	add.w	r6, r4, #11
 8007572:	f000 fa07 	bl	8007984 <__malloc_unlock>
 8007576:	f026 0607 	bic.w	r6, r6, #7
 800757a:	1d23      	adds	r3, r4, #4
 800757c:	1af2      	subs	r2, r6, r3
 800757e:	d0b6      	beq.n	80074ee <_malloc_r+0x22>
 8007580:	1b9b      	subs	r3, r3, r6
 8007582:	50a3      	str	r3, [r4, r2]
 8007584:	e7b3      	b.n	80074ee <_malloc_r+0x22>
 8007586:	6862      	ldr	r2, [r4, #4]
 8007588:	42a3      	cmp	r3, r4
 800758a:	bf0c      	ite	eq
 800758c:	6032      	streq	r2, [r6, #0]
 800758e:	605a      	strne	r2, [r3, #4]
 8007590:	e7ec      	b.n	800756c <_malloc_r+0xa0>
 8007592:	4623      	mov	r3, r4
 8007594:	6864      	ldr	r4, [r4, #4]
 8007596:	e7b2      	b.n	80074fe <_malloc_r+0x32>
 8007598:	4634      	mov	r4, r6
 800759a:	6876      	ldr	r6, [r6, #4]
 800759c:	e7b9      	b.n	8007512 <_malloc_r+0x46>
 800759e:	230c      	movs	r3, #12
 80075a0:	603b      	str	r3, [r7, #0]
 80075a2:	4638      	mov	r0, r7
 80075a4:	f000 f9ee 	bl	8007984 <__malloc_unlock>
 80075a8:	e7a1      	b.n	80074ee <_malloc_r+0x22>
 80075aa:	6025      	str	r5, [r4, #0]
 80075ac:	e7de      	b.n	800756c <_malloc_r+0xa0>
 80075ae:	bf00      	nop
 80075b0:	200002d4 	.word	0x200002d4

080075b4 <__ssputs_r>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	688e      	ldr	r6, [r1, #8]
 80075ba:	429e      	cmp	r6, r3
 80075bc:	4682      	mov	sl, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	4690      	mov	r8, r2
 80075c2:	461f      	mov	r7, r3
 80075c4:	d838      	bhi.n	8007638 <__ssputs_r+0x84>
 80075c6:	898a      	ldrh	r2, [r1, #12]
 80075c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075cc:	d032      	beq.n	8007634 <__ssputs_r+0x80>
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	6909      	ldr	r1, [r1, #16]
 80075d2:	eba5 0901 	sub.w	r9, r5, r1
 80075d6:	6965      	ldr	r5, [r4, #20]
 80075d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075e0:	3301      	adds	r3, #1
 80075e2:	444b      	add	r3, r9
 80075e4:	106d      	asrs	r5, r5, #1
 80075e6:	429d      	cmp	r5, r3
 80075e8:	bf38      	it	cc
 80075ea:	461d      	movcc	r5, r3
 80075ec:	0553      	lsls	r3, r2, #21
 80075ee:	d531      	bpl.n	8007654 <__ssputs_r+0xa0>
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7ff ff6b 	bl	80074cc <_malloc_r>
 80075f6:	4606      	mov	r6, r0
 80075f8:	b950      	cbnz	r0, 8007610 <__ssputs_r+0x5c>
 80075fa:	230c      	movs	r3, #12
 80075fc:	f8ca 3000 	str.w	r3, [sl]
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800760c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007610:	6921      	ldr	r1, [r4, #16]
 8007612:	464a      	mov	r2, r9
 8007614:	f7ff fa08 	bl	8006a28 <memcpy>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800761e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007622:	81a3      	strh	r3, [r4, #12]
 8007624:	6126      	str	r6, [r4, #16]
 8007626:	6165      	str	r5, [r4, #20]
 8007628:	444e      	add	r6, r9
 800762a:	eba5 0509 	sub.w	r5, r5, r9
 800762e:	6026      	str	r6, [r4, #0]
 8007630:	60a5      	str	r5, [r4, #8]
 8007632:	463e      	mov	r6, r7
 8007634:	42be      	cmp	r6, r7
 8007636:	d900      	bls.n	800763a <__ssputs_r+0x86>
 8007638:	463e      	mov	r6, r7
 800763a:	6820      	ldr	r0, [r4, #0]
 800763c:	4632      	mov	r2, r6
 800763e:	4641      	mov	r1, r8
 8007640:	f000 f980 	bl	8007944 <memmove>
 8007644:	68a3      	ldr	r3, [r4, #8]
 8007646:	1b9b      	subs	r3, r3, r6
 8007648:	60a3      	str	r3, [r4, #8]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	4433      	add	r3, r6
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	2000      	movs	r0, #0
 8007652:	e7db      	b.n	800760c <__ssputs_r+0x58>
 8007654:	462a      	mov	r2, r5
 8007656:	f000 f99b 	bl	8007990 <_realloc_r>
 800765a:	4606      	mov	r6, r0
 800765c:	2800      	cmp	r0, #0
 800765e:	d1e1      	bne.n	8007624 <__ssputs_r+0x70>
 8007660:	6921      	ldr	r1, [r4, #16]
 8007662:	4650      	mov	r0, sl
 8007664:	f7ff fec6 	bl	80073f4 <_free_r>
 8007668:	e7c7      	b.n	80075fa <__ssputs_r+0x46>
	...

0800766c <_svfiprintf_r>:
 800766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007670:	4698      	mov	r8, r3
 8007672:	898b      	ldrh	r3, [r1, #12]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	b09d      	sub	sp, #116	; 0x74
 8007678:	4607      	mov	r7, r0
 800767a:	460d      	mov	r5, r1
 800767c:	4614      	mov	r4, r2
 800767e:	d50e      	bpl.n	800769e <_svfiprintf_r+0x32>
 8007680:	690b      	ldr	r3, [r1, #16]
 8007682:	b963      	cbnz	r3, 800769e <_svfiprintf_r+0x32>
 8007684:	2140      	movs	r1, #64	; 0x40
 8007686:	f7ff ff21 	bl	80074cc <_malloc_r>
 800768a:	6028      	str	r0, [r5, #0]
 800768c:	6128      	str	r0, [r5, #16]
 800768e:	b920      	cbnz	r0, 800769a <_svfiprintf_r+0x2e>
 8007690:	230c      	movs	r3, #12
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007698:	e0d1      	b.n	800783e <_svfiprintf_r+0x1d2>
 800769a:	2340      	movs	r3, #64	; 0x40
 800769c:	616b      	str	r3, [r5, #20]
 800769e:	2300      	movs	r3, #0
 80076a0:	9309      	str	r3, [sp, #36]	; 0x24
 80076a2:	2320      	movs	r3, #32
 80076a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ac:	2330      	movs	r3, #48	; 0x30
 80076ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007858 <_svfiprintf_r+0x1ec>
 80076b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076b6:	f04f 0901 	mov.w	r9, #1
 80076ba:	4623      	mov	r3, r4
 80076bc:	469a      	mov	sl, r3
 80076be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076c2:	b10a      	cbz	r2, 80076c8 <_svfiprintf_r+0x5c>
 80076c4:	2a25      	cmp	r2, #37	; 0x25
 80076c6:	d1f9      	bne.n	80076bc <_svfiprintf_r+0x50>
 80076c8:	ebba 0b04 	subs.w	fp, sl, r4
 80076cc:	d00b      	beq.n	80076e6 <_svfiprintf_r+0x7a>
 80076ce:	465b      	mov	r3, fp
 80076d0:	4622      	mov	r2, r4
 80076d2:	4629      	mov	r1, r5
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff ff6d 	bl	80075b4 <__ssputs_r>
 80076da:	3001      	adds	r0, #1
 80076dc:	f000 80aa 	beq.w	8007834 <_svfiprintf_r+0x1c8>
 80076e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e2:	445a      	add	r2, fp
 80076e4:	9209      	str	r2, [sp, #36]	; 0x24
 80076e6:	f89a 3000 	ldrb.w	r3, [sl]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 80a2 	beq.w	8007834 <_svfiprintf_r+0x1c8>
 80076f0:	2300      	movs	r3, #0
 80076f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076fa:	f10a 0a01 	add.w	sl, sl, #1
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	9307      	str	r3, [sp, #28]
 8007702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007706:	931a      	str	r3, [sp, #104]	; 0x68
 8007708:	4654      	mov	r4, sl
 800770a:	2205      	movs	r2, #5
 800770c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007710:	4851      	ldr	r0, [pc, #324]	; (8007858 <_svfiprintf_r+0x1ec>)
 8007712:	f7f8 fd6d 	bl	80001f0 <memchr>
 8007716:	9a04      	ldr	r2, [sp, #16]
 8007718:	b9d8      	cbnz	r0, 8007752 <_svfiprintf_r+0xe6>
 800771a:	06d0      	lsls	r0, r2, #27
 800771c:	bf44      	itt	mi
 800771e:	2320      	movmi	r3, #32
 8007720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007724:	0711      	lsls	r1, r2, #28
 8007726:	bf44      	itt	mi
 8007728:	232b      	movmi	r3, #43	; 0x2b
 800772a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800772e:	f89a 3000 	ldrb.w	r3, [sl]
 8007732:	2b2a      	cmp	r3, #42	; 0x2a
 8007734:	d015      	beq.n	8007762 <_svfiprintf_r+0xf6>
 8007736:	9a07      	ldr	r2, [sp, #28]
 8007738:	4654      	mov	r4, sl
 800773a:	2000      	movs	r0, #0
 800773c:	f04f 0c0a 	mov.w	ip, #10
 8007740:	4621      	mov	r1, r4
 8007742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007746:	3b30      	subs	r3, #48	; 0x30
 8007748:	2b09      	cmp	r3, #9
 800774a:	d94e      	bls.n	80077ea <_svfiprintf_r+0x17e>
 800774c:	b1b0      	cbz	r0, 800777c <_svfiprintf_r+0x110>
 800774e:	9207      	str	r2, [sp, #28]
 8007750:	e014      	b.n	800777c <_svfiprintf_r+0x110>
 8007752:	eba0 0308 	sub.w	r3, r0, r8
 8007756:	fa09 f303 	lsl.w	r3, r9, r3
 800775a:	4313      	orrs	r3, r2
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	46a2      	mov	sl, r4
 8007760:	e7d2      	b.n	8007708 <_svfiprintf_r+0x9c>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	1d19      	adds	r1, r3, #4
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	9103      	str	r1, [sp, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfbb      	ittet	lt
 800776e:	425b      	neglt	r3, r3
 8007770:	f042 0202 	orrlt.w	r2, r2, #2
 8007774:	9307      	strge	r3, [sp, #28]
 8007776:	9307      	strlt	r3, [sp, #28]
 8007778:	bfb8      	it	lt
 800777a:	9204      	strlt	r2, [sp, #16]
 800777c:	7823      	ldrb	r3, [r4, #0]
 800777e:	2b2e      	cmp	r3, #46	; 0x2e
 8007780:	d10c      	bne.n	800779c <_svfiprintf_r+0x130>
 8007782:	7863      	ldrb	r3, [r4, #1]
 8007784:	2b2a      	cmp	r3, #42	; 0x2a
 8007786:	d135      	bne.n	80077f4 <_svfiprintf_r+0x188>
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	1d1a      	adds	r2, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9203      	str	r2, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfb8      	it	lt
 8007794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007798:	3402      	adds	r4, #2
 800779a:	9305      	str	r3, [sp, #20]
 800779c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007868 <_svfiprintf_r+0x1fc>
 80077a0:	7821      	ldrb	r1, [r4, #0]
 80077a2:	2203      	movs	r2, #3
 80077a4:	4650      	mov	r0, sl
 80077a6:	f7f8 fd23 	bl	80001f0 <memchr>
 80077aa:	b140      	cbz	r0, 80077be <_svfiprintf_r+0x152>
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	eba0 000a 	sub.w	r0, r0, sl
 80077b2:	fa03 f000 	lsl.w	r0, r3, r0
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	4303      	orrs	r3, r0
 80077ba:	3401      	adds	r4, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c2:	4826      	ldr	r0, [pc, #152]	; (800785c <_svfiprintf_r+0x1f0>)
 80077c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077c8:	2206      	movs	r2, #6
 80077ca:	f7f8 fd11 	bl	80001f0 <memchr>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d038      	beq.n	8007844 <_svfiprintf_r+0x1d8>
 80077d2:	4b23      	ldr	r3, [pc, #140]	; (8007860 <_svfiprintf_r+0x1f4>)
 80077d4:	bb1b      	cbnz	r3, 800781e <_svfiprintf_r+0x1b2>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	3307      	adds	r3, #7
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	3308      	adds	r3, #8
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e4:	4433      	add	r3, r6
 80077e6:	9309      	str	r3, [sp, #36]	; 0x24
 80077e8:	e767      	b.n	80076ba <_svfiprintf_r+0x4e>
 80077ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ee:	460c      	mov	r4, r1
 80077f0:	2001      	movs	r0, #1
 80077f2:	e7a5      	b.n	8007740 <_svfiprintf_r+0xd4>
 80077f4:	2300      	movs	r3, #0
 80077f6:	3401      	adds	r4, #1
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	4619      	mov	r1, r3
 80077fc:	f04f 0c0a 	mov.w	ip, #10
 8007800:	4620      	mov	r0, r4
 8007802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007806:	3a30      	subs	r2, #48	; 0x30
 8007808:	2a09      	cmp	r2, #9
 800780a:	d903      	bls.n	8007814 <_svfiprintf_r+0x1a8>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c5      	beq.n	800779c <_svfiprintf_r+0x130>
 8007810:	9105      	str	r1, [sp, #20]
 8007812:	e7c3      	b.n	800779c <_svfiprintf_r+0x130>
 8007814:	fb0c 2101 	mla	r1, ip, r1, r2
 8007818:	4604      	mov	r4, r0
 800781a:	2301      	movs	r3, #1
 800781c:	e7f0      	b.n	8007800 <_svfiprintf_r+0x194>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <_svfiprintf_r+0x1f8>)
 8007826:	a904      	add	r1, sp, #16
 8007828:	4638      	mov	r0, r7
 800782a:	f7fc fa49 	bl	8003cc0 <_printf_float>
 800782e:	1c42      	adds	r2, r0, #1
 8007830:	4606      	mov	r6, r0
 8007832:	d1d6      	bne.n	80077e2 <_svfiprintf_r+0x176>
 8007834:	89ab      	ldrh	r3, [r5, #12]
 8007836:	065b      	lsls	r3, r3, #25
 8007838:	f53f af2c 	bmi.w	8007694 <_svfiprintf_r+0x28>
 800783c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800783e:	b01d      	add	sp, #116	; 0x74
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	ab03      	add	r3, sp, #12
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	462a      	mov	r2, r5
 800784a:	4b06      	ldr	r3, [pc, #24]	; (8007864 <_svfiprintf_r+0x1f8>)
 800784c:	a904      	add	r1, sp, #16
 800784e:	4638      	mov	r0, r7
 8007850:	f7fc fcda 	bl	8004208 <_printf_i>
 8007854:	e7eb      	b.n	800782e <_svfiprintf_r+0x1c2>
 8007856:	bf00      	nop
 8007858:	0800886c 	.word	0x0800886c
 800785c:	08008876 	.word	0x08008876
 8007860:	08003cc1 	.word	0x08003cc1
 8007864:	080075b5 	.word	0x080075b5
 8007868:	08008872 	.word	0x08008872
 800786c:	00000000 	.word	0x00000000

08007870 <nan>:
 8007870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007878 <nan+0x8>
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	00000000 	.word	0x00000000
 800787c:	7ff80000 	.word	0x7ff80000

08007880 <_sbrk_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d06      	ldr	r5, [pc, #24]	; (800789c <_sbrk_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	f7f9 fc82 	bl	8001194 <_sbrk>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_sbrk_r+0x1a>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_sbrk_r+0x1a>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	200002dc 	.word	0x200002dc

080078a0 <strncmp>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	b17a      	cbz	r2, 80078c4 <strncmp+0x24>
 80078a4:	4603      	mov	r3, r0
 80078a6:	3901      	subs	r1, #1
 80078a8:	1884      	adds	r4, r0, r2
 80078aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80078b2:	4290      	cmp	r0, r2
 80078b4:	d101      	bne.n	80078ba <strncmp+0x1a>
 80078b6:	42a3      	cmp	r3, r4
 80078b8:	d101      	bne.n	80078be <strncmp+0x1e>
 80078ba:	1a80      	subs	r0, r0, r2
 80078bc:	bd10      	pop	{r4, pc}
 80078be:	2800      	cmp	r0, #0
 80078c0:	d1f3      	bne.n	80078aa <strncmp+0xa>
 80078c2:	e7fa      	b.n	80078ba <strncmp+0x1a>
 80078c4:	4610      	mov	r0, r2
 80078c6:	e7f9      	b.n	80078bc <strncmp+0x1c>

080078c8 <__ascii_wctomb>:
 80078c8:	b149      	cbz	r1, 80078de <__ascii_wctomb+0x16>
 80078ca:	2aff      	cmp	r2, #255	; 0xff
 80078cc:	bf85      	ittet	hi
 80078ce:	238a      	movhi	r3, #138	; 0x8a
 80078d0:	6003      	strhi	r3, [r0, #0]
 80078d2:	700a      	strbls	r2, [r1, #0]
 80078d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80078d8:	bf98      	it	ls
 80078da:	2001      	movls	r0, #1
 80078dc:	4770      	bx	lr
 80078de:	4608      	mov	r0, r1
 80078e0:	4770      	bx	lr
	...

080078e4 <__assert_func>:
 80078e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e6:	4614      	mov	r4, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <__assert_func+0x2c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4605      	mov	r5, r0
 80078f0:	68d8      	ldr	r0, [r3, #12]
 80078f2:	b14c      	cbz	r4, 8007908 <__assert_func+0x24>
 80078f4:	4b07      	ldr	r3, [pc, #28]	; (8007914 <__assert_func+0x30>)
 80078f6:	9100      	str	r1, [sp, #0]
 80078f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078fc:	4906      	ldr	r1, [pc, #24]	; (8007918 <__assert_func+0x34>)
 80078fe:	462b      	mov	r3, r5
 8007900:	f000 f80e 	bl	8007920 <fiprintf>
 8007904:	f000 fa8c 	bl	8007e20 <abort>
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <__assert_func+0x38>)
 800790a:	461c      	mov	r4, r3
 800790c:	e7f3      	b.n	80078f6 <__assert_func+0x12>
 800790e:	bf00      	nop
 8007910:	20000000 	.word	0x20000000
 8007914:	0800887d 	.word	0x0800887d
 8007918:	0800888a 	.word	0x0800888a
 800791c:	080088b8 	.word	0x080088b8

08007920 <fiprintf>:
 8007920:	b40e      	push	{r1, r2, r3}
 8007922:	b503      	push	{r0, r1, lr}
 8007924:	4601      	mov	r1, r0
 8007926:	ab03      	add	r3, sp, #12
 8007928:	4805      	ldr	r0, [pc, #20]	; (8007940 <fiprintf+0x20>)
 800792a:	f853 2b04 	ldr.w	r2, [r3], #4
 800792e:	6800      	ldr	r0, [r0, #0]
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f000 f885 	bl	8007a40 <_vfiprintf_r>
 8007936:	b002      	add	sp, #8
 8007938:	f85d eb04 	ldr.w	lr, [sp], #4
 800793c:	b003      	add	sp, #12
 800793e:	4770      	bx	lr
 8007940:	20000000 	.word	0x20000000

08007944 <memmove>:
 8007944:	4288      	cmp	r0, r1
 8007946:	b510      	push	{r4, lr}
 8007948:	eb01 0402 	add.w	r4, r1, r2
 800794c:	d902      	bls.n	8007954 <memmove+0x10>
 800794e:	4284      	cmp	r4, r0
 8007950:	4623      	mov	r3, r4
 8007952:	d807      	bhi.n	8007964 <memmove+0x20>
 8007954:	1e43      	subs	r3, r0, #1
 8007956:	42a1      	cmp	r1, r4
 8007958:	d008      	beq.n	800796c <memmove+0x28>
 800795a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800795e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007962:	e7f8      	b.n	8007956 <memmove+0x12>
 8007964:	4402      	add	r2, r0
 8007966:	4601      	mov	r1, r0
 8007968:	428a      	cmp	r2, r1
 800796a:	d100      	bne.n	800796e <memmove+0x2a>
 800796c:	bd10      	pop	{r4, pc}
 800796e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007976:	e7f7      	b.n	8007968 <memmove+0x24>

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__malloc_lock+0x8>)
 800797a:	f000 bc11 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200002e0 	.word	0x200002e0

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__malloc_unlock+0x8>)
 8007986:	f000 bc0c 	b.w	80081a2 <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200002e0 	.word	0x200002e0

08007990 <_realloc_r>:
 8007990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007994:	4680      	mov	r8, r0
 8007996:	4614      	mov	r4, r2
 8007998:	460e      	mov	r6, r1
 800799a:	b921      	cbnz	r1, 80079a6 <_realloc_r+0x16>
 800799c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	4611      	mov	r1, r2
 80079a2:	f7ff bd93 	b.w	80074cc <_malloc_r>
 80079a6:	b92a      	cbnz	r2, 80079b4 <_realloc_r+0x24>
 80079a8:	f7ff fd24 	bl	80073f4 <_free_r>
 80079ac:	4625      	mov	r5, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b4:	f000 fc5c 	bl	8008270 <_malloc_usable_size_r>
 80079b8:	4284      	cmp	r4, r0
 80079ba:	4607      	mov	r7, r0
 80079bc:	d802      	bhi.n	80079c4 <_realloc_r+0x34>
 80079be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079c2:	d812      	bhi.n	80079ea <_realloc_r+0x5a>
 80079c4:	4621      	mov	r1, r4
 80079c6:	4640      	mov	r0, r8
 80079c8:	f7ff fd80 	bl	80074cc <_malloc_r>
 80079cc:	4605      	mov	r5, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0ed      	beq.n	80079ae <_realloc_r+0x1e>
 80079d2:	42bc      	cmp	r4, r7
 80079d4:	4622      	mov	r2, r4
 80079d6:	4631      	mov	r1, r6
 80079d8:	bf28      	it	cs
 80079da:	463a      	movcs	r2, r7
 80079dc:	f7ff f824 	bl	8006a28 <memcpy>
 80079e0:	4631      	mov	r1, r6
 80079e2:	4640      	mov	r0, r8
 80079e4:	f7ff fd06 	bl	80073f4 <_free_r>
 80079e8:	e7e1      	b.n	80079ae <_realloc_r+0x1e>
 80079ea:	4635      	mov	r5, r6
 80079ec:	e7df      	b.n	80079ae <_realloc_r+0x1e>

080079ee <__sfputc_r>:
 80079ee:	6893      	ldr	r3, [r2, #8]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	b410      	push	{r4}
 80079f6:	6093      	str	r3, [r2, #8]
 80079f8:	da08      	bge.n	8007a0c <__sfputc_r+0x1e>
 80079fa:	6994      	ldr	r4, [r2, #24]
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	db01      	blt.n	8007a04 <__sfputc_r+0x16>
 8007a00:	290a      	cmp	r1, #10
 8007a02:	d103      	bne.n	8007a0c <__sfputc_r+0x1e>
 8007a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a08:	f000 b94a 	b.w	8007ca0 <__swbuf_r>
 8007a0c:	6813      	ldr	r3, [r2, #0]
 8007a0e:	1c58      	adds	r0, r3, #1
 8007a10:	6010      	str	r0, [r2, #0]
 8007a12:	7019      	strb	r1, [r3, #0]
 8007a14:	4608      	mov	r0, r1
 8007a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <__sfputs_r>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	4606      	mov	r6, r0
 8007a20:	460f      	mov	r7, r1
 8007a22:	4614      	mov	r4, r2
 8007a24:	18d5      	adds	r5, r2, r3
 8007a26:	42ac      	cmp	r4, r5
 8007a28:	d101      	bne.n	8007a2e <__sfputs_r+0x12>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e007      	b.n	8007a3e <__sfputs_r+0x22>
 8007a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a32:	463a      	mov	r2, r7
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ffda 	bl	80079ee <__sfputc_r>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	d1f3      	bne.n	8007a26 <__sfputs_r+0xa>
 8007a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a40 <_vfiprintf_r>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	460d      	mov	r5, r1
 8007a46:	b09d      	sub	sp, #116	; 0x74
 8007a48:	4614      	mov	r4, r2
 8007a4a:	4698      	mov	r8, r3
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	b118      	cbz	r0, 8007a58 <_vfiprintf_r+0x18>
 8007a50:	6983      	ldr	r3, [r0, #24]
 8007a52:	b90b      	cbnz	r3, 8007a58 <_vfiprintf_r+0x18>
 8007a54:	f000 fb06 	bl	8008064 <__sinit>
 8007a58:	4b89      	ldr	r3, [pc, #548]	; (8007c80 <_vfiprintf_r+0x240>)
 8007a5a:	429d      	cmp	r5, r3
 8007a5c:	d11b      	bne.n	8007a96 <_vfiprintf_r+0x56>
 8007a5e:	6875      	ldr	r5, [r6, #4]
 8007a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a62:	07d9      	lsls	r1, r3, #31
 8007a64:	d405      	bmi.n	8007a72 <_vfiprintf_r+0x32>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	059a      	lsls	r2, r3, #22
 8007a6a:	d402      	bmi.n	8007a72 <_vfiprintf_r+0x32>
 8007a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6e:	f000 fb97 	bl	80081a0 <__retarget_lock_acquire_recursive>
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	071b      	lsls	r3, r3, #28
 8007a76:	d501      	bpl.n	8007a7c <_vfiprintf_r+0x3c>
 8007a78:	692b      	ldr	r3, [r5, #16]
 8007a7a:	b9eb      	cbnz	r3, 8007ab8 <_vfiprintf_r+0x78>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f000 f960 	bl	8007d44 <__swsetup_r>
 8007a84:	b1c0      	cbz	r0, 8007ab8 <_vfiprintf_r+0x78>
 8007a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a88:	07dc      	lsls	r4, r3, #31
 8007a8a:	d50e      	bpl.n	8007aaa <_vfiprintf_r+0x6a>
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a90:	b01d      	add	sp, #116	; 0x74
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	4b7b      	ldr	r3, [pc, #492]	; (8007c84 <_vfiprintf_r+0x244>)
 8007a98:	429d      	cmp	r5, r3
 8007a9a:	d101      	bne.n	8007aa0 <_vfiprintf_r+0x60>
 8007a9c:	68b5      	ldr	r5, [r6, #8]
 8007a9e:	e7df      	b.n	8007a60 <_vfiprintf_r+0x20>
 8007aa0:	4b79      	ldr	r3, [pc, #484]	; (8007c88 <_vfiprintf_r+0x248>)
 8007aa2:	429d      	cmp	r5, r3
 8007aa4:	bf08      	it	eq
 8007aa6:	68f5      	ldreq	r5, [r6, #12]
 8007aa8:	e7da      	b.n	8007a60 <_vfiprintf_r+0x20>
 8007aaa:	89ab      	ldrh	r3, [r5, #12]
 8007aac:	0598      	lsls	r0, r3, #22
 8007aae:	d4ed      	bmi.n	8007a8c <_vfiprintf_r+0x4c>
 8007ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ab2:	f000 fb76 	bl	80081a2 <__retarget_lock_release_recursive>
 8007ab6:	e7e9      	b.n	8007a8c <_vfiprintf_r+0x4c>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9309      	str	r3, [sp, #36]	; 0x24
 8007abc:	2320      	movs	r3, #32
 8007abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac6:	2330      	movs	r3, #48	; 0x30
 8007ac8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c8c <_vfiprintf_r+0x24c>
 8007acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ad0:	f04f 0901 	mov.w	r9, #1
 8007ad4:	4623      	mov	r3, r4
 8007ad6:	469a      	mov	sl, r3
 8007ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007adc:	b10a      	cbz	r2, 8007ae2 <_vfiprintf_r+0xa2>
 8007ade:	2a25      	cmp	r2, #37	; 0x25
 8007ae0:	d1f9      	bne.n	8007ad6 <_vfiprintf_r+0x96>
 8007ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae6:	d00b      	beq.n	8007b00 <_vfiprintf_r+0xc0>
 8007ae8:	465b      	mov	r3, fp
 8007aea:	4622      	mov	r2, r4
 8007aec:	4629      	mov	r1, r5
 8007aee:	4630      	mov	r0, r6
 8007af0:	f7ff ff94 	bl	8007a1c <__sfputs_r>
 8007af4:	3001      	adds	r0, #1
 8007af6:	f000 80aa 	beq.w	8007c4e <_vfiprintf_r+0x20e>
 8007afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afc:	445a      	add	r2, fp
 8007afe:	9209      	str	r2, [sp, #36]	; 0x24
 8007b00:	f89a 3000 	ldrb.w	r3, [sl]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80a2 	beq.w	8007c4e <_vfiprintf_r+0x20e>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b14:	f10a 0a01 	add.w	sl, sl, #1
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	9307      	str	r3, [sp, #28]
 8007b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b20:	931a      	str	r3, [sp, #104]	; 0x68
 8007b22:	4654      	mov	r4, sl
 8007b24:	2205      	movs	r2, #5
 8007b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2a:	4858      	ldr	r0, [pc, #352]	; (8007c8c <_vfiprintf_r+0x24c>)
 8007b2c:	f7f8 fb60 	bl	80001f0 <memchr>
 8007b30:	9a04      	ldr	r2, [sp, #16]
 8007b32:	b9d8      	cbnz	r0, 8007b6c <_vfiprintf_r+0x12c>
 8007b34:	06d1      	lsls	r1, r2, #27
 8007b36:	bf44      	itt	mi
 8007b38:	2320      	movmi	r3, #32
 8007b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3e:	0713      	lsls	r3, r2, #28
 8007b40:	bf44      	itt	mi
 8007b42:	232b      	movmi	r3, #43	; 0x2b
 8007b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b48:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4e:	d015      	beq.n	8007b7c <_vfiprintf_r+0x13c>
 8007b50:	9a07      	ldr	r2, [sp, #28]
 8007b52:	4654      	mov	r4, sl
 8007b54:	2000      	movs	r0, #0
 8007b56:	f04f 0c0a 	mov.w	ip, #10
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b60:	3b30      	subs	r3, #48	; 0x30
 8007b62:	2b09      	cmp	r3, #9
 8007b64:	d94e      	bls.n	8007c04 <_vfiprintf_r+0x1c4>
 8007b66:	b1b0      	cbz	r0, 8007b96 <_vfiprintf_r+0x156>
 8007b68:	9207      	str	r2, [sp, #28]
 8007b6a:	e014      	b.n	8007b96 <_vfiprintf_r+0x156>
 8007b6c:	eba0 0308 	sub.w	r3, r0, r8
 8007b70:	fa09 f303 	lsl.w	r3, r9, r3
 8007b74:	4313      	orrs	r3, r2
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	46a2      	mov	sl, r4
 8007b7a:	e7d2      	b.n	8007b22 <_vfiprintf_r+0xe2>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	1d19      	adds	r1, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	9103      	str	r1, [sp, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bfbb      	ittet	lt
 8007b88:	425b      	neglt	r3, r3
 8007b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b8e:	9307      	strge	r3, [sp, #28]
 8007b90:	9307      	strlt	r3, [sp, #28]
 8007b92:	bfb8      	it	lt
 8007b94:	9204      	strlt	r2, [sp, #16]
 8007b96:	7823      	ldrb	r3, [r4, #0]
 8007b98:	2b2e      	cmp	r3, #46	; 0x2e
 8007b9a:	d10c      	bne.n	8007bb6 <_vfiprintf_r+0x176>
 8007b9c:	7863      	ldrb	r3, [r4, #1]
 8007b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba0:	d135      	bne.n	8007c0e <_vfiprintf_r+0x1ce>
 8007ba2:	9b03      	ldr	r3, [sp, #12]
 8007ba4:	1d1a      	adds	r2, r3, #4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	9203      	str	r2, [sp, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bfb8      	it	lt
 8007bae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bb2:	3402      	adds	r4, #2
 8007bb4:	9305      	str	r3, [sp, #20]
 8007bb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c9c <_vfiprintf_r+0x25c>
 8007bba:	7821      	ldrb	r1, [r4, #0]
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	f7f8 fb16 	bl	80001f0 <memchr>
 8007bc4:	b140      	cbz	r0, 8007bd8 <_vfiprintf_r+0x198>
 8007bc6:	2340      	movs	r3, #64	; 0x40
 8007bc8:	eba0 000a 	sub.w	r0, r0, sl
 8007bcc:	fa03 f000 	lsl.w	r0, r3, r0
 8007bd0:	9b04      	ldr	r3, [sp, #16]
 8007bd2:	4303      	orrs	r3, r0
 8007bd4:	3401      	adds	r4, #1
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bdc:	482c      	ldr	r0, [pc, #176]	; (8007c90 <_vfiprintf_r+0x250>)
 8007bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007be2:	2206      	movs	r2, #6
 8007be4:	f7f8 fb04 	bl	80001f0 <memchr>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d03f      	beq.n	8007c6c <_vfiprintf_r+0x22c>
 8007bec:	4b29      	ldr	r3, [pc, #164]	; (8007c94 <_vfiprintf_r+0x254>)
 8007bee:	bb1b      	cbnz	r3, 8007c38 <_vfiprintf_r+0x1f8>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	3307      	adds	r3, #7
 8007bf4:	f023 0307 	bic.w	r3, r3, #7
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfe:	443b      	add	r3, r7
 8007c00:	9309      	str	r3, [sp, #36]	; 0x24
 8007c02:	e767      	b.n	8007ad4 <_vfiprintf_r+0x94>
 8007c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c08:	460c      	mov	r4, r1
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	e7a5      	b.n	8007b5a <_vfiprintf_r+0x11a>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	3401      	adds	r4, #1
 8007c12:	9305      	str	r3, [sp, #20]
 8007c14:	4619      	mov	r1, r3
 8007c16:	f04f 0c0a 	mov.w	ip, #10
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c20:	3a30      	subs	r2, #48	; 0x30
 8007c22:	2a09      	cmp	r2, #9
 8007c24:	d903      	bls.n	8007c2e <_vfiprintf_r+0x1ee>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0c5      	beq.n	8007bb6 <_vfiprintf_r+0x176>
 8007c2a:	9105      	str	r1, [sp, #20]
 8007c2c:	e7c3      	b.n	8007bb6 <_vfiprintf_r+0x176>
 8007c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c32:	4604      	mov	r4, r0
 8007c34:	2301      	movs	r3, #1
 8007c36:	e7f0      	b.n	8007c1a <_vfiprintf_r+0x1da>
 8007c38:	ab03      	add	r3, sp, #12
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	4b16      	ldr	r3, [pc, #88]	; (8007c98 <_vfiprintf_r+0x258>)
 8007c40:	a904      	add	r1, sp, #16
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7fc f83c 	bl	8003cc0 <_printf_float>
 8007c48:	4607      	mov	r7, r0
 8007c4a:	1c78      	adds	r0, r7, #1
 8007c4c:	d1d6      	bne.n	8007bfc <_vfiprintf_r+0x1bc>
 8007c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c50:	07d9      	lsls	r1, r3, #31
 8007c52:	d405      	bmi.n	8007c60 <_vfiprintf_r+0x220>
 8007c54:	89ab      	ldrh	r3, [r5, #12]
 8007c56:	059a      	lsls	r2, r3, #22
 8007c58:	d402      	bmi.n	8007c60 <_vfiprintf_r+0x220>
 8007c5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c5c:	f000 faa1 	bl	80081a2 <__retarget_lock_release_recursive>
 8007c60:	89ab      	ldrh	r3, [r5, #12]
 8007c62:	065b      	lsls	r3, r3, #25
 8007c64:	f53f af12 	bmi.w	8007a8c <_vfiprintf_r+0x4c>
 8007c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c6a:	e711      	b.n	8007a90 <_vfiprintf_r+0x50>
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	462a      	mov	r2, r5
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <_vfiprintf_r+0x258>)
 8007c74:	a904      	add	r1, sp, #16
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7fc fac6 	bl	8004208 <_printf_i>
 8007c7c:	e7e4      	b.n	8007c48 <_vfiprintf_r+0x208>
 8007c7e:	bf00      	nop
 8007c80:	080088dc 	.word	0x080088dc
 8007c84:	080088fc 	.word	0x080088fc
 8007c88:	080088bc 	.word	0x080088bc
 8007c8c:	0800886c 	.word	0x0800886c
 8007c90:	08008876 	.word	0x08008876
 8007c94:	08003cc1 	.word	0x08003cc1
 8007c98:	08007a1d 	.word	0x08007a1d
 8007c9c:	08008872 	.word	0x08008872

08007ca0 <__swbuf_r>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	460e      	mov	r6, r1
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	b118      	cbz	r0, 8007cb2 <__swbuf_r+0x12>
 8007caa:	6983      	ldr	r3, [r0, #24]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <__swbuf_r+0x12>
 8007cae:	f000 f9d9 	bl	8008064 <__sinit>
 8007cb2:	4b21      	ldr	r3, [pc, #132]	; (8007d38 <__swbuf_r+0x98>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d12b      	bne.n	8007d10 <__swbuf_r+0x70>
 8007cb8:	686c      	ldr	r4, [r5, #4]
 8007cba:	69a3      	ldr	r3, [r4, #24]
 8007cbc:	60a3      	str	r3, [r4, #8]
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	071a      	lsls	r2, r3, #28
 8007cc2:	d52f      	bpl.n	8007d24 <__swbuf_r+0x84>
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	b36b      	cbz	r3, 8007d24 <__swbuf_r+0x84>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	6820      	ldr	r0, [r4, #0]
 8007ccc:	1ac0      	subs	r0, r0, r3
 8007cce:	6963      	ldr	r3, [r4, #20]
 8007cd0:	b2f6      	uxtb	r6, r6
 8007cd2:	4283      	cmp	r3, r0
 8007cd4:	4637      	mov	r7, r6
 8007cd6:	dc04      	bgt.n	8007ce2 <__swbuf_r+0x42>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f92e 	bl	8007f3c <_fflush_r>
 8007ce0:	bb30      	cbnz	r0, 8007d30 <__swbuf_r+0x90>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	60a3      	str	r3, [r4, #8]
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	6022      	str	r2, [r4, #0]
 8007cee:	701e      	strb	r6, [r3, #0]
 8007cf0:	6963      	ldr	r3, [r4, #20]
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	4283      	cmp	r3, r0
 8007cf6:	d004      	beq.n	8007d02 <__swbuf_r+0x62>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	07db      	lsls	r3, r3, #31
 8007cfc:	d506      	bpl.n	8007d0c <__swbuf_r+0x6c>
 8007cfe:	2e0a      	cmp	r6, #10
 8007d00:	d104      	bne.n	8007d0c <__swbuf_r+0x6c>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 f919 	bl	8007f3c <_fflush_r>
 8007d0a:	b988      	cbnz	r0, 8007d30 <__swbuf_r+0x90>
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <__swbuf_r+0x9c>)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d101      	bne.n	8007d1a <__swbuf_r+0x7a>
 8007d16:	68ac      	ldr	r4, [r5, #8]
 8007d18:	e7cf      	b.n	8007cba <__swbuf_r+0x1a>
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <__swbuf_r+0xa0>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	bf08      	it	eq
 8007d20:	68ec      	ldreq	r4, [r5, #12]
 8007d22:	e7ca      	b.n	8007cba <__swbuf_r+0x1a>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 f80c 	bl	8007d44 <__swsetup_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d0cb      	beq.n	8007cc8 <__swbuf_r+0x28>
 8007d30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d34:	e7ea      	b.n	8007d0c <__swbuf_r+0x6c>
 8007d36:	bf00      	nop
 8007d38:	080088dc 	.word	0x080088dc
 8007d3c:	080088fc 	.word	0x080088fc
 8007d40:	080088bc 	.word	0x080088bc

08007d44 <__swsetup_r>:
 8007d44:	4b32      	ldr	r3, [pc, #200]	; (8007e10 <__swsetup_r+0xcc>)
 8007d46:	b570      	push	{r4, r5, r6, lr}
 8007d48:	681d      	ldr	r5, [r3, #0]
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	b125      	cbz	r5, 8007d5a <__swsetup_r+0x16>
 8007d50:	69ab      	ldr	r3, [r5, #24]
 8007d52:	b913      	cbnz	r3, 8007d5a <__swsetup_r+0x16>
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 f985 	bl	8008064 <__sinit>
 8007d5a:	4b2e      	ldr	r3, [pc, #184]	; (8007e14 <__swsetup_r+0xd0>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d10f      	bne.n	8007d80 <__swsetup_r+0x3c>
 8007d60:	686c      	ldr	r4, [r5, #4]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d68:	0719      	lsls	r1, r3, #28
 8007d6a:	d42c      	bmi.n	8007dc6 <__swsetup_r+0x82>
 8007d6c:	06dd      	lsls	r5, r3, #27
 8007d6e:	d411      	bmi.n	8007d94 <__swsetup_r+0x50>
 8007d70:	2309      	movs	r3, #9
 8007d72:	6033      	str	r3, [r6, #0]
 8007d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d7e:	e03e      	b.n	8007dfe <__swsetup_r+0xba>
 8007d80:	4b25      	ldr	r3, [pc, #148]	; (8007e18 <__swsetup_r+0xd4>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d101      	bne.n	8007d8a <__swsetup_r+0x46>
 8007d86:	68ac      	ldr	r4, [r5, #8]
 8007d88:	e7eb      	b.n	8007d62 <__swsetup_r+0x1e>
 8007d8a:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <__swsetup_r+0xd8>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	bf08      	it	eq
 8007d90:	68ec      	ldreq	r4, [r5, #12]
 8007d92:	e7e6      	b.n	8007d62 <__swsetup_r+0x1e>
 8007d94:	0758      	lsls	r0, r3, #29
 8007d96:	d512      	bpl.n	8007dbe <__swsetup_r+0x7a>
 8007d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9a:	b141      	cbz	r1, 8007dae <__swsetup_r+0x6a>
 8007d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da0:	4299      	cmp	r1, r3
 8007da2:	d002      	beq.n	8007daa <__swsetup_r+0x66>
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fb25 	bl	80073f4 <_free_r>
 8007daa:	2300      	movs	r3, #0
 8007dac:	6363      	str	r3, [r4, #52]	; 0x34
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	2300      	movs	r3, #0
 8007db8:	6063      	str	r3, [r4, #4]
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f043 0308 	orr.w	r3, r3, #8
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	b94b      	cbnz	r3, 8007dde <__swsetup_r+0x9a>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd4:	d003      	beq.n	8007dde <__swsetup_r+0x9a>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 fa09 	bl	80081f0 <__smakebuf_r>
 8007dde:	89a0      	ldrh	r0, [r4, #12]
 8007de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007de4:	f010 0301 	ands.w	r3, r0, #1
 8007de8:	d00a      	beq.n	8007e00 <__swsetup_r+0xbc>
 8007dea:	2300      	movs	r3, #0
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6963      	ldr	r3, [r4, #20]
 8007df0:	425b      	negs	r3, r3
 8007df2:	61a3      	str	r3, [r4, #24]
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	b943      	cbnz	r3, 8007e0a <__swsetup_r+0xc6>
 8007df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dfc:	d1ba      	bne.n	8007d74 <__swsetup_r+0x30>
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	0781      	lsls	r1, r0, #30
 8007e02:	bf58      	it	pl
 8007e04:	6963      	ldrpl	r3, [r4, #20]
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	e7f4      	b.n	8007df4 <__swsetup_r+0xb0>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e7f7      	b.n	8007dfe <__swsetup_r+0xba>
 8007e0e:	bf00      	nop
 8007e10:	20000000 	.word	0x20000000
 8007e14:	080088dc 	.word	0x080088dc
 8007e18:	080088fc 	.word	0x080088fc
 8007e1c:	080088bc 	.word	0x080088bc

08007e20 <abort>:
 8007e20:	b508      	push	{r3, lr}
 8007e22:	2006      	movs	r0, #6
 8007e24:	f000 fa54 	bl	80082d0 <raise>
 8007e28:	2001      	movs	r0, #1
 8007e2a:	f7f9 f93b 	bl	80010a4 <_exit>
	...

08007e30 <__sflush_r>:
 8007e30:	898a      	ldrh	r2, [r1, #12]
 8007e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	4605      	mov	r5, r0
 8007e38:	0710      	lsls	r0, r2, #28
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	d458      	bmi.n	8007ef0 <__sflush_r+0xc0>
 8007e3e:	684b      	ldr	r3, [r1, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc05      	bgt.n	8007e50 <__sflush_r+0x20>
 8007e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dc02      	bgt.n	8007e50 <__sflush_r+0x20>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	d0f9      	beq.n	8007e4a <__sflush_r+0x1a>
 8007e56:	2300      	movs	r3, #0
 8007e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e5c:	682f      	ldr	r7, [r5, #0]
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	d032      	beq.n	8007ec8 <__sflush_r+0x98>
 8007e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	075a      	lsls	r2, r3, #29
 8007e68:	d505      	bpl.n	8007e76 <__sflush_r+0x46>
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	1ac0      	subs	r0, r0, r3
 8007e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e70:	b10b      	cbz	r3, 8007e76 <__sflush_r+0x46>
 8007e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e74:	1ac0      	subs	r0, r0, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	4628      	mov	r0, r5
 8007e80:	47b0      	blx	r6
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	d106      	bne.n	8007e96 <__sflush_r+0x66>
 8007e88:	6829      	ldr	r1, [r5, #0]
 8007e8a:	291d      	cmp	r1, #29
 8007e8c:	d82c      	bhi.n	8007ee8 <__sflush_r+0xb8>
 8007e8e:	4a2a      	ldr	r2, [pc, #168]	; (8007f38 <__sflush_r+0x108>)
 8007e90:	40ca      	lsrs	r2, r1
 8007e92:	07d6      	lsls	r6, r2, #31
 8007e94:	d528      	bpl.n	8007ee8 <__sflush_r+0xb8>
 8007e96:	2200      	movs	r2, #0
 8007e98:	6062      	str	r2, [r4, #4]
 8007e9a:	04d9      	lsls	r1, r3, #19
 8007e9c:	6922      	ldr	r2, [r4, #16]
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	d504      	bpl.n	8007eac <__sflush_r+0x7c>
 8007ea2:	1c42      	adds	r2, r0, #1
 8007ea4:	d101      	bne.n	8007eaa <__sflush_r+0x7a>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	b903      	cbnz	r3, 8007eac <__sflush_r+0x7c>
 8007eaa:	6560      	str	r0, [r4, #84]	; 0x54
 8007eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eae:	602f      	str	r7, [r5, #0]
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	d0ca      	beq.n	8007e4a <__sflush_r+0x1a>
 8007eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	d002      	beq.n	8007ec2 <__sflush_r+0x92>
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f7ff fa99 	bl	80073f4 <_free_r>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec6:	e7c1      	b.n	8007e4c <__sflush_r+0x1c>
 8007ec8:	6a21      	ldr	r1, [r4, #32]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b0      	blx	r6
 8007ed0:	1c41      	adds	r1, r0, #1
 8007ed2:	d1c7      	bne.n	8007e64 <__sflush_r+0x34>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0c4      	beq.n	8007e64 <__sflush_r+0x34>
 8007eda:	2b1d      	cmp	r3, #29
 8007edc:	d001      	beq.n	8007ee2 <__sflush_r+0xb2>
 8007ede:	2b16      	cmp	r3, #22
 8007ee0:	d101      	bne.n	8007ee6 <__sflush_r+0xb6>
 8007ee2:	602f      	str	r7, [r5, #0]
 8007ee4:	e7b1      	b.n	8007e4a <__sflush_r+0x1a>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	e7ad      	b.n	8007e4c <__sflush_r+0x1c>
 8007ef0:	690f      	ldr	r7, [r1, #16]
 8007ef2:	2f00      	cmp	r7, #0
 8007ef4:	d0a9      	beq.n	8007e4a <__sflush_r+0x1a>
 8007ef6:	0793      	lsls	r3, r2, #30
 8007ef8:	680e      	ldr	r6, [r1, #0]
 8007efa:	bf08      	it	eq
 8007efc:	694b      	ldreq	r3, [r1, #20]
 8007efe:	600f      	str	r7, [r1, #0]
 8007f00:	bf18      	it	ne
 8007f02:	2300      	movne	r3, #0
 8007f04:	eba6 0807 	sub.w	r8, r6, r7
 8007f08:	608b      	str	r3, [r1, #8]
 8007f0a:	f1b8 0f00 	cmp.w	r8, #0
 8007f0e:	dd9c      	ble.n	8007e4a <__sflush_r+0x1a>
 8007f10:	6a21      	ldr	r1, [r4, #32]
 8007f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f14:	4643      	mov	r3, r8
 8007f16:	463a      	mov	r2, r7
 8007f18:	4628      	mov	r0, r5
 8007f1a:	47b0      	blx	r6
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	dc06      	bgt.n	8007f2e <__sflush_r+0xfe>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f2c:	e78e      	b.n	8007e4c <__sflush_r+0x1c>
 8007f2e:	4407      	add	r7, r0
 8007f30:	eba8 0800 	sub.w	r8, r8, r0
 8007f34:	e7e9      	b.n	8007f0a <__sflush_r+0xda>
 8007f36:	bf00      	nop
 8007f38:	20400001 	.word	0x20400001

08007f3c <_fflush_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	690b      	ldr	r3, [r1, #16]
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b913      	cbnz	r3, 8007f4c <_fflush_r+0x10>
 8007f46:	2500      	movs	r5, #0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	b118      	cbz	r0, 8007f56 <_fflush_r+0x1a>
 8007f4e:	6983      	ldr	r3, [r0, #24]
 8007f50:	b90b      	cbnz	r3, 8007f56 <_fflush_r+0x1a>
 8007f52:	f000 f887 	bl	8008064 <__sinit>
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <_fflush_r+0x6c>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	d11b      	bne.n	8007f94 <_fflush_r+0x58>
 8007f5c:	686c      	ldr	r4, [r5, #4]
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0ef      	beq.n	8007f46 <_fflush_r+0xa>
 8007f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f68:	07d0      	lsls	r0, r2, #31
 8007f6a:	d404      	bmi.n	8007f76 <_fflush_r+0x3a>
 8007f6c:	0599      	lsls	r1, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_fflush_r+0x3a>
 8007f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f72:	f000 f915 	bl	80081a0 <__retarget_lock_acquire_recursive>
 8007f76:	4628      	mov	r0, r5
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f7ff ff59 	bl	8007e30 <__sflush_r>
 8007f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f80:	07da      	lsls	r2, r3, #31
 8007f82:	4605      	mov	r5, r0
 8007f84:	d4e0      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	059b      	lsls	r3, r3, #22
 8007f8a:	d4dd      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8e:	f000 f908 	bl	80081a2 <__retarget_lock_release_recursive>
 8007f92:	e7d9      	b.n	8007f48 <_fflush_r+0xc>
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <_fflush_r+0x70>)
 8007f96:	429c      	cmp	r4, r3
 8007f98:	d101      	bne.n	8007f9e <_fflush_r+0x62>
 8007f9a:	68ac      	ldr	r4, [r5, #8]
 8007f9c:	e7df      	b.n	8007f5e <_fflush_r+0x22>
 8007f9e:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <_fflush_r+0x74>)
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	bf08      	it	eq
 8007fa4:	68ec      	ldreq	r4, [r5, #12]
 8007fa6:	e7da      	b.n	8007f5e <_fflush_r+0x22>
 8007fa8:	080088dc 	.word	0x080088dc
 8007fac:	080088fc 	.word	0x080088fc
 8007fb0:	080088bc 	.word	0x080088bc

08007fb4 <std>:
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e9c0 3300 	strd	r3, r3, [r0]
 8007fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fc2:	6083      	str	r3, [r0, #8]
 8007fc4:	8181      	strh	r1, [r0, #12]
 8007fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fc8:	81c2      	strh	r2, [r0, #14]
 8007fca:	6183      	str	r3, [r0, #24]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	2208      	movs	r2, #8
 8007fd0:	305c      	adds	r0, #92	; 0x5c
 8007fd2:	f7fb fdcd 	bl	8003b70 <memset>
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <std+0x38>)
 8007fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <std+0x3c>)
 8007fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <std+0x40>)
 8007fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <std+0x44>)
 8007fe4:	6224      	str	r4, [r4, #32]
 8007fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	08008309 	.word	0x08008309
 8007ff0:	0800832b 	.word	0x0800832b
 8007ff4:	08008363 	.word	0x08008363
 8007ff8:	08008387 	.word	0x08008387

08007ffc <_cleanup_r>:
 8007ffc:	4901      	ldr	r1, [pc, #4]	; (8008004 <_cleanup_r+0x8>)
 8007ffe:	f000 b8af 	b.w	8008160 <_fwalk_reent>
 8008002:	bf00      	nop
 8008004:	08007f3d 	.word	0x08007f3d

08008008 <__sfmoreglue>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	2268      	movs	r2, #104	; 0x68
 800800c:	1e4d      	subs	r5, r1, #1
 800800e:	4355      	muls	r5, r2
 8008010:	460e      	mov	r6, r1
 8008012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008016:	f7ff fa59 	bl	80074cc <_malloc_r>
 800801a:	4604      	mov	r4, r0
 800801c:	b140      	cbz	r0, 8008030 <__sfmoreglue+0x28>
 800801e:	2100      	movs	r1, #0
 8008020:	e9c0 1600 	strd	r1, r6, [r0]
 8008024:	300c      	adds	r0, #12
 8008026:	60a0      	str	r0, [r4, #8]
 8008028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800802c:	f7fb fda0 	bl	8003b70 <memset>
 8008030:	4620      	mov	r0, r4
 8008032:	bd70      	pop	{r4, r5, r6, pc}

08008034 <__sfp_lock_acquire>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sfp_lock_acquire+0x8>)
 8008036:	f000 b8b3 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	200002e1 	.word	0x200002e1

08008040 <__sfp_lock_release>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sfp_lock_release+0x8>)
 8008042:	f000 b8ae 	b.w	80081a2 <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	200002e1 	.word	0x200002e1

0800804c <__sinit_lock_acquire>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sinit_lock_acquire+0x8>)
 800804e:	f000 b8a7 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	200002e2 	.word	0x200002e2

08008058 <__sinit_lock_release>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__sinit_lock_release+0x8>)
 800805a:	f000 b8a2 	b.w	80081a2 <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	200002e2 	.word	0x200002e2

08008064 <__sinit>:
 8008064:	b510      	push	{r4, lr}
 8008066:	4604      	mov	r4, r0
 8008068:	f7ff fff0 	bl	800804c <__sinit_lock_acquire>
 800806c:	69a3      	ldr	r3, [r4, #24]
 800806e:	b11b      	cbz	r3, 8008078 <__sinit+0x14>
 8008070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008074:	f7ff bff0 	b.w	8008058 <__sinit_lock_release>
 8008078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800807c:	6523      	str	r3, [r4, #80]	; 0x50
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <__sinit+0x68>)
 8008080:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <__sinit+0x6c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	62a2      	str	r2, [r4, #40]	; 0x28
 8008086:	42a3      	cmp	r3, r4
 8008088:	bf04      	itt	eq
 800808a:	2301      	moveq	r3, #1
 800808c:	61a3      	streq	r3, [r4, #24]
 800808e:	4620      	mov	r0, r4
 8008090:	f000 f820 	bl	80080d4 <__sfp>
 8008094:	6060      	str	r0, [r4, #4]
 8008096:	4620      	mov	r0, r4
 8008098:	f000 f81c 	bl	80080d4 <__sfp>
 800809c:	60a0      	str	r0, [r4, #8]
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f818 	bl	80080d4 <__sfp>
 80080a4:	2200      	movs	r2, #0
 80080a6:	60e0      	str	r0, [r4, #12]
 80080a8:	2104      	movs	r1, #4
 80080aa:	6860      	ldr	r0, [r4, #4]
 80080ac:	f7ff ff82 	bl	8007fb4 <std>
 80080b0:	68a0      	ldr	r0, [r4, #8]
 80080b2:	2201      	movs	r2, #1
 80080b4:	2109      	movs	r1, #9
 80080b6:	f7ff ff7d 	bl	8007fb4 <std>
 80080ba:	68e0      	ldr	r0, [r4, #12]
 80080bc:	2202      	movs	r2, #2
 80080be:	2112      	movs	r1, #18
 80080c0:	f7ff ff78 	bl	8007fb4 <std>
 80080c4:	2301      	movs	r3, #1
 80080c6:	61a3      	str	r3, [r4, #24]
 80080c8:	e7d2      	b.n	8008070 <__sinit+0xc>
 80080ca:	bf00      	nop
 80080cc:	08008478 	.word	0x08008478
 80080d0:	08007ffd 	.word	0x08007ffd

080080d4 <__sfp>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	4607      	mov	r7, r0
 80080d8:	f7ff ffac 	bl	8008034 <__sfp_lock_acquire>
 80080dc:	4b1e      	ldr	r3, [pc, #120]	; (8008158 <__sfp+0x84>)
 80080de:	681e      	ldr	r6, [r3, #0]
 80080e0:	69b3      	ldr	r3, [r6, #24]
 80080e2:	b913      	cbnz	r3, 80080ea <__sfp+0x16>
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ffbd 	bl	8008064 <__sinit>
 80080ea:	3648      	adds	r6, #72	; 0x48
 80080ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	d503      	bpl.n	80080fc <__sfp+0x28>
 80080f4:	6833      	ldr	r3, [r6, #0]
 80080f6:	b30b      	cbz	r3, 800813c <__sfp+0x68>
 80080f8:	6836      	ldr	r6, [r6, #0]
 80080fa:	e7f7      	b.n	80080ec <__sfp+0x18>
 80080fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008100:	b9d5      	cbnz	r5, 8008138 <__sfp+0x64>
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <__sfp+0x88>)
 8008104:	60e3      	str	r3, [r4, #12]
 8008106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800810a:	6665      	str	r5, [r4, #100]	; 0x64
 800810c:	f000 f847 	bl	800819e <__retarget_lock_init_recursive>
 8008110:	f7ff ff96 	bl	8008040 <__sfp_lock_release>
 8008114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800811c:	6025      	str	r5, [r4, #0]
 800811e:	61a5      	str	r5, [r4, #24]
 8008120:	2208      	movs	r2, #8
 8008122:	4629      	mov	r1, r5
 8008124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008128:	f7fb fd22 	bl	8003b70 <memset>
 800812c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008134:	4620      	mov	r0, r4
 8008136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008138:	3468      	adds	r4, #104	; 0x68
 800813a:	e7d9      	b.n	80080f0 <__sfp+0x1c>
 800813c:	2104      	movs	r1, #4
 800813e:	4638      	mov	r0, r7
 8008140:	f7ff ff62 	bl	8008008 <__sfmoreglue>
 8008144:	4604      	mov	r4, r0
 8008146:	6030      	str	r0, [r6, #0]
 8008148:	2800      	cmp	r0, #0
 800814a:	d1d5      	bne.n	80080f8 <__sfp+0x24>
 800814c:	f7ff ff78 	bl	8008040 <__sfp_lock_release>
 8008150:	230c      	movs	r3, #12
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	e7ee      	b.n	8008134 <__sfp+0x60>
 8008156:	bf00      	nop
 8008158:	08008478 	.word	0x08008478
 800815c:	ffff0001 	.word	0xffff0001

08008160 <_fwalk_reent>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4606      	mov	r6, r0
 8008166:	4688      	mov	r8, r1
 8008168:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800816c:	2700      	movs	r7, #0
 800816e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008172:	f1b9 0901 	subs.w	r9, r9, #1
 8008176:	d505      	bpl.n	8008184 <_fwalk_reent+0x24>
 8008178:	6824      	ldr	r4, [r4, #0]
 800817a:	2c00      	cmp	r4, #0
 800817c:	d1f7      	bne.n	800816e <_fwalk_reent+0xe>
 800817e:	4638      	mov	r0, r7
 8008180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008184:	89ab      	ldrh	r3, [r5, #12]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d907      	bls.n	800819a <_fwalk_reent+0x3a>
 800818a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800818e:	3301      	adds	r3, #1
 8008190:	d003      	beq.n	800819a <_fwalk_reent+0x3a>
 8008192:	4629      	mov	r1, r5
 8008194:	4630      	mov	r0, r6
 8008196:	47c0      	blx	r8
 8008198:	4307      	orrs	r7, r0
 800819a:	3568      	adds	r5, #104	; 0x68
 800819c:	e7e9      	b.n	8008172 <_fwalk_reent+0x12>

0800819e <__retarget_lock_init_recursive>:
 800819e:	4770      	bx	lr

080081a0 <__retarget_lock_acquire_recursive>:
 80081a0:	4770      	bx	lr

080081a2 <__retarget_lock_release_recursive>:
 80081a2:	4770      	bx	lr

080081a4 <__swhatbuf_r>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	460e      	mov	r6, r1
 80081a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ac:	2900      	cmp	r1, #0
 80081ae:	b096      	sub	sp, #88	; 0x58
 80081b0:	4614      	mov	r4, r2
 80081b2:	461d      	mov	r5, r3
 80081b4:	da08      	bge.n	80081c8 <__swhatbuf_r+0x24>
 80081b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	061a      	lsls	r2, r3, #24
 80081c0:	d410      	bmi.n	80081e4 <__swhatbuf_r+0x40>
 80081c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c6:	e00e      	b.n	80081e6 <__swhatbuf_r+0x42>
 80081c8:	466a      	mov	r2, sp
 80081ca:	f000 f903 	bl	80083d4 <_fstat_r>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	dbf1      	blt.n	80081b6 <__swhatbuf_r+0x12>
 80081d2:	9a01      	ldr	r2, [sp, #4]
 80081d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081dc:	425a      	negs	r2, r3
 80081de:	415a      	adcs	r2, r3
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	e7ee      	b.n	80081c2 <__swhatbuf_r+0x1e>
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	2000      	movs	r0, #0
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	b016      	add	sp, #88	; 0x58
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080081f0 <__smakebuf_r>:
 80081f0:	898b      	ldrh	r3, [r1, #12]
 80081f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081f4:	079d      	lsls	r5, r3, #30
 80081f6:	4606      	mov	r6, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	d507      	bpl.n	800820c <__smakebuf_r+0x1c>
 80081fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	6123      	str	r3, [r4, #16]
 8008204:	2301      	movs	r3, #1
 8008206:	6163      	str	r3, [r4, #20]
 8008208:	b002      	add	sp, #8
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	ab01      	add	r3, sp, #4
 800820e:	466a      	mov	r2, sp
 8008210:	f7ff ffc8 	bl	80081a4 <__swhatbuf_r>
 8008214:	9900      	ldr	r1, [sp, #0]
 8008216:	4605      	mov	r5, r0
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff f957 	bl	80074cc <_malloc_r>
 800821e:	b948      	cbnz	r0, 8008234 <__smakebuf_r+0x44>
 8008220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008224:	059a      	lsls	r2, r3, #22
 8008226:	d4ef      	bmi.n	8008208 <__smakebuf_r+0x18>
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	f043 0302 	orr.w	r3, r3, #2
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	e7e3      	b.n	80081fc <__smakebuf_r+0xc>
 8008234:	4b0d      	ldr	r3, [pc, #52]	; (800826c <__smakebuf_r+0x7c>)
 8008236:	62b3      	str	r3, [r6, #40]	; 0x28
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	6020      	str	r0, [r4, #0]
 800823c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	9b00      	ldr	r3, [sp, #0]
 8008244:	6163      	str	r3, [r4, #20]
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	6120      	str	r0, [r4, #16]
 800824a:	b15b      	cbz	r3, 8008264 <__smakebuf_r+0x74>
 800824c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008250:	4630      	mov	r0, r6
 8008252:	f000 f8d1 	bl	80083f8 <_isatty_r>
 8008256:	b128      	cbz	r0, 8008264 <__smakebuf_r+0x74>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	89a0      	ldrh	r0, [r4, #12]
 8008266:	4305      	orrs	r5, r0
 8008268:	81a5      	strh	r5, [r4, #12]
 800826a:	e7cd      	b.n	8008208 <__smakebuf_r+0x18>
 800826c:	08007ffd 	.word	0x08007ffd

08008270 <_malloc_usable_size_r>:
 8008270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008274:	1f18      	subs	r0, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfbc      	itt	lt
 800827a:	580b      	ldrlt	r3, [r1, r0]
 800827c:	18c0      	addlt	r0, r0, r3
 800827e:	4770      	bx	lr

08008280 <_raise_r>:
 8008280:	291f      	cmp	r1, #31
 8008282:	b538      	push	{r3, r4, r5, lr}
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	d904      	bls.n	8008294 <_raise_r+0x14>
 800828a:	2316      	movs	r3, #22
 800828c:	6003      	str	r3, [r0, #0]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008296:	b112      	cbz	r2, 800829e <_raise_r+0x1e>
 8008298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800829c:	b94b      	cbnz	r3, 80082b2 <_raise_r+0x32>
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f830 	bl	8008304 <_getpid_r>
 80082a4:	462a      	mov	r2, r5
 80082a6:	4601      	mov	r1, r0
 80082a8:	4620      	mov	r0, r4
 80082aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ae:	f000 b817 	b.w	80082e0 <_kill_r>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d00a      	beq.n	80082cc <_raise_r+0x4c>
 80082b6:	1c59      	adds	r1, r3, #1
 80082b8:	d103      	bne.n	80082c2 <_raise_r+0x42>
 80082ba:	2316      	movs	r3, #22
 80082bc:	6003      	str	r3, [r0, #0]
 80082be:	2001      	movs	r0, #1
 80082c0:	e7e7      	b.n	8008292 <_raise_r+0x12>
 80082c2:	2400      	movs	r4, #0
 80082c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082c8:	4628      	mov	r0, r5
 80082ca:	4798      	blx	r3
 80082cc:	2000      	movs	r0, #0
 80082ce:	e7e0      	b.n	8008292 <_raise_r+0x12>

080082d0 <raise>:
 80082d0:	4b02      	ldr	r3, [pc, #8]	; (80082dc <raise+0xc>)
 80082d2:	4601      	mov	r1, r0
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	f7ff bfd3 	b.w	8008280 <_raise_r>
 80082da:	bf00      	nop
 80082dc:	20000000 	.word	0x20000000

080082e0 <_kill_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_kill_r+0x20>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	f7f8 fec9 	bl	8001084 <_kill>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d102      	bne.n	80082fc <_kill_r+0x1c>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b103      	cbz	r3, 80082fc <_kill_r+0x1c>
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	200002dc 	.word	0x200002dc

08008304 <_getpid_r>:
 8008304:	f7f8 beb6 	b.w	8001074 <_getpid>

08008308 <__sread>:
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008310:	f000 f894 	bl	800843c <_read_r>
 8008314:	2800      	cmp	r0, #0
 8008316:	bfab      	itete	ge
 8008318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800831a:	89a3      	ldrhlt	r3, [r4, #12]
 800831c:	181b      	addge	r3, r3, r0
 800831e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008322:	bfac      	ite	ge
 8008324:	6563      	strge	r3, [r4, #84]	; 0x54
 8008326:	81a3      	strhlt	r3, [r4, #12]
 8008328:	bd10      	pop	{r4, pc}

0800832a <__swrite>:
 800832a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832e:	461f      	mov	r7, r3
 8008330:	898b      	ldrh	r3, [r1, #12]
 8008332:	05db      	lsls	r3, r3, #23
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4616      	mov	r6, r2
 800833a:	d505      	bpl.n	8008348 <__swrite+0x1e>
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	2302      	movs	r3, #2
 8008342:	2200      	movs	r2, #0
 8008344:	f000 f868 	bl	8008418 <_lseek_r>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800834e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	4632      	mov	r2, r6
 8008356:	463b      	mov	r3, r7
 8008358:	4628      	mov	r0, r5
 800835a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835e:	f000 b817 	b.w	8008390 <_write_r>

08008362 <__sseek>:
 8008362:	b510      	push	{r4, lr}
 8008364:	460c      	mov	r4, r1
 8008366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836a:	f000 f855 	bl	8008418 <_lseek_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	bf15      	itete	ne
 8008374:	6560      	strne	r0, [r4, #84]	; 0x54
 8008376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800837a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800837e:	81a3      	strheq	r3, [r4, #12]
 8008380:	bf18      	it	ne
 8008382:	81a3      	strhne	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__sclose>:
 8008386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838a:	f000 b813 	b.w	80083b4 <_close_r>
	...

08008390 <_write_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	; (80083b0 <_write_r+0x20>)
 8008394:	4604      	mov	r4, r0
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	2200      	movs	r2, #0
 800839c:	602a      	str	r2, [r5, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f7f8 fea7 	bl	80010f2 <_write>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_write_r+0x1e>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_write_r+0x1e>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	200002dc 	.word	0x200002dc

080083b4 <_close_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_close_r+0x1c>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	f7f8 feb3 	bl	800112a <_close>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_close_r+0x1a>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_close_r+0x1a>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	200002dc 	.word	0x200002dc

080083d4 <_fstat_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	; (80083f4 <_fstat_r+0x20>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	4611      	mov	r1, r2
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	f7f8 feae 	bl	8001142 <_fstat>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	d102      	bne.n	80083f0 <_fstat_r+0x1c>
 80083ea:	682b      	ldr	r3, [r5, #0]
 80083ec:	b103      	cbz	r3, 80083f0 <_fstat_r+0x1c>
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	bd38      	pop	{r3, r4, r5, pc}
 80083f2:	bf00      	nop
 80083f4:	200002dc 	.word	0x200002dc

080083f8 <_isatty_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d06      	ldr	r5, [pc, #24]	; (8008414 <_isatty_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7f8 fead 	bl	8001162 <_isatty>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_isatty_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_isatty_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	200002dc 	.word	0x200002dc

08008418 <_lseek_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	; (8008438 <_lseek_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f8 fea6 	bl	8001178 <_lseek>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_lseek_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_lseek_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	200002dc 	.word	0x200002dc

0800843c <_read_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d07      	ldr	r5, [pc, #28]	; (800845c <_read_r+0x20>)
 8008440:	4604      	mov	r4, r0
 8008442:	4608      	mov	r0, r1
 8008444:	4611      	mov	r1, r2
 8008446:	2200      	movs	r2, #0
 8008448:	602a      	str	r2, [r5, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f7f8 fe34 	bl	80010b8 <_read>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_read_r+0x1e>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_read_r+0x1e>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	200002dc 	.word	0x200002dc

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
