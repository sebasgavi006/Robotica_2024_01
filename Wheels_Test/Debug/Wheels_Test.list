
Wheels_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08009a18  08009a18  00019a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a22c  0800a22c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a22c  0800a22c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a22c  0800a22c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a22c  0800a22c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a230  0800a230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001d4  0800a408  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800a408  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a29  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000134f  00000000  00000000  00025c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  00026f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00027548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010449  00000000  00000000  00027a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066e5  00000000  00000000  00037eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005794b  00000000  00000000  0003e596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00095ee1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd4  00000000  00000000  00095f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099fc 	.word	0x080099fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080099fc 	.word	0x080099fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <main>:
void parseCommands(char  *ptrbufferReception);
void turnOff(void);
void turnOn(void);

/* ===== Función principal del programa ===== */
int main(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0


	// Configuramos el PLL para que el micro corra a 100MHz
	systemClock_100MHz(&pllHandler);
 8000d28:	482d      	ldr	r0, [pc, #180]	; (8000de0 <main+0xbc>)
 8000d2a:	f002 fc4f 	bl	80035cc <systemClock_100MHz>
	systemClock_Output(); // el pin PC9 configurado como salida para leer la freq
 8000d2e:	f002 fc67 	bl	8003600 <systemClock_Output>

	RCC->CR &= ~(RCC_CR_HSITRIM); // Limpiamos el registro
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <main+0xc0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <main+0xc0>)
 8000d38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d3c:	6013      	str	r3, [r2, #0]
	RCC->CR |= (11 << RCC_CR_HSITRIM_Pos); // Numero para calibrar POR DEFECTO ESTABA EN 15!!!!!
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <main+0xc0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <main+0xc0>)
 8000d44:	f043 0358 	orr.w	r3, r3, #88	; 0x58
 8000d48:	6013      	str	r3, [r2, #0]

	initSystem();
 8000d4a:	f000 f863 	bl	8000e14 <initSystem>
	turnOff();
 8000d4e:	f000 fa8d 	bl	800126c <turnOff>
//	systick_Delay_ms(SYSTICK_10s);
	sprintf(bufferMsg, "Saludos terrícolas, soy OPPY \n");
 8000d52:	4925      	ldr	r1, [pc, #148]	; (8000de8 <main+0xc4>)
 8000d54:	4825      	ldr	r0, [pc, #148]	; (8000dec <main+0xc8>)
 8000d56:	f004 fc27 	bl	80055a8 <siprintf>
	usart_WriteMsg(&usart1Comm, bufferMsg);
 8000d5a:	4924      	ldr	r1, [pc, #144]	; (8000dec <main+0xc8>)
 8000d5c:	4824      	ldr	r0, [pc, #144]	; (8000df0 <main+0xcc>)
 8000d5e:	f003 fcda 	bl	8004716 <usart_WriteMsg>
//	forwardMove(1);
	counterPeriod = 0;
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <main+0xd0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
	counterPercDuty = 0;
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <main+0xd4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
	flagEncR = 0;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <main+0xd8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	flagEncL = 0;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <main+0xdc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
	/* Loop forever */
	while(1){


		// Se revisa cual fue el dato recibido por la comunicacion serial
		if(rxData != '\0'){
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <main+0xe0>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d020      	beq.n	8000dc4 <main+0xa0>
			bufferReceiver[counterReception] = rxData;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <main+0xe4>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <main+0xe0>)
 8000d8a:	7819      	ldrb	r1, [r3, #0]
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <main+0xe8>)
 8000d8e:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <main+0xe4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <main+0xe4>)
 8000d9a:	701a      	strb	r2, [r3, #0]

			// Se verifica si el último dato es el caracter de finalizacion de un string
			if (rxData == '@'){
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <main+0xe0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b40      	cmp	r3, #64	; 0x40
 8000da2:	d10b      	bne.n	8000dbc <main+0x98>
				// Se modifica el estado de una variable de control
				stringComplete = 1;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <main+0xec>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]

				// Configuramos las variables para guardar el string y esperar uno nuevo
				bufferReceiver[counterReception] = '\0';
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <main+0xe4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <main+0xe8>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	5499      	strb	r1, [r3, r2]
				counterReception = 0;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <main+0xe4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
			}

			// Limpiamos la variable que almacena los datos recibidos por el com. serial
			rxData = '\0';
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <main+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e002      	b.n	8000dca <main+0xa6>
		}
		else{
			// Aun no se han recibido caractéres a traves de la comunicacion serial
			stringComplete = 0;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <main+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
		}


		if(stringComplete){
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <main+0xec>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0d3      	beq.n	8000d7a <main+0x56>
			parseCommands(bufferReceiver);
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <main+0xe8>)
 8000dd4:	f000 fa7e 	bl	80012d4 <parseCommands>
			stringComplete = 0;
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <main+0xec>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
		if(rxData != '\0'){
 8000dde:	e7cc      	b.n	8000d7a <main+0x56>
 8000de0:	200002b4 	.word	0x200002b4
 8000de4:	40023800 	.word	0x40023800
 8000de8:	08009a18 	.word	0x08009a18
 8000dec:	20000374 	.word	0x20000374
 8000df0:	200002e4 	.word	0x200002e4
 8000df4:	200004e1 	.word	0x200004e1
 8000df8:	200004e3 	.word	0x200004e3
 8000dfc:	200004e4 	.word	0x200004e4
 8000e00:	200004e5 	.word	0x200004e5
 8000e04:	20000434 	.word	0x20000434
 8000e08:	20000435 	.word	0x20000435
 8000e0c:	200003f4 	.word	0x200003f4
 8000e10:	20000436 	.word	0x20000436

08000e14 <initSystem>:
}	// Fin del main



// Función para configurar los periféricos iniciales del sistemas
void initSystem(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

	// 1. ===== PUERTOS Y PINES =====
	/* Configurando el pin para el Blinky */
	stateLed.pGPIOx								= GPIOA;
 8000e18:	4bac      	ldr	r3, [pc, #688]	; (80010cc <initSystem+0x2b8>)
 8000e1a:	4aad      	ldr	r2, [pc, #692]	; (80010d0 <initSystem+0x2bc>)
 8000e1c:	601a      	str	r2, [r3, #0]
	stateLed.pinConfig.GPIO_PinNumber			= PIN_5;	// PinA5
 8000e1e:	4bab      	ldr	r3, [pc, #684]	; (80010cc <initSystem+0x2b8>)
 8000e20:	2205      	movs	r2, #5
 8000e22:	711a      	strb	r2, [r3, #4]
	stateLed.pinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8000e24:	4ba9      	ldr	r3, [pc, #676]	; (80010cc <initSystem+0x2b8>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	715a      	strb	r2, [r3, #5]
	stateLed.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000e2a:	4ba8      	ldr	r3, [pc, #672]	; (80010cc <initSystem+0x2b8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	721a      	strb	r2, [r3, #8]
	stateLed.pinConfig.GPIO_PinOutputSpeed		= GPIO_OSPEED_MEDIUM;
 8000e30:	4ba6      	ldr	r3, [pc, #664]	; (80010cc <initSystem+0x2b8>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	719a      	strb	r2, [r3, #6]
	stateLed.pinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000e36:	4ba5      	ldr	r3, [pc, #660]	; (80010cc <initSystem+0x2b8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	71da      	strb	r2, [r3, #7]
	gpio_Config(&stateLed);
 8000e3c:	48a3      	ldr	r0, [pc, #652]	; (80010cc <initSystem+0x2b8>)
 8000e3e:	f002 f847 	bl	8002ed0 <gpio_Config>

	/* Configurando el pin para el Blinky */
	stateLedBoard.pGPIOx							= GPIOC;
 8000e42:	4ba4      	ldr	r3, [pc, #656]	; (80010d4 <initSystem+0x2c0>)
 8000e44:	4aa4      	ldr	r2, [pc, #656]	; (80010d8 <initSystem+0x2c4>)
 8000e46:	601a      	str	r2, [r3, #0]
	stateLedBoard.pinConfig.GPIO_PinNumber			= PIN_5;	// PinA5
 8000e48:	4ba2      	ldr	r3, [pc, #648]	; (80010d4 <initSystem+0x2c0>)
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	711a      	strb	r2, [r3, #4]
	stateLedBoard.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000e4e:	4ba1      	ldr	r3, [pc, #644]	; (80010d4 <initSystem+0x2c0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	715a      	strb	r2, [r3, #5]
	stateLedBoard.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000e54:	4b9f      	ldr	r3, [pc, #636]	; (80010d4 <initSystem+0x2c0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	721a      	strb	r2, [r3, #8]
	stateLedBoard.pinConfig.GPIO_PinOutputSpeed		= GPIO_OSPEED_MEDIUM;
 8000e5a:	4b9e      	ldr	r3, [pc, #632]	; (80010d4 <initSystem+0x2c0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	719a      	strb	r2, [r3, #6]
	stateLedBoard.pinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000e60:	4b9c      	ldr	r3, [pc, #624]	; (80010d4 <initSystem+0x2c0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	71da      	strb	r2, [r3, #7]
	gpio_Config(&stateLedBoard);
 8000e66:	489b      	ldr	r0, [pc, #620]	; (80010d4 <initSystem+0x2c0>)
 8000e68:	f002 f832 	bl	8002ed0 <gpio_Config>

	/* Configurando el pin para el Enable del puente H */
	GPIO_Enb_R.pGPIOx							= GPIOC;
 8000e6c:	4b9b      	ldr	r3, [pc, #620]	; (80010dc <initSystem+0x2c8>)
 8000e6e:	4a9a      	ldr	r2, [pc, #616]	; (80010d8 <initSystem+0x2c4>)
 8000e70:	601a      	str	r2, [r3, #0]
	GPIO_Enb_R.pinConfig.GPIO_PinNumber			= PIN_10;
 8000e72:	4b9a      	ldr	r3, [pc, #616]	; (80010dc <initSystem+0x2c8>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	711a      	strb	r2, [r3, #4]
	GPIO_Enb_R.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000e78:	4b98      	ldr	r3, [pc, #608]	; (80010dc <initSystem+0x2c8>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	715a      	strb	r2, [r3, #5]
	GPIO_Enb_R.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000e7e:	4b97      	ldr	r3, [pc, #604]	; (80010dc <initSystem+0x2c8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	721a      	strb	r2, [r3, #8]
	GPIO_Enb_R.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000e84:	4b95      	ldr	r3, [pc, #596]	; (80010dc <initSystem+0x2c8>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	719a      	strb	r2, [r3, #6]
	GPIO_Enb_R.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000e8a:	4b94      	ldr	r3, [pc, #592]	; (80010dc <initSystem+0x2c8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Enb_R);
 8000e90:	4892      	ldr	r0, [pc, #584]	; (80010dc <initSystem+0x2c8>)
 8000e92:	f002 f81d 	bl	8002ed0 <gpio_Config>

	/* Configurando el pin para definir la dirección del motor DERECHO */
	GPIO_Dir_R.pGPIOx							= GPIOC;
 8000e96:	4b92      	ldr	r3, [pc, #584]	; (80010e0 <initSystem+0x2cc>)
 8000e98:	4a8f      	ldr	r2, [pc, #572]	; (80010d8 <initSystem+0x2c4>)
 8000e9a:	601a      	str	r2, [r3, #0]
	GPIO_Dir_R.pinConfig.GPIO_PinNumber			= PIN_12;
 8000e9c:	4b90      	ldr	r3, [pc, #576]	; (80010e0 <initSystem+0x2cc>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	711a      	strb	r2, [r3, #4]
	GPIO_Dir_R.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000ea2:	4b8f      	ldr	r3, [pc, #572]	; (80010e0 <initSystem+0x2cc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	715a      	strb	r2, [r3, #5]
	GPIO_Dir_R.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000ea8:	4b8d      	ldr	r3, [pc, #564]	; (80010e0 <initSystem+0x2cc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	721a      	strb	r2, [r3, #8]
	GPIO_Dir_R.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000eae:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <initSystem+0x2cc>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	719a      	strb	r2, [r3, #6]
	GPIO_Dir_R.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000eb4:	4b8a      	ldr	r3, [pc, #552]	; (80010e0 <initSystem+0x2cc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Dir_R);
 8000eba:	4889      	ldr	r0, [pc, #548]	; (80010e0 <initSystem+0x2cc>)
 8000ebc:	f002 f808 	bl	8002ed0 <gpio_Config>

	/* Pin de salida del PWM para el motor derecho. Usa el Timer5 */
	GPIO_PWM_R.pGPIOx								= GPIOA;
 8000ec0:	4b88      	ldr	r3, [pc, #544]	; (80010e4 <initSystem+0x2d0>)
 8000ec2:	4a83      	ldr	r2, [pc, #524]	; (80010d0 <initSystem+0x2bc>)
 8000ec4:	601a      	str	r2, [r3, #0]
	GPIO_PWM_R.pinConfig.GPIO_PinNumber				= PIN_0;
 8000ec6:	4b87      	ldr	r3, [pc, #540]	; (80010e4 <initSystem+0x2d0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	711a      	strb	r2, [r3, #4]
	GPIO_PWM_R.pinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8000ecc:	4b85      	ldr	r3, [pc, #532]	; (80010e4 <initSystem+0x2d0>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	715a      	strb	r2, [r3, #5]
	GPIO_PWM_R.pinConfig.GPIO_PinAltFunMode			= AF2;
 8000ed2:	4b84      	ldr	r3, [pc, #528]	; (80010e4 <initSystem+0x2d0>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	725a      	strb	r2, [r3, #9]
	GPIO_PWM_R.pinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000ed8:	4b82      	ldr	r3, [pc, #520]	; (80010e4 <initSystem+0x2d0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	71da      	strb	r2, [r3, #7]
	GPIO_PWM_R.pinConfig.GPIO_PinOutputSpeed		= GPIO_OSPEED_FAST;
 8000ede:	4b81      	ldr	r3, [pc, #516]	; (80010e4 <initSystem+0x2d0>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	719a      	strb	r2, [r3, #6]
	gpio_Config(&GPIO_PWM_R);
 8000ee4:	487f      	ldr	r0, [pc, #508]	; (80010e4 <initSystem+0x2d0>)
 8000ee6:	f001 fff3 	bl	8002ed0 <gpio_Config>

	/* Configurando el pin para el Enable del puente H */
	GPIO_Enb_L.pGPIOx							= GPIOC;
 8000eea:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <initSystem+0x2d4>)
 8000eec:	4a7a      	ldr	r2, [pc, #488]	; (80010d8 <initSystem+0x2c4>)
 8000eee:	601a      	str	r2, [r3, #0]
	GPIO_Enb_L.pinConfig.GPIO_PinNumber			= PIN_11;
 8000ef0:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <initSystem+0x2d4>)
 8000ef2:	220b      	movs	r2, #11
 8000ef4:	711a      	strb	r2, [r3, #4]
	GPIO_Enb_L.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000ef6:	4b7c      	ldr	r3, [pc, #496]	; (80010e8 <initSystem+0x2d4>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	715a      	strb	r2, [r3, #5]
	GPIO_Enb_L.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000efc:	4b7a      	ldr	r3, [pc, #488]	; (80010e8 <initSystem+0x2d4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	721a      	strb	r2, [r3, #8]
	GPIO_Enb_L.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000f02:	4b79      	ldr	r3, [pc, #484]	; (80010e8 <initSystem+0x2d4>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	719a      	strb	r2, [r3, #6]
	GPIO_Enb_L.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000f08:	4b77      	ldr	r3, [pc, #476]	; (80010e8 <initSystem+0x2d4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Enb_L);
 8000f0e:	4876      	ldr	r0, [pc, #472]	; (80010e8 <initSystem+0x2d4>)
 8000f10:	f001 ffde 	bl	8002ed0 <gpio_Config>

	/* Configurando el pin para definir la dirección del motor IZQUIERDO */
	GPIO_Dir_L.pGPIOx							= GPIOD;
 8000f14:	4b75      	ldr	r3, [pc, #468]	; (80010ec <initSystem+0x2d8>)
 8000f16:	4a76      	ldr	r2, [pc, #472]	; (80010f0 <initSystem+0x2dc>)
 8000f18:	601a      	str	r2, [r3, #0]
	GPIO_Dir_L.pinConfig.GPIO_PinNumber			= PIN_2;
 8000f1a:	4b74      	ldr	r3, [pc, #464]	; (80010ec <initSystem+0x2d8>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	711a      	strb	r2, [r3, #4]
	GPIO_Dir_L.pinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000f20:	4b72      	ldr	r3, [pc, #456]	; (80010ec <initSystem+0x2d8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	715a      	strb	r2, [r3, #5]
	GPIO_Dir_L.pinConfig.GPIO_PinOutputType		= GPIO_OTYPE_PUSHPULL;
 8000f26:	4b71      	ldr	r3, [pc, #452]	; (80010ec <initSystem+0x2d8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	721a      	strb	r2, [r3, #8]
	GPIO_Dir_L.pinConfig.GPIO_PinOutputSpeed	= GPIO_OSPEED_FAST;
 8000f2c:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <initSystem+0x2d8>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	719a      	strb	r2, [r3, #6]
	GPIO_Dir_L.pinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000f32:	4b6e      	ldr	r3, [pc, #440]	; (80010ec <initSystem+0x2d8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	71da      	strb	r2, [r3, #7]
	gpio_Config(&GPIO_Dir_L);
 8000f38:	486c      	ldr	r0, [pc, #432]	; (80010ec <initSystem+0x2d8>)
 8000f3a:	f001 ffc9 	bl	8002ed0 <gpio_Config>

	/* Pin de salida del PWM para el motor izquierdo. Usa el Timer5 */
	GPIO_PWM_L.pGPIOx								= GPIOA;
 8000f3e:	4b6d      	ldr	r3, [pc, #436]	; (80010f4 <initSystem+0x2e0>)
 8000f40:	4a63      	ldr	r2, [pc, #396]	; (80010d0 <initSystem+0x2bc>)
 8000f42:	601a      	str	r2, [r3, #0]
	GPIO_PWM_L.pinConfig.GPIO_PinNumber				= PIN_1;
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <initSystem+0x2e0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	711a      	strb	r2, [r3, #4]
	GPIO_PWM_L.pinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8000f4a:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <initSystem+0x2e0>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	715a      	strb	r2, [r3, #5]
	GPIO_PWM_L.pinConfig.GPIO_PinAltFunMode			= AF2;
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <initSystem+0x2e0>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	725a      	strb	r2, [r3, #9]
	GPIO_PWM_L.pinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000f56:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <initSystem+0x2e0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	71da      	strb	r2, [r3, #7]
	GPIO_PWM_L.pinConfig.GPIO_PinOutputSpeed		= GPIO_OSPEED_FAST;
 8000f5c:	4b65      	ldr	r3, [pc, #404]	; (80010f4 <initSystem+0x2e0>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	719a      	strb	r2, [r3, #6]
	gpio_Config(&GPIO_PWM_L);
 8000f62:	4864      	ldr	r0, [pc, #400]	; (80010f4 <initSystem+0x2e0>)
 8000f64:	f001 ffb4 	bl	8002ed0 <gpio_Config>

	/* Pin del Encoder Derecho */
	GPIO_Exti_R.pGPIOx							= GPIOC;
 8000f68:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <initSystem+0x2e4>)
 8000f6a:	4a5b      	ldr	r2, [pc, #364]	; (80010d8 <initSystem+0x2c4>)
 8000f6c:	601a      	str	r2, [r3, #0]
	GPIO_Exti_R.pinConfig.GPIO_PinNumber		= PIN_1;
 8000f6e:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <initSystem+0x2e4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	711a      	strb	r2, [r3, #4]
	GPIO_Exti_R.pinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000f74:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <initSystem+0x2e4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	715a      	strb	r2, [r3, #5]
	gpio_Config(&GPIO_Exti_R);
 8000f7a:	485f      	ldr	r0, [pc, #380]	; (80010f8 <initSystem+0x2e4>)
 8000f7c:	f001 ffa8 	bl	8002ed0 <gpio_Config>

	/* Pin del Encoder Izquierdo */
	GPIO_Exti_L.pGPIOx							= GPIOC;
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <initSystem+0x2e8>)
 8000f82:	4a55      	ldr	r2, [pc, #340]	; (80010d8 <initSystem+0x2c4>)
 8000f84:	601a      	str	r2, [r3, #0]
	GPIO_Exti_L.pinConfig.GPIO_PinNumber		= PIN_3;
 8000f86:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <initSystem+0x2e8>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	711a      	strb	r2, [r3, #4]
	GPIO_Exti_L.pinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <initSystem+0x2e8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	715a      	strb	r2, [r3, #5]
	gpio_Config(&GPIO_Exti_L);
 8000f92:	485a      	ldr	r0, [pc, #360]	; (80010fc <initSystem+0x2e8>)
 8000f94:	f001 ff9c 	bl	8002ed0 <gpio_Config>


	// 2. ===== TIMERS =====
	/* Configurando el Timer del Blinky*/
	Tim_Blinky.pTIMx								= TIM2;
 8000f98:	4b59      	ldr	r3, [pc, #356]	; (8001100 <initSystem+0x2ec>)
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9e:	601a      	str	r2, [r3, #0]
	Tim_Blinky.TIMx_Config.TIMx_Prescaler			= 100E3;	// Genera incrementos de 1 ms. El micro está a 100MHz
 8000fa0:	4b57      	ldr	r3, [pc, #348]	; (8001100 <initSystem+0x2ec>)
 8000fa2:	4a58      	ldr	r2, [pc, #352]	; (8001104 <initSystem+0x2f0>)
 8000fa4:	609a      	str	r2, [r3, #8]
	Tim_Blinky.TIMx_Config.TIMx_Period				= 2000;		// De la mano con el pre-scaler, determina cuando se dispara una interrupción (500 ms)
 8000fa6:	4b56      	ldr	r3, [pc, #344]	; (8001100 <initSystem+0x2ec>)
 8000fa8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fac:	60da      	str	r2, [r3, #12]
	Tim_Blinky.TIMx_Config.TIMx_mode				= TIMER_UP_COUNTER;	// El Timer cuante ascendente
 8000fae:	4b54      	ldr	r3, [pc, #336]	; (8001100 <initSystem+0x2ec>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	711a      	strb	r2, [r3, #4]
	Tim_Blinky.TIMx_Config.TIMx_InterruptEnable		= TIMER_INT_ENABLE;	// Se activa la interrupción
 8000fb4:	4b52      	ldr	r3, [pc, #328]	; (8001100 <initSystem+0x2ec>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	741a      	strb	r2, [r3, #16]
	timer_Config(&Tim_Blinky);
 8000fba:	4851      	ldr	r0, [pc, #324]	; (8001100 <initSystem+0x2ec>)
 8000fbc:	f002 fef6 	bl	8003dac <timer_Config>
	timer_SetState(&Tim_Blinky, TIMER_ON);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	484f      	ldr	r0, [pc, #316]	; (8001100 <initSystem+0x2ec>)
 8000fc4:	f003 f870 	bl	80040a8 <timer_SetState>


	// 3. ===== PWM =====

	/* Configurando el PWM para el motor DERECHO */
	PWM_R.ptrTIMx					= TIM5; // Timer5 usado para el PWM
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <initSystem+0x2f4>)
 8000fca:	4a50      	ldr	r2, [pc, #320]	; (800110c <initSystem+0x2f8>)
 8000fcc:	601a      	str	r2, [r3, #0]
	PWM_R.config.channel			= PWM_CHANNEL_1;
 8000fce:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <initSystem+0x2f4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	711a      	strb	r2, [r3, #4]
	PWM_R.config.prescaler			= 100E3; 	// 1 ms
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <initSystem+0x2f4>)
 8000fd6:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <initSystem+0x2f0>)
 8000fd8:	609a      	str	r2, [r3, #8]
	PWM_R.config.periodo			= 100;		// 500 ms
 8000fda:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <initSystem+0x2f4>)
 8000fdc:	2264      	movs	r2, #100	; 0x64
 8000fde:	819a      	strh	r2, [r3, #12]
	PWM_R.config.percDuty			= 0;		// Activo por 5 ms
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <initSystem+0x2f4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	741a      	strb	r2, [r3, #16]
	pwm_Config(&PWM_R);
 8000fe6:	4848      	ldr	r0, [pc, #288]	; (8001108 <initSystem+0x2f4>)
 8000fe8:	f002 fb34 	bl	8003654 <pwm_Config>

	/* Configurando el PWM para el motor IZQUIERDO */
	PWM_L.ptrTIMx					= TIM5; // Timer5 usado para el PWM
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <initSystem+0x2fc>)
 8000fee:	4a47      	ldr	r2, [pc, #284]	; (800110c <initSystem+0x2f8>)
 8000ff0:	601a      	str	r2, [r3, #0]
	PWM_L.config.channel			= PWM_CHANNEL_2;
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <initSystem+0x2fc>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	711a      	strb	r2, [r3, #4]
	PWM_L.config.prescaler			= 100E3; 	// 1 ms
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <initSystem+0x2fc>)
 8000ffa:	4a42      	ldr	r2, [pc, #264]	; (8001104 <initSystem+0x2f0>)
 8000ffc:	609a      	str	r2, [r3, #8]
	PWM_L.config.periodo			= 100;		// 500 ms
 8000ffe:	4b44      	ldr	r3, [pc, #272]	; (8001110 <initSystem+0x2fc>)
 8001000:	2264      	movs	r2, #100	; 0x64
 8001002:	819a      	strh	r2, [r3, #12]
	PWM_L.config.percDuty			= 0;		// Activo por 5 ms
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <initSystem+0x2fc>)
 8001006:	2200      	movs	r2, #0
 8001008:	741a      	strb	r2, [r3, #16]
	pwm_Config(&PWM_L);
 800100a:	4841      	ldr	r0, [pc, #260]	; (8001110 <initSystem+0x2fc>)
 800100c:	f002 fb22 	bl	8003654 <pwm_Config>


	// 4. ====== EXTI =====
	/* Condigurando EXTI1 - Encoder Derecho */
	Exti_R.pGPIOHandler				= &GPIO_Exti_R;
 8001010:	4b40      	ldr	r3, [pc, #256]	; (8001114 <initSystem+0x300>)
 8001012:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <initSystem+0x2e4>)
 8001014:	601a      	str	r2, [r3, #0]
	Exti_R.edgeType					= EXTERNAL_INTERRUPT_RISING_EDGE;
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <initSystem+0x300>)
 8001018:	2201      	movs	r2, #1
 800101a:	711a      	strb	r2, [r3, #4]
	exti_Config(&Exti_R);
 800101c:	483d      	ldr	r0, [pc, #244]	; (8001114 <initSystem+0x300>)
 800101e:	f000 fcc9 	bl	80019b4 <exti_Config>

	/* Condigurando EXTI3 - Encoder Izquierdo */
	Exti_L.pGPIOHandler				= &GPIO_Exti_L;
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <initSystem+0x304>)
 8001024:	4a35      	ldr	r2, [pc, #212]	; (80010fc <initSystem+0x2e8>)
 8001026:	601a      	str	r2, [r3, #0]
	Exti_L.edgeType					= EXTERNAL_INTERRUPT_RISING_EDGE;
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <initSystem+0x304>)
 800102a:	2201      	movs	r2, #1
 800102c:	711a      	strb	r2, [r3, #4]
	exti_Config(&Exti_L);
 800102e:	483a      	ldr	r0, [pc, #232]	; (8001118 <initSystem+0x304>)
 8001030:	f000 fcc0 	bl	80019b4 <exti_Config>

	// 5. ====== SYSTICK =====
	SystickHandler.pSystick 						= SYSTICK;
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <initSystem+0x308>)
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <initSystem+0x30c>)
 8001038:	601a      	str	r2, [r3, #0]
	SystickHandler.Systick_Config.Systick_Reload	= SYSTICK_PSC_1ms_100MHz;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <initSystem+0x308>)
 800103c:	4a31      	ldr	r2, [pc, #196]	; (8001104 <initSystem+0x2f0>)
 800103e:	605a      	str	r2, [r3, #4]
	SystickHandler.Systick_Config.Systick_IntState 	= SYSTICK_INT_ENABLE;
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <initSystem+0x308>)
 8001042:	2201      	movs	r2, #1
 8001044:	721a      	strb	r2, [r3, #8]
	systick_Config(&SystickHandler);
 8001046:	4835      	ldr	r0, [pc, #212]	; (800111c <initSystem+0x308>)
 8001048:	f002 fdc6 	bl	8003bd8 <systick_Config>
	systick_SetState(&SystickHandler, SYSTICK_ON);
 800104c:	2101      	movs	r1, #1
 800104e:	4833      	ldr	r0, [pc, #204]	; (800111c <initSystem+0x308>)
 8001050:	f002 fdf4 	bl	8003c3c <systick_SetState>


	/* ==================================== Configurando los USART =============================================*/
	handlerPinTX.pGPIOx										= GPIOA;
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <initSystem+0x310>)
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <initSystem+0x2bc>)
 8001058:	601a      	str	r2, [r3, #0]
	handlerPinTX.pinConfig.GPIO_PinNumber					= PIN_9;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <initSystem+0x310>)
 800105c:	2209      	movs	r2, #9
 800105e:	711a      	strb	r2, [r3, #4]
	handlerPinTX.pinConfig.GPIO_PinMode						= GPIO_MODE_ALTFN;
 8001060:	4b30      	ldr	r3, [pc, #192]	; (8001124 <initSystem+0x310>)
 8001062:	2202      	movs	r2, #2
 8001064:	715a      	strb	r2, [r3, #5]
	handlerPinTX.pinConfig.GPIO_PinAltFunMode				= AF7;
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <initSystem+0x310>)
 8001068:	2207      	movs	r2, #7
 800106a:	725a      	strb	r2, [r3, #9]
	gpio_Config(&handlerPinTX);
 800106c:	482d      	ldr	r0, [pc, #180]	; (8001124 <initSystem+0x310>)
 800106e:	f001 ff2f 	bl	8002ed0 <gpio_Config>

	handlerPinRX.pGPIOx										= GPIOA;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <initSystem+0x314>)
 8001074:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <initSystem+0x2bc>)
 8001076:	601a      	str	r2, [r3, #0]
	handlerPinRX.pinConfig.GPIO_PinNumber					= PIN_10;
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <initSystem+0x314>)
 800107a:	220a      	movs	r2, #10
 800107c:	711a      	strb	r2, [r3, #4]
	handlerPinRX.pinConfig.GPIO_PinMode						= GPIO_MODE_ALTFN;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <initSystem+0x314>)
 8001080:	2202      	movs	r2, #2
 8001082:	715a      	strb	r2, [r3, #5]
	handlerPinRX.pinConfig.GPIO_PinAltFunMode				= AF7;
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <initSystem+0x314>)
 8001086:	2207      	movs	r2, #7
 8001088:	725a      	strb	r2, [r3, #9]
	gpio_Config(&handlerPinRX);
 800108a:	4827      	ldr	r0, [pc, #156]	; (8001128 <initSystem+0x314>)
 800108c:	f001 ff20 	bl	8002ed0 <gpio_Config>

	usart1Comm.ptrUSARTx									= USART1;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <initSystem+0x318>)
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <initSystem+0x31c>)
 8001094:	601a      	str	r2, [r3, #0]
	usart1Comm.USART_Config.baudrate						= USART_BAUDRATE_19200_100MHz;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <initSystem+0x318>)
 8001098:	2205      	movs	r2, #5
 800109a:	715a      	strb	r2, [r3, #5]
	usart1Comm.USART_Config.datasize						= USART_DATASIZE_8BIT;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <initSystem+0x318>)
 800109e:	2200      	movs	r2, #0
 80010a0:	719a      	strb	r2, [r3, #6]
	usart1Comm.USART_Config.parity							= USART_PARITY_NONE;
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <initSystem+0x318>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	71da      	strb	r2, [r3, #7]
	usart1Comm.USART_Config.stopbits						= USART_STOPBIT_1;
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <initSystem+0x318>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	721a      	strb	r2, [r3, #8]
	usart1Comm.USART_Config.mode							= USART_MODE_RXTX;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <initSystem+0x318>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	711a      	strb	r2, [r3, #4]
	usart1Comm.USART_Config.enableIntRX						= USART_RX_INTERRUPT_ENABLE;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <initSystem+0x318>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	725a      	strb	r2, [r3, #9]
	usart1Comm.USART_Config.enableIntTX						= USART_TX_INTERRUPT_DISABLE;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <initSystem+0x318>)
 80010bc:	2202      	movs	r2, #2
 80010be:	729a      	strb	r2, [r3, #10]
	usart_Config(&usart1Comm);
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <initSystem+0x318>)
 80010c2:	f003 f8d1 	bl	8004268 <usart_Config>


}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001f0 	.word	0x200001f0
 80010d0:	40020000 	.word	0x40020000
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	40020800 	.word	0x40020800
 80010dc:	20000208 	.word	0x20000208
 80010e0:	20000214 	.word	0x20000214
 80010e4:	20000220 	.word	0x20000220
 80010e8:	2000022c 	.word	0x2000022c
 80010ec:	20000238 	.word	0x20000238
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	20000244 	.word	0x20000244
 80010f8:	20000250 	.word	0x20000250
 80010fc:	2000025c 	.word	0x2000025c
 8001100:	20000268 	.word	0x20000268
 8001104:	000186a0 	.word	0x000186a0
 8001108:	2000027c 	.word	0x2000027c
 800110c:	40000c00 	.word	0x40000c00
 8001110:	20000290 	.word	0x20000290
 8001114:	200002a4 	.word	0x200002a4
 8001118:	200002ac 	.word	0x200002ac
 800111c:	200002bc 	.word	0x200002bc
 8001120:	e000e010 	.word	0xe000e010
 8001124:	200002cc 	.word	0x200002cc
 8001128:	200002d8 	.word	0x200002d8
 800112c:	200002e4 	.word	0x200002e4
 8001130:	40011000 	.word	0x40011000

08001134 <forwardMove>:



// Función para mover hacia adelante

void forwardMove(uint8_t dutyPercentage){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]

	stopPwmSignal(&PWM_R);
 800113e:	481e      	ldr	r0, [pc, #120]	; (80011b8 <forwardMove+0x84>)
 8001140:	f002 fbc2 	bl	80038c8 <stopPwmSignal>
	stopPwmSignal(&PWM_L);
 8001144:	481d      	ldr	r0, [pc, #116]	; (80011bc <forwardMove+0x88>)
 8001146:	f002 fbbf 	bl	80038c8 <stopPwmSignal>

	// Encendemos el puente H
	gpio_WritePin(&GPIO_Enb_R, RESET);	// Prende motor derecho
 800114a:	2100      	movs	r1, #0
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <forwardMove+0x8c>)
 800114e:	f002 f83b 	bl	80031c8 <gpio_WritePin>
	gpio_WritePin(&GPIO_Enb_L, RESET);	// Apaga motor izquierdo
 8001152:	2100      	movs	r1, #0
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <forwardMove+0x90>)
 8001156:	f002 f837 	bl	80031c8 <gpio_WritePin>

	// Seteamos la dirección del motor
	gpio_WritePin(&GPIO_Dir_R, SET);
 800115a:	2101      	movs	r1, #1
 800115c:	481a      	ldr	r0, [pc, #104]	; (80011c8 <forwardMove+0x94>)
 800115e:	f002 f833 	bl	80031c8 <gpio_WritePin>
	gpio_WritePin(&GPIO_Dir_L, RESET);
 8001162:	2100      	movs	r1, #0
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <forwardMove+0x98>)
 8001166:	f002 f82f 	bl	80031c8 <gpio_WritePin>


	PWM_R.config.polarity	= PWM_POLARITY_INVERSE;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <forwardMove+0x84>)
 800116c:	2201      	movs	r2, #1
 800116e:	745a      	strb	r2, [r3, #17]
	pwm_Config(&PWM_R);
 8001170:	4811      	ldr	r0, [pc, #68]	; (80011b8 <forwardMove+0x84>)
 8001172:	f002 fa6f 	bl	8003654 <pwm_Config>
	selectPolarity(&PWM_R);
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <forwardMove+0x84>)
 8001178:	f002 fbf8 	bl	800396c <selectPolarity>


	PWM_L.config.polarity	= PWM_POLARITY_DIRECT;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <forwardMove+0x88>)
 800117e:	2200      	movs	r2, #0
 8001180:	745a      	strb	r2, [r3, #17]
	pwm_Config(&PWM_L);
 8001182:	480e      	ldr	r0, [pc, #56]	; (80011bc <forwardMove+0x88>)
 8001184:	f002 fa66 	bl	8003654 <pwm_Config>
	selectPolarity(&PWM_L);
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <forwardMove+0x88>)
 800118a:	f002 fbef 	bl	800396c <selectPolarity>

	updateDutyCycle(&PWM_R,dutyPercentage);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4619      	mov	r1, r3
 8001192:	4809      	ldr	r0, [pc, #36]	; (80011b8 <forwardMove+0x84>)
 8001194:	f002 fcce 	bl	8003b34 <updateDutyCycle>
	updateDutyCycle(&PWM_L,dutyPercentage);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4619      	mov	r1, r3
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <forwardMove+0x88>)
 800119e:	f002 fcc9 	bl	8003b34 <updateDutyCycle>

	// Encendemos el PWM para mover el motor derecho
	startPwmSignal(&PWM_R);
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <forwardMove+0x84>)
 80011a4:	f002 fb7a 	bl	800389c <startPwmSignal>
	startPwmSignal(&PWM_L);
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <forwardMove+0x88>)
 80011aa:	f002 fb77 	bl	800389c <startPwmSignal>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000027c 	.word	0x2000027c
 80011bc:	20000290 	.word	0x20000290
 80011c0:	20000208 	.word	0x20000208
 80011c4:	2000022c 	.word	0x2000022c
 80011c8:	20000214 	.word	0x20000214
 80011cc:	20000238 	.word	0x20000238

080011d0 <backwardMove>:


void backwardMove(uint8_t dutyPercentage){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]

	stopPwmSignal(&PWM_R);
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <backwardMove+0x84>)
 80011dc:	f002 fb74 	bl	80038c8 <stopPwmSignal>
	stopPwmSignal(&PWM_L);
 80011e0:	481d      	ldr	r0, [pc, #116]	; (8001258 <backwardMove+0x88>)
 80011e2:	f002 fb71 	bl	80038c8 <stopPwmSignal>

	// Encendemos el puente H
	gpio_WritePin(&GPIO_Enb_R, RESET);	// Prende motor derecho
 80011e6:	2100      	movs	r1, #0
 80011e8:	481c      	ldr	r0, [pc, #112]	; (800125c <backwardMove+0x8c>)
 80011ea:	f001 ffed 	bl	80031c8 <gpio_WritePin>
	gpio_WritePin(&GPIO_Enb_L, RESET);	// Apaga motor izquierdo
 80011ee:	2100      	movs	r1, #0
 80011f0:	481b      	ldr	r0, [pc, #108]	; (8001260 <backwardMove+0x90>)
 80011f2:	f001 ffe9 	bl	80031c8 <gpio_WritePin>

	// Seteamos la dirección del motor
	gpio_WritePin(&GPIO_Dir_R, RESET);
 80011f6:	2100      	movs	r1, #0
 80011f8:	481a      	ldr	r0, [pc, #104]	; (8001264 <backwardMove+0x94>)
 80011fa:	f001 ffe5 	bl	80031c8 <gpio_WritePin>
	gpio_WritePin(&GPIO_Dir_L, SET);
 80011fe:	2101      	movs	r1, #1
 8001200:	4819      	ldr	r0, [pc, #100]	; (8001268 <backwardMove+0x98>)
 8001202:	f001 ffe1 	bl	80031c8 <gpio_WritePin>


	PWM_R.config.polarity	= PWM_POLARITY_DIRECT;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <backwardMove+0x84>)
 8001208:	2200      	movs	r2, #0
 800120a:	745a      	strb	r2, [r3, #17]
	pwm_Config(&PWM_R);
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <backwardMove+0x84>)
 800120e:	f002 fa21 	bl	8003654 <pwm_Config>
	selectPolarity(&PWM_R);
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <backwardMove+0x84>)
 8001214:	f002 fbaa 	bl	800396c <selectPolarity>


	PWM_L.config.polarity	= PWM_POLARITY_INVERSE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <backwardMove+0x88>)
 800121a:	2201      	movs	r2, #1
 800121c:	745a      	strb	r2, [r3, #17]
	pwm_Config(&PWM_L);
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <backwardMove+0x88>)
 8001220:	f002 fa18 	bl	8003654 <pwm_Config>
	selectPolarity(&PWM_L);
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <backwardMove+0x88>)
 8001226:	f002 fba1 	bl	800396c <selectPolarity>

	updateDutyCycle(&PWM_R,dutyPercentage);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4619      	mov	r1, r3
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <backwardMove+0x84>)
 8001230:	f002 fc80 	bl	8003b34 <updateDutyCycle>
	updateDutyCycle(&PWM_L,dutyPercentage);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <backwardMove+0x88>)
 800123a:	f002 fc7b 	bl	8003b34 <updateDutyCycle>

	// Encendemos el PWM para mover el motor derecho
	startPwmSignal(&PWM_R);
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <backwardMove+0x84>)
 8001240:	f002 fb2c 	bl	800389c <startPwmSignal>
	startPwmSignal(&PWM_L);
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <backwardMove+0x88>)
 8001246:	f002 fb29 	bl	800389c <startPwmSignal>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000027c 	.word	0x2000027c
 8001258:	20000290 	.word	0x20000290
 800125c:	20000208 	.word	0x20000208
 8001260:	2000022c 	.word	0x2000022c
 8001264:	20000214 	.word	0x20000214
 8001268:	20000238 	.word	0x20000238

0800126c <turnOff>:

/*
 * Funcipon para apagar el sistema
 */
void turnOff(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

	// Apaga el puente H para los motores
	gpio_WritePin(&GPIO_Enb_R, SET);
 8001270:	2101      	movs	r1, #1
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <turnOff+0x24>)
 8001274:	f001 ffa8 	bl	80031c8 <gpio_WritePin>
	gpio_WritePin(&GPIO_Enb_L, SET);
 8001278:	2101      	movs	r1, #1
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <turnOff+0x28>)
 800127c:	f001 ffa4 	bl	80031c8 <gpio_WritePin>

	// Apaga los PWM
	stopPwmSignal(&PWM_R);
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <turnOff+0x2c>)
 8001282:	f002 fb21 	bl	80038c8 <stopPwmSignal>
	stopPwmSignal(&PWM_L);
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <turnOff+0x30>)
 8001288:	f002 fb1e 	bl	80038c8 <stopPwmSignal>

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000208 	.word	0x20000208
 8001294:	2000022c 	.word	0x2000022c
 8001298:	2000027c 	.word	0x2000027c
 800129c:	20000290 	.word	0x20000290

080012a0 <turnOn>:

/*
 * Funcipon para encender el sistema
 */
void turnOn(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

	// Enciente el puente H de los motores
	gpio_WritePin(&GPIO_Enb_R, RESET);
 80012a4:	2100      	movs	r1, #0
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <turnOn+0x24>)
 80012a8:	f001 ff8e 	bl	80031c8 <gpio_WritePin>
	gpio_WritePin(&GPIO_Enb_L, RESET);
 80012ac:	2100      	movs	r1, #0
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <turnOn+0x28>)
 80012b0:	f001 ff8a 	bl	80031c8 <gpio_WritePin>

	// Enciente los PWM
	startPwmSignal(&PWM_R);
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <turnOn+0x2c>)
 80012b6:	f002 faf1 	bl	800389c <startPwmSignal>
	startPwmSignal(&PWM_L);
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <turnOn+0x30>)
 80012bc:	f002 faee 	bl	800389c <startPwmSignal>

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000208 	.word	0x20000208
 80012c8:	2000022c 	.word	0x2000022c
 80012cc:	2000027c 	.word	0x2000027c
 80012d0:	20000290 	.word	0x20000290

080012d4 <parseCommands>:

void parseCommands(char  *ptrbufferReception){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]

	sscanf(ptrbufferReception,"%s %u %u %s",cmd,&firstParameter,&secondParameter,lastString);
 80012dc:	4b79      	ldr	r3, [pc, #484]	; (80014c4 <parseCommands+0x1f0>)
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	4b79      	ldr	r3, [pc, #484]	; (80014c8 <parseCommands+0x1f4>)
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4b79      	ldr	r3, [pc, #484]	; (80014cc <parseCommands+0x1f8>)
 80012e6:	4a7a      	ldr	r2, [pc, #488]	; (80014d0 <parseCommands+0x1fc>)
 80012e8:	497a      	ldr	r1, [pc, #488]	; (80014d4 <parseCommands+0x200>)
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f004 f97c 	bl	80055e8 <siscanf>
	//Comando para solicitar ayuda
	if(strcmp(cmd, "help") == 0){
 80012f0:	4979      	ldr	r1, [pc, #484]	; (80014d8 <parseCommands+0x204>)
 80012f2:	4877      	ldr	r0, [pc, #476]	; (80014d0 <parseCommands+0x1fc>)
 80012f4:	f7fe ff74 	bl	80001e0 <strcmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d120      	bne.n	8001340 <parseCommands+0x6c>
		usart_WriteMsg(&usart1Comm, "Help Menu CMDS: \n");
 80012fe:	4977      	ldr	r1, [pc, #476]	; (80014dc <parseCommands+0x208>)
 8001300:	4877      	ldr	r0, [pc, #476]	; (80014e0 <parseCommands+0x20c>)
 8001302:	f003 fa08 	bl	8004716 <usart_WriteMsg>
		usart_WriteMsg(&usart1Comm, "1) Dir 0:forw / 1:back ; dutty(\%) \" Dir # # @\" \n");
 8001306:	4977      	ldr	r1, [pc, #476]	; (80014e4 <parseCommands+0x210>)
 8001308:	4875      	ldr	r0, [pc, #468]	; (80014e0 <parseCommands+0x20c>)
 800130a:	f003 fa04 	bl	8004716 <usart_WriteMsg>
		usart_WriteMsg(&usart1Comm, "2) Spd \%leftM 		; \%rightM \" Spd # # @\" \n");
 800130e:	4976      	ldr	r1, [pc, #472]	; (80014e8 <parseCommands+0x214>)
 8001310:	4873      	ldr	r0, [pc, #460]	; (80014e0 <parseCommands+0x20c>)
 8001312:	f003 fa00 	bl	8004716 <usart_WriteMsg>
		usart_WriteMsg(&usart1Comm, "3) Rot 0:left 1:right  ; #turns  \" Rot # # @\" \n");
 8001316:	4975      	ldr	r1, [pc, #468]	; (80014ec <parseCommands+0x218>)
 8001318:	4871      	ldr	r0, [pc, #452]	; (80014e0 <parseCommands+0x20c>)
 800131a:	f003 f9fc 	bl	8004716 <usart_WriteMsg>
		usart_WriteMsg(&usart1Comm, "4) TestEncoders percDuttyCycle:left \" TestEncoders # @\" \n");
 800131e:	4974      	ldr	r1, [pc, #464]	; (80014f0 <parseCommands+0x21c>)
 8001320:	486f      	ldr	r0, [pc, #444]	; (80014e0 <parseCommands+0x20c>)
 8001322:	f003 f9f8 	bl	8004716 <usart_WriteMsg>

		usart_WriteMsg(&usart1Comm, "5) Test 0:left / 1:right; dutty   \" Test # # @\" \n");
 8001326:	4973      	ldr	r1, [pc, #460]	; (80014f4 <parseCommands+0x220>)
 8001328:	486d      	ldr	r0, [pc, #436]	; (80014e0 <parseCommands+0x20c>)
 800132a:	f003 f9f4 	bl	8004716 <usart_WriteMsg>


		usart_WriteMsg(&usart1Comm, "6) Stop \" Stop @\" \n");
 800132e:	4972      	ldr	r1, [pc, #456]	; (80014f8 <parseCommands+0x224>)
 8001330:	486b      	ldr	r0, [pc, #428]	; (80014e0 <parseCommands+0x20c>)
 8001332:	f003 f9f0 	bl	8004716 <usart_WriteMsg>
		usart_WriteMsg(&usart1Comm, "7) Resume \" Resume @\" \n");
 8001336:	4971      	ldr	r1, [pc, #452]	; (80014fc <parseCommands+0x228>)
 8001338:	4869      	ldr	r0, [pc, #420]	; (80014e0 <parseCommands+0x20c>)
 800133a:	f003 f9ec 	bl	8004716 <usart_WriteMsg>
	else{
		usart_WriteMsg(&usart1Comm, "Comando erroneo.\n Ingresa \"help @\" para ver la lista de comandos.\n");
	}


}
 800133e:	e19f      	b.n	8001680 <parseCommands+0x3ac>
	else if (strcmp(cmd, "Dir") == 0) {
 8001340:	496f      	ldr	r1, [pc, #444]	; (8001500 <parseCommands+0x22c>)
 8001342:	4863      	ldr	r0, [pc, #396]	; (80014d0 <parseCommands+0x1fc>)
 8001344:	f7fe ff4c 	bl	80001e0 <strcmp>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d130      	bne.n	80013b0 <parseCommands+0xdc>
		if (firstParameter == 0 && secondParameter >= 0){
 800134e:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <parseCommands+0x1f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d112      	bne.n	800137c <parseCommands+0xa8>
			if (defaultSpeed != 0){
 8001356:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <parseCommands+0x230>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <parseCommands+0x98>
				forwardMove(secondParameter);
 800135e:	4b5a      	ldr	r3, [pc, #360]	; (80014c8 <parseCommands+0x1f4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fee5 	bl	8001134 <forwardMove>
 800136a:	e002      	b.n	8001372 <parseCommands+0x9e>
				forwardMove(10);
 800136c:	200a      	movs	r0, #10
 800136e:	f7ff fee1 	bl	8001134 <forwardMove>
			usart_WriteMsg(&usart1Comm, "Moviéndose hacia adelante \n");
 8001372:	4965      	ldr	r1, [pc, #404]	; (8001508 <parseCommands+0x234>)
 8001374:	485a      	ldr	r0, [pc, #360]	; (80014e0 <parseCommands+0x20c>)
 8001376:	f003 f9ce 	bl	8004716 <usart_WriteMsg>
 800137a:	e015      	b.n	80013a8 <parseCommands+0xd4>
		else if (firstParameter == 1 && secondParameter >= 0){
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <parseCommands+0x1f8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d111      	bne.n	80013a8 <parseCommands+0xd4>
			if (defaultSpeed != 0){
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <parseCommands+0x230>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <parseCommands+0xc6>
				backwardMove(secondParameter);
 800138c:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <parseCommands+0x1f4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff1c 	bl	80011d0 <backwardMove>
 8001398:	e002      	b.n	80013a0 <parseCommands+0xcc>
				backwardMove(10);
 800139a:	200a      	movs	r0, #10
 800139c:	f7ff ff18 	bl	80011d0 <backwardMove>
			usart_WriteMsg(&usart1Comm, "Moviéndose hacia atrás \n");
 80013a0:	495a      	ldr	r1, [pc, #360]	; (800150c <parseCommands+0x238>)
 80013a2:	484f      	ldr	r0, [pc, #316]	; (80014e0 <parseCommands+0x20c>)
 80013a4:	f003 f9b7 	bl	8004716 <usart_WriteMsg>
		defaultSpeed = 0;
 80013a8:	4b56      	ldr	r3, [pc, #344]	; (8001504 <parseCommands+0x230>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
}
 80013ae:	e167      	b.n	8001680 <parseCommands+0x3ac>
	else if(strcmp(cmd, "Spd") == 0) {
 80013b0:	4957      	ldr	r1, [pc, #348]	; (8001510 <parseCommands+0x23c>)
 80013b2:	4847      	ldr	r0, [pc, #284]	; (80014d0 <parseCommands+0x1fc>)
 80013b4:	f7fe ff14 	bl	80001e0 <strcmp>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d128      	bne.n	8001410 <parseCommands+0x13c>
			if (firstParameter > 0) {
 80013be:	4b43      	ldr	r3, [pc, #268]	; (80014cc <parseCommands+0x1f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01f      	beq.n	8001406 <parseCommands+0x132>
				defaultSpeed = firstParameter;
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <parseCommands+0x1f8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <parseCommands+0x230>)
 80013ce:	701a      	strb	r2, [r3, #0]
				updateDutyCycle(&PWM_L,(uint16_t)firstParameter);
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <parseCommands+0x1f8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	484e      	ldr	r0, [pc, #312]	; (8001514 <parseCommands+0x240>)
 80013da:	f002 fbab 	bl	8003b34 <updateDutyCycle>
				updateDutyCycle(&PWM_R,(uint16_t)secondParameter);
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <parseCommands+0x1f4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	484c      	ldr	r0, [pc, #304]	; (8001518 <parseCommands+0x244>)
 80013e8:	f002 fba4 	bl	8003b34 <updateDutyCycle>
				sprintf(bufferMsg,"Velocidad actualizada: %u, %u \n",firstParameter, secondParameter);
 80013ec:	4b37      	ldr	r3, [pc, #220]	; (80014cc <parseCommands+0x1f8>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <parseCommands+0x1f4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4949      	ldr	r1, [pc, #292]	; (800151c <parseCommands+0x248>)
 80013f6:	484a      	ldr	r0, [pc, #296]	; (8001520 <parseCommands+0x24c>)
 80013f8:	f004 f8d6 	bl	80055a8 <siprintf>
				usart_WriteMsg(&usart1Comm, bufferMsg);
 80013fc:	4948      	ldr	r1, [pc, #288]	; (8001520 <parseCommands+0x24c>)
 80013fe:	4838      	ldr	r0, [pc, #224]	; (80014e0 <parseCommands+0x20c>)
 8001400:	f003 f989 	bl	8004716 <usart_WriteMsg>
}
 8001404:	e13c      	b.n	8001680 <parseCommands+0x3ac>
				usart_WriteMsg(&usart1Comm, "Porcentaje debe ser positivo.\n Ingresa \"help @\" para ver la lista de comandos.\n");
 8001406:	4947      	ldr	r1, [pc, #284]	; (8001524 <parseCommands+0x250>)
 8001408:	4835      	ldr	r0, [pc, #212]	; (80014e0 <parseCommands+0x20c>)
 800140a:	f003 f984 	bl	8004716 <usart_WriteMsg>
}
 800140e:	e137      	b.n	8001680 <parseCommands+0x3ac>
	else if(strcmp(cmd, "TestE") == 0) {
 8001410:	4945      	ldr	r1, [pc, #276]	; (8001528 <parseCommands+0x254>)
 8001412:	482f      	ldr	r0, [pc, #188]	; (80014d0 <parseCommands+0x1fc>)
 8001414:	f7fe fee4 	bl	80001e0 <strcmp>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d136      	bne.n	800148c <parseCommands+0x1b8>
		usart_WriteMsg(&usart1Comm, "Iniciando Test Encoders\n");
 800141e:	4943      	ldr	r1, [pc, #268]	; (800152c <parseCommands+0x258>)
 8001420:	482f      	ldr	r0, [pc, #188]	; (80014e0 <parseCommands+0x20c>)
 8001422:	f003 f978 	bl	8004716 <usart_WriteMsg>
		forwardMove(firstParameter);
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <parseCommands+0x1f8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe81 	bl	8001134 <forwardMove>
		rxData = '\0';
 8001432:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <parseCommands+0x25c>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
		while(rxData == '\0'){
 8001438:	e023      	b.n	8001482 <parseCommands+0x1ae>
			if(flagEncR){
 800143a:	4b3e      	ldr	r3, [pc, #248]	; (8001534 <parseCommands+0x260>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00d      	beq.n	800145e <parseCommands+0x18a>
				sprintf(bufferMsg,"Right,%u\n", counter_R);
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <parseCommands+0x264>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	493c      	ldr	r1, [pc, #240]	; (800153c <parseCommands+0x268>)
 800144a:	4835      	ldr	r0, [pc, #212]	; (8001520 <parseCommands+0x24c>)
 800144c:	f004 f8ac 	bl	80055a8 <siprintf>
				usart_WriteMsg(&usart1Comm, bufferMsg);
 8001450:	4933      	ldr	r1, [pc, #204]	; (8001520 <parseCommands+0x24c>)
 8001452:	4823      	ldr	r0, [pc, #140]	; (80014e0 <parseCommands+0x20c>)
 8001454:	f003 f95f 	bl	8004716 <usart_WriteMsg>
				flagEncR = 0;
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <parseCommands+0x260>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
			if(flagEncL){
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <parseCommands+0x26c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <parseCommands+0x1ae>
				sprintf(bufferMsg,"Left,%u\n", counter_L);
 8001466:	4b37      	ldr	r3, [pc, #220]	; (8001544 <parseCommands+0x270>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	4936      	ldr	r1, [pc, #216]	; (8001548 <parseCommands+0x274>)
 800146e:	482c      	ldr	r0, [pc, #176]	; (8001520 <parseCommands+0x24c>)
 8001470:	f004 f89a 	bl	80055a8 <siprintf>
				usart_WriteMsg(&usart1Comm, bufferMsg);
 8001474:	492a      	ldr	r1, [pc, #168]	; (8001520 <parseCommands+0x24c>)
 8001476:	481a      	ldr	r0, [pc, #104]	; (80014e0 <parseCommands+0x20c>)
 8001478:	f003 f94d 	bl	8004716 <usart_WriteMsg>
				flagEncL = 0;
 800147c:	4b30      	ldr	r3, [pc, #192]	; (8001540 <parseCommands+0x26c>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
		while(rxData == '\0'){
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <parseCommands+0x25c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0d7      	beq.n	800143a <parseCommands+0x166>
}
 800148a:	e0f9      	b.n	8001680 <parseCommands+0x3ac>
	else if(strcmp(cmd, "Test") == 0){
 800148c:	492f      	ldr	r1, [pc, #188]	; (800154c <parseCommands+0x278>)
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <parseCommands+0x1fc>)
 8001490:	f7fe fea6 	bl	80001e0 <strcmp>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80c3 	bne.w	8001622 <parseCommands+0x34e>
		usart_WriteMsg(&usart1Comm, "Iniciando Test \n");
 800149c:	492c      	ldr	r1, [pc, #176]	; (8001550 <parseCommands+0x27c>)
 800149e:	4810      	ldr	r0, [pc, #64]	; (80014e0 <parseCommands+0x20c>)
 80014a0:	f003 f939 	bl	8004716 <usart_WriteMsg>
		forwardMove(0);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fe45 	bl	8001134 <forwardMove>
		counter_R = 0;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <parseCommands+0x264>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	801a      	strh	r2, [r3, #0]
		counter_L = 0;
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <parseCommands+0x270>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	801a      	strh	r2, [r3, #0]
		counterPercDuty = 0;
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <parseCommands+0x280>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
		rxData = '\0';
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <parseCommands+0x25c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
		while(rxData == '\0'){
 80014c2:	e0a9      	b.n	8001618 <parseCommands+0x344>
 80014c4:	200004c0 	.word	0x200004c0
 80014c8:	200004bc 	.word	0x200004bc
 80014cc:	200004b8 	.word	0x200004b8
 80014d0:	20000438 	.word	0x20000438
 80014d4:	08009a38 	.word	0x08009a38
 80014d8:	08009a44 	.word	0x08009a44
 80014dc:	08009a4c 	.word	0x08009a4c
 80014e0:	200002e4 	.word	0x200002e4
 80014e4:	08009a60 	.word	0x08009a60
 80014e8:	08009a94 	.word	0x08009a94
 80014ec:	08009ac0 	.word	0x08009ac0
 80014f0:	08009af0 	.word	0x08009af0
 80014f4:	08009b2c 	.word	0x08009b2c
 80014f8:	08009b60 	.word	0x08009b60
 80014fc:	08009b74 	.word	0x08009b74
 8001500:	08009b8c 	.word	0x08009b8c
 8001504:	200004e0 	.word	0x200004e0
 8001508:	08009b90 	.word	0x08009b90
 800150c:	08009bb0 	.word	0x08009bb0
 8001510:	08009bcc 	.word	0x08009bcc
 8001514:	20000290 	.word	0x20000290
 8001518:	2000027c 	.word	0x2000027c
 800151c:	08009bd0 	.word	0x08009bd0
 8001520:	20000374 	.word	0x20000374
 8001524:	08009bf0 	.word	0x08009bf0
 8001528:	08009c40 	.word	0x08009c40
 800152c:	08009c48 	.word	0x08009c48
 8001530:	20000434 	.word	0x20000434
 8001534:	200004e4 	.word	0x200004e4
 8001538:	200002c8 	.word	0x200002c8
 800153c:	08009c64 	.word	0x08009c64
 8001540:	200004e5 	.word	0x200004e5
 8001544:	200002ca 	.word	0x200002ca
 8001548:	08009c70 	.word	0x08009c70
 800154c:	08009c7c 	.word	0x08009c7c
 8001550:	08009c84 	.word	0x08009c84
 8001554:	200004e3 	.word	0x200004e3
			if(flagEncR){
 8001558:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <parseCommands+0x3b4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <parseCommands+0x2b4>
				sprintf(bufferMsg,"\nRight,%u,%u\n",counterPercDuty, counter_R);
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <parseCommands+0x3b8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <parseCommands+0x3bc>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	494a      	ldr	r1, [pc, #296]	; (8001694 <parseCommands+0x3c0>)
 800156c:	484a      	ldr	r0, [pc, #296]	; (8001698 <parseCommands+0x3c4>)
 800156e:	f004 f81b 	bl	80055a8 <siprintf>
				usart_WriteMsg(&usart1Comm, bufferMsg);
 8001572:	4949      	ldr	r1, [pc, #292]	; (8001698 <parseCommands+0x3c4>)
 8001574:	4849      	ldr	r0, [pc, #292]	; (800169c <parseCommands+0x3c8>)
 8001576:	f003 f8ce 	bl	8004716 <usart_WriteMsg>
				flagEncR ^= 1;
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <parseCommands+0x3b4>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	f083 0301 	eor.w	r3, r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <parseCommands+0x3b4>)
 8001586:	701a      	strb	r2, [r3, #0]
			if(flagEncL){
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <parseCommands+0x3cc>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <parseCommands+0x2e4>
				sprintf(bufferMsg,"\nLeft,%u,%u\n",counterPercDuty, counter_L);
 8001590:	4b3e      	ldr	r3, [pc, #248]	; (800168c <parseCommands+0x3b8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <parseCommands+0x3d0>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	4943      	ldr	r1, [pc, #268]	; (80016a8 <parseCommands+0x3d4>)
 800159c:	483e      	ldr	r0, [pc, #248]	; (8001698 <parseCommands+0x3c4>)
 800159e:	f004 f803 	bl	80055a8 <siprintf>
				usart_WriteMsg(&usart1Comm, bufferMsg);
 80015a2:	493d      	ldr	r1, [pc, #244]	; (8001698 <parseCommands+0x3c4>)
 80015a4:	483d      	ldr	r0, [pc, #244]	; (800169c <parseCommands+0x3c8>)
 80015a6:	f003 f8b6 	bl	8004716 <usart_WriteMsg>
				flagEncL ^= 1;
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <parseCommands+0x3cc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <parseCommands+0x3cc>)
 80015b6:	701a      	strb	r2, [r3, #0]
			if(flagPeriod){
 80015b8:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <parseCommands+0x3d8>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01e      	beq.n	80015fe <parseCommands+0x32a>
				counter_R = 0;
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <parseCommands+0x3bc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]
				counter_L = 0;
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <parseCommands+0x3d0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	801a      	strh	r2, [r3, #0]
				counterPercDuty++;
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <parseCommands+0x3b8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <parseCommands+0x3b8>)
 80015d6:	701a      	strb	r2, [r3, #0]
				updateDutyCycle(&PWM_R,(uint16_t) counterPercDuty);
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <parseCommands+0x3b8>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4834      	ldr	r0, [pc, #208]	; (80016b0 <parseCommands+0x3dc>)
 80015e0:	f002 faa8 	bl	8003b34 <updateDutyCycle>
				updateDutyCycle(&PWM_L,(uint16_t) counterPercDuty);
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <parseCommands+0x3b8>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4832      	ldr	r0, [pc, #200]	; (80016b4 <parseCommands+0x3e0>)
 80015ec:	f002 faa2 	bl	8003b34 <updateDutyCycle>
				flagPeriod ^= 1;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <parseCommands+0x3d8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <parseCommands+0x3d8>)
 80015fc:	701a      	strb	r2, [r3, #0]
			if(counterPercDuty == 99){
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <parseCommands+0x3b8>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b63      	cmp	r3, #99	; 0x63
 8001604:	d108      	bne.n	8001618 <parseCommands+0x344>
				counterPercDuty = 0;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <parseCommands+0x3b8>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
				turnOff();
 800160c:	f7ff fe2e 	bl	800126c <turnOff>
				usart_WriteMsg(&usart1Comm, "Test finished \n");
 8001610:	4929      	ldr	r1, [pc, #164]	; (80016b8 <parseCommands+0x3e4>)
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <parseCommands+0x3c8>)
 8001614:	f003 f87f 	bl	8004716 <usart_WriteMsg>
		while(rxData == '\0'){
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <parseCommands+0x3e8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d09b      	beq.n	8001558 <parseCommands+0x284>
}
 8001620:	e02e      	b.n	8001680 <parseCommands+0x3ac>
	else if (strcmp(cmd, "reset") == 0) {
 8001622:	4927      	ldr	r1, [pc, #156]	; (80016c0 <parseCommands+0x3ec>)
 8001624:	4827      	ldr	r0, [pc, #156]	; (80016c4 <parseCommands+0x3f0>)
 8001626:	f7fe fddb 	bl	80001e0 <strcmp>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d104      	bne.n	800163a <parseCommands+0x366>
		usart_WriteMsg(&usart1Comm, "PWR_MGMT_1 reset \n");
 8001630:	4925      	ldr	r1, [pc, #148]	; (80016c8 <parseCommands+0x3f4>)
 8001632:	481a      	ldr	r0, [pc, #104]	; (800169c <parseCommands+0x3c8>)
 8001634:	f003 f86f 	bl	8004716 <usart_WriteMsg>
}
 8001638:	e022      	b.n	8001680 <parseCommands+0x3ac>
	else if (strcmp(cmd, "Stop") == 0) {
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <parseCommands+0x3f8>)
 800163c:	4821      	ldr	r0, [pc, #132]	; (80016c4 <parseCommands+0x3f0>)
 800163e:	f7fe fdcf 	bl	80001e0 <strcmp>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d109      	bne.n	800165c <parseCommands+0x388>
		flagStop = 1;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <parseCommands+0x3fc>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
		turnOff();
 800164e:	f7ff fe0d 	bl	800126c <turnOff>
		usart_WriteMsg(&usart1Comm, "Detiene del sistema \n");
 8001652:	4920      	ldr	r1, [pc, #128]	; (80016d4 <parseCommands+0x400>)
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <parseCommands+0x3c8>)
 8001656:	f003 f85e 	bl	8004716 <usart_WriteMsg>
}
 800165a:	e011      	b.n	8001680 <parseCommands+0x3ac>
	else if (strcmp(cmd, "Resume") == 0) {
 800165c:	491e      	ldr	r1, [pc, #120]	; (80016d8 <parseCommands+0x404>)
 800165e:	4819      	ldr	r0, [pc, #100]	; (80016c4 <parseCommands+0x3f0>)
 8001660:	f7fe fdbe 	bl	80001e0 <strcmp>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <parseCommands+0x3a4>
		turnOn();
 800166a:	f7ff fe19 	bl	80012a0 <turnOn>
		usart_WriteMsg(&usart1Comm, "Reanuda del sistema \n");
 800166e:	491b      	ldr	r1, [pc, #108]	; (80016dc <parseCommands+0x408>)
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <parseCommands+0x3c8>)
 8001672:	f003 f850 	bl	8004716 <usart_WriteMsg>
}
 8001676:	e003      	b.n	8001680 <parseCommands+0x3ac>
		usart_WriteMsg(&usart1Comm, "Comando erroneo.\n Ingresa \"help @\" para ver la lista de comandos.\n");
 8001678:	4919      	ldr	r1, [pc, #100]	; (80016e0 <parseCommands+0x40c>)
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <parseCommands+0x3c8>)
 800167c:	f003 f84b 	bl	8004716 <usart_WriteMsg>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200004e4 	.word	0x200004e4
 800168c:	200004e3 	.word	0x200004e3
 8001690:	200002c8 	.word	0x200002c8
 8001694:	08009c98 	.word	0x08009c98
 8001698:	20000374 	.word	0x20000374
 800169c:	200002e4 	.word	0x200002e4
 80016a0:	200004e5 	.word	0x200004e5
 80016a4:	200002ca 	.word	0x200002ca
 80016a8:	08009ca8 	.word	0x08009ca8
 80016ac:	200004e2 	.word	0x200004e2
 80016b0:	2000027c 	.word	0x2000027c
 80016b4:	20000290 	.word	0x20000290
 80016b8:	08009cb8 	.word	0x08009cb8
 80016bc:	20000434 	.word	0x20000434
 80016c0:	08009cc8 	.word	0x08009cc8
 80016c4:	20000438 	.word	0x20000438
 80016c8:	08009cd0 	.word	0x08009cd0
 80016cc:	08009ce4 	.word	0x08009ce4
 80016d0:	200004e6 	.word	0x200004e6
 80016d4:	08009cec 	.word	0x08009cec
 80016d8:	08009d04 	.word	0x08009d04
 80016dc:	08009d0c 	.word	0x08009d0c
 80016e0:	08009d24 	.word	0x08009d24

080016e4 <Timer2_Callback>:


/* Callback de Timer 2 para el Blinky */
void Timer2_Callback(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	gpio_TooglePin(&stateLed);
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <Timer2_Callback+0x3c>)
 80016ea:	f001 fdbc 	bl	8003266 <gpio_TooglePin>
	gpio_TooglePin(&stateLedBoard);
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <Timer2_Callback+0x40>)
 80016f0:	f001 fdb9 	bl	8003266 <gpio_TooglePin>
	counterPeriod++;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <Timer2_Callback+0x44>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <Timer2_Callback+0x44>)
 80016fe:	701a      	strb	r2, [r3, #0]
	if(counterPeriod == 10){
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <Timer2_Callback+0x44>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b0a      	cmp	r3, #10
 8001706:	d109      	bne.n	800171c <Timer2_Callback+0x38>
		flagPeriod ^= 1;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <Timer2_Callback+0x48>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f083 0301 	eor.w	r3, r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <Timer2_Callback+0x48>)
 8001714:	701a      	strb	r2, [r3, #0]
		counterPeriod = 0;
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <Timer2_Callback+0x44>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
	}
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200001f0 	.word	0x200001f0
 8001724:	200001fc 	.word	0x200001fc
 8001728:	200004e1 	.word	0x200004e1
 800172c:	200004e2 	.word	0x200004e2

08001730 <usart1_RxCallback>:


/* Interrupciones por recepcion a traves de transmision serial */
void usart1_RxCallback(void){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	rxData = usart1_getRxData();
 8001734:	f003 f810 	bl	8004758 <usart1_getRxData>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	4b01      	ldr	r3, [pc, #4]	; (8001744 <usart1_RxCallback+0x14>)
 800173e:	701a      	strb	r2, [r3, #0]

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000434 	.word	0x20000434

08001748 <callback_ExtInt1>:


/* Interrupciones para el encoder derecho */
void callback_ExtInt1(void){
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	flagEncR = 1;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <callback_ExtInt1+0x20>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
	counter_R++;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <callback_ExtInt1+0x24>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <callback_ExtInt1+0x24>)
 800175c:	801a      	strh	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	200004e4 	.word	0x200004e4
 800176c:	200002c8 	.word	0x200002c8

08001770 <callback_ExtInt3>:


/* Interrupciones para el encoder izquierdo */
void callback_ExtInt3(void){
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	flagEncL = 1;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <callback_ExtInt3+0x20>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
	counter_L++;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <callback_ExtInt3+0x24>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <callback_ExtInt3+0x24>)
 8001784:	801a      	strh	r2, [r3, #0]

}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	200004e5 	.word	0x200004e5
 8001794:	200002ca 	.word	0x200002ca

08001798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
	return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_kill>:

int _kill(int pid, int sig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b2:	f003 f847 	bl	8004844 <__errno>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2216      	movs	r2, #22
 80017ba:	601a      	str	r2, [r3, #0]
	return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_exit>:

void _exit (int status)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffe7 	bl	80017a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017da:	e7fe      	b.n	80017da <_exit+0x12>

080017dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00a      	b.n	8001804 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ee:	f3af 8000 	nop.w
 80017f2:	4601      	mov	r1, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf0      	blt.n	80017ee <_read+0x12>
	}

return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e009      	b.n	800183c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf1      	blt.n	8001828 <_write+0x12>
	}
	return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_close>:

int _close(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001876:	605a      	str	r2, [r3, #4]
	return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_isatty>:

int _isatty(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
	return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f002 ffac 	bl	8004844 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20020000 	.word	0x20020000
 8001918:	00000400 	.word	0x00000400
 800191c:	200004e8 	.word	0x200004e8
 8001920:	20000510 	.word	0x20000510

08001924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <LoopForever+0x6>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	; (8001964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <LoopForever+0xe>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <LoopForever+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001952:	f002 ff7d 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001956:	f7ff f9e5 	bl	8000d24 <main>

0800195a <LoopForever>:

LoopForever:
    b LoopForever
 800195a:	e7fe      	b.n	800195a <LoopForever>
  ldr   r0, =_estack
 800195c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001968:	0800a234 	.word	0x0800a234
  ldr r2, =_sbss
 800196c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001970:	2000050c 	.word	0x2000050c

08001974 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>
	...

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <exti_Config>:
/*
 * Funcion de configuracion del sistema EXTI.
 * Requiere que un pinX ya se encuentre configurado como
 * entrada digital
 * */
void exti_Config(EXTI_Config_t *extiConfig){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	gpio_Config(extiConfig->pGPIOHandler);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fa85 	bl	8002ed0 <gpio_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	exti_enable_clock_peripheral();
 80019c6:	f000 f811 	bl	80019ec <exti_enable_clock_peripheral>

	/* 3.0 Selección de canal */
	exti_assign_channel(extiConfig);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f81e 	bl	8001a0c <exti_assign_channel>

	/* 4.0 Seleccionamos el tipo de flanco */
	exti_select_edge(extiConfig);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fdff 	bl	80025d4 <exti_select_edge>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d6:	b672      	cpsid	i
}
 80019d8:	bf00      	nop

	/* 5.0 Desactivo primero las interrupciones globales */
	__disable_irq();

	/* 6. 0 Manejo de Interrupciones */
	exti_config_interrupt(extiConfig);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f001 f804 	bl	80029e8 <exti_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 80019e0:	b662      	cpsie	i
}
 80019e2:	bf00      	nop

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <exti_enable_clock_peripheral>:

/*
 * No requiere el periferico, ya que solo es necesario activar
 * al SYSCFG
 * */
static void exti_enable_clock_peripheral(void){
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <exti_enable_clock_peripheral+0x1c>)
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <exti_enable_clock_peripheral+0x1c>)
 80019f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <exti_assign_channel>:

/*
 * Función que configura los MUX para asignar el pinX del puerto Y
 * a la entrada EXTI correspondiente.
 * */
static void exti_assign_channel(EXTI_Config_t *extiConfig){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	/*Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
		 * Debemos activar la línea PIN_Xy (X = A, B, C... y y = 0, 1, 2, 3...)
		 * en el módulo EXTI */

	switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	791b      	ldrb	r3, [r3, #4]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f200 85cd 	bhi.w	80025ba <exti_assign_channel+0xbae>
 8001a20:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <exti_assign_channel+0x1c>)
 8001a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a26:	bf00      	nop
 8001a28:	08001a69 	.word	0x08001a69
 8001a2c:	08001b1f 	.word	0x08001b1f
 8001a30:	08001bd5 	.word	0x08001bd5
 8001a34:	08001c8b 	.word	0x08001c8b
 8001a38:	08001d5f 	.word	0x08001d5f
 8001a3c:	08001e0d 	.word	0x08001e0d
 8001a40:	08001eb5 	.word	0x08001eb5
 8001a44:	08001f79 	.word	0x08001f79
 8001a48:	08002021 	.word	0x08002021
 8001a4c:	080020c9 	.word	0x080020c9
 8001a50:	0800218f 	.word	0x0800218f
 8001a54:	08002237 	.word	0x08002237
 8001a58:	080022df 	.word	0x080022df
 8001a5c:	080023a5 	.word	0x080023a5
 8001a60:	0800244d 	.word	0x0800244d
 8001a64:	080024f5 	.word	0x080024f5
	/* Configurando para todos los pines GPIOX_0 */
	case 0: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8001a68:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a90      	ldr	r2, [pc, #576]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001a6e:	f023 030f 	bic.w	r3, r3, #15
 8001a72:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a8e      	ldr	r2, [pc, #568]	; (8001cb4 <exti_assign_channel+0x2a8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d105      	bne.n	8001a8c <exti_assign_channel+0x80>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8001a80:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001a82:	4a8b      	ldr	r2, [pc, #556]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8001a88:	f000 bd99 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a89      	ldr	r2, [pc, #548]	; (8001cb8 <exti_assign_channel+0x2ac>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d107      	bne.n	8001aa8 <exti_assign_channel+0x9c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8001a98:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a84      	ldr	r2, [pc, #528]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6093      	str	r3, [r2, #8]
		break;
 8001aa4:	f000 bd8b 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a83      	ldr	r2, [pc, #524]	; (8001cbc <exti_assign_channel+0x2b0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d107      	bne.n	8001ac4 <exti_assign_channel+0xb8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8001ab4:	4b7e      	ldr	r3, [pc, #504]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a7d      	ldr	r2, [pc, #500]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	6093      	str	r3, [r2, #8]
		break;
 8001ac0:	f000 bd7d 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7d      	ldr	r2, [pc, #500]	; (8001cc0 <exti_assign_channel+0x2b4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d107      	bne.n	8001ae0 <exti_assign_channel+0xd4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8001ad0:	4b77      	ldr	r3, [pc, #476]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a76      	ldr	r2, [pc, #472]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001ad6:	f043 0303 	orr.w	r3, r3, #3
 8001ada:	6093      	str	r3, [r2, #8]
		break;
 8001adc:	f000 bd6f 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a77      	ldr	r2, [pc, #476]	; (8001cc4 <exti_assign_channel+0x2b8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d107      	bne.n	8001afc <exti_assign_channel+0xf0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8001aec:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a6f      	ldr	r2, [pc, #444]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6093      	str	r3, [r2, #8]
		break;
 8001af8:	f000 bd61 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a71      	ldr	r2, [pc, #452]	; (8001cc8 <exti_assign_channel+0x2bc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d107      	bne.n	8001b18 <exti_assign_channel+0x10c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8001b08:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a68      	ldr	r2, [pc, #416]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b0e:	f043 0307 	orr.w	r3, r3, #7
 8001b12:	6093      	str	r3, [r2, #8]
		break;
 8001b14:	f000 bd53 	b.w	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8001b18:	bf00      	nop
		break;
 8001b1a:	f000 bd50 	b.w	80025be <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_1 */
	case 1: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b28:	6093      	str	r3, [r2, #8]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <exti_assign_channel+0x2a8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d105      	bne.n	8001b42 <exti_assign_channel+0x136>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b38:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8001b3e:	f000 bd3e 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a5b      	ldr	r2, [pc, #364]	; (8001cb8 <exti_assign_channel+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d107      	bne.n	8001b5e <exti_assign_channel+0x152>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8001b4e:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4a57      	ldr	r2, [pc, #348]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	6093      	str	r3, [r2, #8]
		break;
 8001b5a:	f000 bd30 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a55      	ldr	r2, [pc, #340]	; (8001cbc <exti_assign_channel+0x2b0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d107      	bne.n	8001b7a <exti_assign_channel+0x16e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8001b6a:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	6093      	str	r3, [r2, #8]
		break;
 8001b76:	f000 bd22 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	; (8001cc0 <exti_assign_channel+0x2b4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d107      	bne.n	8001b96 <exti_assign_channel+0x18a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4a49      	ldr	r2, [pc, #292]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001b8c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001b90:	6093      	str	r3, [r2, #8]
		break;
 8001b92:	f000 bd14 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <exti_assign_channel+0x2b8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d107      	bne.n	8001bb2 <exti_assign_channel+0x1a6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	4a42      	ldr	r2, [pc, #264]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bac:	6093      	str	r3, [r2, #8]
		break;
 8001bae:	f000 bd06 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <exti_assign_channel+0x2bc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d107      	bne.n	8001bce <exti_assign_channel+0x1c2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4a3b      	ldr	r2, [pc, #236]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001bc4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001bc8:	6093      	str	r3, [r2, #8]
		break;
 8001bca:	f000 bcf8 	b.w	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8001bce:	bf00      	nop
		break;
 8001bd0:	f000 bcf5 	b.w	80025be <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_2 */
	case 2: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a35      	ldr	r2, [pc, #212]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001bda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bde:	6093      	str	r3, [r2, #8]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a33      	ldr	r2, [pc, #204]	; (8001cb4 <exti_assign_channel+0x2a8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d105      	bne.n	8001bf8 <exti_assign_channel+0x1ec>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8001bf4:	f000 bce3 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <exti_assign_channel+0x2ac>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d107      	bne.n	8001c14 <exti_assign_channel+0x208>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6093      	str	r3, [r2, #8]
		break;
 8001c10:	f000 bcd5 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <exti_assign_channel+0x2b0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d107      	bne.n	8001c30 <exti_assign_channel+0x224>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6093      	str	r3, [r2, #8]
		break;
 8001c2c:	f000 bcc7 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <exti_assign_channel+0x2b4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d107      	bne.n	8001c4c <exti_assign_channel+0x240>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c46:	6093      	str	r3, [r2, #8]
		break;
 8001c48:	f000 bcb9 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <exti_assign_channel+0x2b8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d107      	bne.n	8001c68 <exti_assign_channel+0x25c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c62:	6093      	str	r3, [r2, #8]
		break;
 8001c64:	f000 bcab 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <exti_assign_channel+0x2bc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d107      	bne.n	8001c84 <exti_assign_channel+0x278>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c7e:	6093      	str	r3, [r2, #8]
		break;
 8001c80:	f000 bc9d 	b.w	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8001c84:	bf00      	nop
		break;
 8001c86:	f000 bc9a 	b.w	80025be <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_3 */
	case 3: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001c90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c94:	6093      	str	r3, [r2, #8]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <exti_assign_channel+0x2a8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d114      	bne.n	8001ccc <exti_assign_channel+0x2c0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8001ca2:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001ca4:	4a02      	ldr	r2, [pc, #8]	; (8001cb0 <exti_assign_channel+0x2a4>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8001caa:	f000 bc88 	b.w	80025be <exti_assign_channel+0xbb2>
 8001cae:	bf00      	nop
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021c00 	.word	0x40021c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a87      	ldr	r2, [pc, #540]	; (8001ef0 <exti_assign_channel+0x4e4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d107      	bne.n	8001ce8 <exti_assign_channel+0x2dc>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8001cd8:	4b86      	ldr	r3, [pc, #536]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a85      	ldr	r2, [pc, #532]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001cde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce2:	6093      	str	r3, [r2, #8]
		break;
 8001ce4:	f000 bc6b 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a82      	ldr	r2, [pc, #520]	; (8001ef8 <exti_assign_channel+0x4ec>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d107      	bne.n	8001d04 <exti_assign_channel+0x2f8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8001cf4:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a7e      	ldr	r2, [pc, #504]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001cfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cfe:	6093      	str	r3, [r2, #8]
		break;
 8001d00:	f000 bc5d 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7c      	ldr	r2, [pc, #496]	; (8001efc <exti_assign_channel+0x4f0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d107      	bne.n	8001d20 <exti_assign_channel+0x314>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8001d10:	4b78      	ldr	r3, [pc, #480]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d16:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d1a:	6093      	str	r3, [r2, #8]
		break;
 8001d1c:	f000 bc4f 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a76      	ldr	r2, [pc, #472]	; (8001f00 <exti_assign_channel+0x4f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d107      	bne.n	8001d3c <exti_assign_channel+0x330>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8001d2c:	4b71      	ldr	r3, [pc, #452]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a70      	ldr	r2, [pc, #448]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d36:	6093      	str	r3, [r2, #8]
		break;
 8001d38:	f000 bc41 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a70      	ldr	r2, [pc, #448]	; (8001f04 <exti_assign_channel+0x4f8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d107      	bne.n	8001d58 <exti_assign_channel+0x34c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a69      	ldr	r2, [pc, #420]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d4e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001d52:	6093      	str	r3, [r2, #8]
		break;
 8001d54:	f000 bc33 	b.w	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8001d58:	bf00      	nop
		break;
 8001d5a:	f000 bc30 	b.w	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_4 */
	case 4: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	4a64      	ldr	r2, [pc, #400]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d64:	f023 030f 	bic.w	r3, r3, #15
 8001d68:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <exti_assign_channel+0x4fc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d105      	bne.n	8001d82 <exti_assign_channel+0x376>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d78:	4a5e      	ldr	r2, [pc, #376]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001d7e:	f000 bc1e 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <exti_assign_channel+0x4e4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d107      	bne.n	8001d9e <exti_assign_channel+0x392>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8001d8e:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	60d3      	str	r3, [r2, #12]
		break;
 8001d9a:	f000 bc10 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <exti_assign_channel+0x4ec>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d107      	bne.n	8001dba <exti_assign_channel+0x3ae>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8001daa:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	60d3      	str	r3, [r2, #12]
		break;
 8001db6:	f000 bc02 	b.w	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a4e      	ldr	r2, [pc, #312]	; (8001efc <exti_assign_channel+0x4f0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d106      	bne.n	8001dd4 <exti_assign_channel+0x3c8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a4a      	ldr	r2, [pc, #296]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001dcc:	f043 0303 	orr.w	r3, r3, #3
 8001dd0:	60d3      	str	r3, [r2, #12]
		break;
 8001dd2:	e3f4      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a49      	ldr	r2, [pc, #292]	; (8001f00 <exti_assign_channel+0x4f4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d106      	bne.n	8001dee <exti_assign_channel+0x3e2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8001de0:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	60d3      	str	r3, [r2, #12]
		break;
 8001dec:	e3e7      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a43      	ldr	r2, [pc, #268]	; (8001f04 <exti_assign_channel+0x4f8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d106      	bne.n	8001e08 <exti_assign_channel+0x3fc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4a3d      	ldr	r2, [pc, #244]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e00:	f043 0307 	orr.w	r3, r3, #7
 8001e04:	60d3      	str	r3, [r2, #12]
		break;
 8001e06:	e3da      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8001e08:	bf00      	nop
		break;
 8001e0a:	e3d8      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_5 */
	case 5: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a38      	ldr	r2, [pc, #224]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e16:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <exti_assign_channel+0x4fc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d104      	bne.n	8001e2e <exti_assign_channel+0x422>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e26:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001e2c:	e3c7      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <exti_assign_channel+0x4e4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d106      	bne.n	8001e48 <exti_assign_channel+0x43c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	60d3      	str	r3, [r2, #12]
		break;
 8001e46:	e3ba      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <exti_assign_channel+0x4ec>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d106      	bne.n	8001e62 <exti_assign_channel+0x456>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a26      	ldr	r2, [pc, #152]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	60d3      	str	r3, [r2, #12]
		break;
 8001e60:	e3ad      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <exti_assign_channel+0x4f0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d106      	bne.n	8001e7c <exti_assign_channel+0x470>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e74:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e78:	60d3      	str	r3, [r2, #12]
		break;
 8001e7a:	e3a0      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <exti_assign_channel+0x4f4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d106      	bne.n	8001e96 <exti_assign_channel+0x48a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e92:	60d3      	str	r3, [r2, #12]
		break;
 8001e94:	e393      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <exti_assign_channel+0x4f8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d106      	bne.n	8001eb0 <exti_assign_channel+0x4a4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001ea8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001eac:	60d3      	str	r3, [r2, #12]
		break;
 8001eae:	e386      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8001eb0:	bf00      	nop
		break;
 8001eb2:	e384      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_6 */
	case 6: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001eba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ebe:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <exti_assign_channel+0x4fc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d104      	bne.n	8001ed6 <exti_assign_channel+0x4ca>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001ed4:	e373      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <exti_assign_channel+0x4e4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d114      	bne.n	8001f0c <exti_assign_channel+0x500>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4a03      	ldr	r2, [pc, #12]	; (8001ef4 <exti_assign_channel+0x4e8>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	60d3      	str	r3, [r2, #12]
		break;
 8001eee:	e366      	b.n	80025be <exti_assign_channel+0xbb2>
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40020000 	.word	0x40020000
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a83      	ldr	r2, [pc, #524]	; (8002120 <exti_assign_channel+0x714>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d106      	bne.n	8001f26 <exti_assign_channel+0x51a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8001f18:	4b82      	ldr	r3, [pc, #520]	; (8002124 <exti_assign_channel+0x718>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a81      	ldr	r2, [pc, #516]	; (8002124 <exti_assign_channel+0x718>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	60d3      	str	r3, [r2, #12]
		break;
 8001f24:	e34b      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a7e      	ldr	r2, [pc, #504]	; (8002128 <exti_assign_channel+0x71c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d106      	bne.n	8001f40 <exti_assign_channel+0x534>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8001f32:	4b7c      	ldr	r3, [pc, #496]	; (8002124 <exti_assign_channel+0x718>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	; (8002124 <exti_assign_channel+0x718>)
 8001f38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f3c:	60d3      	str	r3, [r2, #12]
		break;
 8001f3e:	e33e      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a79      	ldr	r2, [pc, #484]	; (800212c <exti_assign_channel+0x720>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d106      	bne.n	8001f5a <exti_assign_channel+0x54e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8001f4c:	4b75      	ldr	r3, [pc, #468]	; (8002124 <exti_assign_channel+0x718>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4a74      	ldr	r2, [pc, #464]	; (8002124 <exti_assign_channel+0x718>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	60d3      	str	r3, [r2, #12]
		break;
 8001f58:	e331      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a73      	ldr	r2, [pc, #460]	; (8002130 <exti_assign_channel+0x724>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d106      	bne.n	8001f74 <exti_assign_channel+0x568>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8001f66:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <exti_assign_channel+0x718>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <exti_assign_channel+0x718>)
 8001f6c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f70:	60d3      	str	r3, [r2, #12]
		break;
 8001f72:	e324      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8001f74:	bf00      	nop
		break;
 8001f76:	e322      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_7 */
	case 7: {
		/* SYSCFG_EXTICR2 */
		/* Segunda posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <exti_assign_channel+0x718>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a69      	ldr	r2, [pc, #420]	; (8002124 <exti_assign_channel+0x718>)
 8001f7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f82:	60d3      	str	r3, [r2, #12]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6a      	ldr	r2, [pc, #424]	; (8002134 <exti_assign_channel+0x728>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d104      	bne.n	8001f9a <exti_assign_channel+0x58e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <exti_assign_channel+0x718>)
 8001f92:	4a64      	ldr	r2, [pc, #400]	; (8002124 <exti_assign_channel+0x718>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001f98:	e311      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a65      	ldr	r2, [pc, #404]	; (8002138 <exti_assign_channel+0x72c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d106      	bne.n	8001fb4 <exti_assign_channel+0x5a8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <exti_assign_channel+0x718>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a5e      	ldr	r2, [pc, #376]	; (8002124 <exti_assign_channel+0x718>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	60d3      	str	r3, [r2, #12]
		break;
 8001fb2:	e304      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a59      	ldr	r2, [pc, #356]	; (8002120 <exti_assign_channel+0x714>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d106      	bne.n	8001fce <exti_assign_channel+0x5c2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <exti_assign_channel+0x718>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a57      	ldr	r2, [pc, #348]	; (8002124 <exti_assign_channel+0x718>)
 8001fc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fca:	60d3      	str	r3, [r2, #12]
		break;
 8001fcc:	e2f7      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a54      	ldr	r2, [pc, #336]	; (8002128 <exti_assign_channel+0x71c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d106      	bne.n	8001fe8 <exti_assign_channel+0x5dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8001fda:	4b52      	ldr	r3, [pc, #328]	; (8002124 <exti_assign_channel+0x718>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4a51      	ldr	r2, [pc, #324]	; (8002124 <exti_assign_channel+0x718>)
 8001fe0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001fe4:	60d3      	str	r3, [r2, #12]
		break;
 8001fe6:	e2ea      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a4f      	ldr	r2, [pc, #316]	; (800212c <exti_assign_channel+0x720>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d106      	bne.n	8002002 <exti_assign_channel+0x5f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <exti_assign_channel+0x718>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a4a      	ldr	r2, [pc, #296]	; (8002124 <exti_assign_channel+0x718>)
 8001ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffe:	60d3      	str	r3, [r2, #12]
		break;
 8002000:	e2dd      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a49      	ldr	r2, [pc, #292]	; (8002130 <exti_assign_channel+0x724>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d106      	bne.n	800201c <exti_assign_channel+0x610>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800200e:	4b45      	ldr	r3, [pc, #276]	; (8002124 <exti_assign_channel+0x718>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a44      	ldr	r2, [pc, #272]	; (8002124 <exti_assign_channel+0x718>)
 8002014:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002018:	60d3      	str	r3, [r2, #12]
		break;
 800201a:	e2d0      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 800201c:	bf00      	nop
		break;
 800201e:	e2ce      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_8 */
	case 8: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8002020:	4b40      	ldr	r3, [pc, #256]	; (8002124 <exti_assign_channel+0x718>)
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <exti_assign_channel+0x718>)
 8002026:	f023 030f 	bic.w	r3, r3, #15
 800202a:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a40      	ldr	r2, [pc, #256]	; (8002134 <exti_assign_channel+0x728>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d104      	bne.n	8002042 <exti_assign_channel+0x636>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <exti_assign_channel+0x718>)
 800203a:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <exti_assign_channel+0x718>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 8002040:	e2bd      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <exti_assign_channel+0x72c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d106      	bne.n	800205c <exti_assign_channel+0x650>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800204e:	4b35      	ldr	r3, [pc, #212]	; (8002124 <exti_assign_channel+0x718>)
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	4a34      	ldr	r2, [pc, #208]	; (8002124 <exti_assign_channel+0x718>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6113      	str	r3, [r2, #16]
		break;
 800205a:	e2b0      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <exti_assign_channel+0x714>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d106      	bne.n	8002076 <exti_assign_channel+0x66a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002068:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <exti_assign_channel+0x718>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <exti_assign_channel+0x718>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	6113      	str	r3, [r2, #16]
		break;
 8002074:	e2a3      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2a      	ldr	r2, [pc, #168]	; (8002128 <exti_assign_channel+0x71c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d106      	bne.n	8002090 <exti_assign_channel+0x684>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <exti_assign_channel+0x718>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <exti_assign_channel+0x718>)
 8002088:	f043 0303 	orr.w	r3, r3, #3
 800208c:	6113      	str	r3, [r2, #16]
		break;
 800208e:	e296      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a25      	ldr	r2, [pc, #148]	; (800212c <exti_assign_channel+0x720>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d106      	bne.n	80020aa <exti_assign_channel+0x69e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <exti_assign_channel+0x718>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <exti_assign_channel+0x718>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6113      	str	r3, [r2, #16]
		break;
 80020a8:	e289      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <exti_assign_channel+0x724>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d106      	bne.n	80020c4 <exti_assign_channel+0x6b8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <exti_assign_channel+0x718>)
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <exti_assign_channel+0x718>)
 80020bc:	f043 0307 	orr.w	r3, r3, #7
 80020c0:	6113      	str	r3, [r2, #16]
		break;
 80020c2:	e27c      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 80020c4:	bf00      	nop
		break;
 80020c6:	e27a      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_9 */
	case 9: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <exti_assign_channel+0x718>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <exti_assign_channel+0x718>)
 80020ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d2:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a16      	ldr	r2, [pc, #88]	; (8002134 <exti_assign_channel+0x728>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d104      	bne.n	80020ea <exti_assign_channel+0x6de>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <exti_assign_channel+0x718>)
 80020e2:	4a10      	ldr	r2, [pc, #64]	; (8002124 <exti_assign_channel+0x718>)
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 80020e8:	e269      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a11      	ldr	r2, [pc, #68]	; (8002138 <exti_assign_channel+0x72c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d106      	bne.n	8002104 <exti_assign_channel+0x6f8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <exti_assign_channel+0x718>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <exti_assign_channel+0x718>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	6113      	str	r3, [r2, #16]
		break;
 8002102:	e25c      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <exti_assign_channel+0x714>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d115      	bne.n	800213c <exti_assign_channel+0x730>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <exti_assign_channel+0x718>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a03      	ldr	r2, [pc, #12]	; (8002124 <exti_assign_channel+0x718>)
 8002116:	f043 0320 	orr.w	r3, r3, #32
 800211a:	6113      	str	r3, [r2, #16]
		break;
 800211c:	e24f      	b.n	80025be <exti_assign_channel+0xbb2>
 800211e:	bf00      	nop
 8002120:	40020800 	.word	0x40020800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40021c00 	.word	0x40021c00
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a83      	ldr	r2, [pc, #524]	; (8002350 <exti_assign_channel+0x944>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d106      	bne.n	8002156 <exti_assign_channel+0x74a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002148:	4b82      	ldr	r3, [pc, #520]	; (8002354 <exti_assign_channel+0x948>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a81      	ldr	r2, [pc, #516]	; (8002354 <exti_assign_channel+0x948>)
 800214e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002152:	6113      	str	r3, [r2, #16]
		break;
 8002154:	e233      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a7e      	ldr	r2, [pc, #504]	; (8002358 <exti_assign_channel+0x94c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d106      	bne.n	8002170 <exti_assign_channel+0x764>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002162:	4b7c      	ldr	r3, [pc, #496]	; (8002354 <exti_assign_channel+0x948>)
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	4a7b      	ldr	r2, [pc, #492]	; (8002354 <exti_assign_channel+0x948>)
 8002168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216c:	6113      	str	r3, [r2, #16]
		break;
 800216e:	e226      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a79      	ldr	r2, [pc, #484]	; (800235c <exti_assign_channel+0x950>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d106      	bne.n	800218a <exti_assign_channel+0x77e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <exti_assign_channel+0x948>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	4a74      	ldr	r2, [pc, #464]	; (8002354 <exti_assign_channel+0x948>)
 8002182:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002186:	6113      	str	r3, [r2, #16]
		break;
 8002188:	e219      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 800218a:	bf00      	nop
		break;
 800218c:	e217      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_10*/
	case 10: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 800218e:	4b71      	ldr	r3, [pc, #452]	; (8002354 <exti_assign_channel+0x948>)
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	4a70      	ldr	r2, [pc, #448]	; (8002354 <exti_assign_channel+0x948>)
 8002194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002198:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6f      	ldr	r2, [pc, #444]	; (8002360 <exti_assign_channel+0x954>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d104      	bne.n	80021b0 <exti_assign_channel+0x7a4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80021a6:	4b6b      	ldr	r3, [pc, #428]	; (8002354 <exti_assign_channel+0x948>)
 80021a8:	4a6a      	ldr	r2, [pc, #424]	; (8002354 <exti_assign_channel+0x948>)
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 80021ae:	e206      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6b      	ldr	r2, [pc, #428]	; (8002364 <exti_assign_channel+0x958>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d106      	bne.n	80021ca <exti_assign_channel+0x7be>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80021bc:	4b65      	ldr	r3, [pc, #404]	; (8002354 <exti_assign_channel+0x948>)
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	4a64      	ldr	r2, [pc, #400]	; (8002354 <exti_assign_channel+0x948>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6113      	str	r3, [r2, #16]
		break;
 80021c8:	e1f9      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a65      	ldr	r2, [pc, #404]	; (8002368 <exti_assign_channel+0x95c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d106      	bne.n	80021e4 <exti_assign_channel+0x7d8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <exti_assign_channel+0x948>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	4a5e      	ldr	r2, [pc, #376]	; (8002354 <exti_assign_channel+0x948>)
 80021dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e0:	6113      	str	r3, [r2, #16]
		break;
 80021e2:	e1ec      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a59      	ldr	r2, [pc, #356]	; (8002350 <exti_assign_channel+0x944>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d106      	bne.n	80021fe <exti_assign_channel+0x7f2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 80021f0:	4b58      	ldr	r3, [pc, #352]	; (8002354 <exti_assign_channel+0x948>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	4a57      	ldr	r2, [pc, #348]	; (8002354 <exti_assign_channel+0x948>)
 80021f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021fa:	6113      	str	r3, [r2, #16]
		break;
 80021fc:	e1df      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a54      	ldr	r2, [pc, #336]	; (8002358 <exti_assign_channel+0x94c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d106      	bne.n	8002218 <exti_assign_channel+0x80c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800220a:	4b52      	ldr	r3, [pc, #328]	; (8002354 <exti_assign_channel+0x948>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a51      	ldr	r2, [pc, #324]	; (8002354 <exti_assign_channel+0x948>)
 8002210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002214:	6113      	str	r3, [r2, #16]
		break;
 8002216:	e1d2      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a4f      	ldr	r2, [pc, #316]	; (800235c <exti_assign_channel+0x950>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d106      	bne.n	8002232 <exti_assign_channel+0x826>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002224:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <exti_assign_channel+0x948>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <exti_assign_channel+0x948>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222e:	6113      	str	r3, [r2, #16]
		break;
 8002230:	e1c5      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8002232:	bf00      	nop
		break;
 8002234:	e1c3      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_11*/
	case 11: {
		/* SYSCFG_EXTICR3 */
		/* Tercera posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <exti_assign_channel+0x948>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4a46      	ldr	r2, [pc, #280]	; (8002354 <exti_assign_channel+0x948>)
 800223c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002240:	6113      	str	r3, [r2, #16]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a45      	ldr	r2, [pc, #276]	; (8002360 <exti_assign_channel+0x954>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d104      	bne.n	8002258 <exti_assign_channel+0x84c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <exti_assign_channel+0x948>)
 8002250:	4a40      	ldr	r2, [pc, #256]	; (8002354 <exti_assign_channel+0x948>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 8002256:	e1b2      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a41      	ldr	r2, [pc, #260]	; (8002364 <exti_assign_channel+0x958>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d106      	bne.n	8002272 <exti_assign_channel+0x866>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <exti_assign_channel+0x948>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <exti_assign_channel+0x948>)
 800226a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226e:	6113      	str	r3, [r2, #16]
		break;
 8002270:	e1a5      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <exti_assign_channel+0x95c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d106      	bne.n	800228c <exti_assign_channel+0x880>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800227e:	4b35      	ldr	r3, [pc, #212]	; (8002354 <exti_assign_channel+0x948>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	4a34      	ldr	r2, [pc, #208]	; (8002354 <exti_assign_channel+0x948>)
 8002284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002288:	6113      	str	r3, [r2, #16]
		break;
 800228a:	e198      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <exti_assign_channel+0x944>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d106      	bne.n	80022a6 <exti_assign_channel+0x89a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <exti_assign_channel+0x948>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <exti_assign_channel+0x948>)
 800229e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80022a2:	6113      	str	r3, [r2, #16]
		break;
 80022a4:	e18b      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <exti_assign_channel+0x94c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d106      	bne.n	80022c0 <exti_assign_channel+0x8b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <exti_assign_channel+0x948>)
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	4a27      	ldr	r2, [pc, #156]	; (8002354 <exti_assign_channel+0x948>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6113      	str	r3, [r2, #16]
		break;
 80022be:	e17e      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a25      	ldr	r2, [pc, #148]	; (800235c <exti_assign_channel+0x950>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d106      	bne.n	80022da <exti_assign_channel+0x8ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <exti_assign_channel+0x948>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4a20      	ldr	r2, [pc, #128]	; (8002354 <exti_assign_channel+0x948>)
 80022d2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80022d6:	6113      	str	r3, [r2, #16]
		break;
 80022d8:	e171      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 80022da:	bf00      	nop
		break;
 80022dc:	e16f      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_12*/
	case 12: {
		/* SYSCFG_EXTICR4 */
		/* Cuarta posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <exti_assign_channel+0x948>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <exti_assign_channel+0x948>)
 80022e4:	f023 030f 	bic.w	r3, r3, #15
 80022e8:	6153      	str	r3, [r2, #20]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <exti_assign_channel+0x954>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d104      	bne.n	8002300 <exti_assign_channel+0x8f4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <exti_assign_channel+0x948>)
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <exti_assign_channel+0x948>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 80022fe:	e15e      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <exti_assign_channel+0x958>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d106      	bne.n	800231a <exti_assign_channel+0x90e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <exti_assign_channel+0x948>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4a10      	ldr	r2, [pc, #64]	; (8002354 <exti_assign_channel+0x948>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6153      	str	r3, [r2, #20]
		break;
 8002318:	e151      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <exti_assign_channel+0x95c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d106      	bne.n	8002334 <exti_assign_channel+0x928>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <exti_assign_channel+0x948>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <exti_assign_channel+0x948>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6153      	str	r3, [r2, #20]
		break;
 8002332:	e144      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <exti_assign_channel+0x944>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d115      	bne.n	800236c <exti_assign_channel+0x960>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <exti_assign_channel+0x948>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4a03      	ldr	r2, [pc, #12]	; (8002354 <exti_assign_channel+0x948>)
 8002346:	f043 0303 	orr.w	r3, r3, #3
 800234a:	6153      	str	r3, [r2, #20]
		break;
 800234c:	e137      	b.n	80025be <exti_assign_channel+0xbb2>
 800234e:	bf00      	nop
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40013800 	.word	0x40013800
 8002358:	40021000 	.word	0x40021000
 800235c:	40021c00 	.word	0x40021c00
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a83      	ldr	r2, [pc, #524]	; (8002580 <exti_assign_channel+0xb74>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d106      	bne.n	8002386 <exti_assign_channel+0x97a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002378:	4b82      	ldr	r3, [pc, #520]	; (8002584 <exti_assign_channel+0xb78>)
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	4a81      	ldr	r2, [pc, #516]	; (8002584 <exti_assign_channel+0xb78>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6153      	str	r3, [r2, #20]
		break;
 8002384:	e11b      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7e      	ldr	r2, [pc, #504]	; (8002588 <exti_assign_channel+0xb7c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d106      	bne.n	80023a0 <exti_assign_channel+0x994>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002392:	4b7c      	ldr	r3, [pc, #496]	; (8002584 <exti_assign_channel+0xb78>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4a7b      	ldr	r2, [pc, #492]	; (8002584 <exti_assign_channel+0xb78>)
 8002398:	f043 0307 	orr.w	r3, r3, #7
 800239c:	6153      	str	r3, [r2, #20]
		break;
 800239e:	e10e      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 80023a0:	bf00      	nop
		break;
 80023a2:	e10c      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_13*/
	case 13: {
		/* SYSCFG_EXTICR4 */
		/* Cuarta posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 80023a4:	4b77      	ldr	r3, [pc, #476]	; (8002584 <exti_assign_channel+0xb78>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	4a76      	ldr	r2, [pc, #472]	; (8002584 <exti_assign_channel+0xb78>)
 80023aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ae:	6153      	str	r3, [r2, #20]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a75      	ldr	r2, [pc, #468]	; (800258c <exti_assign_channel+0xb80>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d104      	bne.n	80023c6 <exti_assign_channel+0x9ba>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80023bc:	4b71      	ldr	r3, [pc, #452]	; (8002584 <exti_assign_channel+0xb78>)
 80023be:	4a71      	ldr	r2, [pc, #452]	; (8002584 <exti_assign_channel+0xb78>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 80023c4:	e0fb      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a70      	ldr	r2, [pc, #448]	; (8002590 <exti_assign_channel+0xb84>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d106      	bne.n	80023e0 <exti_assign_channel+0x9d4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80023d2:	4b6c      	ldr	r3, [pc, #432]	; (8002584 <exti_assign_channel+0xb78>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4a6b      	ldr	r2, [pc, #428]	; (8002584 <exti_assign_channel+0xb78>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6153      	str	r3, [r2, #20]
		break;
 80023de:	e0ee      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6b      	ldr	r2, [pc, #428]	; (8002594 <exti_assign_channel+0xb88>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d106      	bne.n	80023fa <exti_assign_channel+0x9ee>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <exti_assign_channel+0xb78>)
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	4a64      	ldr	r2, [pc, #400]	; (8002584 <exti_assign_channel+0xb78>)
 80023f2:	f043 0320 	orr.w	r3, r3, #32
 80023f6:	6153      	str	r3, [r2, #20]
		break;
 80023f8:	e0e1      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a65      	ldr	r2, [pc, #404]	; (8002598 <exti_assign_channel+0xb8c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d106      	bne.n	8002414 <exti_assign_channel+0xa08>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <exti_assign_channel+0xb78>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4a5e      	ldr	r2, [pc, #376]	; (8002584 <exti_assign_channel+0xb78>)
 800240c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002410:	6153      	str	r3, [r2, #20]
		break;
 8002412:	e0d4      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a59      	ldr	r2, [pc, #356]	; (8002580 <exti_assign_channel+0xb74>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d106      	bne.n	800242e <exti_assign_channel+0xa22>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002420:	4b58      	ldr	r3, [pc, #352]	; (8002584 <exti_assign_channel+0xb78>)
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	4a57      	ldr	r2, [pc, #348]	; (8002584 <exti_assign_channel+0xb78>)
 8002426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242a:	6153      	str	r3, [r2, #20]
		break;
 800242c:	e0c7      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a54      	ldr	r2, [pc, #336]	; (8002588 <exti_assign_channel+0xb7c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d106      	bne.n	8002448 <exti_assign_channel+0xa3c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800243a:	4b52      	ldr	r3, [pc, #328]	; (8002584 <exti_assign_channel+0xb78>)
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	4a51      	ldr	r2, [pc, #324]	; (8002584 <exti_assign_channel+0xb78>)
 8002440:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002444:	6153      	str	r3, [r2, #20]
		break;
 8002446:	e0ba      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 8002448:	bf00      	nop
		break;
 800244a:	e0b8      	b.n	80025be <exti_assign_channel+0xbb2>
	/* Configurando para el todos los pines GPIOX_14*/
	case 14: {
		/* SYSCFG_EXTICR4 */
		/* Cuarta posición del vector EXTICR */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <exti_assign_channel+0xb78>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <exti_assign_channel+0xb78>)
 8002452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002456:	6153      	str	r3, [r2, #20]

		// Activamos el puerto correspondiente al canal que vamos a utilizar
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4b      	ldr	r2, [pc, #300]	; (800258c <exti_assign_channel+0xb80>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d104      	bne.n	800246e <exti_assign_channel+0xa62>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002464:	4b47      	ldr	r3, [pc, #284]	; (8002584 <exti_assign_channel+0xb78>)
 8002466:	4a47      	ldr	r2, [pc, #284]	; (8002584 <exti_assign_channel+0xb78>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 800246c:	e0a7      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a46      	ldr	r2, [pc, #280]	; (8002590 <exti_assign_channel+0xb84>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d106      	bne.n	8002488 <exti_assign_channel+0xa7c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <exti_assign_channel+0xb78>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	4a41      	ldr	r2, [pc, #260]	; (8002584 <exti_assign_channel+0xb78>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002484:	6153      	str	r3, [r2, #20]
		break;
 8002486:	e09a      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a41      	ldr	r2, [pc, #260]	; (8002594 <exti_assign_channel+0xb88>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d106      	bne.n	80024a2 <exti_assign_channel+0xa96>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002494:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <exti_assign_channel+0xb78>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	4a3a      	ldr	r2, [pc, #232]	; (8002584 <exti_assign_channel+0xb78>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6153      	str	r3, [r2, #20]
		break;
 80024a0:	e08d      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <exti_assign_channel+0xb8c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d106      	bne.n	80024bc <exti_assign_channel+0xab0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80024ae:	4b35      	ldr	r3, [pc, #212]	; (8002584 <exti_assign_channel+0xb78>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4a34      	ldr	r2, [pc, #208]	; (8002584 <exti_assign_channel+0xb78>)
 80024b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80024b8:	6153      	str	r3, [r2, #20]
		break;
 80024ba:	e080      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <exti_assign_channel+0xb74>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d106      	bne.n	80024d6 <exti_assign_channel+0xaca>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <exti_assign_channel+0xb78>)
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	4a2d      	ldr	r2, [pc, #180]	; (8002584 <exti_assign_channel+0xb78>)
 80024ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d2:	6153      	str	r3, [r2, #20]
		break;
 80024d4:	e073      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2a      	ldr	r2, [pc, #168]	; (8002588 <exti_assign_channel+0xb7c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d106      	bne.n	80024f0 <exti_assign_channel+0xae4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <exti_assign_channel+0xb78>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4a27      	ldr	r2, [pc, #156]	; (8002584 <exti_assign_channel+0xb78>)
 80024e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ec:	6153      	str	r3, [r2, #20]
		break;
 80024ee:	e066      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 80024f0:	bf00      	nop
		break;
 80024f2:	e064      	b.n	80025be <exti_assign_channel+0xbb2>

	/* Configurando para el todos los pines GPIOX_15 */
	case 15: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <exti_assign_channel+0xb78>)
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <exti_assign_channel+0xb78>)
 80024fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024fe:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a21      	ldr	r2, [pc, #132]	; (800258c <exti_assign_channel+0xb80>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d104      	bne.n	8002516 <exti_assign_channel+0xb0a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <exti_assign_channel+0xb78>)
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <exti_assign_channel+0xb78>)
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8002514:	e053      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <exti_assign_channel+0xb84>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d106      	bne.n	8002530 <exti_assign_channel+0xb24>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <exti_assign_channel+0xb78>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <exti_assign_channel+0xb78>)
 8002528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800252c:	6153      	str	r3, [r2, #20]
		break;
 800252e:	e046      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <exti_assign_channel+0xb88>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d106      	bne.n	800254a <exti_assign_channel+0xb3e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <exti_assign_channel+0xb78>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <exti_assign_channel+0xb78>)
 8002542:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002546:	6153      	str	r3, [r2, #20]
		break;
 8002548:	e039      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <exti_assign_channel+0xb8c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d106      	bne.n	8002564 <exti_assign_channel+0xb58>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <exti_assign_channel+0xb78>)
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <exti_assign_channel+0xb78>)
 800255c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002560:	6153      	str	r3, [r2, #20]
		break;
 8002562:	e02c      	b.n	80025be <exti_assign_channel+0xbb2>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <exti_assign_channel+0xb74>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d115      	bne.n	800259c <exti_assign_channel+0xb90>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <exti_assign_channel+0xb78>)
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <exti_assign_channel+0xb78>)
 8002576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257a:	6153      	str	r3, [r2, #20]
		break;
 800257c:	e01f      	b.n	80025be <exti_assign_channel+0xbb2>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40013800 	.word	0x40013800
 8002588:	40021c00 	.word	0x40021c00
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <exti_assign_channel+0xbc0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d106      	bne.n	80025b6 <exti_assign_channel+0xbaa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <exti_assign_channel+0xbc4>)
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <exti_assign_channel+0xbc4>)
 80025ae:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80025b2:	6153      	str	r3, [r2, #20]
		break;
 80025b4:	e003      	b.n	80025be <exti_assign_channel+0xbb2>
			__NOP();
 80025b6:	bf00      	nop
		break;
 80025b8:	e001      	b.n	80025be <exti_assign_channel+0xbb2>
	}

	default: {
		__NOP();
 80025ba:	bf00      	nop
		break;
 80025bc:	bf00      	nop
	}

	} // Fin del switch-case
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40021c00 	.word	0x40021c00
 80025d0:	40013800 	.word	0x40013800

080025d4 <exti_select_edge>:

/*
 * Función para seleccionar adecuadamente el flanco que lanza la interrupcion
 * en el canal EXTI específico.
 * */
static void exti_select_edge(EXTI_Config_t *extiConfig){
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

	if(extiConfig->edgeType == EXTERNAL_INTERRUPT_FALLING_EDGE){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	791b      	ldrb	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 80fb 	bne.w	80027dc <exti_select_edge+0x208>
		/* Falling Trigger selection register*/

		// Seleccionamos el canal al cual le queremos configurar el flanco
        switch(extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber){
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	791b      	ldrb	r3, [r3, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	f200 80f3 	bhi.w	80027d8 <exti_select_edge+0x204>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <exti_select_edge+0x24>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002639 	.word	0x08002639
 80025fc:	08002653 	.word	0x08002653
 8002600:	0800266d 	.word	0x0800266d
 8002604:	08002687 	.word	0x08002687
 8002608:	080026a1 	.word	0x080026a1
 800260c:	080026bb 	.word	0x080026bb
 8002610:	080026d5 	.word	0x080026d5
 8002614:	080026ef 	.word	0x080026ef
 8002618:	08002709 	.word	0x08002709
 800261c:	08002723 	.word	0x08002723
 8002620:	0800273d 	.word	0x0800273d
 8002624:	08002757 	.word	0x08002757
 8002628:	08002771 	.word	0x08002771
 800262c:	0800278b 	.word	0x0800278b
 8002630:	080027a5 	.word	0x080027a5
 8002634:	080027bf 	.word	0x080027bf

        	/* Ya que la interrupción puede ser configurada para lanzarse por ambos flancos a la vez,
        	 * como se quiere seleccionar un único flanco es necesario desactivar previamente el otro.
        	 *
        	 * Nos aseguramos de que el flanco de subida esté desactivado para este canal*/
        	EXTI->RTSR &= ~EXTI_RTSR_TR0;
 8002638:	4b97      	ldr	r3, [pc, #604]	; (8002898 <exti_select_edge+0x2c4>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a96      	ldr	r2, [pc, #600]	; (8002898 <exti_select_edge+0x2c4>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6093      	str	r3, [r2, #8]

        	/* Configuramos el flanco de bajada para que lance la interrupción en este canal */
        	EXTI->FTSR |= EXTI_FTSR_TR0;
 8002644:	4b94      	ldr	r3, [pc, #592]	; (8002898 <exti_select_edge+0x2c4>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a93      	ldr	r2, [pc, #588]	; (8002898 <exti_select_edge+0x2c4>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	60d3      	str	r3, [r2, #12]
        	break;
 8002650:	e1c2      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 1: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR1;
 8002652:	4b91      	ldr	r3, [pc, #580]	; (8002898 <exti_select_edge+0x2c4>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4a90      	ldr	r2, [pc, #576]	; (8002898 <exti_select_edge+0x2c4>)
 8002658:	f023 0302 	bic.w	r3, r3, #2
 800265c:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR1;
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <exti_select_edge+0x2c4>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	4a8d      	ldr	r2, [pc, #564]	; (8002898 <exti_select_edge+0x2c4>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	60d3      	str	r3, [r2, #12]
        	break;
 800266a:	e1b5      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 2: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR2;
 800266c:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <exti_select_edge+0x2c4>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a89      	ldr	r2, [pc, #548]	; (8002898 <exti_select_edge+0x2c4>)
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR2;
 8002678:	4b87      	ldr	r3, [pc, #540]	; (8002898 <exti_select_edge+0x2c4>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a86      	ldr	r2, [pc, #536]	; (8002898 <exti_select_edge+0x2c4>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	60d3      	str	r3, [r2, #12]
        	break;
 8002684:	e1a8      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 3: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR3;
 8002686:	4b84      	ldr	r3, [pc, #528]	; (8002898 <exti_select_edge+0x2c4>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4a83      	ldr	r2, [pc, #524]	; (8002898 <exti_select_edge+0x2c4>)
 800268c:	f023 0308 	bic.w	r3, r3, #8
 8002690:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR3;
 8002692:	4b81      	ldr	r3, [pc, #516]	; (8002898 <exti_select_edge+0x2c4>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4a80      	ldr	r2, [pc, #512]	; (8002898 <exti_select_edge+0x2c4>)
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	60d3      	str	r3, [r2, #12]
        	break;
 800269e:	e19b      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 4: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR4;
 80026a0:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <exti_select_edge+0x2c4>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <exti_select_edge+0x2c4>)
 80026a6:	f023 0310 	bic.w	r3, r3, #16
 80026aa:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR4;
 80026ac:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <exti_select_edge+0x2c4>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a79      	ldr	r2, [pc, #484]	; (8002898 <exti_select_edge+0x2c4>)
 80026b2:	f043 0310 	orr.w	r3, r3, #16
 80026b6:	60d3      	str	r3, [r2, #12]
        	break;
 80026b8:	e18e      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 5: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR5;
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <exti_select_edge+0x2c4>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4a76      	ldr	r2, [pc, #472]	; (8002898 <exti_select_edge+0x2c4>)
 80026c0:	f023 0320 	bic.w	r3, r3, #32
 80026c4:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR5;
 80026c6:	4b74      	ldr	r3, [pc, #464]	; (8002898 <exti_select_edge+0x2c4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a73      	ldr	r2, [pc, #460]	; (8002898 <exti_select_edge+0x2c4>)
 80026cc:	f043 0320 	orr.w	r3, r3, #32
 80026d0:	60d3      	str	r3, [r2, #12]
        	break;
 80026d2:	e181      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 6: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR6;
 80026d4:	4b70      	ldr	r3, [pc, #448]	; (8002898 <exti_select_edge+0x2c4>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a6f      	ldr	r2, [pc, #444]	; (8002898 <exti_select_edge+0x2c4>)
 80026da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026de:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR6;
 80026e0:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <exti_select_edge+0x2c4>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a6c      	ldr	r2, [pc, #432]	; (8002898 <exti_select_edge+0x2c4>)
 80026e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ea:	60d3      	str	r3, [r2, #12]
        	break;
 80026ec:	e174      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 7: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR7;
 80026ee:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <exti_select_edge+0x2c4>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4a69      	ldr	r2, [pc, #420]	; (8002898 <exti_select_edge+0x2c4>)
 80026f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026f8:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR7;
 80026fa:	4b67      	ldr	r3, [pc, #412]	; (8002898 <exti_select_edge+0x2c4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4a66      	ldr	r2, [pc, #408]	; (8002898 <exti_select_edge+0x2c4>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	60d3      	str	r3, [r2, #12]
        	break;
 8002706:	e167      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 8: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR8;
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <exti_select_edge+0x2c4>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a62      	ldr	r2, [pc, #392]	; (8002898 <exti_select_edge+0x2c4>)
 800270e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002712:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR8;
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <exti_select_edge+0x2c4>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a5f      	ldr	r2, [pc, #380]	; (8002898 <exti_select_edge+0x2c4>)
 800271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271e:	60d3      	str	r3, [r2, #12]
        	break;
 8002720:	e15a      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 9: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR9;
 8002722:	4b5d      	ldr	r3, [pc, #372]	; (8002898 <exti_select_edge+0x2c4>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a5c      	ldr	r2, [pc, #368]	; (8002898 <exti_select_edge+0x2c4>)
 8002728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800272c:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR9;
 800272e:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <exti_select_edge+0x2c4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a59      	ldr	r2, [pc, #356]	; (8002898 <exti_select_edge+0x2c4>)
 8002734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002738:	60d3      	str	r3, [r2, #12]
        	break;
 800273a:	e14d      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 10: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR10;
 800273c:	4b56      	ldr	r3, [pc, #344]	; (8002898 <exti_select_edge+0x2c4>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a55      	ldr	r2, [pc, #340]	; (8002898 <exti_select_edge+0x2c4>)
 8002742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002746:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR10;
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <exti_select_edge+0x2c4>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <exti_select_edge+0x2c4>)
 800274e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002752:	60d3      	str	r3, [r2, #12]
        	break;
 8002754:	e140      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 11: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR11;
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <exti_select_edge+0x2c4>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4a4f      	ldr	r2, [pc, #316]	; (8002898 <exti_select_edge+0x2c4>)
 800275c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002760:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR11;
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <exti_select_edge+0x2c4>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <exti_select_edge+0x2c4>)
 8002768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800276c:	60d3      	str	r3, [r2, #12]
        	break;
 800276e:	e133      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 12: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR12;
 8002770:	4b49      	ldr	r3, [pc, #292]	; (8002898 <exti_select_edge+0x2c4>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a48      	ldr	r2, [pc, #288]	; (8002898 <exti_select_edge+0x2c4>)
 8002776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800277a:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR12;
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <exti_select_edge+0x2c4>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a45      	ldr	r2, [pc, #276]	; (8002898 <exti_select_edge+0x2c4>)
 8002782:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002786:	60d3      	str	r3, [r2, #12]
        	break;
 8002788:	e126      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 13: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR13;
 800278a:	4b43      	ldr	r3, [pc, #268]	; (8002898 <exti_select_edge+0x2c4>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4a42      	ldr	r2, [pc, #264]	; (8002898 <exti_select_edge+0x2c4>)
 8002790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002794:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR13;
 8002796:	4b40      	ldr	r3, [pc, #256]	; (8002898 <exti_select_edge+0x2c4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a3f      	ldr	r2, [pc, #252]	; (8002898 <exti_select_edge+0x2c4>)
 800279c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027a0:	60d3      	str	r3, [r2, #12]
        	break;
 80027a2:	e119      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 14: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR14;
 80027a4:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <exti_select_edge+0x2c4>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <exti_select_edge+0x2c4>)
 80027aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ae:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR14;
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <exti_select_edge+0x2c4>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <exti_select_edge+0x2c4>)
 80027b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ba:	60d3      	str	r3, [r2, #12]
        	break;
 80027bc:	e10c      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 15: {

        	EXTI->RTSR &= ~EXTI_RTSR_TR15;
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <exti_select_edge+0x2c4>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4a35      	ldr	r2, [pc, #212]	; (8002898 <exti_select_edge+0x2c4>)
 80027c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027c8:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR |= EXTI_FTSR_TR15;
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <exti_select_edge+0x2c4>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4a32      	ldr	r2, [pc, #200]	; (8002898 <exti_select_edge+0x2c4>)
 80027d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d4:	60d3      	str	r3, [r2, #12]
        	break;
 80027d6:	e0ff      	b.n	80029d8 <exti_select_edge+0x404>
        }
        default: {
        		__NOP();
 80027d8:	bf00      	nop
        		break;
 80027da:	e0fd      	b.n	80029d8 <exti_select_edge+0x404>

	else{
		/* Rising Trigger selection register*/

		// Seleccionamos el canal al cual le queremos configurar el flanco como flanco de subida
        switch(extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber){
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f200 80f6 	bhi.w	80029d4 <exti_select_edge+0x400>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <exti_select_edge+0x21c>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002831 	.word	0x08002831
 80027f4:	0800284b 	.word	0x0800284b
 80027f8:	08002865 	.word	0x08002865
 80027fc:	0800287f 	.word	0x0800287f
 8002800:	0800289d 	.word	0x0800289d
 8002804:	080028b7 	.word	0x080028b7
 8002808:	080028d1 	.word	0x080028d1
 800280c:	080028eb 	.word	0x080028eb
 8002810:	08002905 	.word	0x08002905
 8002814:	0800291f 	.word	0x0800291f
 8002818:	08002939 	.word	0x08002939
 800281c:	08002953 	.word	0x08002953
 8002820:	0800296d 	.word	0x0800296d
 8002824:	08002987 	.word	0x08002987
 8002828:	080029a1 	.word	0x080029a1
 800282c:	080029bb 	.word	0x080029bb

        // Configurando el flanco para el canal 0
        case 0: {

        	/* Nos aseguramos de que el flanco de bajada esté desactivado para este canal*/
        	EXTI->FTSR &= ~EXTI_FTSR_TR0;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <exti_select_edge+0x2c4>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <exti_select_edge+0x2c4>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	60d3      	str	r3, [r2, #12]

        	/* Configuramos el flanco de bajada para que lance la interrupción */
        	EXTI->RTSR |= EXTI_RTSR_TR0;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <exti_select_edge+0x2c4>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a15      	ldr	r2, [pc, #84]	; (8002898 <exti_select_edge+0x2c4>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6093      	str	r3, [r2, #8]
        	break;
 8002848:	e0c6      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 1: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR1;
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <exti_select_edge+0x2c4>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <exti_select_edge+0x2c4>)
 8002850:	f023 0302 	bic.w	r3, r3, #2
 8002854:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR1;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <exti_select_edge+0x2c4>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <exti_select_edge+0x2c4>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6093      	str	r3, [r2, #8]
        	break;
 8002862:	e0b9      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 2: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR2;
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <exti_select_edge+0x2c4>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <exti_select_edge+0x2c4>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR2;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <exti_select_edge+0x2c4>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a08      	ldr	r2, [pc, #32]	; (8002898 <exti_select_edge+0x2c4>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6093      	str	r3, [r2, #8]
        	break;
 800287c:	e0ac      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 3: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR3;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <exti_select_edge+0x2c4>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4a05      	ldr	r2, [pc, #20]	; (8002898 <exti_select_edge+0x2c4>)
 8002884:	f023 0308 	bic.w	r3, r3, #8
 8002888:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR3;
 800288a:	4b03      	ldr	r3, [pc, #12]	; (8002898 <exti_select_edge+0x2c4>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4a02      	ldr	r2, [pc, #8]	; (8002898 <exti_select_edge+0x2c4>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	6093      	str	r3, [r2, #8]
        	break;
 8002896:	e09f      	b.n	80029d8 <exti_select_edge+0x404>
 8002898:	40013c00 	.word	0x40013c00
        }
        case 4: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR4;
 800289c:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <exti_select_edge+0x410>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a50      	ldr	r2, [pc, #320]	; (80029e4 <exti_select_edge+0x410>)
 80028a2:	f023 0310 	bic.w	r3, r3, #16
 80028a6:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR4;
 80028a8:	4b4e      	ldr	r3, [pc, #312]	; (80029e4 <exti_select_edge+0x410>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <exti_select_edge+0x410>)
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	6093      	str	r3, [r2, #8]
        	break;
 80028b4:	e090      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 5: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR5;
 80028b6:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <exti_select_edge+0x410>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a4a      	ldr	r2, [pc, #296]	; (80029e4 <exti_select_edge+0x410>)
 80028bc:	f023 0320 	bic.w	r3, r3, #32
 80028c0:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR5;
 80028c2:	4b48      	ldr	r3, [pc, #288]	; (80029e4 <exti_select_edge+0x410>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a47      	ldr	r2, [pc, #284]	; (80029e4 <exti_select_edge+0x410>)
 80028c8:	f043 0320 	orr.w	r3, r3, #32
 80028cc:	6093      	str	r3, [r2, #8]
        	break;
 80028ce:	e083      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 6: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR6;
 80028d0:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <exti_select_edge+0x410>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a43      	ldr	r2, [pc, #268]	; (80029e4 <exti_select_edge+0x410>)
 80028d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028da:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR6;
 80028dc:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <exti_select_edge+0x410>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a40      	ldr	r2, [pc, #256]	; (80029e4 <exti_select_edge+0x410>)
 80028e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e6:	6093      	str	r3, [r2, #8]
        	break;
 80028e8:	e076      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 7: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR7;
 80028ea:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <exti_select_edge+0x410>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <exti_select_edge+0x410>)
 80028f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f4:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR7;
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <exti_select_edge+0x410>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4a3a      	ldr	r2, [pc, #232]	; (80029e4 <exti_select_edge+0x410>)
 80028fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002900:	6093      	str	r3, [r2, #8]
        	break;
 8002902:	e069      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 8: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR8;
 8002904:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <exti_select_edge+0x410>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <exti_select_edge+0x410>)
 800290a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800290e:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR8;
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <exti_select_edge+0x410>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <exti_select_edge+0x410>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6093      	str	r3, [r2, #8]
        	break;
 800291c:	e05c      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 9: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR9;
 800291e:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <exti_select_edge+0x410>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <exti_select_edge+0x410>)
 8002924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002928:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR9;
 800292a:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <exti_select_edge+0x410>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <exti_select_edge+0x410>)
 8002930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002934:	6093      	str	r3, [r2, #8]
        	break;
 8002936:	e04f      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 10: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR10;
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <exti_select_edge+0x410>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <exti_select_edge+0x410>)
 800293e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002942:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR10;
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <exti_select_edge+0x410>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <exti_select_edge+0x410>)
 800294a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294e:	6093      	str	r3, [r2, #8]
        	break;
 8002950:	e042      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 11: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR11;
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <exti_select_edge+0x410>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <exti_select_edge+0x410>)
 8002958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800295c:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR11;
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <exti_select_edge+0x410>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <exti_select_edge+0x410>)
 8002964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002968:	6093      	str	r3, [r2, #8]
        	break;
 800296a:	e035      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 12: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR12;
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <exti_select_edge+0x410>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <exti_select_edge+0x410>)
 8002972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002976:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR12;
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <exti_select_edge+0x410>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <exti_select_edge+0x410>)
 800297e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002982:	6093      	str	r3, [r2, #8]
        	break;
 8002984:	e028      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 13: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR13;
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <exti_select_edge+0x410>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <exti_select_edge+0x410>)
 800298c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002990:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR13;
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <exti_select_edge+0x410>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <exti_select_edge+0x410>)
 8002998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800299c:	6093      	str	r3, [r2, #8]
        	break;
 800299e:	e01b      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 14: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR14;
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <exti_select_edge+0x410>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <exti_select_edge+0x410>)
 80029a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029aa:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR14;
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <exti_select_edge+0x410>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <exti_select_edge+0x410>)
 80029b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b6:	6093      	str	r3, [r2, #8]
        	break;
 80029b8:	e00e      	b.n	80029d8 <exti_select_edge+0x404>
        }
        case 15: {

        	EXTI->FTSR &= ~EXTI_FTSR_TR15;
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <exti_select_edge+0x410>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <exti_select_edge+0x410>)
 80029c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029c4:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= EXTI_RTSR_TR15;
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <exti_select_edge+0x410>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4a06      	ldr	r2, [pc, #24]	; (80029e4 <exti_select_edge+0x410>)
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	6093      	str	r3, [r2, #8]
        	break;
 80029d2:	e001      	b.n	80029d8 <exti_select_edge+0x404>
        }
        default: {
        		__NOP();
 80029d4:	bf00      	nop
        		break;
 80029d6:	bf00      	nop
        	}
        }	// Fin del Switch

	}	// Fin del else

}	// Fin de la función exti_select_edge
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40013c00 	.word	0x40013c00

080029e8 <exti_config_interrupt>:

/*
 * Funcion que configura las mascaras de interrupciones (registro de máscaras) y
 * además matricula cada una de las posibles interrupciones en el NVIC
 * */
static void exti_config_interrupt(EXTI_Config_t *extiConfig){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	/* 6.0 Activamos la interrupción del canal que estamos configurando */
		// Interrupt Mask Register

		/* Esta máscara se encarga de settear cuál será el canal (línea) que se va a usar */
		switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	791b      	ldrb	r3, [r3, #4]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f200 8094 	bhi.w	8002b24 <exti_config_interrupt+0x13c>
 80029fc:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <exti_config_interrupt+0x1c>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a45 	.word	0x08002a45
 8002a08:	08002a53 	.word	0x08002a53
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	08002a6f 	.word	0x08002a6f
 8002a14:	08002a7d 	.word	0x08002a7d
 8002a18:	08002a8b 	.word	0x08002a8b
 8002a1c:	08002a99 	.word	0x08002a99
 8002a20:	08002aa7 	.word	0x08002aa7
 8002a24:	08002ab5 	.word	0x08002ab5
 8002a28:	08002ac3 	.word	0x08002ac3
 8002a2c:	08002ad1 	.word	0x08002ad1
 8002a30:	08002adf 	.word	0x08002adf
 8002a34:	08002aed 	.word	0x08002aed
 8002a38:	08002afb 	.word	0x08002afb
 8002a3c:	08002b09 	.word	0x08002b09
 8002a40:	08002b17 	.word	0x08002b17

		case 0: {
			EXTI->IMR |= EXTI_IMR_IM0;
 8002a44:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5c      	ldr	r2, [pc, #368]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]
			break;
 8002a50:	e069      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 1: {
			EXTI->IMR |= EXTI_IMR_IM1;
 8002a52:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a59      	ldr	r2, [pc, #356]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6013      	str	r3, [r2, #0]
			break;
 8002a5e:	e062      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 2: {
			EXTI->IMR |= EXTI_IMR_IM2;
 8002a60:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6013      	str	r3, [r2, #0]
			break;
 8002a6c:	e05b      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 3: {
			EXTI->IMR |= EXTI_IMR_IM3;
 8002a6e:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6013      	str	r3, [r2, #0]
			break;
 8002a7a:	e054      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 4: {
			EXTI->IMR |= EXTI_IMR_IM4;
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a82:	f043 0310 	orr.w	r3, r3, #16
 8002a86:	6013      	str	r3, [r2, #0]
			break;
 8002a88:	e04d      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 5: {
			EXTI->IMR |= EXTI_IMR_IM5;
 8002a8a:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6013      	str	r3, [r2, #0]
			break;
 8002a96:	e046      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 6: {
			EXTI->IMR |= EXTI_IMR_IM6;
 8002a98:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa2:	6013      	str	r3, [r2, #0]
			break;
 8002aa4:	e03f      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 7: {
			EXTI->IMR |= EXTI_IMR_IM7;
 8002aa6:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a44      	ldr	r2, [pc, #272]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab0:	6013      	str	r3, [r2, #0]
			break;
 8002ab2:	e038      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 8: {
			EXTI->IMR |= EXTI_IMR_IM8;
 8002ab4:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	6013      	str	r3, [r2, #0]
			break;
 8002ac0:	e031      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 9: {
			EXTI->IMR |= EXTI_IMR_IM9;
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3d      	ldr	r2, [pc, #244]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002acc:	6013      	str	r3, [r2, #0]
			break;
 8002ace:	e02a      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 10: {
			EXTI->IMR |= EXTI_IMR_IM10;
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a39      	ldr	r2, [pc, #228]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ada:	6013      	str	r3, [r2, #0]
			break;
 8002adc:	e023      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 11: {
			EXTI->IMR |= EXTI_IMR_IM11;
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a36      	ldr	r2, [pc, #216]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae8:	6013      	str	r3, [r2, #0]
			break;
 8002aea:	e01c      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 12: {
			EXTI->IMR |= EXTI_IMR_IM12;
 8002aec:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a32      	ldr	r2, [pc, #200]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af6:	6013      	str	r3, [r2, #0]
			break;
 8002af8:	e015      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 13: {
			EXTI->IMR |= EXTI_IMR_IM13;
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b04:	6013      	str	r3, [r2, #0]
			break;
 8002b06:	e00e      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}


		case 14: {
			EXTI->IMR |= EXTI_IMR_IM14;
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b12:	6013      	str	r3, [r2, #0]
			break;
 8002b14:	e007      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		case 15: {
			EXTI->IMR |= EXTI_IMR_IM15;
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <exti_config_interrupt+0x1d4>)
 8002b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b20:	6013      	str	r3, [r2, #0]
			break;
 8002b22:	e000      	b.n	8002b26 <exti_config_interrupt+0x13e>
		}

		default: {
			break;
 8002b24:	bf00      	nop
		/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
		 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
		 *
		 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
		 * */
		switch (extiConfig->pGPIOHandler->pinConfig.GPIO_PinNumber) {
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d83f      	bhi.n	8002bb0 <exti_config_interrupt+0x1c8>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <exti_config_interrupt+0x150>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b79 	.word	0x08002b79
 8002b3c:	08002b81 	.word	0x08002b81
 8002b40:	08002b89 	.word	0x08002b89
 8002b44:	08002b91 	.word	0x08002b91
 8002b48:	08002b99 	.word	0x08002b99
 8002b4c:	08002ba1 	.word	0x08002ba1
 8002b50:	08002ba1 	.word	0x08002ba1
 8002b54:	08002ba1 	.word	0x08002ba1
 8002b58:	08002ba1 	.word	0x08002ba1
 8002b5c:	08002ba1 	.word	0x08002ba1
 8002b60:	08002ba9 	.word	0x08002ba9
 8002b64:	08002ba9 	.word	0x08002ba9
 8002b68:	08002ba9 	.word	0x08002ba9
 8002b6c:	08002ba9 	.word	0x08002ba9
 8002b70:	08002ba9 	.word	0x08002ba9
 8002b74:	08002ba9 	.word	0x08002ba9

		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8002b78:	2006      	movs	r0, #6
 8002b7a:	f7fe fefd 	bl	8001978 <__NVIC_EnableIRQ>
			break;
 8002b7e:	e018      	b.n	8002bb2 <exti_config_interrupt+0x1ca>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8002b80:	2007      	movs	r0, #7
 8002b82:	f7fe fef9 	bl	8001978 <__NVIC_EnableIRQ>
			break;
 8002b86:	e014      	b.n	8002bb2 <exti_config_interrupt+0x1ca>
		}

		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8002b88:	2008      	movs	r0, #8
 8002b8a:	f7fe fef5 	bl	8001978 <__NVIC_EnableIRQ>
			break;
 8002b8e:	e010      	b.n	8002bb2 <exti_config_interrupt+0x1ca>
		}

		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8002b90:	2009      	movs	r0, #9
 8002b92:	f7fe fef1 	bl	8001978 <__NVIC_EnableIRQ>
			break;
 8002b96:	e00c      	b.n	8002bb2 <exti_config_interrupt+0x1ca>
		}

		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8002b98:	200a      	movs	r0, #10
 8002b9a:	f7fe feed 	bl	8001978 <__NVIC_EnableIRQ>
			break;
 8002b9e:	e008      	b.n	8002bb2 <exti_config_interrupt+0x1ca>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ba0:	2017      	movs	r0, #23
 8002ba2:	f7fe fee9 	bl	8001978 <__NVIC_EnableIRQ>
			break;
 8002ba6:	e004      	b.n	8002bb2 <exti_config_interrupt+0x1ca>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ba8:	2028      	movs	r0, #40	; 0x28
 8002baa:	f7fe fee5 	bl	8001978 <__NVIC_EnableIRQ>
			break;
 8002bae:	e000      	b.n	8002bb2 <exti_config_interrupt+0x1ca>
		}

		default: {
			break;
 8002bb0:	bf00      	nop
		}
		}
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <callback_ExtInt0>:


/* Definición de los callbacks de las interrupciones de los EXTI, para que además puedan ser sobreescritos */
__attribute__ ((weak)) void callback_ExtInt0(void){
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	__NOP();
 8002bc4:	bf00      	nop
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <callback_ExtInt2>:

__attribute__ ((weak)) void callback_ExtInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_ExtInt2(void){
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
	__NOP();
 8002bd4:	bf00      	nop
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <callback_ExtInt4>:

__attribute__ ((weak)) void callback_ExtInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_ExtInt4(void){
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
	__NOP();
 8002be4:	bf00      	nop
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <callback_ExtInt5>:

__attribute__ ((weak)) void callback_ExtInt5(void){
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
	__NOP();
 8002bf4:	bf00      	nop
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <callback_ExtInt6>:

__attribute__ ((weak)) void callback_ExtInt6(void){
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
	__NOP();
 8002c04:	bf00      	nop
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <callback_ExtInt7>:

__attribute__ ((weak)) void callback_ExtInt7(void){
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
	__NOP();
 8002c14:	bf00      	nop
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <callback_ExtInt8>:

__attribute__ ((weak)) void callback_ExtInt8(void){
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
	__NOP();
 8002c24:	bf00      	nop
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <callback_ExtInt9>:

__attribute__ ((weak)) void callback_ExtInt9(void){
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
	__NOP();
 8002c34:	bf00      	nop
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <callback_ExtInt10>:

__attribute__ ((weak)) void callback_ExtInt10(void){
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
	__NOP();
 8002c44:	bf00      	nop
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <callback_ExtInt11>:

__attribute__ ((weak)) void callback_ExtInt11(void){
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
	__NOP();
 8002c54:	bf00      	nop
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <callback_ExtInt12>:

__attribute__ ((weak)) void callback_ExtInt12(void){
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
	__NOP();
 8002c64:	bf00      	nop
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <callback_ExtInt13>:

__attribute__ ((weak)) void callback_ExtInt13(void){
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
	__NOP();
 8002c74:	bf00      	nop
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <callback_ExtInt14>:

__attribute__ ((weak)) void callback_ExtInt14(void){
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
	__NOP();
 8002c84:	bf00      	nop
}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <callback_ExtInt15>:

__attribute__ ((weak)) void callback_ExtInt15(void){
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
	__NOP();
 8002c94:	bf00      	nop
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <EXTI0_IRQHandler>:
 * bajando la bandera  del registro PR (Pending Register -> La bandera en este
 * registro se "setea" inmediatamente se lanza la interrupción), ejecutando
 * la función callback_ExtIntX y dando por atendido el request*/

/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <EXTI0_IRQHandler+0x24>)
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <EXTI0_IRQHandler+0x24>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4a03      	ldr	r2, [pc, #12]	; (8002cc4 <EXTI0_IRQHandler+0x24>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6153      	str	r3, [r2, #20]
		// Llamamos al callback
		callback_ExtInt0();
 8002cbc:	f7ff ff80 	bl	8002bc0 <callback_ExtInt0>
	}
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40013c00 	.word	0x40013c00

08002cc8 <EXTI1_IRQHandler>:

/* ISR de la interrupción canal 1*/
void EXTI1_IRQHandler(void){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_1 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <EXTI1_IRQHandler+0x24>)
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <EXTI1_IRQHandler+0x24>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4a03      	ldr	r2, [pc, #12]	; (8002cec <EXTI1_IRQHandler+0x24>)
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt1();
 8002ce4:	f7fe fd30 	bl	8001748 <callback_ExtInt1>
	}
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40013c00 	.word	0x40013c00

08002cf0 <EXTI2_IRQHandler>:

/* ISR de la interrupción canal 2*/
void EXTI2_IRQHandler(void){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_2 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <EXTI2_IRQHandler+0x24>)
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <EXTI2_IRQHandler+0x24>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <EXTI2_IRQHandler+0x24>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt2();
 8002d0c:	f7ff ff60 	bl	8002bd0 <callback_ExtInt2>
	}
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <EXTI3_IRQHandler>:

/* ISR de la interrupción canal 3*/
void EXTI3_IRQHandler(void){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_3 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <EXTI3_IRQHandler+0x24>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <EXTI3_IRQHandler+0x24>)
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <EXTI3_IRQHandler+0x24>)
 8002d2e:	f043 0308 	orr.w	r3, r3, #8
 8002d32:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt3();
 8002d34:	f7fe fd1c 	bl	8001770 <callback_ExtInt3>
	}
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <EXTI4_IRQHandler>:

/* ISR de la interrupción canal 4*/
void EXTI4_IRQHandler(void){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_4 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <EXTI4_IRQHandler+0x24>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <EXTI4_IRQHandler+0x24>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <EXTI4_IRQHandler+0x24>)
 8002d56:	f043 0310 	orr.w	r3, r3, #16
 8002d5a:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt4();
 8002d5c:	f7ff ff40 	bl	8002be0 <callback_ExtInt4>
	}
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0

	// Evaluamos cuál canal del EXTI se está atendiendo y llamamos la función pública callbakc_ExtIntX
	if(EXTI->PR & EXTI_PR_PR5){
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <EXTI9_5_IRQHandler+0x22>
		// Bajamos la bandera de la interrupción
		EXTI->PR |= EXTI_PR_PR5;
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002d7e:	f043 0320 	orr.w	r3, r3, #32
 8002d82:	6153      	str	r3, [r2, #20]

		callback_ExtInt5();
 8002d84:	f7ff ff34 	bl	8002bf0 <callback_ExtInt5>
	}
	else{
		__NOP();
	}

}	// Fin del EXTI9_5_IRQHandler
 8002d88:	e03c      	b.n	8002e04 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6){
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da0:	6153      	str	r3, [r2, #20]
		callback_ExtInt6();
 8002da2:	f7ff ff2d 	bl	8002c00 <callback_ExtInt6>
}	// Fin del EXTI9_5_IRQHandler
 8002da6:	e02d      	b.n	8002e04 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7){
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	6153      	str	r3, [r2, #20]
		callback_ExtInt7();
 8002dc0:	f7ff ff26 	bl	8002c10 <callback_ExtInt7>
}	// Fin del EXTI9_5_IRQHandler
 8002dc4:	e01e      	b.n	8002e04 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8){
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6153      	str	r3, [r2, #20]
		callback_ExtInt8();
 8002dde:	f7ff ff1f 	bl	8002c20 <callback_ExtInt8>
}	// Fin del EXTI9_5_IRQHandler
 8002de2:	e00f      	b.n	8002e04 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9){
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <EXTI9_5_IRQHandler+0xa0>)
 8002df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfa:	6153      	str	r3, [r2, #20]
		callback_ExtInt9();
 8002dfc:	f7ff ff18 	bl	8002c30 <callback_ExtInt9>
}	// Fin del EXTI9_5_IRQHandler
 8002e00:	e000      	b.n	8002e04 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8002e02:	bf00      	nop
}	// Fin del EXTI9_5_IRQHandler
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8002e10:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e26:	6153      	str	r3, [r2, #20]

		// Llamamos al callback
		callback_ExtInt10();
 8002e28:	f7ff ff0a 	bl	8002c40 <callback_ExtInt10>
	}
	else{
		__NOP();
	}
	
}	// Fin del EXTI15_10_IRQHandler
 8002e2c:	e04b      	b.n	8002ec6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11){
 8002e2e:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e44:	6153      	str	r3, [r2, #20]
		callback_ExtInt11();
 8002e46:	f7ff ff03 	bl	8002c50 <callback_ExtInt11>
}	// Fin del EXTI15_10_IRQHandler
 8002e4a:	e03c      	b.n	8002ec6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12){
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e62:	6153      	str	r3, [r2, #20]
		callback_ExtInt12();
 8002e64:	f7ff fefc 	bl	8002c60 <callback_ExtInt12>
}	// Fin del EXTI15_10_IRQHandler
 8002e68:	e02d      	b.n	8002ec6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13){
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e80:	6153      	str	r3, [r2, #20]
		callback_ExtInt13();
 8002e82:	f7ff fef5 	bl	8002c70 <callback_ExtInt13>
}	// Fin del EXTI15_10_IRQHandler
 8002e86:	e01e      	b.n	8002ec6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14){
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9e:	6153      	str	r3, [r2, #20]
		callback_ExtInt14();
 8002ea0:	f7ff feee 	bl	8002c80 <callback_ExtInt14>
}	// Fin del EXTI15_10_IRQHandler
 8002ea4:	e00f      	b.n	8002ec6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15){
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= EXTI_PR_PR15;
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <EXTI15_10_IRQHandler+0xc0>)
 8002eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebc:	6153      	str	r3, [r2, #20]
		callback_ExtInt15();
 8002ebe:	f7ff fee7 	bl	8002c90 <callback_ExtInt15>
}	// Fin del EXTI15_10_IRQHandler
 8002ec2:	e000      	b.n	8002ec6 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8002ec4:	bf00      	nop
}	// Fin del EXTI15_10_IRQHandler
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <gpio_Config>:
 * ese elemento específico (relacionado con el periférico RCC, se activa el
 * periférico en dicho registro), a eso llamaremos simplemente "activar el
 * periférico o activar la señal de reloj del periférico".
 */

void gpio_Config(GPIO_Handler_t *pGPIOHandler){	// Función pública
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

	/* Verificamos que el pin seleccionado es correcto */
	assert_param(IS_GPIO_PIN(pGPIOHandler->pinConfig.GPIO_PinNumber));

	// 1) Activamos el periférico (Señal de reloj)
	gpio_enable_clock_peripheral(pGPIOHandler);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f813 	bl	8002f04 <gpio_enable_clock_peripheral>

	//Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	gpio_config_mode(pGPIOHandler);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f870 	bl	8002fc4 <gpio_config_mode>

	// 3) Configurando el registro GPIOx_OTYPER
	gpio_config_output_type(pGPIOHandler);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f899 	bl	800301c <gpio_config_output_type>

	// 4) Configurando el registro GPIOx_SPEED (velocidad de salida)
	gpio_config_output_speed(pGPIOHandler);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8c0 	bl	8003070 <gpio_config_output_speed>

	// 5) Configurando el registro GPIOx_PUPDR o(pull-up, pull-dpwn o flotante)
	gpio_config_pullup_pulldown(pGPIOHandler);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8e9 	bl	80030c8 <gpio_config_pullup_pulldown>

	// 6) Configurando el registro GPIOx_ALTFN de función alternativa
	gpio_config_alternate_function(pGPIOHandler);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f912 	bl	8003120 <gpio_config_alternate_function>

} // Fin del GPIO_config
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <gpio_enable_clock_peripheral>:



/* Enable Clock Signal for specific GPIOx_Port */
void gpio_enable_clock_peripheral(GPIO_Handler_t *pGPIOHandler){	// Función privada
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

	// Verificamos que el puerto configurado si es permitido
	assert_param(IS_GPIO_ALL_INSTANCE(pGPIOHandler->pGPIOx));

	// Verificamos para GPIOA
		if(pGPIOHandler->pGPIOx == GPIOA){
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <gpio_enable_clock_peripheral+0xa4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d106      	bne.n	8002f24 <gpio_enable_clock_peripheral+0x20>
			// Escribimos 1 (SET) en la posicion correspondiente al GPIOA
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a24      	ldr	r2, [pc, #144]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOHandler->pGPIOx == GPIOH){
			// Escribimos 1 (SET) en la posicion correspondiente al GPIOH
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
		}

} // Fin función privada Config Enable Clock Peripheral
 8002f22:	e03a      	b.n	8002f9a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOB){
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <gpio_enable_clock_peripheral+0xac>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d106      	bne.n	8002f3c <gpio_enable_clock_peripheral+0x38>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002f3a:	e02e      	b.n	8002f9a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOC){
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <gpio_enable_clock_peripheral+0xb0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d106      	bne.n	8002f54 <gpio_enable_clock_peripheral+0x50>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002f52:	e022      	b.n	8002f9a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOD){
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <gpio_enable_clock_peripheral+0xb4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d106      	bne.n	8002f6c <gpio_enable_clock_peripheral+0x68>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002f6a:	e016      	b.n	8002f9a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOE){
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <gpio_enable_clock_peripheral+0xb8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d106      	bne.n	8002f84 <gpio_enable_clock_peripheral+0x80>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f7c:	f043 0310 	orr.w	r3, r3, #16
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002f82:	e00a      	b.n	8002f9a <gpio_enable_clock_peripheral+0x96>
		else if(pGPIOHandler->pGPIOx == GPIOH){
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <gpio_enable_clock_peripheral+0xbc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d105      	bne.n	8002f9a <gpio_enable_clock_peripheral+0x96>
			RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a06      	ldr	r2, [pc, #24]	; (8002fac <gpio_enable_clock_peripheral+0xa8>)
 8002f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
} // Fin función privada Config Enable Clock Peripheral
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40021c00 	.word	0x40021c00

08002fc4 <gpio_config_mode>:
 * - Input
 * - Output
 * - Analog
 * - Alternate function
 */
void gpio_config_mode(GPIO_Handler_t *pGPIOHandler){	// Función privada
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]

	/*
	 * Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda
	 * ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinMode << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	795b      	ldrb	r3, [r3, #5]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	791b      	ldrb	r3, [r3, #4]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro
	 * (debemos escribir 0b00), para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	791b      	ldrb	r3, [r3, #4]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2103      	movs	r1, #3
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

	/* Cargamos a auxConfig en el registro MODER */
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <gpio_config_output_type>:
/*
 * Configures which type of output the PinX will use:
 * - Push-Pull (Entrada-Salida)
 * - OpenDrain (Alta Impedancia)
 */
void gpio_config_output_type(GPIO_Handler_t *pGPIOHandler){	//Función privada
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputType << pGPIOHandler->pinConfig.GPIO_PinNumber);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7a1b      	ldrb	r3, [r3, #8]
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	791b      	ldrb	r3, [r3, #4]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->pinConfig.GPIO_PinNumber);	// SET = 0b1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	791b      	ldrb	r3, [r3, #4]
 8003042:	4619      	mov	r1, r3
 8003044:	2301      	movs	r3, #1
 8003046:	408b      	lsls	r3, r1
 8003048:	43db      	mvns	r3, r3
 800304a:	4619      	mov	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	400a      	ands	r2, r1
 8003052:	605a      	str	r2, [r3, #4]

	/* Cargamos el resultado sobre el registro OTYPER */
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]

}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <gpio_config_output_speed>:
 * - Low
 * - Medium
 * - Fast
 * - HighSpeed
 */
void gpio_config_output_speed(GPIO_Handler_t *pGPIOHandler){	//Función privada
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinOutputSpeed << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	799b      	ldrb	r3, [r3, #6]
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	791b      	ldrb	r3, [r3, #4]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	791b      	ldrb	r3, [r3, #4]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2103      	movs	r1, #3
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	4619      	mov	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	400a      	ands	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]

	/* Cargamos el resultado sobre el registro OSPEEDR */
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]

}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <gpio_config_pullup_pulldown>:

/*
 * Turns ON/OFF the pull-up pull-down resistor for each PinX in selected GPIO Port
 */
void gpio_config_pullup_pulldown(GPIO_Handler_t *pGPIOHandler){	//Función privada
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

	uint32_t auxConfig = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

	/*
	 * Leemos la config, moviendo "PinNumber" veces hacia la izquierda
	 * (shift left) y todo eso lo cargamos en la variable auxConfig
	 */
	auxConfig = (pGPIOHandler->pinConfig.GPIO_PinPuPdControl << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	79db      	ldrb	r3, [r3, #7]
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	791b      	ldrb	r3, [r3, #4]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	60fb      	str	r3, [r7, #12]

	/*
	 * Limpiamos la congifuración del PIN, para lo cual aplicamos una máscara y una operación bitwise AND
	 */
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->pinConfig.GPIO_PinNumber);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	791b      	ldrb	r3, [r3, #4]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2103      	movs	r1, #3
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	4619      	mov	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	400a      	ands	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

	/* Cargamos el resultado sobre el registro OTYPER */
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <gpio_config_alternate_function>:

/*
 * Allows to configure other functions (more specialized) on the selected PinX
 * (Revisar Tabla 8 del Datasheet del STM32F411)
 */
void gpio_config_alternate_function(GPIO_Handler_t *pGPIOHandler){	//Función privada
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

	uint32_t auxPosition = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]

	if(pGPIOHandler->pinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	795b      	ldrb	r3, [r3, #5]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d143      	bne.n	80031bc <gpio_config_alternate_function+0x9c>

		// Seleccionamos primero si se puede utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->pinConfig.GPIO_PinNumber < 8){
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	791b      	ldrb	r3, [r3, #4]
 8003138:	2b07      	cmp	r3, #7
 800313a:	d81f      	bhi.n	800317c <gpio_config_alternate_function+0x5c>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * (pGPIOHandler->pinConfig.GPIO_PinNumber);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	60fb      	str	r3, [r7, #12]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	210f      	movs	r1, #15
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	4619      	mov	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	400a      	ands	r2, r1
 800315c:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7a5b      	ldrb	r3, [r3, #9]
 8003168:	4619      	mov	r1, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	4619      	mov	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 800317a:	e01f      	b.n	80031bc <gpio_config_alternate_function+0x9c>
			auxPosition = 4 * (pGPIOHandler->pinConfig.GPIO_PinNumber -8);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	791b      	ldrb	r3, [r3, #4]
 8003180:	3b08      	subs	r3, #8
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	60fb      	str	r3, [r7, #12]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318c:	210f      	movs	r1, #15
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4619      	mov	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	400a      	ands	r2, r1
 800319e:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->pinConfig.GPIO_PinAltFunMode << auxPosition);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7a5b      	ldrb	r3, [r3, #9]
 80031aa:	4619      	mov	r1, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <gpio_WritePin>:

/*
 * Función utilizada para cambiar de estado el pin entregado en el handler,
 * asignando el valor entregado en la variable newState
 */
void gpio_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){	// Función pública
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]

	/* Verificamos si la acción que deseamos realizar es permitida */
	assert_param(IS_GPIO_PIN_ACTION(newState));

	/* Limpiams la posición que deseamos */
	if(newState == SET){
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10d      	bne.n	80031f6 <gpio_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->pinConfig.GPIO_PinNumber);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	791b      	ldrb	r3, [r3, #4]
 80031e4:	4619      	mov	r1, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	408b      	lsls	r3, r1
 80031ea:	4619      	mov	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
	}

}
 80031f4:	e00d      	b.n	8003212 <gpio_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->pinConfig.GPIO_PinNumber + 16));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	3310      	adds	r3, #16
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	4619      	mov	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	619a      	str	r2, [r3, #24]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <gpio_ReadPin>:


/*
 * Función para leer el estado de un pin específico
 */
uint32_t gpio_ReadPin(GPIO_Handler_t *pPinHandler){
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]

	// Creamos unas variable auxiliares para la máscara y para devolver el valor leído del PinX
	uint32_t pinValue = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]

	/*
	 * Cargamos una variable con el valor del registro IDR del periférico GPIOx
	 */
	pinValue = pPinHandler->pGPIOx->IDR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	60fb      	str	r3, [r7, #12]

	/*
	 * - Creamos una máscara para obtener un binario que contiene únicamente el valor del pin que nos interesa (PinX).
	 * - Hacemos un AND bitwise entre el valor del registro IDR y la máscara para extraer el valor del PinX
	 */
	mask = SET << pPinHandler->pinConfig.GPIO_PinNumber;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	791b      	ldrb	r3, [r3, #4]
 800323a:	461a      	mov	r2, r3
 800323c:	2301      	movs	r3, #1
 800323e:	4093      	lsls	r3, r2
 8003240:	60bb      	str	r3, [r7, #8]
	pinValue &= mask;
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
	/*
	 * Desplazamos el valor del bit del pin que acabamos obtener, "PinNumber" veces a la derecha para que quede en
	 * el bit 0, y lo asignamos a la variable pinValue
	 */

	pinValue >>= pPinHandler->pinConfig.GPIO_PinNumber;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	791b      	ldrb	r3, [r3, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	40d3      	lsrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

	/* Devolvemos el valor leído del PinX */
	return (uint8_t)pinValue;	// Se hace un casting de la variable pinValue de 32-bits a 8 bits
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	b2db      	uxtb	r3, r3

}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <gpio_TooglePin>:

/* =============== PREGUNTA 2 DE LA PARTE_B DE LA TAREA_1 ================
 *
 * Función para cambiar el estado de un PinX, al estado opuesto del actual
 */
void gpio_TooglePin(GPIO_Handler_t *pPinHandler){
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
	// Definimos una variable auxiliar para guardar el estado del PinX
	uint8_t auxVal = 0; // Se define de 8-bits para poder utilizarla como parámetro en la función gpio_WritePin, sin que hayan truncamientos
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
	/*
	 * Leemos el estado del PinX y aplicamos la operación booleana BANG, que devuelve el valor binario justamente
	 * contrario al estado actual (0b1 si el estado del PinX es 0b0, 0b0 si el estado del PinX es 0b1).
	 * Cargamos el estado "negado" en la variable auxVal
	 */
	auxVal = !gpio_ReadPin(pPinHandler);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffd3 	bl	800321e <gpio_ReadPin>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	73fb      	strb	r3, [r7, #15]

	/* Se cambia el estado del PinX al estado opuesto */
	gpio_WritePin(pPinHandler, auxVal);
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff9c 	bl	80031c8 <gpio_WritePin>

}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <PLL_config>:
void PLL_reFactorM(PLL_Config_t *ptrPLL);
void PLL_reFactorN(PLL_Config_t *ptrPLL);
void PLL_reFactorP(PLL_Config_t *ptrPLL);
void restartBits(PLL_Config_t *ptrPLL);

void PLL_config(PLL_Config_t *ptrPLL){
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

	actual_Frequency = 16;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <PLL_config+0x48>)
 80032a2:	2210      	movs	r2, #16
 80032a4:	701a      	strb	r2, [r3, #0]

	/* Asegurar que el PLL está apagado para configuración */
	PLL_DriverOnOff(ptrPLL,ptrPLL->state);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	799b      	ldrb	r3, [r3, #6]
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f819 	bl	80032e4 <PLL_DriverOnOff>

	/* Selección de reloj de entrada para PLL */
	PLL_chooseClock(ptrPLL);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f834 	bl	8003320 <PLL_chooseClock>

	/* División de reloj principal para entrar a VCO */
	PLL_reFactorM(ptrPLL);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f84d 	bl	8003358 <PLL_reFactorM>

	/* Multiplicación de salida VCO (2MHz) a 200MHz */
	PLL_reFactorN(ptrPLL);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f87a 	bl	80033b8 <PLL_reFactorN>

	/* División de salida para sistema principal (200MHz) a 100MHz */
	/* Reinicio de bits */
	restartBits(ptrPLL);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8c3 	bl	8003450 <restartBits>

	/*Aplicamos el valor final para P*/
	PLL_reFactorP(ptrPLL);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8a4 	bl	8003418 <PLL_reFactorP>

	/* Guardar frecuencia final configurada */
	ptrPLL->final_Frequency = actual_Frequency;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <PLL_config+0x48>)
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	715a      	strb	r2, [r3, #5]
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200004ec 	.word	0x200004ec

080032e4 <PLL_DriverOnOff>:


/* Asegurar que el PLL está apagado para configuración */
void PLL_DriverOnOff(PLL_Config_t *ptrPLL,uint8_t state){
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
	if(state){
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <PLL_DriverOnOff+0x20>
		RCC->CR |= RCC_CR_PLLON;
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <PLL_DriverOnOff+0x38>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <PLL_DriverOnOff+0x38>)
 80032fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003300:	6013      	str	r3, [r2, #0]
	}
	else{
		RCC->CR &= ~RCC_CR_PLLON;
	}
}
 8003302:	e005      	b.n	8003310 <PLL_DriverOnOff+0x2c>
		RCC->CR &= ~RCC_CR_PLLON;
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <PLL_DriverOnOff+0x38>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <PLL_DriverOnOff+0x38>)
 800330a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40023800 	.word	0x40023800

08003320 <PLL_chooseClock>:


/* Selección de reloj de entrada para PLL */
void PLL_chooseClock(PLL_Config_t *ptrPLL){
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	if(ptrPLL->input_Clock == HSI_CLOCK){
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <PLL_chooseClock+0x1c>
		RCC->PLLCFGR &= RCC_PLLCFGR_PLLSRC_HSI;
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <PLL_chooseClock+0x34>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <PLL_chooseClock+0x34>)
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
	} else {
		RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
	}
}
 800333a:	e005      	b.n	8003348 <PLL_chooseClock+0x28>
		RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <PLL_chooseClock+0x34>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <PLL_chooseClock+0x34>)
 8003342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003346:	6053      	str	r3, [r2, #4]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40023800 	.word	0x40023800

08003358 <PLL_reFactorM>:


/* División de reloj principal para entrar a VCO */
void PLL_reFactorM(PLL_Config_t *ptrPLL){
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

	/* Reinicio de bits en divisor /M*/
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <PLL_reFactorM+0x58>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <PLL_reFactorM+0x58>)
 8003366:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800336a:	6053      	str	r3, [r2, #4]

	/* Divisón por M */
	actual_Frequency = actual_Frequency/(ptrPLL->m_Factor);
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <PLL_reFactorM+0x5c>)
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <PLL_reFactorM+0x5c>)
 800337c:	701a      	strb	r2, [r3, #0]

	// No configurar si supera los límites
	if(actual_Frequency < 1 || 2 < actual_Frequency){
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <PLL_reFactorM+0x5c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <PLL_reFactorM+0x36>
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <PLL_reFactorM+0x5c>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <PLL_reFactorM+0x3a>
		while(1){
			// Supera los límites
			__NOP();
 800338e:	bf00      	nop
 8003390:	e7fd      	b.n	800338e <PLL_reFactorM+0x36>
		}
	}

	// Configurar factor M
	RCC->PLLCFGR |= (ptrPLL->m_Factor << RCC_PLLCFGR_PLLM_Pos);
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <PLL_reFactorM+0x58>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	7852      	ldrb	r2, [r2, #1]
 800339a:	4611      	mov	r1, r2
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <PLL_reFactorM+0x58>)
 800339e:	430b      	orrs	r3, r1
 80033a0:	6053      	str	r3, [r2, #4]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	200004ec 	.word	0x200004ec

080033b8 <PLL_reFactorN>:


/* Multiplicación de salida VCO (2MHz) a 200MHz */
void PLL_reFactorN(PLL_Config_t *ptrPLL){
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

	/* Reinicio de bits xN */
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <PLL_reFactorN+0x58>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a12      	ldr	r2, [pc, #72]	; (8003410 <PLL_reFactorN+0x58>)
 80033c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ce:	6053      	str	r3, [r2, #4]

	/* Multiplicación por N */
	actual_Frequency = actual_Frequency * (ptrPLL->n_Factor);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	885b      	ldrh	r3, [r3, #2]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <PLL_reFactorN+0x5c>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	fb12 f303 	smulbb	r3, r2, r3
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <PLL_reFactorN+0x5c>)
 80033e2:	701a      	strb	r2, [r3, #0]

	// No configurar si supera los límites
	if(actual_Frequency < 100 || 432 < actual_Frequency){
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <PLL_reFactorN+0x5c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b63      	cmp	r3, #99	; 0x63
 80033ea:	d801      	bhi.n	80033f0 <PLL_reFactorN+0x38>
		while(1){
			// Supera los límites
			__NOP();
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <PLL_reFactorN+0x34>
		}
	}
	// Configurar factor N
	RCC->PLLCFGR |= (ptrPLL->n_Factor << RCC_PLLCFGR_PLLN_Pos);
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <PLL_reFactorN+0x58>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	8852      	ldrh	r2, [r2, #2]
 80033f8:	0192      	lsls	r2, r2, #6
 80033fa:	4611      	mov	r1, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <PLL_reFactorN+0x58>)
 80033fe:	430b      	orrs	r3, r1
 8003400:	6053      	str	r3, [r2, #4]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	200004ec 	.word	0x200004ec

08003418 <PLL_reFactorP>:


/*Aplicamos el valor final para P*/
void PLL_reFactorP(PLL_Config_t *ptrPLL){
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

	/* División por P */
	actual_Frequency = actual_Frequency/(ptrPLL->p_Factor);
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <PLL_reFactorP+0x34>)
 8003422:	781a      	ldrb	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	791b      	ldrb	r3, [r3, #4]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <PLL_reFactorP+0x34>)
 8003430:	701a      	strb	r2, [r3, #0]
	// No configurar si supera los límites
	if(actual_Frequency > 100){
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <PLL_reFactorP+0x34>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <PLL_reFactorP+0x26>
		while(1){
			// Supera los límites
			__NOP();
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <PLL_reFactorP+0x22>
		}
	}

}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	200004ec 	.word	0x200004ec

08003450 <restartBits>:


/* División de salida para sistema principal (200MHz) a 100MHz */
/* Reinicio de bits */
void restartBits(PLL_Config_t *ptrPLL){
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8003458:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <restartBits+0x88>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <restartBits+0x88>)
 800345e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003462:	6053      	str	r3, [r2, #4]

	switch(ptrPLL->p_Factor){
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	791b      	ldrb	r3, [r3, #4]
 8003468:	3b02      	subs	r3, #2
 800346a:	2b06      	cmp	r3, #6
 800346c:	d82c      	bhi.n	80034c8 <restartBits+0x78>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <restartBits+0x24>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003491 	.word	0x08003491
 8003478:	080034c9 	.word	0x080034c9
 800347c:	0800349f 	.word	0x0800349f
 8003480:	080034c9 	.word	0x080034c9
 8003484:	080034ad 	.word	0x080034ad
 8003488:	080034c9 	.word	0x080034c9
 800348c:	080034bb 	.word	0x080034bb
	case 2:{
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <restartBits+0x88>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <restartBits+0x88>)
 8003496:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800349a:	6053      	str	r3, [r2, #4]
		break;
 800349c:	e016      	b.n	80034cc <restartBits+0x7c>
	}
	case 4:{
		RCC->PLLCFGR |= 1 << RCC_PLLCFGR_PLLP_Pos;
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <restartBits+0x88>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <restartBits+0x88>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6053      	str	r3, [r2, #4]
		break;
 80034aa:	e00f      	b.n	80034cc <restartBits+0x7c>
	}
	case 6:{
		RCC->PLLCFGR |= 2 << RCC_PLLCFGR_PLLP_Pos;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <restartBits+0x88>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <restartBits+0x88>)
 80034b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b6:	6053      	str	r3, [r2, #4]
		break;
 80034b8:	e008      	b.n	80034cc <restartBits+0x7c>
	}
	case 8:{
		RCC->PLLCFGR |= 3 << RCC_PLLCFGR_PLLP_Pos;
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <restartBits+0x88>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <restartBits+0x88>)
 80034c0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80034c4:	6053      	str	r3, [r2, #4]
		break;
 80034c6:	e001      	b.n	80034cc <restartBits+0x7c>
	}
	default:{
		while(1){
			// Worong P factor
			__NOP();
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <restartBits+0x78>
		}
	}
	}
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40023800 	.word	0x40023800

080034dc <PLL_ON_forSystem>:
	}
}


// Sistema para encender PLL a configuración seleccionada
void PLL_ON_forSystem(PLL_Config_t *ptrPLL){
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

	/* Configuración de memoria flash y buses para nueva frecuencia */
	FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk; // Reset flash
 80034e4:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a36      	ldr	r2, [pc, #216]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 80034ea:	f023 0307 	bic.w	r3, r3, #7
 80034ee:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // Reset APB1
 80034f0:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <PLL_ON_forSystem+0xec>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a34      	ldr	r2, [pc, #208]	; (80035c8 <PLL_ON_forSystem+0xec>)
 80034f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // Reset APB2
 80034fc:	4b32      	ldr	r3, [pc, #200]	; (80035c8 <PLL_ON_forSystem+0xec>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a31      	ldr	r2, [pc, #196]	; (80035c8 <PLL_ON_forSystem+0xec>)
 8003502:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003506:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_HPRE; // Reset AHB
 8003508:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <PLL_ON_forSystem+0xec>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a2e      	ldr	r2, [pc, #184]	; (80035c8 <PLL_ON_forSystem+0xec>)
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	6093      	str	r3, [r2, #8]

	if(ptrPLL->final_Frequency <= 30){
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	795b      	ldrb	r3, [r3, #5]
 8003518:	2b1e      	cmp	r3, #30
 800351a:	d806      	bhi.n	800352a <PLL_ON_forSystem+0x4e>
		FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk;
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a28      	ldr	r2, [pc, #160]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 8003522:	f023 0307 	bic.w	r3, r3, #7
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e031      	b.n	800358e <PLL_ON_forSystem+0xb2>
	}
	else if (ptrPLL->final_Frequency <= 64){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	795b      	ldrb	r3, [r3, #5]
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d810      	bhi.n	8003554 <PLL_ON_forSystem+0x78>
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6013      	str	r3, [r2, #0]

		if(ptrPLL->final_Frequency > 50){
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	795b      	ldrb	r3, [r3, #5]
 8003542:	2b32      	cmp	r3, #50	; 0x32
 8003544:	d923      	bls.n	800358e <PLL_ON_forSystem+0xb2>
			/* División mínima para no superar limites del bus */
			RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <PLL_ON_forSystem+0xec>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <PLL_ON_forSystem+0xec>)
 800354c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	e01c      	b.n	800358e <PLL_ON_forSystem+0xb2>
		}
	}
	else if (ptrPLL->final_Frequency <= 90){
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	795b      	ldrb	r3, [r3, #5]
 8003558:	2b5a      	cmp	r3, #90	; 0x5a
 800355a:	d80c      	bhi.n	8003576 <PLL_ON_forSystem+0x9a>
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	6013      	str	r3, [r2, #0]
		/* División mínima para no superar limites del bus */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <PLL_ON_forSystem+0xec>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <PLL_ON_forSystem+0xec>)
 800356e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003572:	6093      	str	r3, [r2, #8]
 8003574:	e00b      	b.n	800358e <PLL_ON_forSystem+0xb2>
	}
	else {
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <PLL_ON_forSystem+0xe8>)
 800357c:	f043 0303 	orr.w	r3, r3, #3
 8003580:	6013      	str	r3, [r2, #0]
		/* División mínima para no superar limites del bus */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <PLL_ON_forSystem+0xec>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <PLL_ON_forSystem+0xec>)
 8003588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800358c:	6093      	str	r3, [r2, #8]
	}

	// Endender señal de PLL
	RCC->CR |= RCC_CR_PLLON;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <PLL_ON_forSystem+0xec>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <PLL_ON_forSystem+0xec>)
 8003594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003598:	6013      	str	r3, [r2, #0]


	/* Confirmación de PLL listo */
	while(!(RCC->CR & RCC_CR_PLLRDY)){
 800359a:	e000      	b.n	800359e <PLL_ON_forSystem+0xc2>
		__NOP();
 800359c:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY)){
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <PLL_ON_forSystem+0xec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f8      	beq.n	800359c <PLL_ON_forSystem+0xc0>
	}

	/* Configuración multiplexor que envia reloj a todo el hardware */
	/* Enviar señal PLL */
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <PLL_ON_forSystem+0xec>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <PLL_ON_forSystem+0xec>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6093      	str	r3, [r2, #8]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40023c00 	.word	0x40023c00
 80035c8:	40023800 	.word	0x40023800

080035cc <systemClock_100MHz>:
	/* Enviar señal desde HSI */
	RCC->CFGR &= RCC_CFGR_SWS_HSI;
}


void systemClock_100MHz(PLL_Config_t *ptrPLL){
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

	ptrPLL->input_Clock = HSI_CLOCK;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
	ptrPLL->m_Factor = 8;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2208      	movs	r2, #8
 80035de:	705a      	strb	r2, [r3, #1]
	ptrPLL->n_Factor = 100;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2264      	movs	r2, #100	; 0x64
 80035e4:	805a      	strh	r2, [r3, #2]
	ptrPLL->p_Factor = 2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	711a      	strb	r2, [r3, #4]
	PLL_config(ptrPLL); // Apaga y configura PLL
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fe53 	bl	8003298 <PLL_config>

	PLL_ON_forSystem(ptrPLL);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ff72 	bl	80034dc <PLL_ON_forSystem>
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <systemClock_Output>:

	PLL_ON_forSystem(ptrPLL);
}


void systemClock_Output(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0

	GPIO_Handler_t ptrC9;
	/* Encendido GPIO A8 */
	ptrC9.pGPIOx = GPIOC;
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <systemClock_Output+0x4c>)
 8003608:	607b      	str	r3, [r7, #4]
	ptrC9.pinConfig.GPIO_PinNumber = PIN_9;
 800360a:	2309      	movs	r3, #9
 800360c:	723b      	strb	r3, [r7, #8]
	ptrC9.pinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800360e:	2302      	movs	r3, #2
 8003610:	727b      	strb	r3, [r7, #9]
	ptrC9.pinConfig.GPIO_PinAltFunMode = AF0;
 8003612:	2300      	movs	r3, #0
 8003614:	737b      	strb	r3, [r7, #13]
	gpio_Config(&ptrC9);
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fc59 	bl	8002ed0 <gpio_Config>

	/* Configuración prescaler de MCO2 SysCLK/5 */
	RCC->CFGR &= ~RCC_CFGR_MCO2PRE_Msk;
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <systemClock_Output+0x50>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <systemClock_Output+0x50>)
 8003624:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003628:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b111 << RCC_CFGR_MCO2PRE_Pos);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <systemClock_Output+0x50>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <systemClock_Output+0x50>)
 8003630:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003634:	6093      	str	r3, [r2, #8]

	/* Encendido señal para lectura MCO2 */
	RCC->CFGR |= RCC_CFGR_MCO2;
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <systemClock_Output+0x50>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <systemClock_Output+0x50>)
 800363c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003640:	6093      	str	r3, [r2, #8]

}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40020800 	.word	0x40020800
 8003650:	40023800 	.word	0x40023800

08003654 <pwm_Config>:


/*
 * Función para cargar las configuraciones desde el Handler del PWM
 */
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del Timer requerido */
	timer_enable_clock_peripheral(ptrPwmHandler);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8af 	bl	80037c0 <timer_enable_clock_peripheral>

	/* 2. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9f0 	bl	8003a48 <setFrequency>

	/* 3. Cargamos el valor del dutty-Cycle*/
	setDutyCycle(ptrPwmHandler);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fa01 	bl	8003a70 <setDutyCycle>

	/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */

	// Configruamos el contador en Up-Count
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0210 	bic.w	r2, r2, #16
 800367c:	601a      	str	r2, [r3, #0]

	// Cargamos el límite del contador (periodo) TIMx -> ARR
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	899a      	ldrh	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
	 *
	 * 5. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 6. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	791b      	ldrb	r3, [r3, #4]
 800368c:	2b03      	cmp	r3, #3
 800368e:	f200 808f 	bhi.w	80037b0 <pwm_Config+0x15c>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <pwm_Config+0x44>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036a9 	.word	0x080036a9
 800369c:	080036eb 	.word	0x080036eb
 80036a0:	0800372d 	.word	0x0800372d
 80036a4:	0800376f 	.word	0x0800376f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0203 	bic.w	r2, r2, #3
 80036b6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1M; // Limpiamos el registro primero
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036c6:	619a      	str	r2, [r3, #24]

		/* Configuramos el PWM en mode 1, donde el contador aumenta hasta el valor ARR,
		 * y la señal está en alto (1), y se pone en bajo cuando se alcanza el valor del CCR
		 */
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos); // PWM - mode 1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80036d6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0208 	orr.w	r2, r2, #8
 80036e6:	619a      	str	r2, [r3, #24]

		break;
 80036e8:	e063      	b.n	80037b2 <pwm_Config+0x15e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036f8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2M; // Limpiamos el registro primero
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003708:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos); // PWM - mode 1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003718:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003728:	619a      	str	r2, [r3, #24]
		break;
 800372a:	e042      	b.n	80037b2 <pwm_Config+0x15e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0203 	bic.w	r2, r2, #3
 800373a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3M; // Limpiamos el registro primero
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800374a:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos); // PWM - mode 1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800375a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	61da      	str	r2, [r3, #28]
		break;
 800376c:	e021      	b.n	80037b2 <pwm_Config+0x15e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800377c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4M; // Limpiamos el registro primero
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800378c:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos); // PWM - mode 1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800379c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ac:	61da      	str	r2, [r3, #28]
		break;
 80037ae:	e000      	b.n	80037b2 <pwm_Config+0x15e>
	}

	default:{
		break;
 80037b0:	bf00      	nop
	}

	} //fin del switch-case

	/* 7. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f89a 	bl	80038ec <enableOutput>


} //Fin de la función de configuración
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <timer_enable_clock_peripheral>:


/* Función para activar la señal de reloj del Timer */
void timer_enable_clock_peripheral(PWM_Handler_t *ptrPwmHandler){
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	  *
	  * ===== TIMERS 32 BITS =====
	  * TIM2 - TIM5
	  * */

	 if(ptrPwmHandler->ptrTIMx == TIM2){
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d106      	bne.n	80037e0 <timer_enable_clock_peripheral+0x20>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80037d2:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
	 }
	 else{
		 __NOP();
	 }
 } // Fin activar señal reloj Timers
 80037de:	e048      	b.n	8003872 <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM3){
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a27      	ldr	r2, [pc, #156]	; (8003884 <timer_enable_clock_peripheral+0xc4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d106      	bne.n	80037f8 <timer_enable_clock_peripheral+0x38>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80037ea:	4b25      	ldr	r3, [pc, #148]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a24      	ldr	r2, [pc, #144]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 } // Fin activar señal reloj Timers
 80037f6:	e03c      	b.n	8003872 <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM4){
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <timer_enable_clock_peripheral+0xc8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d106      	bne.n	8003810 <timer_enable_clock_peripheral+0x50>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 } // Fin activar señal reloj Timers
 800380e:	e030      	b.n	8003872 <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM5){
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <timer_enable_clock_peripheral+0xcc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d106      	bne.n	8003828 <timer_enable_clock_peripheral+0x68>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a18      	ldr	r2, [pc, #96]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	6413      	str	r3, [r2, #64]	; 0x40
 } // Fin activar señal reloj Timers
 8003826:	e024      	b.n	8003872 <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM9){
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <timer_enable_clock_peripheral+0xd0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d106      	bne.n	8003840 <timer_enable_clock_peripheral+0x80>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 } // Fin activar señal reloj Timers
 800383e:	e018      	b.n	8003872 <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM10){
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <timer_enable_clock_peripheral+0xd4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d106      	bne.n	8003858 <timer_enable_clock_peripheral+0x98>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 } // Fin activar señal reloj Timers
 8003856:	e00c      	b.n	8003872 <timer_enable_clock_peripheral+0xb2>
	 else if(ptrPwmHandler->ptrTIMx == TIM11){
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <timer_enable_clock_peripheral+0xd8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d106      	bne.n	8003870 <timer_enable_clock_peripheral+0xb0>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <timer_enable_clock_peripheral+0xc0>)
 8003868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 } // Fin activar señal reloj Timers
 800386e:	e000      	b.n	8003872 <timer_enable_clock_peripheral+0xb2>
		 __NOP();
 8003870:	bf00      	nop
 } // Fin activar señal reloj Timers
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <startPwmSignal>:


/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	// Limpiamos el contador
	ptrPwmHandler->ptrTIMx->CNT = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2200      	movs	r2, #0
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

	// Activamos el Counter del Timer, el cual activa también el PWM
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <stopPwmSignal>:


/* Función para desactivar el Timer y detener todo el módulo PWM*/
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

	// Desactiva el Counter del Timer, y así mismo el módulo PWM
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <enableOutput>:


/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	791b      	ldrb	r3, [r3, #4]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d82f      	bhi.n	800395c <enableOutput+0x70>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <enableOutput+0x18>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003915 	.word	0x08003915
 8003908:	08003927 	.word	0x08003927
 800390c:	08003939 	.word	0x08003939
 8003910:	0800394b 	.word	0x0800394b
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	621a      	str	r2, [r3, #32]
		break;
 8003924:	e01b      	b.n	800395e <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0210 	orr.w	r2, r2, #16
 8003934:	621a      	str	r2, [r3, #32]
		break;
 8003936:	e012      	b.n	800395e <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003946:	621a      	str	r2, [r3, #32]
		break;
 8003948:	e009      	b.n	800395e <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003958:	621a      	str	r2, [r3, #32]
		break;
 800395a:	e000      	b.n	800395e <enableOutput+0x72>
	}

	default: {
		break;
 800395c:	bf00      	nop
	}
	}

} // Fin de la función enableOutput()
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop

0800396c <selectPolarity>:

/*
 * Esta funcion modifica la polaridad del PWM, es decir, el "tiempo activo" es una señal LOW,
 * y el "tiempo inactivo" es una señal HIGH. Esto significa que se invierte la señal del PWM.
 */
void selectPolarity(PWM_Handler_t *ptrPwmHandler){
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

	// Miramos cuál Timer se está utilizando
	switch(ptrPwmHandler->config.channel){
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	791b      	ldrb	r3, [r3, #4]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d85f      	bhi.n	8003a3c <selectPolarity+0xd0>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <selectPolarity+0x18>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	08003995 	.word	0x08003995
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039e9 	.word	0x080039e9
 8003990:	08003a13 	.word	0x08003a13
	case PWM_CHANNEL_1:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	7c5b      	ldrb	r3, [r3, #17]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <selectPolarity+0x42>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a1a      	ldr	r2, [r3, #32]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0202 	bic.w	r2, r2, #2
 80039aa:	621a      	str	r2, [r3, #32]
 80039ac:	e007      	b.n	80039be <selectPolarity+0x52>
		}
		else{
			//Configuramos el registro para configurar la polaridad inversa del PWM
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0202 	orr.w	r2, r2, #2
 80039bc:	621a      	str	r2, [r3, #32]
		}
	}
	case PWM_CHANNEL_2:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7c5b      	ldrb	r3, [r3, #17]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <selectPolarity+0x6c>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0220 	bic.w	r2, r2, #32
 80039d4:	621a      	str	r2, [r3, #32]
 80039d6:	e007      	b.n	80039e8 <selectPolarity+0x7c>
		}
		else{
			//Configuramos el registro para configurar la polaridad inversa del PWM
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0220 	orr.w	r2, r2, #32
 80039e6:	621a      	str	r2, [r3, #32]
		}
	}
	case PWM_CHANNEL_3:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7c5b      	ldrb	r3, [r3, #17]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <selectPolarity+0x96>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039fe:	621a      	str	r2, [r3, #32]
 8003a00:	e007      	b.n	8003a12 <selectPolarity+0xa6>
		}
		else{
			//Configuramos el registro para configurar la polaridad inversa del PWM
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a10:	621a      	str	r2, [r3, #32]
		}
	}
	case PWM_CHANNEL_4:{
		// Verificamos la polaridad seleccionada
		if(ptrPwmHandler->config.polarity == PWM_POLARITY_DIRECT){
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7c5b      	ldrb	r3, [r3, #17]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <selectPolarity+0xc0>
			// Configuramos el registro correspondiente para configurar polaridad directa (Modo normal de la señal)
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a28:	621a      	str	r2, [r3, #32]
		}
	}

	}// Fin switch case

}// Fin funcion de seleccion de polaridad
 8003a2a:	e007      	b.n	8003a3c <selectPolarity+0xd0>
			ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a3a:	621a      	str	r2, [r3, #32]
}// Fin funcion de seleccion de polaridad
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ms) a la cual
	// se incrementa el Timer. (Define la escala de tiempo. 1ms -> PSC = 16000 -> Signal Clock = 16 MHz
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;	// Determina un valor de referencia para el tiempo
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6892      	ldr	r2, [r2, #8]
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;	// Determina cuántas unidades de tiempo pasan (Periodo)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	899a      	ldrh	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c

	/*
	 * El producto PSC * ARR determina el periodo del PWM
	 */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <setDutyCycle>:


/* El valor del dutty es una fracción del valor del ARR.
 * Se puede determinar porcentualmente como ( CCRx / ARR * 100 )
 */
void setDutyCycle(PWM_Handler_t *ptrPwmHandler){
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	791b      	ldrb	r3, [r3, #4]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d84f      	bhi.n	8003b20 <setDutyCycle+0xb0>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <setDutyCycle+0x18>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003abb 	.word	0x08003abb
 8003a90:	08003add 	.word	0x08003add
 8003a94:	08003aff 	.word	0x08003aff
	case PWM_CHANNEL_1:{
		// Cargamos el valor del Duty Cycle en el registro CCR1
		ptrPwmHandler->ptrTIMx->CCR1 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7c1b      	ldrb	r3, [r3, #16]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	899b      	ldrh	r3, [r3, #12]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	4a22      	ldr	r2, [pc, #136]	; (8003b30 <setDutyCycle+0xc0>)
 8003aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8003aac:	1152      	asrs	r2, r2, #5
 8003aae:	17db      	asrs	r3, r3, #31
 8003ab0:	1ad2      	subs	r2, r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003ab8:	e033      	b.n	8003b22 <setDutyCycle+0xb2>
	}

	case PWM_CHANNEL_2:{
		// Cargamos el valor del Duty Cycle en el registro CCR2
		ptrPwmHandler->ptrTIMx->CCR2 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7c1b      	ldrb	r3, [r3, #16]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	899b      	ldrh	r3, [r3, #12]
 8003ac4:	fb02 f303 	mul.w	r3, r2, r3
 8003ac8:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <setDutyCycle+0xc0>)
 8003aca:	fb82 1203 	smull	r1, r2, r2, r3
 8003ace:	1152      	asrs	r2, r2, #5
 8003ad0:	17db      	asrs	r3, r3, #31
 8003ad2:	1ad2      	subs	r2, r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003ada:	e022      	b.n	8003b22 <setDutyCycle+0xb2>
	}

	case PWM_CHANNEL_3:{
		// Cargamos el valor del Duty Cycle en el registro CCR3
		ptrPwmHandler->ptrTIMx->CCR3 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7c1b      	ldrb	r3, [r3, #16]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	899b      	ldrh	r3, [r3, #12]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <setDutyCycle+0xc0>)
 8003aec:	fb82 1203 	smull	r1, r2, r2, r3
 8003af0:	1152      	asrs	r2, r2, #5
 8003af2:	17db      	asrs	r3, r3, #31
 8003af4:	1ad2      	subs	r2, r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003afc:	e011      	b.n	8003b22 <setDutyCycle+0xb2>
	}

	case PWM_CHANNEL_4:{
		// Cargamos el valor del Duty Cycle en el registro CCR4
		ptrPwmHandler->ptrTIMx->CCR4 = ((ptrPwmHandler->config.percDuty * ptrPwmHandler->config.periodo) / 100);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7c1b      	ldrb	r3, [r3, #16]
 8003b02:	461a      	mov	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	899b      	ldrh	r3, [r3, #12]
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <setDutyCycle+0xc0>)
 8003b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8003b12:	1152      	asrs	r2, r2, #5
 8003b14:	17db      	asrs	r3, r3, #31
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003b1e:	e000      	b.n	8003b22 <setDutyCycle+0xb2>
	}

	default:{
		break;
 8003b20:	bf00      	nop
	}

	}// fin del switch-case

} // Fin de la función setDutyCycle()
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	51eb851f 	.word	0x51eb851f

08003b34 <updateDutyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDutyCycle(PWM_Handler_t *ptrPwmHandler, uint8_t newDuty){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
	// Actualizamos el registro que manipula el dutty
    ptrPwmHandler->config.percDuty = newDuty;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	741a      	strb	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDutyCycle(ptrPwmHandler);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ff92 	bl	8003a70 <setDutyCycle>
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <__NVIC_EnableIRQ>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	db0b      	blt.n	8003b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	4907      	ldr	r1, [pc, #28]	; (8003b8c <__NVIC_EnableIRQ+0x38>)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2001      	movs	r0, #1
 8003b76:	fa00 f202 	lsl.w	r2, r0, r2
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000e100 	.word	0xe000e100

08003b90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	db12      	blt.n	8003bc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	f003 021f 	and.w	r2, r3, #31
 8003ba8:	490a      	ldr	r1, [pc, #40]	; (8003bd4 <__NVIC_DisableIRQ+0x44>)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb6:	3320      	adds	r3, #32
 8003bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bbc:	f3bf 8f4f 	dsb	sy
}
 8003bc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bc2:	f3bf 8f6f 	isb	sy
}
 8003bc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <systick_Config>:
static void systick_config_interrupt(Systick_Handler_t *pSystickHandler);

/*
 * Función para configurar el Systick
 */
void systick_Config(Systick_Handler_t *pSystickHandler){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	// La variable que cuenta los Ticks del sistema empieza en 0, para asegurarnos mejor.
	// Con ella, podemos llevar una "Cuenta" del tiempo activo del sistema
	countTicks = 0;
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <systick_Config+0x60>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
	/*
	 * 1. Asignar el valor del Reload
	 */

	// Asignamos el valor del Reload cargado en la estructura de configuración, en el registro correspondiente
	pSystickHandler->pSystick->LOAD = pSystickHandler->Systick_Config.Systick_Reload;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6852      	ldr	r2, [r2, #4]
 8003bee:	605a      	str	r2, [r3, #4]

	/*
	 * 2. Limpiamos el valor actual del contador del Systick
	 */
	pSystickHandler->pSystick->VAL = 0;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]

	/* Configurar el registro CTRL
	 * 	3a. Configuramos la fuente de la señal (en este caso, la signa clock del procesador)
	 */
	// Limpiamos el registro
	pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	601a      	str	r2, [r3, #0]

	// Asignamos la señal de reloj principal (Fosc -> Frecuencia de oscilanción) al Systick
	pSystickHandler->pSystick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0204 	orr.w	r2, r2, #4
 8003c16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c18:	b672      	cpsid	i
}
 8003c1a:	bf00      	nop
	 */
	// Desactivamos las interrupciones globales
	__disable_irq();

	// Configuramos las interrupciones del Systick
	systick_config_interrupt(pSystickHandler);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f832 	bl	8003c86 <systick_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 8003c22:	b662      	cpsie	i
}
 8003c24:	bf00      	nop
	__enable_irq();

	/*
	 * 4. Arrancamos con el Timer Systick apagado
	 */
	systick_SetState(pSystickHandler, SYSTICK_OFF);
 8003c26:	2100      	movs	r1, #0
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f807 	bl	8003c3c <systick_SetState>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200004f0 	.word	0x200004f0

08003c3c <systick_SetState>:


/*
 * Con esta función encendemos o apagamos el Timer
 */
void systick_SetState(Systick_Handler_t *pSystickHandler, uint8_t newState){
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]

	/* Mirammos cuál estado queremos configurar */
	switch(newState){
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <systick_SetState+0x28>
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d111      	bne.n	8003c76 <systick_SetState+0x3a>
	case SYSTICK_ON: {
		pSystickHandler->pSystick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
		break;
 8003c62:	e00a      	b.n	8003c7a <systick_SetState+0x3e>
	}
	case SYSTICK_OFF: {
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
		break;
 8003c74:	e001      	b.n	8003c7a <systick_SetState+0x3e>
	}
	default: {
		__NOP();
 8003c76:	bf00      	nop
		break;
 8003c78:	bf00      	nop
	}
	}

}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <systick_config_interrupt>:


/*
 * Activamos o desactivamos las interrupciones. También las matriculamos o desmatriculamos del NVIC
 */
static void systick_config_interrupt(Systick_Handler_t *pSystickHandler){
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

	if(pSystickHandler->Systick_Config.Systick_IntState == SYSTICK_INT_ENABLE){
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7a1b      	ldrb	r3, [r3, #8]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d114      	bne.n	8003cc0 <systick_config_interrupt+0x3a>
		// Limpiamos la posición
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0202 	bic.w	r2, r2, #2
 8003ca4:	601a      	str	r2, [r3, #0]

		// Activamos la interrupción
		pSystickHandler->pSystick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0202 	orr.w	r2, r2, #2
 8003cb4:	601a      	str	r2, [r3, #0]

		// Matriculamos la interrupción en el NVIC
		NVIC_EnableIRQ(SysTick_IRQn);
 8003cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cba:	f7ff ff4b 	bl	8003b54 <__NVIC_EnableIRQ>
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;

		// Desmatriculamos la interrupción en el NVIC
		NVIC_DisableIRQ(SysTick_IRQn);
	}
}
 8003cbe:	e00b      	b.n	8003cd8 <systick_config_interrupt+0x52>
		pSystickHandler->pSystick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0202 	bic.w	r2, r2, #2
 8003cce:	601a      	str	r2, [r3, #0]
		NVIC_DisableIRQ(SysTick_IRQn);
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd4:	f7ff ff5c 	bl	8003b90 <__NVIC_DisableIRQ>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <systick_Callback>:


} // Fin systick_Delay_ms()


__attribute__((weak)) void systick_Callback(void){
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	__NOP();
 8003ce4:	bf00      	nop
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <SysTick_Handler>:

/*
 * El Handler de IRQ del Systick (El nombre de esta función es propio de las librerías del Cortex M4 -> )
 */
void SysTick_Handler(void){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0

	// Verificamos si la interrupción se dio por el Systick
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <SysTick_Handler+0x30>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <SysTick_Handler+0x2a>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <SysTick_Handler+0x30>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a06      	ldr	r2, [pc, #24]	; (8003d20 <SysTick_Handler+0x30>)
 8003d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]

		/* Cada que se de una interrupción, aumentamos en 1 el contador de ticks */
		countTicks++;
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <SysTick_Handler+0x34>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <SysTick_Handler+0x34>)
 8003d14:	6013      	str	r3, [r2, #0]

		/* Llamamos a la función que se debe encargar de hacer algo con esta interrupción */
		systick_Callback();
 8003d16:	f7ff ffe3 	bl	8003ce0 <systick_Callback>
	}

}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	e000e010 	.word	0xe000e010
 8003d24:	200004f0 	.word	0x200004f0

08003d28 <__NVIC_EnableIRQ>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	db0b      	blt.n	8003d52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	4907      	ldr	r1, [pc, #28]	; (8003d60 <__NVIC_EnableIRQ+0x38>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2001      	movs	r0, #1
 8003d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000e100 	.word	0xe000e100

08003d64 <__NVIC_DisableIRQ>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	db12      	blt.n	8003d9c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	f003 021f 	and.w	r2, r3, #31
 8003d7c:	490a      	ldr	r1, [pc, #40]	; (8003da8 <__NVIC_DisableIRQ+0x44>)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2001      	movs	r0, #1
 8003d86:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8a:	3320      	adds	r3, #32
 8003d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d90:	f3bf 8f4f 	dsb	sy
}
 8003d94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d96:	f3bf 8f6f 	isb	sy
}
 8003d9a:	bf00      	nop
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000e100 	.word	0xe000e100

08003dac <timer_Config>:
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva,
 *  debemos desactivar el sistema global de interrupciones, activar la IRQ específica
 *  y luego volver a encender el sistema
 */

void timer_Config(Timer_Handler_t *pTimerHandler){	// Llamamos la función pública timer_Config
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periférico que estamos utilizando...
	ptrTimerUsed = pTimerHandler->pTIMx;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <timer_Config+0x48>)
 8003dba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dbc:	b672      	cpsid	i
}
 8003dbe:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema */
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	timer_enable_clock_peripheral(pTimerHandler);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f819 	bl	8003df8 <timer_enable_clock_peripheral>

	/* 2. Configuramos el Pre-scaler */
	timer_set_prescaler(pTimerHandler);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f884 	bl	8003ed4 <timer_set_prescaler>

	/* 3. Configuramos si UP_COUNT o DOWN_COUNT (mode) */
	timer_set_mode(pTimerHandler);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f891 	bl	8003ef4 <timer_set_mode>

	/* 4. Configuramos el Auto-reload */
	timer_set_period(pTimerHandler);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8ad 	bl	8003f32 <timer_set_period>

	/* 5. Configuramos la interrupción */
	timer_config_interrupt(pTimerHandler);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f8bb 	bl	8003f54 <timer_config_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 8003dde:	b662      	cpsie	i
}
 8003de0:	bf00      	nop

	/* X. Volvemos a activar las interrupciones del sistema */
	__enable_irq();

	/* El timer inicia apagado */
	timer_SetState(pTimerHandler, TIMER_OFF);	// Esta es la función pública timer_SetState
 8003de2:	2100      	movs	r1, #0
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f95f 	bl	80040a8 <timer_SetState>

}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200004f4 	.word	0x200004f4

08003df8 <timer_enable_clock_peripheral>:
/*
 * Funciones privadas que realizarán la configuración del Timer
 *
 * La siguiente función activa la señal de reloj según el Timer que estemos configurando
 */
 void timer_enable_clock_peripheral(Timer_Handler_t *pTimerHandler){
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	  * TIM11
	  *
	  * ===== TIMERS 32 BITS =====
	  * TIM2 - TIM5
	  * */
	 if(pTimerHandler->pTIMx == TIM2){
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e08:	d106      	bne.n	8003e18 <timer_enable_clock_peripheral+0x20>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
	 }
	 else{
		 __NOP();
	 }
 }
 8003e16:	e048      	b.n	8003eaa <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM3){
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a27      	ldr	r2, [pc, #156]	; (8003ebc <timer_enable_clock_peripheral+0xc4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d106      	bne.n	8003e30 <timer_enable_clock_peripheral+0x38>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 }
 8003e2e:	e03c      	b.n	8003eaa <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM4){
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <timer_enable_clock_peripheral+0xc8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d106      	bne.n	8003e48 <timer_enable_clock_peripheral+0x50>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
 }
 8003e46:	e030      	b.n	8003eaa <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM5){
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <timer_enable_clock_peripheral+0xcc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d106      	bne.n	8003e60 <timer_enable_clock_peripheral+0x68>
		 RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003e52:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e58:	f043 0308 	orr.w	r3, r3, #8
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 }
 8003e5e:	e024      	b.n	8003eaa <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM9){
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <timer_enable_clock_peripheral+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d106      	bne.n	8003e78 <timer_enable_clock_peripheral+0x80>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 }
 8003e76:	e018      	b.n	8003eaa <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM10){
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <timer_enable_clock_peripheral+0xd4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d106      	bne.n	8003e90 <timer_enable_clock_peripheral+0x98>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8c:	6453      	str	r3, [r2, #68]	; 0x44
 }
 8003e8e:	e00c      	b.n	8003eaa <timer_enable_clock_peripheral+0xb2>
	 else if(pTimerHandler->pTIMx == TIM11){
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <timer_enable_clock_peripheral+0xd8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d106      	bne.n	8003ea8 <timer_enable_clock_peripheral+0xb0>
		 RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <timer_enable_clock_peripheral+0xc0>)
 8003ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea4:	6453      	str	r3, [r2, #68]	; 0x44
 }
 8003ea6:	e000      	b.n	8003eaa <timer_enable_clock_peripheral+0xb2>
		 __NOP();
 8003ea8:	bf00      	nop
 }
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40014400 	.word	0x40014400
 8003ed0:	40014800 	.word	0x40014800

08003ed4 <timer_set_prescaler>:
 /*
  * El Pre-scaler nos configura la velocidad a la que se incrementa
  * el registro CNT del Timer (Este registro es el que se usa para
  * determinar cuando se dispara la interrupción)
  */
 void timer_set_prescaler(Timer_Handler_t *pTimerHandler){
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

	 // Verificamos que el valor del prescaler es válido
	 assert_param(IS_TIMER_PRESC(pTimerHandler->TIMx_Config.TIMx_Prescaler));

	 // Configuramos el valor del Pre-scaler
	 pTimerHandler->pTIMx->PSC = pTimerHandler->TIMx_Config.TIMx_Prescaler - 1; // (16000000)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3a01      	subs	r2, #1
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
	 	 	 	 	 	 	 	 	 	 // Restamos 1 al valor del prescaler por indicación de la hoja de datos
 }
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <timer_set_mode>:


 /*
  * Upcounter o DownCounter
  */
 void timer_set_mode(Timer_Handler_t *pTimerHandler){
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

	 // Verificamos que el modo de funcionamiento es correcto
	 assert_param(IS_TIMER_MODE()(pTimerHandler->TIMx_Config.TIMx_mode));

	 // Verificamos cuál es el modo que se desea configurar.
	 if(pTimerHandler->TIMx_Config.TIMx_mode == TIMER_UP_COUNTER){
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	791b      	ldrb	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <timer_set_mode+0x22>
		 // Configuramos en modo Upcounter DIR = 0
		 pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_DIR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0210 	bic.w	r2, r2, #16
 8003f12:	601a      	str	r2, [r3, #0]
	 }
	 else{
		 // Configuramos en modo downcounter DIR = 1
		 pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
	 }
 }
 8003f14:	e007      	b.n	8003f26 <timer_set_mode+0x32>
		 pTimerHandler->pTIMx->CR1 |= TIM_CR1_DIR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0210 	orr.w	r2, r2, #16
 8003f24:	601a      	str	r2, [r3, #0]
 }
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <timer_set_period>:
  * Esta función configura el límite hasta donde cuenta el Timer para generar un
  * evento "update" (cuando esta contando de forma ascendente), o configura
  * el valor desde donde se comienza a contar, cuando el sistema funciona de forma
  * descendente.
  */
 void timer_set_period(Timer_Handler_t *pTimerHandler){
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]

	 // Verificamos que el valor que genera el periodo es válido
	 assert_param(IS_TIMER_PERIOD(pTimerHandler->TIMx_Config.TIMx_Period));

	 // Configuramos el valor del autoreload (El periodo, tiene sentido)
	 pTimerHandler->pTIMx->ARR = pTimerHandler->TIMx_Config.TIMx_Period - 1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3a01      	subs	r2, #1
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
 }
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <timer_config_interrupt>:


 /*
  * Función que permite configurar la interrupción
  */
 void timer_config_interrupt(Timer_Handler_t *pTimerHandler){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

	 // Verificamos el posible valor configurado
	 assert_param(IS_TIMER_INTERRUP(pTimerHandler->TIMx_Config.TIMx_InterruptEnable));

	 if(pTimerHandler->TIMx_Config.TIMx_InterruptEnable == TIMER_INT_ENABLE){
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7c1b      	ldrb	r3, [r3, #16]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d148      	bne.n	8003ff6 <timer_config_interrupt+0xa2>
		 /* Activamos la interrupción debida al Timerx utilizado */
		 pTimerHandler->pTIMx->DIER |= TIM_DIER_UIE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	60da      	str	r2, [r3, #12]

		 /* Activamos el canal del sistema NVIC para que lea la interrupción */
		 if(pTimerHandler->pTIMx == TIM2){
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d103      	bne.n	8003f86 <timer_config_interrupt+0x32>
			 NVIC_EnableIRQ(TIM2_IRQn);
 8003f7e:	201c      	movs	r0, #28
 8003f80:	f7ff fed2 	bl	8003d28 <__NVIC_EnableIRQ>
		 else{
			 __NOP();
		 }
	 }

 }
 8003f84:	e07f      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM3){
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a41      	ldr	r2, [pc, #260]	; (8004090 <timer_config_interrupt+0x13c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <timer_config_interrupt+0x44>
			 NVIC_EnableIRQ(TIM3_IRQn);
 8003f90:	201d      	movs	r0, #29
 8003f92:	f7ff fec9 	bl	8003d28 <__NVIC_EnableIRQ>
 }
 8003f96:	e076      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM4){
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <timer_config_interrupt+0x140>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d103      	bne.n	8003faa <timer_config_interrupt+0x56>
			 NVIC_EnableIRQ(TIM4_IRQn);
 8003fa2:	201e      	movs	r0, #30
 8003fa4:	f7ff fec0 	bl	8003d28 <__NVIC_EnableIRQ>
 }
 8003fa8:	e06d      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM5){
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a3a      	ldr	r2, [pc, #232]	; (8004098 <timer_config_interrupt+0x144>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d103      	bne.n	8003fbc <timer_config_interrupt+0x68>
			 NVIC_EnableIRQ(TIM5_IRQn);
 8003fb4:	2032      	movs	r0, #50	; 0x32
 8003fb6:	f7ff feb7 	bl	8003d28 <__NVIC_EnableIRQ>
 }
 8003fba:	e064      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM9){
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a36      	ldr	r2, [pc, #216]	; (800409c <timer_config_interrupt+0x148>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d103      	bne.n	8003fce <timer_config_interrupt+0x7a>
			 NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003fc6:	2018      	movs	r0, #24
 8003fc8:	f7ff feae 	bl	8003d28 <__NVIC_EnableIRQ>
 }
 8003fcc:	e05b      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM10){
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <timer_config_interrupt+0x14c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d103      	bne.n	8003fe0 <timer_config_interrupt+0x8c>
			 NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fd8:	2019      	movs	r0, #25
 8003fda:	f7ff fea5 	bl	8003d28 <__NVIC_EnableIRQ>
 }
 8003fde:	e052      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM11){
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2f      	ldr	r2, [pc, #188]	; (80040a4 <timer_config_interrupt+0x150>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d103      	bne.n	8003ff2 <timer_config_interrupt+0x9e>
			 NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003fea:	201a      	movs	r0, #26
 8003fec:	f7ff fe9c 	bl	8003d28 <__NVIC_EnableIRQ>
 }
 8003ff0:	e049      	b.n	8004086 <timer_config_interrupt+0x132>
			 __NOP();
 8003ff2:	bf00      	nop
 }
 8003ff4:	e047      	b.n	8004086 <timer_config_interrupt+0x132>
		 pTimerHandler->pTIMx->DIER &= ~TIM_DIER_UIE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	60da      	str	r2, [r3, #12]
		 if(pTimerHandler->pTIMx == TIM2){
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d103      	bne.n	8004018 <timer_config_interrupt+0xc4>
			 NVIC_DisableIRQ(TIM2_IRQn);
 8004010:	201c      	movs	r0, #28
 8004012:	f7ff fea7 	bl	8003d64 <__NVIC_DisableIRQ>
 }
 8004016:	e036      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM3){
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <timer_config_interrupt+0x13c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d103      	bne.n	800402a <timer_config_interrupt+0xd6>
			 NVIC_DisableIRQ(TIM3_IRQn);
 8004022:	201d      	movs	r0, #29
 8004024:	f7ff fe9e 	bl	8003d64 <__NVIC_DisableIRQ>
 }
 8004028:	e02d      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM4){
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a19      	ldr	r2, [pc, #100]	; (8004094 <timer_config_interrupt+0x140>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <timer_config_interrupt+0xe8>
			 NVIC_DisableIRQ(TIM4_IRQn);
 8004034:	201e      	movs	r0, #30
 8004036:	f7ff fe95 	bl	8003d64 <__NVIC_DisableIRQ>
 }
 800403a:	e024      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM5){
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <timer_config_interrupt+0x144>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d103      	bne.n	800404e <timer_config_interrupt+0xfa>
			 NVIC_DisableIRQ(TIM5_IRQn);
 8004046:	2032      	movs	r0, #50	; 0x32
 8004048:	f7ff fe8c 	bl	8003d64 <__NVIC_DisableIRQ>
 }
 800404c:	e01b      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM9){
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <timer_config_interrupt+0x148>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <timer_config_interrupt+0x10c>
			 NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 8004058:	2018      	movs	r0, #24
 800405a:	f7ff fe83 	bl	8003d64 <__NVIC_DisableIRQ>
 }
 800405e:	e012      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM10){
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <timer_config_interrupt+0x14c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d103      	bne.n	8004072 <timer_config_interrupt+0x11e>
			 NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 800406a:	2019      	movs	r0, #25
 800406c:	f7ff fe7a 	bl	8003d64 <__NVIC_DisableIRQ>
 }
 8004070:	e009      	b.n	8004086 <timer_config_interrupt+0x132>
		 else if(pTimerHandler->pTIMx == TIM11){
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <timer_config_interrupt+0x150>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d103      	bne.n	8004084 <timer_config_interrupt+0x130>
			 NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800407c:	201a      	movs	r0, #26
 800407e:	f7ff fe71 	bl	8003d64 <__NVIC_DisableIRQ>
 }
 8004082:	e000      	b.n	8004086 <timer_config_interrupt+0x132>
			 __NOP();
 8004084:	bf00      	nop
 }
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800

080040a8 <timer_SetState>:

/*
 * Configuramos el encendido o apagado el contador del timer
 */
 void timer_SetState(Timer_Handler_t *pTimerHandler, uint8_t newState){
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]

	 // Verificamos que el estado ingresado es adecuado
	 assert_param(IS_TIMER_STATE(newState));

	 /* 4. Reiniciamos el registro counter */
	 pTimerHandler->pTIMx->CNT = 0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2200      	movs	r2, #0
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

	 if(newState == TIMER_ON){
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d108      	bne.n	80040d4 <timer_SetState+0x2c>
		 /* 5a. Activamos el Timer (el CNT debe comenzar a contar) por medio del CR1 (Control Register)  */
		 pTimerHandler->pTIMx->CR1 |= TIM_CR1_CEN;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0201 	orr.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
	 else{
		 /* 5b. Desactivamos el Timer (el CNT debe detenerse) */
		 pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
	 }

 }
 80040d2:	e007      	b.n	80040e4 <timer_SetState+0x3c>
		 pTimerHandler->pTIMx->CR1 &= ~TIM_CR1_CEN;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
 }
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <Timer3_Callback>:
 /**/
 __attribute__((weak)) void Timer2_Callback(void){		// El atributo (weak) permite sobreescribir la función Callback
	 __NOP();
 }

 __attribute__((weak)) void Timer3_Callback(void){
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
	 __NOP();
 80040f4:	bf00      	nop
 }
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <Timer4_Callback>:

 __attribute__((weak)) void Timer4_Callback(void){
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
	 __NOP();
 8004104:	bf00      	nop
 }
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <Timer5_Callback>:

 __attribute__((weak)) void Timer5_Callback(void){
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
	 __NOP();
 8004114:	bf00      	nop
 }
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM2_IRQHandler>:
  * interrupciones.
  * Al hacerlo correctamnete, el sistema apunta a esta función y cuando la interrupción
  * se lanza, el sistema inmediatamente salta a este lugar en la memoria
  */

void TIM2_IRQHandler(void){
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8004124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	6113      	str	r3, [r2, #16]

	/* Llamamos a la función que se debe encargar de hacer algo con esta interrupción */
	Timer2_Callback();
 8004134:	f7fd fad6 	bl	80016e4 <Timer2_Callback>
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}

0800413c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <TIM3_IRQHandler+0x18>)
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4a03      	ldr	r2, [pc, #12]	; (8004154 <TIM3_IRQHandler+0x18>)
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 800414c:	f7ff ffd0 	bl	80040f0 <Timer3_Callback>
}
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40000400 	.word	0x40000400

08004158 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <TIM4_IRQHandler+0x18>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4a03      	ldr	r2, [pc, #12]	; (8004170 <TIM4_IRQHandler+0x18>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8004168:	f7ff ffca 	bl	8004100 <Timer4_Callback>
}
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40000800 	.word	0x40000800

08004174 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
	TIM5->SR &= ~TIM_SR_UIF;
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <TIM5_IRQHandler+0x18>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	4a03      	ldr	r2, [pc, #12]	; (800418c <TIM5_IRQHandler+0x18>)
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8004184:	f7ff ffc4 	bl	8004110 <Timer5_Callback>
}
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40000c00 	.word	0x40000c00

08004190 <__NVIC_EnableIRQ>:
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db0b      	blt.n	80041ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	4907      	ldr	r1, [pc, #28]	; (80041c8 <__NVIC_EnableIRQ+0x38>)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2001      	movs	r0, #1
 80041b2:	fa00 f202 	lsl.w	r2, r0, r2
 80041b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000e100 	.word	0xe000e100

080041cc <__NVIC_DisableIRQ>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	db12      	blt.n	8004204 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	f003 021f 	and.w	r2, r3, #31
 80041e4:	490a      	ldr	r1, [pc, #40]	; (8004210 <__NVIC_DisableIRQ+0x44>)
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	2001      	movs	r0, #1
 80041ee:	fa00 f202 	lsl.w	r2, r0, r2
 80041f2:	3320      	adds	r3, #32
 80041f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80041f8:	f3bf 8f4f 	dsb	sy
}
 80041fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041fe:	f3bf 8f6f 	isb	sy
}
 8004202:	bf00      	nop
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000e100 	.word	0xe000e100

08004214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db0a      	blt.n	800423e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	490c      	ldr	r1, [pc, #48]	; (8004260 <__NVIC_SetPriority+0x4c>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	440b      	add	r3, r1
 8004238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800423c:	e00a      	b.n	8004254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4908      	ldr	r1, [pc, #32]	; (8004264 <__NVIC_SetPriority+0x50>)
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	3b04      	subs	r3, #4
 800424c:	0112      	lsls	r2, r2, #4
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	440b      	add	r3, r1
 8004252:	761a      	strb	r2, [r3, #24]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <usart_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void usart_Config(USART_Handler_t *ptrUsartHandler){
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004270:	b672      	cpsid	i
}
 8004272:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periférico */
	usart_enable_clock_peripheral(ptrUsartHandler);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f823 	bl	80042c0 <usart_enable_clock_peripheral>
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por último, activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]

	// Limpiamos el registro DR
	//ptrUsartHandler->ptrUSARTx->DR = 0;

	// 2.2 Configuracion del Parity:
	usart_config_parity(ptrUsartHandler);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f850 	bl	8004330 <usart_config_parity>

	// 2.3 Configuramos el tamaño del dato
	usart_config_datasize(ptrUsartHandler);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f881 	bl	8004398 <usart_config_datasize>

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	usart_config_stopbits(ptrUsartHandler);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8aa 	bl	80043f0 <usart_config_stopbits>

	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	usart_config_baudrate(ptrUsartHandler);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8f7 	bl	8004490 <usart_config_baudrate>

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	usart_config_mode(ptrUsartHandler);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f934 	bl	8004510 <usart_config_mode>

	// 2.8 Verificamos la configuración de las interrupciones
	usart_config_interrupt(ptrUsartHandler);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f997 	bl	80045dc <usart_config_interrupt>

	// 2.7 Activamos el modulo serial.
	usart_enable_peripheral(ptrUsartHandler);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9f8 	bl	80046a4 <usart_enable_peripheral>
  __ASM volatile ("cpsie i" : : : "memory");
 80042b4:	b662      	cpsie	i
}
 80042b6:	bf00      	nop

	/* x. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <usart_enable_clock_peripheral>:


/**/
static void usart_enable_clock_peripheral(USART_Handler_t *ptrUsartHandler){
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <usart_enable_clock_peripheral+0x60>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d106      	bne.n	80042e0 <usart_enable_clock_peripheral+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <usart_enable_clock_peripheral+0x64>)
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <usart_enable_clock_peripheral+0x64>)
 80042d8:	f043 0310 	orr.w	r3, r3, #16
 80042dc:	6453      	str	r3, [r2, #68]	; 0x44
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
	}
	else{
		__NOP();
	}
}	// Fin del Enable Clock Peripheral
 80042de:	e018      	b.n	8004312 <usart_enable_clock_peripheral+0x52>
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a10      	ldr	r2, [pc, #64]	; (8004328 <usart_enable_clock_peripheral+0x68>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d106      	bne.n	80042f8 <usart_enable_clock_peripheral+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <usart_enable_clock_peripheral+0x64>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <usart_enable_clock_peripheral+0x64>)
 80042f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
}	// Fin del Enable Clock Peripheral
 80042f6:	e00c      	b.n	8004312 <usart_enable_clock_peripheral+0x52>
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a0b      	ldr	r2, [pc, #44]	; (800432c <usart_enable_clock_peripheral+0x6c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d106      	bne.n	8004310 <usart_enable_clock_peripheral+0x50>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <usart_enable_clock_peripheral+0x64>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <usart_enable_clock_peripheral+0x64>)
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	6453      	str	r3, [r2, #68]	; 0x44
}	// Fin del Enable Clock Peripheral
 800430e:	e000      	b.n	8004312 <usart_enable_clock_peripheral+0x52>
		__NOP();
 8004310:	bf00      	nop
}	// Fin del Enable Clock Peripheral
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40011000 	.word	0x40011000
 8004324:	40023800 	.word	0x40023800
 8004328:	40004400 	.word	0x40004400
 800432c:	40011400 	.word	0x40011400

08004330 <usart_config_parity>:

/**
 *
 */
static void usart_config_parity(USART_Handler_t *ptrUsartHandler){
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.parity != USART_PARITY_NONE){
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	79db      	ldrb	r3, [r3, #7]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01d      	beq.n	800437c <usart_config_parity+0x4c>

		// Encendemos la verificación de paridad (Parity Control)
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800434e:	60da      	str	r2, [r3, #12]

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.parity == USART_PARITY_EVEN){
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	79db      	ldrb	r3, [r3, #7]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d108      	bne.n	800436a <usart_config_parity+0x3a>
			// Es even, entonces cargamos la configuracion adecuada (Paridad par)
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004366:	60da      	str	r2, [r3, #12]
	else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		// Desactivamos la verificación de paridad
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
	}
}	// Fin del Config Parity
 8004368:	e010      	b.n	800438c <usart_config_parity+0x5c>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004378:	60da      	str	r2, [r3, #12]
}	// Fin del Config Parity
 800437a:	e007      	b.n	800438c <usart_config_parity+0x5c>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	60da      	str	r2, [r3, #12]
}	// Fin del Config Parity
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <usart_config_datasize>:
/**
 * Esta funcion debe estar relacionada con el parity.
 * Si NO hay parity,el tamaño debe ser 8bit.
 * SI HAY parity, el tamaño debe ser 9 bit.
 */
static void usart_config_datasize(USART_Handler_t *ptrUsartHandler){
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	// Verificamos cual es el tamaño de dato que deseamos
	if(ptrUsartHandler->USART_Config.datasize == USART_DATASIZE_8BIT){
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	799b      	ldrb	r3, [r3, #6]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d115      	bne.n	80043d4 <usart_config_datasize+0x3c>

		// Verificamos si se esta trabajando o no con paridad
		if(ptrUsartHandler->USART_Config.parity == USART_PARITY_NONE){
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	79db      	ldrb	r3, [r3, #7]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d108      	bne.n	80043c2 <usart_config_datasize+0x2a>
			// Deseamos trabajar con datos de 8 bits
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_M);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043be:	60da      	str	r2, [r3, #12]

	}else{
		// Deseamos trabajar con datos de 9 bits
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
	}
}	// Fin Config Datasize
 80043c0:	e010      	b.n	80043e4 <usart_config_datasize+0x4c>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043d0:	60da      	str	r2, [r3, #12]
}	// Fin Config Datasize
 80043d2:	e007      	b.n	80043e4 <usart_config_datasize+0x4c>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043e2:	60da      	str	r2, [r3, #12]
}	// Fin Config Datasize
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <usart_config_stopbits>:

/**
 * Configuración para seleccionar cuántos bits de parada vamos a utilizar
 */
static void usart_config_stopbits(USART_Handler_t *ptrUsartHandler){
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

	/* Limpiamos el registro CR2->STOP */
	ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004406:	611a      	str	r2, [r3, #16]

	/* Configuramos los bits de parada para el USARTx */
	switch(ptrUsartHandler->USART_Config.stopbits){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7a1b      	ldrb	r3, [r3, #8]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d82f      	bhi.n	8004470 <usart_config_stopbits+0x80>
 8004410:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <usart_config_stopbits+0x28>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	08004429 	.word	0x08004429
 800441c:	0800443b 	.word	0x0800443b
 8004420:	0800444d 	.word	0x0800444d
 8004424:	0800445f 	.word	0x0800445f
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004436:	611a      	str	r2, [r3, #16]
		break;
 8004438:	e023      	b.n	8004482 <usart_config_stopbits+0x92>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP_0;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004448:	611a      	str	r2, [r3, #16]
		break;
 800444a:	e01a      	b.n	8004482 <usart_config_stopbits+0x92>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP_1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445a:	611a      	str	r2, [r3, #16]
		break;
 800445c:	e011      	b.n	8004482 <usart_config_stopbits+0x92>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800446c:	611a      	str	r2, [r3, #16]
		break;
 800446e:	e008      	b.n	8004482 <usart_config_stopbits+0x92>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800447e:	611a      	str	r2, [r3, #16]
		break;
 8004480:	bf00      	nop
	}
	}
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop

08004490 <usart_config_baudrate>:
 * Aquí configuramos el baudrate del USART.
 * El baudrate es la tasa de bits/s de transmisión y recepción entre los
 * dispositivos que se comunican a través del USART (Particularmente a una
 * señal de reloj del microcontrolador)
 */
static void usart_config_baudrate(USART_Handler_t *ptrUsartHandler){
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	// Caso para configurar cuando se trabaja con el Cristal Interno
	switch(ptrUsartHandler->USART_Config.baudrate){
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	795b      	ldrb	r3, [r3, #5]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d82b      	bhi.n	80044f8 <usart_config_baudrate+0x68>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <usart_config_baudrate+0x18>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044c1 	.word	0x080044c1
 80044ac:	080044cd 	.word	0x080044cd
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044ef 	.word	0x080044ef
 80044b8:	080044f9 	.word	0x080044f9
 80044bc:	080044d9 	.word	0x080044d9
		{
		// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
		// Mantiza = 104 = 0x0680, fraction = 16 * 0.1875 = 3 = 0x0003
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f240 6283 	movw	r2, #1667	; 0x683
 80044c8:	609a      	str	r2, [r3, #8]
			break;
 80044ca:	e01a      	b.n	8004502 <usart_config_baudrate+0x72>
		{
		// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
		// Mantiza = 52 => 0x0340, fraction = 16 * 0.0625 = 1 => 0x0001
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f240 3241 	movw	r2, #833	; 0x341
 80044d4:	609a      	str	r2, [r3, #8]
			break;
 80044d6:	e014      	b.n	8004502 <usart_config_baudrate+0x72>
		}
		case USART_BAUDRATE_19200_100MHz:
		{
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f241 4258 	movw	r2, #5208	; 0x1458
 80044e0:	609a      	str	r2, [r3, #8]
			break;
 80044e2:	e00e      	b.n	8004502 <usart_config_baudrate+0x72>
		{
		// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
		// Mantiza = 8 => 0x0080 , fraction = 16 * 0.6875 = 11 => 0x000B
		// Valor a cargar 0x008B
		// Configurando el Baudrate generator para una velocidad de 115200bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	228b      	movs	r2, #139	; 0x8b
 80044ea:	609a      	str	r2, [r3, #8]
			break;
 80044ec:	e009      	b.n	8004502 <usart_config_baudrate+0x72>
		{
		// El valor a cargar es 4.3125 -> Mantiza = 4,fraction = 0.3125
		// Mantiza = 4 => 0x0040, fraction = 16 * 0.3125 = 5 => 0x0005
		// Valor a cargar 0x0045
		// Configurando el Baudrate generator para una velocidad de 230400bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0045;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2245      	movs	r2, #69	; 0x45
 80044f4:	609a      	str	r2, [r3, #8]
			break;
 80044f6:	e004      	b.n	8004502 <usart_config_baudrate+0x72>
		}

		default:
			// Configurando el Baudrate generator para una velocidad de 115200bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	228b      	movs	r2, #139	; 0x8b
 80044fe:	609a      	str	r2, [r3, #8]
			break;
 8004500:	bf00      	nop
		}
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <usart_config_mode>:
 * Aquí configuramos el modo de funcionamiento del USART:
 * - TX para enviar (Transmitter)
 * - RX para recibir (Receiver)
 * - TXRX para transmitir y recibir
 */
static void usart_config_mode(USART_Handler_t *ptrUsartHandler){
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	switch(ptrUsartHandler->USART_Config.mode){
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	791b      	ldrb	r3, [r3, #4]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d857      	bhi.n	80045d0 <usart_config_mode+0xc0>
 8004520:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <usart_config_mode+0x18>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004539 	.word	0x08004539
 800452c:	0800455b 	.word	0x0800455b
 8004530:	0800457d 	.word	0x0800457d
 8004534:	0800459f 	.word	0x0800459f
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->SR &= ~USART_CR1_RE;	// Limpiamos (desactivamos) la Recepción
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	601a      	str	r2, [r3, #0]
		ptrUsartHandler->ptrUSARTx->SR |= USART_CR1_TE;		// Activamos la Transmisión
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	601a      	str	r2, [r3, #0]

		break;
 8004558:	e03a      	b.n	80045d0 <usart_config_mode+0xc0>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;	// Limpiamos (desactivamos) la Transmisión
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0208 	bic.w	r2, r2, #8
 8004568:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;		// Activamos la Rcepción
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0204 	orr.w	r2, r2, #4
 8004578:	60da      	str	r2, [r3, #12]

		break;
 800457a:	e029      	b.n	80045d0 <usart_config_mode+0xc0>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;	// Activamos la Recepción
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0204 	orr.w	r2, r2, #4
 800458a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;	// Activamos la Transmisión
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0208 	orr.w	r2, r2, #8
 800459a:	60da      	str	r2, [r3, #12]
		break;
 800459c:	e018      	b.n	80045d0 <usart_config_mode+0xc0>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0204 	bic.w	r2, r2, #4
 80045ac:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0208 	bic.w	r2, r2, #8
 80045bc:	60da      	str	r2, [r3, #12]

		// Desactivamos el UsartX
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045cc:	60da      	str	r2, [r3, #12]
		break;
 80045ce:	bf00      	nop
	}
	}
}	// Fin de la función usart_config_mode
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <usart_config_interrupt>:

/**
 * Esta función configura las interrupciones debidas a la recepción de datos
 * cuando el USART está configurado en modo de recepción (RX)
 */
static void usart_config_interrupt(USART_Handler_t *ptrUsartHandler){
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	// 2.8a Interrupción por recepción
		if(ptrUsartHandler->USART_Config.enableIntRX == USART_RX_INTERRUPT_ENABLE){
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7a5b      	ldrb	r3, [r3, #9]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d12e      	bne.n	800464a <usart_config_interrupt+0x6e>
			// Como está activada, debemos configurar la interrupción por recepción
			/* Debemos activar la interrupción RX en la configuración del USART */
			ptrUsartHandler->ptrUSARTx->CR1 |= 	USART_CR1_RXNEIE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0220 	orr.w	r2, r2, #32
 80045fa:	60da      	str	r2, [r3, #12]

			/* Debemos matricular la interrupción en el NVIC */
			/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
			if(ptrUsartHandler->ptrUSARTx == USART1){
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a25      	ldr	r2, [pc, #148]	; (8004698 <usart_config_interrupt+0xbc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d107      	bne.n	8004616 <usart_config_interrupt+0x3a>
				__NVIC_EnableIRQ(USART1_IRQn);
 8004606:	2025      	movs	r0, #37	; 0x25
 8004608:	f7ff fdc2 	bl	8004190 <__NVIC_EnableIRQ>
				__NVIC_SetPriority(USART1_IRQn, 2);
 800460c:	2102      	movs	r1, #2
 800460e:	2025      	movs	r0, #37	; 0x25
 8004610:	f7ff fe00 	bl	8004214 <__NVIC_SetPriority>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6){
				__NVIC_DisableIRQ(USART6_IRQn);
			}
		}
}	// Fin función usart_config_interrupt
 8004614:	e03b      	b.n	800468e <usart_config_interrupt+0xb2>
			else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a20      	ldr	r2, [pc, #128]	; (800469c <usart_config_interrupt+0xc0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d107      	bne.n	8004630 <usart_config_interrupt+0x54>
				__NVIC_EnableIRQ(USART2_IRQn);
 8004620:	2026      	movs	r0, #38	; 0x26
 8004622:	f7ff fdb5 	bl	8004190 <__NVIC_EnableIRQ>
				__NVIC_SetPriority(USART2_IRQn, 2);
 8004626:	2102      	movs	r1, #2
 8004628:	2026      	movs	r0, #38	; 0x26
 800462a:	f7ff fdf3 	bl	8004214 <__NVIC_SetPriority>
}	// Fin función usart_config_interrupt
 800462e:	e02e      	b.n	800468e <usart_config_interrupt+0xb2>
			else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <usart_config_interrupt+0xc4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d129      	bne.n	800468e <usart_config_interrupt+0xb2>
				__NVIC_EnableIRQ(USART6_IRQn);
 800463a:	2047      	movs	r0, #71	; 0x47
 800463c:	f7ff fda8 	bl	8004190 <__NVIC_EnableIRQ>
				__NVIC_SetPriority(USART6_IRQn, 2);
 8004640:	2102      	movs	r1, #2
 8004642:	2047      	movs	r0, #71	; 0x47
 8004644:	f7ff fde6 	bl	8004214 <__NVIC_SetPriority>
}	// Fin función usart_config_interrupt
 8004648:	e021      	b.n	800468e <usart_config_interrupt+0xb2>
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0220 	bic.w	r2, r2, #32
 8004658:	60da      	str	r2, [r3, #12]
			if(ptrUsartHandler->ptrUSARTx == USART1){
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <usart_config_interrupt+0xbc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <usart_config_interrupt+0x90>
				__NVIC_DisableIRQ(USART1_IRQn);
 8004664:	2025      	movs	r0, #37	; 0x25
 8004666:	f7ff fdb1 	bl	80041cc <__NVIC_DisableIRQ>
}	// Fin función usart_config_interrupt
 800466a:	e010      	b.n	800468e <usart_config_interrupt+0xb2>
			else if(ptrUsartHandler->ptrUSARTx == USART2){
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0a      	ldr	r2, [pc, #40]	; (800469c <usart_config_interrupt+0xc0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d103      	bne.n	800467e <usart_config_interrupt+0xa2>
				__NVIC_DisableIRQ(USART2_IRQn);
 8004676:	2026      	movs	r0, #38	; 0x26
 8004678:	f7ff fda8 	bl	80041cc <__NVIC_DisableIRQ>
}	// Fin función usart_config_interrupt
 800467c:	e007      	b.n	800468e <usart_config_interrupt+0xb2>
			else if(ptrUsartHandler->ptrUSARTx == USART6){
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <usart_config_interrupt+0xc4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d102      	bne.n	800468e <usart_config_interrupt+0xb2>
				__NVIC_DisableIRQ(USART6_IRQn);
 8004688:	2047      	movs	r0, #71	; 0x47
 800468a:	f7ff fd9f 	bl	80041cc <__NVIC_DisableIRQ>
}	// Fin función usart_config_interrupt
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40011000 	.word	0x40011000
 800469c:	40004400 	.word	0x40004400
 80046a0:	40011400 	.word	0x40011400

080046a4 <usart_enable_peripheral>:


/**
 * Configuración para activar o desactivar el USART
 */
static void usart_enable_peripheral(USART_Handler_t *ptrUsartHandler){
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	if(ptrUsartHandler->USART_Config.mode != USART_MODE_DISABLE){
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	791b      	ldrb	r3, [r3, #4]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d008      	beq.n	80046c6 <usart_enable_peripheral+0x22>
		// Activamos el USART
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c2:	60da      	str	r2, [r3, #12]
	}
	else{
		// Deactivamos el USART
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
	}
}
 80046c4:	e007      	b.n	80046d6 <usart_enable_peripheral+0x32>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d4:	60da      	str	r2, [r3, #12]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <usart_WriteChar>:


/*
 * Función para escribir un solo char
 */
int usart_WriteChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	70fb      	strb	r3, [r7, #3]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){	// Verifica que no hayan datos actualmente en el Transmit Data Register
 80046ee:	e000      	b.n	80046f2 <usart_WriteChar+0x10>
		__NOP();
 80046f0:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){	// Verifica que no hayan datos actualmente en el Transmit Data Register
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f7      	beq.n	80046f0 <usart_WriteChar+0xe>
	}

	// Escribimos el char que queremos enviar en el Data Register
	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	605a      	str	r2, [r3, #4]

	return dataToSend;
 8004708:	78fb      	ldrb	r3, [r7, #3]
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <usart_WriteMsg>:


/*
 * Configuración para enviar un mensaje tipo String (Mensaje -> Cadena de caracteres)
 */
void usart_WriteMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend ){
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){	// Verifica que no hayan datos actualmente en el Transmit Data Register
 8004720:	e000      	b.n	8004724 <usart_WriteMsg+0xe>
		__NOP();
 8004722:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){	// Verifica que no hayan datos actualmente en el Transmit Data Register
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f7      	beq.n	8004722 <usart_WriteMsg+0xc>
	}

	while(*msgToSend != '\0'){
 8004732:	e008      	b.n	8004746 <usart_WriteMsg+0x30>
		// Usamos la función usart_WriteChar para escribir cada componente del String msgToSend
		usart_WriteChar(ptrUsartHandler, *msgToSend);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ffd1 	bl	80046e2 <usart_WriteChar>
		msgToSend++; // Recorremos el arreglo String usando el puntero
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f2      	bne.n	8004734 <usart_WriteMsg+0x1e>
	}

}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <usart1_getRxData>:

/*
 * Funciones para obtener el dato recibido para cada USART independiente
 */
uint8_t usart1_getRxData(void){
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
	return auxRxData.rxData_USART1;
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <usart1_getRxData+0x14>)
 800475e:	781b      	ldrb	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	200004f8 	.word	0x200004f8

08004770 <usart2_RxCallback>:
	            the BasicTimer_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__ ((weak)) void usart2_RxCallback(void){
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimer_Callback could be implemented in the main file
	   */
	__NOP();
 8004774:	bf00      	nop
}
 8004776:	bf00      	nop
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <usart6_RxCallback>:

__attribute__ ((weak)) void usart6_RxCallback(void){
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimer_Callback could be implemented in the main file
	   */
	__NOP();
 8004784:	bf00      	nop
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <USART1_IRQHandler>:


/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART1_IRQHandler(void){
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se dio es por RX
	if(USART1->SR & USART_SR_RXNE){
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <USART1_IRQHandler+0x34>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <USART1_IRQHandler+0x2c>

		// Bajamos la bandera del RXNE
		USART1->SR &= ~USART_SR_RXNE;
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <USART1_IRQHandler+0x34>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <USART1_IRQHandler+0x34>)
 80047a6:	f023 0320 	bic.w	r3, r3, #32
 80047aa:	6013      	str	r3, [r2, #0]

		// Guardamos el dato recibido en su variable correspondiente
		auxRxData.rxData_USART1 = USART1->DR;
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <USART1_IRQHandler+0x34>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <USART1_IRQHandler+0x38>)
 80047b4:	701a      	strb	r2, [r3, #0]

		// Llamamos al Callback del USART1
		usart1_RxCallback();
 80047b6:	f7fc ffbb 	bl	8001730 <usart1_RxCallback>
	}
	// Evaluamos si la interrupción es por TX
	else{
		__NOP();
	}
}
 80047ba:	e000      	b.n	80047be <USART1_IRQHandler+0x2e>
		__NOP();
 80047bc:	bf00      	nop
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40011000 	.word	0x40011000
 80047c8:	200004f8 	.word	0x200004f8

080047cc <USART2_IRQHandler>:

/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART2_IRQHandler(void){
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <USART2_IRQHandler+0x34>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <USART2_IRQHandler+0x2c>

		// Bajamos la bandera del RXNE
		USART2->SR &= ~USART_SR_RXNE;
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <USART2_IRQHandler+0x34>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <USART2_IRQHandler+0x34>)
 80047e2:	f023 0320 	bic.w	r3, r3, #32
 80047e6:	6013      	str	r3, [r2, #0]

		// Guardamos el dato recibido en su variable correspondiente
		auxRxData.rxData_USART2 = USART2->DR;
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <USART2_IRQHandler+0x34>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <USART2_IRQHandler+0x38>)
 80047f0:	705a      	strb	r2, [r3, #1]

		// Llamamos al Callback del USART2
		usart2_RxCallback();
 80047f2:	f7ff ffbd 	bl	8004770 <usart2_RxCallback>
	}
	// Evaluamos si la interrupción es por TX
	else{
		__NOP();
	}
}
 80047f6:	e000      	b.n	80047fa <USART2_IRQHandler+0x2e>
		__NOP();
 80047f8:	bf00      	nop
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40004400 	.word	0x40004400
 8004804:	200004f8 	.word	0x200004f8

08004808 <USART6_IRQHandler>:

/* Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART6_IRQHandler(void){
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <USART6_IRQHandler+0x34>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <USART6_IRQHandler+0x2c>

		// Bajamos la bandera del RXNE
		USART6->SR &= ~USART_SR_RXNE;
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <USART6_IRQHandler+0x34>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <USART6_IRQHandler+0x34>)
 800481e:	f023 0320 	bic.w	r3, r3, #32
 8004822:	6013      	str	r3, [r2, #0]

		// Guardamos el dato recibido en su variable correspondiente
		auxRxData.rxData_USART6 = USART6->DR;
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <USART6_IRQHandler+0x34>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <USART6_IRQHandler+0x38>)
 800482c:	709a      	strb	r2, [r3, #2]

		// Llamamos al Callback del USART6
		usart6_RxCallback();
 800482e:	f7ff ffa7 	bl	8004780 <usart6_RxCallback>
	}
	// Evaluamos si la interrupción es por TX
	else{
		__NOP();
	}
}
 8004832:	e000      	b.n	8004836 <USART6_IRQHandler+0x2e>
		__NOP();
 8004834:	bf00      	nop
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40011400 	.word	0x40011400
 8004840:	200004f8 	.word	0x200004f8

08004844 <__errno>:
 8004844:	4b01      	ldr	r3, [pc, #4]	; (800484c <__errno+0x8>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000000 	.word	0x20000000

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4d0d      	ldr	r5, [pc, #52]	; (8004888 <__libc_init_array+0x38>)
 8004854:	4c0d      	ldr	r4, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004856:	1b64      	subs	r4, r4, r5
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	2600      	movs	r6, #0
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	4d0b      	ldr	r5, [pc, #44]	; (8004890 <__libc_init_array+0x40>)
 8004862:	4c0c      	ldr	r4, [pc, #48]	; (8004894 <__libc_init_array+0x44>)
 8004864:	f005 f8ca 	bl	80099fc <_init>
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	2600      	movs	r6, #0
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	f855 3b04 	ldr.w	r3, [r5], #4
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	0800a22c 	.word	0x0800a22c
 800488c:	0800a22c 	.word	0x0800a22c
 8004890:	0800a22c 	.word	0x0800a22c
 8004894:	0800a230 	.word	0x0800a230

08004898 <memset>:
 8004898:	4402      	add	r2, r0
 800489a:	4603      	mov	r3, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	d100      	bne.n	80048a2 <memset+0xa>
 80048a0:	4770      	bx	lr
 80048a2:	f803 1b01 	strb.w	r1, [r3], #1
 80048a6:	e7f9      	b.n	800489c <memset+0x4>

080048a8 <__cvt>:
 80048a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	ec55 4b10 	vmov	r4, r5, d0
 80048b0:	2d00      	cmp	r5, #0
 80048b2:	460e      	mov	r6, r1
 80048b4:	4619      	mov	r1, r3
 80048b6:	462b      	mov	r3, r5
 80048b8:	bfbb      	ittet	lt
 80048ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048be:	461d      	movlt	r5, r3
 80048c0:	2300      	movge	r3, #0
 80048c2:	232d      	movlt	r3, #45	; 0x2d
 80048c4:	700b      	strb	r3, [r1, #0]
 80048c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048cc:	4691      	mov	r9, r2
 80048ce:	f023 0820 	bic.w	r8, r3, #32
 80048d2:	bfbc      	itt	lt
 80048d4:	4622      	movlt	r2, r4
 80048d6:	4614      	movlt	r4, r2
 80048d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048dc:	d005      	beq.n	80048ea <__cvt+0x42>
 80048de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048e2:	d100      	bne.n	80048e6 <__cvt+0x3e>
 80048e4:	3601      	adds	r6, #1
 80048e6:	2102      	movs	r1, #2
 80048e8:	e000      	b.n	80048ec <__cvt+0x44>
 80048ea:	2103      	movs	r1, #3
 80048ec:	ab03      	add	r3, sp, #12
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	ab02      	add	r3, sp, #8
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	ec45 4b10 	vmov	d0, r4, r5
 80048f8:	4653      	mov	r3, sl
 80048fa:	4632      	mov	r2, r6
 80048fc:	f001 fe44 	bl	8006588 <_dtoa_r>
 8004900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004904:	4607      	mov	r7, r0
 8004906:	d102      	bne.n	800490e <__cvt+0x66>
 8004908:	f019 0f01 	tst.w	r9, #1
 800490c:	d022      	beq.n	8004954 <__cvt+0xac>
 800490e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004912:	eb07 0906 	add.w	r9, r7, r6
 8004916:	d110      	bne.n	800493a <__cvt+0x92>
 8004918:	783b      	ldrb	r3, [r7, #0]
 800491a:	2b30      	cmp	r3, #48	; 0x30
 800491c:	d10a      	bne.n	8004934 <__cvt+0x8c>
 800491e:	2200      	movs	r2, #0
 8004920:	2300      	movs	r3, #0
 8004922:	4620      	mov	r0, r4
 8004924:	4629      	mov	r1, r5
 8004926:	f7fc f8e7 	bl	8000af8 <__aeabi_dcmpeq>
 800492a:	b918      	cbnz	r0, 8004934 <__cvt+0x8c>
 800492c:	f1c6 0601 	rsb	r6, r6, #1
 8004930:	f8ca 6000 	str.w	r6, [sl]
 8004934:	f8da 3000 	ldr.w	r3, [sl]
 8004938:	4499      	add	r9, r3
 800493a:	2200      	movs	r2, #0
 800493c:	2300      	movs	r3, #0
 800493e:	4620      	mov	r0, r4
 8004940:	4629      	mov	r1, r5
 8004942:	f7fc f8d9 	bl	8000af8 <__aeabi_dcmpeq>
 8004946:	b108      	cbz	r0, 800494c <__cvt+0xa4>
 8004948:	f8cd 900c 	str.w	r9, [sp, #12]
 800494c:	2230      	movs	r2, #48	; 0x30
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	454b      	cmp	r3, r9
 8004952:	d307      	bcc.n	8004964 <__cvt+0xbc>
 8004954:	9b03      	ldr	r3, [sp, #12]
 8004956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004958:	1bdb      	subs	r3, r3, r7
 800495a:	4638      	mov	r0, r7
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	b004      	add	sp, #16
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	9103      	str	r1, [sp, #12]
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e7f0      	b.n	800494e <__cvt+0xa6>

0800496c <__exponent>:
 800496c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800496e:	4603      	mov	r3, r0
 8004970:	2900      	cmp	r1, #0
 8004972:	bfb8      	it	lt
 8004974:	4249      	neglt	r1, r1
 8004976:	f803 2b02 	strb.w	r2, [r3], #2
 800497a:	bfb4      	ite	lt
 800497c:	222d      	movlt	r2, #45	; 0x2d
 800497e:	222b      	movge	r2, #43	; 0x2b
 8004980:	2909      	cmp	r1, #9
 8004982:	7042      	strb	r2, [r0, #1]
 8004984:	dd2a      	ble.n	80049dc <__exponent+0x70>
 8004986:	f10d 0407 	add.w	r4, sp, #7
 800498a:	46a4      	mov	ip, r4
 800498c:	270a      	movs	r7, #10
 800498e:	46a6      	mov	lr, r4
 8004990:	460a      	mov	r2, r1
 8004992:	fb91 f6f7 	sdiv	r6, r1, r7
 8004996:	fb07 1516 	mls	r5, r7, r6, r1
 800499a:	3530      	adds	r5, #48	; 0x30
 800499c:	2a63      	cmp	r2, #99	; 0x63
 800499e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80049a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049a6:	4631      	mov	r1, r6
 80049a8:	dcf1      	bgt.n	800498e <__exponent+0x22>
 80049aa:	3130      	adds	r1, #48	; 0x30
 80049ac:	f1ae 0502 	sub.w	r5, lr, #2
 80049b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049b4:	1c44      	adds	r4, r0, #1
 80049b6:	4629      	mov	r1, r5
 80049b8:	4561      	cmp	r1, ip
 80049ba:	d30a      	bcc.n	80049d2 <__exponent+0x66>
 80049bc:	f10d 0209 	add.w	r2, sp, #9
 80049c0:	eba2 020e 	sub.w	r2, r2, lr
 80049c4:	4565      	cmp	r5, ip
 80049c6:	bf88      	it	hi
 80049c8:	2200      	movhi	r2, #0
 80049ca:	4413      	add	r3, r2
 80049cc:	1a18      	subs	r0, r3, r0
 80049ce:	b003      	add	sp, #12
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049da:	e7ed      	b.n	80049b8 <__exponent+0x4c>
 80049dc:	2330      	movs	r3, #48	; 0x30
 80049de:	3130      	adds	r1, #48	; 0x30
 80049e0:	7083      	strb	r3, [r0, #2]
 80049e2:	70c1      	strb	r1, [r0, #3]
 80049e4:	1d03      	adds	r3, r0, #4
 80049e6:	e7f1      	b.n	80049cc <__exponent+0x60>

080049e8 <_printf_float>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	ed2d 8b02 	vpush	{d8}
 80049f0:	b08d      	sub	sp, #52	; 0x34
 80049f2:	460c      	mov	r4, r1
 80049f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049f8:	4616      	mov	r6, r2
 80049fa:	461f      	mov	r7, r3
 80049fc:	4605      	mov	r5, r0
 80049fe:	f002 ff21 	bl	8007844 <_localeconv_r>
 8004a02:	f8d0 a000 	ldr.w	sl, [r0]
 8004a06:	4650      	mov	r0, sl
 8004a08:	f7fb fbf4 	bl	80001f4 <strlen>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	9305      	str	r3, [sp, #20]
 8004a14:	f8d8 3000 	ldr.w	r3, [r8]
 8004a18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	f103 0208 	add.w	r2, r3, #8
 8004a26:	f8c8 2000 	str.w	r2, [r8]
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a3a:	9307      	str	r3, [sp, #28]
 8004a3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a40:	ee08 0a10 	vmov	s16, r0
 8004a44:	4b9f      	ldr	r3, [pc, #636]	; (8004cc4 <_printf_float+0x2dc>)
 8004a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a4e:	f7fc f885 	bl	8000b5c <__aeabi_dcmpun>
 8004a52:	bb88      	cbnz	r0, 8004ab8 <_printf_float+0xd0>
 8004a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a58:	4b9a      	ldr	r3, [pc, #616]	; (8004cc4 <_printf_float+0x2dc>)
 8004a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a5e:	f7fc f85f 	bl	8000b20 <__aeabi_dcmple>
 8004a62:	bb48      	cbnz	r0, 8004ab8 <_printf_float+0xd0>
 8004a64:	2200      	movs	r2, #0
 8004a66:	2300      	movs	r3, #0
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	f7fc f84e 	bl	8000b0c <__aeabi_dcmplt>
 8004a70:	b110      	cbz	r0, 8004a78 <_printf_float+0x90>
 8004a72:	232d      	movs	r3, #45	; 0x2d
 8004a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a78:	4b93      	ldr	r3, [pc, #588]	; (8004cc8 <_printf_float+0x2e0>)
 8004a7a:	4894      	ldr	r0, [pc, #592]	; (8004ccc <_printf_float+0x2e4>)
 8004a7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a80:	bf94      	ite	ls
 8004a82:	4698      	movls	r8, r3
 8004a84:	4680      	movhi	r8, r0
 8004a86:	2303      	movs	r3, #3
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	9b05      	ldr	r3, [sp, #20]
 8004a8c:	f023 0204 	bic.w	r2, r3, #4
 8004a90:	6022      	str	r2, [r4, #0]
 8004a92:	f04f 0900 	mov.w	r9, #0
 8004a96:	9700      	str	r7, [sp, #0]
 8004a98:	4633      	mov	r3, r6
 8004a9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 f9d8 	bl	8004e54 <_printf_common>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	f040 8090 	bne.w	8004bca <_printf_float+0x1e2>
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aae:	b00d      	add	sp, #52	; 0x34
 8004ab0:	ecbd 8b02 	vpop	{d8}
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	4640      	mov	r0, r8
 8004abe:	4649      	mov	r1, r9
 8004ac0:	f7fc f84c 	bl	8000b5c <__aeabi_dcmpun>
 8004ac4:	b140      	cbz	r0, 8004ad8 <_printf_float+0xf0>
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bfbc      	itt	lt
 8004acc:	232d      	movlt	r3, #45	; 0x2d
 8004ace:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ad2:	487f      	ldr	r0, [pc, #508]	; (8004cd0 <_printf_float+0x2e8>)
 8004ad4:	4b7f      	ldr	r3, [pc, #508]	; (8004cd4 <_printf_float+0x2ec>)
 8004ad6:	e7d1      	b.n	8004a7c <_printf_float+0x94>
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ade:	9206      	str	r2, [sp, #24]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	d13f      	bne.n	8004b64 <_printf_float+0x17c>
 8004ae4:	2306      	movs	r3, #6
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	9b05      	ldr	r3, [sp, #20]
 8004aea:	6861      	ldr	r1, [r4, #4]
 8004aec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004af0:	2300      	movs	r3, #0
 8004af2:	9303      	str	r3, [sp, #12]
 8004af4:	ab0a      	add	r3, sp, #40	; 0x28
 8004af6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004afa:	ab09      	add	r3, sp, #36	; 0x24
 8004afc:	ec49 8b10 	vmov	d0, r8, r9
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f7ff fecd 	bl	80048a8 <__cvt>
 8004b0e:	9b06      	ldr	r3, [sp, #24]
 8004b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b12:	2b47      	cmp	r3, #71	; 0x47
 8004b14:	4680      	mov	r8, r0
 8004b16:	d108      	bne.n	8004b2a <_printf_float+0x142>
 8004b18:	1cc8      	adds	r0, r1, #3
 8004b1a:	db02      	blt.n	8004b22 <_printf_float+0x13a>
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	dd41      	ble.n	8004ba6 <_printf_float+0x1be>
 8004b22:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b26:	fa5f fb8b 	uxtb.w	fp, fp
 8004b2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b2e:	d820      	bhi.n	8004b72 <_printf_float+0x18a>
 8004b30:	3901      	subs	r1, #1
 8004b32:	465a      	mov	r2, fp
 8004b34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b38:	9109      	str	r1, [sp, #36]	; 0x24
 8004b3a:	f7ff ff17 	bl	800496c <__exponent>
 8004b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b40:	1813      	adds	r3, r2, r0
 8004b42:	2a01      	cmp	r2, #1
 8004b44:	4681      	mov	r9, r0
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	dc02      	bgt.n	8004b50 <_printf_float+0x168>
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	07d2      	lsls	r2, r2, #31
 8004b4e:	d501      	bpl.n	8004b54 <_printf_float+0x16c>
 8004b50:	3301      	adds	r3, #1
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d09c      	beq.n	8004a96 <_printf_float+0xae>
 8004b5c:	232d      	movs	r3, #45	; 0x2d
 8004b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b62:	e798      	b.n	8004a96 <_printf_float+0xae>
 8004b64:	9a06      	ldr	r2, [sp, #24]
 8004b66:	2a47      	cmp	r2, #71	; 0x47
 8004b68:	d1be      	bne.n	8004ae8 <_printf_float+0x100>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1bc      	bne.n	8004ae8 <_printf_float+0x100>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e7b9      	b.n	8004ae6 <_printf_float+0xfe>
 8004b72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b76:	d118      	bne.n	8004baa <_printf_float+0x1c2>
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	dd0b      	ble.n	8004b96 <_printf_float+0x1ae>
 8004b7e:	6121      	str	r1, [r4, #16]
 8004b80:	b913      	cbnz	r3, 8004b88 <_printf_float+0x1a0>
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	07d0      	lsls	r0, r2, #31
 8004b86:	d502      	bpl.n	8004b8e <_printf_float+0x1a6>
 8004b88:	3301      	adds	r3, #1
 8004b8a:	440b      	add	r3, r1
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b90:	f04f 0900 	mov.w	r9, #0
 8004b94:	e7de      	b.n	8004b54 <_printf_float+0x16c>
 8004b96:	b913      	cbnz	r3, 8004b9e <_printf_float+0x1b6>
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	07d2      	lsls	r2, r2, #31
 8004b9c:	d501      	bpl.n	8004ba2 <_printf_float+0x1ba>
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	e7f4      	b.n	8004b8c <_printf_float+0x1a4>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e7f2      	b.n	8004b8c <_printf_float+0x1a4>
 8004ba6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bac:	4299      	cmp	r1, r3
 8004bae:	db05      	blt.n	8004bbc <_printf_float+0x1d4>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	6121      	str	r1, [r4, #16]
 8004bb4:	07d8      	lsls	r0, r3, #31
 8004bb6:	d5ea      	bpl.n	8004b8e <_printf_float+0x1a6>
 8004bb8:	1c4b      	adds	r3, r1, #1
 8004bba:	e7e7      	b.n	8004b8c <_printf_float+0x1a4>
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	bfd4      	ite	le
 8004bc0:	f1c1 0202 	rsble	r2, r1, #2
 8004bc4:	2201      	movgt	r2, #1
 8004bc6:	4413      	add	r3, r2
 8004bc8:	e7e0      	b.n	8004b8c <_printf_float+0x1a4>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	055a      	lsls	r2, r3, #21
 8004bce:	d407      	bmi.n	8004be0 <_printf_float+0x1f8>
 8004bd0:	6923      	ldr	r3, [r4, #16]
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d12c      	bne.n	8004c38 <_printf_float+0x250>
 8004bde:	e764      	b.n	8004aaa <_printf_float+0xc2>
 8004be0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004be4:	f240 80e0 	bls.w	8004da8 <_printf_float+0x3c0>
 8004be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f7fb ff82 	bl	8000af8 <__aeabi_dcmpeq>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d034      	beq.n	8004c62 <_printf_float+0x27a>
 8004bf8:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <_printf_float+0x2f0>)
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f af51 	beq.w	8004aaa <_printf_float+0xc2>
 8004c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	db02      	blt.n	8004c16 <_printf_float+0x22e>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	07d8      	lsls	r0, r3, #31
 8004c14:	d510      	bpl.n	8004c38 <_printf_float+0x250>
 8004c16:	ee18 3a10 	vmov	r3, s16
 8004c1a:	4652      	mov	r2, sl
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f af41 	beq.w	8004aaa <_printf_float+0xc2>
 8004c28:	f04f 0800 	mov.w	r8, #0
 8004c2c:	f104 091a 	add.w	r9, r4, #26
 8004c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c32:	3b01      	subs	r3, #1
 8004c34:	4543      	cmp	r3, r8
 8004c36:	dc09      	bgt.n	8004c4c <_printf_float+0x264>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	079b      	lsls	r3, r3, #30
 8004c3c:	f100 8105 	bmi.w	8004e4a <_printf_float+0x462>
 8004c40:	68e0      	ldr	r0, [r4, #12]
 8004c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c44:	4298      	cmp	r0, r3
 8004c46:	bfb8      	it	lt
 8004c48:	4618      	movlt	r0, r3
 8004c4a:	e730      	b.n	8004aae <_printf_float+0xc6>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	464a      	mov	r2, r9
 8004c50:	4631      	mov	r1, r6
 8004c52:	4628      	mov	r0, r5
 8004c54:	47b8      	blx	r7
 8004c56:	3001      	adds	r0, #1
 8004c58:	f43f af27 	beq.w	8004aaa <_printf_float+0xc2>
 8004c5c:	f108 0801 	add.w	r8, r8, #1
 8004c60:	e7e6      	b.n	8004c30 <_printf_float+0x248>
 8004c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dc39      	bgt.n	8004cdc <_printf_float+0x2f4>
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <_printf_float+0x2f0>)
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4628      	mov	r0, r5
 8004c70:	47b8      	blx	r7
 8004c72:	3001      	adds	r0, #1
 8004c74:	f43f af19 	beq.w	8004aaa <_printf_float+0xc2>
 8004c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	d102      	bne.n	8004c86 <_printf_float+0x29e>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	07d9      	lsls	r1, r3, #31
 8004c84:	d5d8      	bpl.n	8004c38 <_printf_float+0x250>
 8004c86:	ee18 3a10 	vmov	r3, s16
 8004c8a:	4652      	mov	r2, sl
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	f43f af09 	beq.w	8004aaa <_printf_float+0xc2>
 8004c98:	f04f 0900 	mov.w	r9, #0
 8004c9c:	f104 0a1a 	add.w	sl, r4, #26
 8004ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca2:	425b      	negs	r3, r3
 8004ca4:	454b      	cmp	r3, r9
 8004ca6:	dc01      	bgt.n	8004cac <_printf_float+0x2c4>
 8004ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004caa:	e792      	b.n	8004bd2 <_printf_float+0x1ea>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4652      	mov	r2, sl
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	47b8      	blx	r7
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f aef7 	beq.w	8004aaa <_printf_float+0xc2>
 8004cbc:	f109 0901 	add.w	r9, r9, #1
 8004cc0:	e7ee      	b.n	8004ca0 <_printf_float+0x2b8>
 8004cc2:	bf00      	nop
 8004cc4:	7fefffff 	.word	0x7fefffff
 8004cc8:	08009d78 	.word	0x08009d78
 8004ccc:	08009d7c 	.word	0x08009d7c
 8004cd0:	08009d84 	.word	0x08009d84
 8004cd4:	08009d80 	.word	0x08009d80
 8004cd8:	0800a179 	.word	0x0800a179
 8004cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	bfa8      	it	ge
 8004ce4:	461a      	movge	r2, r3
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	4691      	mov	r9, r2
 8004cea:	dc37      	bgt.n	8004d5c <_printf_float+0x374>
 8004cec:	f04f 0b00 	mov.w	fp, #0
 8004cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cf4:	f104 021a 	add.w	r2, r4, #26
 8004cf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	eba3 0309 	sub.w	r3, r3, r9
 8004d00:	455b      	cmp	r3, fp
 8004d02:	dc33      	bgt.n	8004d6c <_printf_float+0x384>
 8004d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	db3b      	blt.n	8004d84 <_printf_float+0x39c>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	07da      	lsls	r2, r3, #31
 8004d10:	d438      	bmi.n	8004d84 <_printf_float+0x39c>
 8004d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d14:	9a05      	ldr	r2, [sp, #20]
 8004d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d18:	1a9a      	subs	r2, r3, r2
 8004d1a:	eba3 0901 	sub.w	r9, r3, r1
 8004d1e:	4591      	cmp	r9, r2
 8004d20:	bfa8      	it	ge
 8004d22:	4691      	movge	r9, r2
 8004d24:	f1b9 0f00 	cmp.w	r9, #0
 8004d28:	dc35      	bgt.n	8004d96 <_printf_float+0x3ae>
 8004d2a:	f04f 0800 	mov.w	r8, #0
 8004d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d32:	f104 0a1a 	add.w	sl, r4, #26
 8004d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	eba3 0309 	sub.w	r3, r3, r9
 8004d40:	4543      	cmp	r3, r8
 8004d42:	f77f af79 	ble.w	8004c38 <_printf_float+0x250>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4652      	mov	r2, sl
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b8      	blx	r7
 8004d50:	3001      	adds	r0, #1
 8004d52:	f43f aeaa 	beq.w	8004aaa <_printf_float+0xc2>
 8004d56:	f108 0801 	add.w	r8, r8, #1
 8004d5a:	e7ec      	b.n	8004d36 <_printf_float+0x34e>
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4642      	mov	r2, r8
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	d1c0      	bne.n	8004cec <_printf_float+0x304>
 8004d6a:	e69e      	b.n	8004aaa <_printf_float+0xc2>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	9205      	str	r2, [sp, #20]
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	f43f ae97 	beq.w	8004aaa <_printf_float+0xc2>
 8004d7c:	9a05      	ldr	r2, [sp, #20]
 8004d7e:	f10b 0b01 	add.w	fp, fp, #1
 8004d82:	e7b9      	b.n	8004cf8 <_printf_float+0x310>
 8004d84:	ee18 3a10 	vmov	r3, s16
 8004d88:	4652      	mov	r2, sl
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b8      	blx	r7
 8004d90:	3001      	adds	r0, #1
 8004d92:	d1be      	bne.n	8004d12 <_printf_float+0x32a>
 8004d94:	e689      	b.n	8004aaa <_printf_float+0xc2>
 8004d96:	9a05      	ldr	r2, [sp, #20]
 8004d98:	464b      	mov	r3, r9
 8004d9a:	4442      	add	r2, r8
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	d1c1      	bne.n	8004d2a <_printf_float+0x342>
 8004da6:	e680      	b.n	8004aaa <_printf_float+0xc2>
 8004da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004daa:	2a01      	cmp	r2, #1
 8004dac:	dc01      	bgt.n	8004db2 <_printf_float+0x3ca>
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d538      	bpl.n	8004e24 <_printf_float+0x43c>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4642      	mov	r2, r8
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	f43f ae74 	beq.w	8004aaa <_printf_float+0xc2>
 8004dc2:	ee18 3a10 	vmov	r3, s16
 8004dc6:	4652      	mov	r2, sl
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f43f ae6b 	beq.w	8004aaa <_printf_float+0xc2>
 8004dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f7fb fe8c 	bl	8000af8 <__aeabi_dcmpeq>
 8004de0:	b9d8      	cbnz	r0, 8004e1a <_printf_float+0x432>
 8004de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004de4:	f108 0201 	add.w	r2, r8, #1
 8004de8:	3b01      	subs	r3, #1
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	d10e      	bne.n	8004e12 <_printf_float+0x42a>
 8004df4:	e659      	b.n	8004aaa <_printf_float+0xc2>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f ae52 	beq.w	8004aaa <_printf_float+0xc2>
 8004e06:	f108 0801 	add.w	r8, r8, #1
 8004e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4543      	cmp	r3, r8
 8004e10:	dcf1      	bgt.n	8004df6 <_printf_float+0x40e>
 8004e12:	464b      	mov	r3, r9
 8004e14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e18:	e6dc      	b.n	8004bd4 <_printf_float+0x1ec>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	f104 0a1a 	add.w	sl, r4, #26
 8004e22:	e7f2      	b.n	8004e0a <_printf_float+0x422>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4642      	mov	r2, r8
 8004e28:	e7df      	b.n	8004dea <_printf_float+0x402>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	464a      	mov	r2, r9
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	f43f ae38 	beq.w	8004aaa <_printf_float+0xc2>
 8004e3a:	f108 0801 	add.w	r8, r8, #1
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e42:	1a5b      	subs	r3, r3, r1
 8004e44:	4543      	cmp	r3, r8
 8004e46:	dcf0      	bgt.n	8004e2a <_printf_float+0x442>
 8004e48:	e6fa      	b.n	8004c40 <_printf_float+0x258>
 8004e4a:	f04f 0800 	mov.w	r8, #0
 8004e4e:	f104 0919 	add.w	r9, r4, #25
 8004e52:	e7f4      	b.n	8004e3e <_printf_float+0x456>

08004e54 <_printf_common>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	4616      	mov	r6, r2
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	688a      	ldr	r2, [r1, #8]
 8004e5e:	690b      	ldr	r3, [r1, #16]
 8004e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bfb8      	it	lt
 8004e68:	4613      	movlt	r3, r2
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e70:	4607      	mov	r7, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	b10a      	cbz	r2, 8004e7a <_printf_common+0x26>
 8004e76:	3301      	adds	r3, #1
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0699      	lsls	r1, r3, #26
 8004e7e:	bf42      	ittt	mi
 8004e80:	6833      	ldrmi	r3, [r6, #0]
 8004e82:	3302      	addmi	r3, #2
 8004e84:	6033      	strmi	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	f015 0506 	ands.w	r5, r5, #6
 8004e8c:	d106      	bne.n	8004e9c <_printf_common+0x48>
 8004e8e:	f104 0a19 	add.w	sl, r4, #25
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	dc26      	bgt.n	8004eea <_printf_common+0x96>
 8004e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea0:	1e13      	subs	r3, r2, #0
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	bf18      	it	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	0692      	lsls	r2, r2, #26
 8004eaa:	d42b      	bmi.n	8004f04 <_printf_common+0xb0>
 8004eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d01e      	beq.n	8004ef8 <_printf_common+0xa4>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	68e5      	ldr	r5, [r4, #12]
 8004ebe:	6832      	ldr	r2, [r6, #0]
 8004ec0:	f003 0306 	and.w	r3, r3, #6
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	bf08      	it	eq
 8004ec8:	1aad      	subeq	r5, r5, r2
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	bf0c      	ite	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	2500      	movne	r5, #0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bfc4      	itt	gt
 8004eda:	1a9b      	subgt	r3, r3, r2
 8004edc:	18ed      	addgt	r5, r5, r3
 8004ede:	2600      	movs	r6, #0
 8004ee0:	341a      	adds	r4, #26
 8004ee2:	42b5      	cmp	r5, r6
 8004ee4:	d11a      	bne.n	8004f1c <_printf_common+0xc8>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e008      	b.n	8004efc <_printf_common+0xa8>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4652      	mov	r2, sl
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	47c0      	blx	r8
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d103      	bne.n	8004f00 <_printf_common+0xac>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	3501      	adds	r5, #1
 8004f02:	e7c6      	b.n	8004e92 <_printf_common+0x3e>
 8004f04:	18e1      	adds	r1, r4, r3
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	2030      	movs	r0, #48	; 0x30
 8004f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f0e:	4422      	add	r2, r4
 8004f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f18:	3302      	adds	r3, #2
 8004f1a:	e7c7      	b.n	8004eac <_printf_common+0x58>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4649      	mov	r1, r9
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c0      	blx	r8
 8004f26:	3001      	adds	r0, #1
 8004f28:	d0e6      	beq.n	8004ef8 <_printf_common+0xa4>
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7d9      	b.n	8004ee2 <_printf_common+0x8e>
	...

08004f30 <_printf_i>:
 8004f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	7e0f      	ldrb	r7, [r1, #24]
 8004f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f38:	2f78      	cmp	r7, #120	; 0x78
 8004f3a:	4691      	mov	r9, r2
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	469a      	mov	sl, r3
 8004f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f46:	d807      	bhi.n	8004f58 <_printf_i+0x28>
 8004f48:	2f62      	cmp	r7, #98	; 0x62
 8004f4a:	d80a      	bhi.n	8004f62 <_printf_i+0x32>
 8004f4c:	2f00      	cmp	r7, #0
 8004f4e:	f000 80d8 	beq.w	8005102 <_printf_i+0x1d2>
 8004f52:	2f58      	cmp	r7, #88	; 0x58
 8004f54:	f000 80a3 	beq.w	800509e <_printf_i+0x16e>
 8004f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f60:	e03a      	b.n	8004fd8 <_printf_i+0xa8>
 8004f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f66:	2b15      	cmp	r3, #21
 8004f68:	d8f6      	bhi.n	8004f58 <_printf_i+0x28>
 8004f6a:	a101      	add	r1, pc, #4	; (adr r1, 8004f70 <_printf_i+0x40>)
 8004f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004f59 	.word	0x08004f59
 8004f7c:	08004f59 	.word	0x08004f59
 8004f80:	08004f59 	.word	0x08004f59
 8004f84:	08004f59 	.word	0x08004f59
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004f59 	.word	0x08004f59
 8004f90:	08004f59 	.word	0x08004f59
 8004f94:	08004f59 	.word	0x08004f59
 8004f98:	08004f59 	.word	0x08004f59
 8004f9c:	080050e9 	.word	0x080050e9
 8004fa0:	0800500d 	.word	0x0800500d
 8004fa4:	080050cb 	.word	0x080050cb
 8004fa8:	08004f59 	.word	0x08004f59
 8004fac:	08004f59 	.word	0x08004f59
 8004fb0:	0800510b 	.word	0x0800510b
 8004fb4:	08004f59 	.word	0x08004f59
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f59 	.word	0x08004f59
 8004fc0:	08004f59 	.word	0x08004f59
 8004fc4:	080050d3 	.word	0x080050d3
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	602a      	str	r2, [r5, #0]
 8004fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0a3      	b.n	8005124 <_printf_i+0x1f4>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	6829      	ldr	r1, [r5, #0]
 8004fe0:	0606      	lsls	r6, r0, #24
 8004fe2:	f101 0304 	add.w	r3, r1, #4
 8004fe6:	d50a      	bpl.n	8004ffe <_printf_i+0xce>
 8004fe8:	680e      	ldr	r6, [r1, #0]
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	da03      	bge.n	8004ff8 <_printf_i+0xc8>
 8004ff0:	232d      	movs	r3, #45	; 0x2d
 8004ff2:	4276      	negs	r6, r6
 8004ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff8:	485e      	ldr	r0, [pc, #376]	; (8005174 <_printf_i+0x244>)
 8004ffa:	230a      	movs	r3, #10
 8004ffc:	e019      	b.n	8005032 <_printf_i+0x102>
 8004ffe:	680e      	ldr	r6, [r1, #0]
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005006:	bf18      	it	ne
 8005008:	b236      	sxthne	r6, r6
 800500a:	e7ef      	b.n	8004fec <_printf_i+0xbc>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	6029      	str	r1, [r5, #0]
 8005014:	0601      	lsls	r1, r0, #24
 8005016:	d501      	bpl.n	800501c <_printf_i+0xec>
 8005018:	681e      	ldr	r6, [r3, #0]
 800501a:	e002      	b.n	8005022 <_printf_i+0xf2>
 800501c:	0646      	lsls	r6, r0, #25
 800501e:	d5fb      	bpl.n	8005018 <_printf_i+0xe8>
 8005020:	881e      	ldrh	r6, [r3, #0]
 8005022:	4854      	ldr	r0, [pc, #336]	; (8005174 <_printf_i+0x244>)
 8005024:	2f6f      	cmp	r7, #111	; 0x6f
 8005026:	bf0c      	ite	eq
 8005028:	2308      	moveq	r3, #8
 800502a:	230a      	movne	r3, #10
 800502c:	2100      	movs	r1, #0
 800502e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005032:	6865      	ldr	r5, [r4, #4]
 8005034:	60a5      	str	r5, [r4, #8]
 8005036:	2d00      	cmp	r5, #0
 8005038:	bfa2      	ittt	ge
 800503a:	6821      	ldrge	r1, [r4, #0]
 800503c:	f021 0104 	bicge.w	r1, r1, #4
 8005040:	6021      	strge	r1, [r4, #0]
 8005042:	b90e      	cbnz	r6, 8005048 <_printf_i+0x118>
 8005044:	2d00      	cmp	r5, #0
 8005046:	d04d      	beq.n	80050e4 <_printf_i+0x1b4>
 8005048:	4615      	mov	r5, r2
 800504a:	fbb6 f1f3 	udiv	r1, r6, r3
 800504e:	fb03 6711 	mls	r7, r3, r1, r6
 8005052:	5dc7      	ldrb	r7, [r0, r7]
 8005054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005058:	4637      	mov	r7, r6
 800505a:	42bb      	cmp	r3, r7
 800505c:	460e      	mov	r6, r1
 800505e:	d9f4      	bls.n	800504a <_printf_i+0x11a>
 8005060:	2b08      	cmp	r3, #8
 8005062:	d10b      	bne.n	800507c <_printf_i+0x14c>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	07de      	lsls	r6, r3, #31
 8005068:	d508      	bpl.n	800507c <_printf_i+0x14c>
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	6861      	ldr	r1, [r4, #4]
 800506e:	4299      	cmp	r1, r3
 8005070:	bfde      	ittt	le
 8005072:	2330      	movle	r3, #48	; 0x30
 8005074:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005078:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800507c:	1b52      	subs	r2, r2, r5
 800507e:	6122      	str	r2, [r4, #16]
 8005080:	f8cd a000 	str.w	sl, [sp]
 8005084:	464b      	mov	r3, r9
 8005086:	aa03      	add	r2, sp, #12
 8005088:	4621      	mov	r1, r4
 800508a:	4640      	mov	r0, r8
 800508c:	f7ff fee2 	bl	8004e54 <_printf_common>
 8005090:	3001      	adds	r0, #1
 8005092:	d14c      	bne.n	800512e <_printf_i+0x1fe>
 8005094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005098:	b004      	add	sp, #16
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	4835      	ldr	r0, [pc, #212]	; (8005174 <_printf_i+0x244>)
 80050a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050a4:	6829      	ldr	r1, [r5, #0]
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80050ac:	6029      	str	r1, [r5, #0]
 80050ae:	061d      	lsls	r5, r3, #24
 80050b0:	d514      	bpl.n	80050dc <_printf_i+0x1ac>
 80050b2:	07df      	lsls	r7, r3, #31
 80050b4:	bf44      	itt	mi
 80050b6:	f043 0320 	orrmi.w	r3, r3, #32
 80050ba:	6023      	strmi	r3, [r4, #0]
 80050bc:	b91e      	cbnz	r6, 80050c6 <_printf_i+0x196>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	f023 0320 	bic.w	r3, r3, #32
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	2310      	movs	r3, #16
 80050c8:	e7b0      	b.n	800502c <_printf_i+0xfc>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f043 0320 	orr.w	r3, r3, #32
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	2378      	movs	r3, #120	; 0x78
 80050d4:	4828      	ldr	r0, [pc, #160]	; (8005178 <_printf_i+0x248>)
 80050d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050da:	e7e3      	b.n	80050a4 <_printf_i+0x174>
 80050dc:	0659      	lsls	r1, r3, #25
 80050de:	bf48      	it	mi
 80050e0:	b2b6      	uxthmi	r6, r6
 80050e2:	e7e6      	b.n	80050b2 <_printf_i+0x182>
 80050e4:	4615      	mov	r5, r2
 80050e6:	e7bb      	b.n	8005060 <_printf_i+0x130>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	6826      	ldr	r6, [r4, #0]
 80050ec:	6961      	ldr	r1, [r4, #20]
 80050ee:	1d18      	adds	r0, r3, #4
 80050f0:	6028      	str	r0, [r5, #0]
 80050f2:	0635      	lsls	r5, r6, #24
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	d501      	bpl.n	80050fc <_printf_i+0x1cc>
 80050f8:	6019      	str	r1, [r3, #0]
 80050fa:	e002      	b.n	8005102 <_printf_i+0x1d2>
 80050fc:	0670      	lsls	r0, r6, #25
 80050fe:	d5fb      	bpl.n	80050f8 <_printf_i+0x1c8>
 8005100:	8019      	strh	r1, [r3, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	6123      	str	r3, [r4, #16]
 8005106:	4615      	mov	r5, r2
 8005108:	e7ba      	b.n	8005080 <_printf_i+0x150>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	1d1a      	adds	r2, r3, #4
 800510e:	602a      	str	r2, [r5, #0]
 8005110:	681d      	ldr	r5, [r3, #0]
 8005112:	6862      	ldr	r2, [r4, #4]
 8005114:	2100      	movs	r1, #0
 8005116:	4628      	mov	r0, r5
 8005118:	f7fb f87a 	bl	8000210 <memchr>
 800511c:	b108      	cbz	r0, 8005122 <_printf_i+0x1f2>
 800511e:	1b40      	subs	r0, r0, r5
 8005120:	6060      	str	r0, [r4, #4]
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	2300      	movs	r3, #0
 8005128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512c:	e7a8      	b.n	8005080 <_printf_i+0x150>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	462a      	mov	r2, r5
 8005132:	4649      	mov	r1, r9
 8005134:	4640      	mov	r0, r8
 8005136:	47d0      	blx	sl
 8005138:	3001      	adds	r0, #1
 800513a:	d0ab      	beq.n	8005094 <_printf_i+0x164>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	079b      	lsls	r3, r3, #30
 8005140:	d413      	bmi.n	800516a <_printf_i+0x23a>
 8005142:	68e0      	ldr	r0, [r4, #12]
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	4298      	cmp	r0, r3
 8005148:	bfb8      	it	lt
 800514a:	4618      	movlt	r0, r3
 800514c:	e7a4      	b.n	8005098 <_printf_i+0x168>
 800514e:	2301      	movs	r3, #1
 8005150:	4632      	mov	r2, r6
 8005152:	4649      	mov	r1, r9
 8005154:	4640      	mov	r0, r8
 8005156:	47d0      	blx	sl
 8005158:	3001      	adds	r0, #1
 800515a:	d09b      	beq.n	8005094 <_printf_i+0x164>
 800515c:	3501      	adds	r5, #1
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	9903      	ldr	r1, [sp, #12]
 8005162:	1a5b      	subs	r3, r3, r1
 8005164:	42ab      	cmp	r3, r5
 8005166:	dcf2      	bgt.n	800514e <_printf_i+0x21e>
 8005168:	e7eb      	b.n	8005142 <_printf_i+0x212>
 800516a:	2500      	movs	r5, #0
 800516c:	f104 0619 	add.w	r6, r4, #25
 8005170:	e7f5      	b.n	800515e <_printf_i+0x22e>
 8005172:	bf00      	nop
 8005174:	08009d88 	.word	0x08009d88
 8005178:	08009d99 	.word	0x08009d99

0800517c <_scanf_float>:
 800517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	b087      	sub	sp, #28
 8005182:	4617      	mov	r7, r2
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	688b      	ldr	r3, [r1, #8]
 8005188:	1e5a      	subs	r2, r3, #1
 800518a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800518e:	bf83      	ittte	hi
 8005190:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005194:	195b      	addhi	r3, r3, r5
 8005196:	9302      	strhi	r3, [sp, #8]
 8005198:	2300      	movls	r3, #0
 800519a:	bf86      	itte	hi
 800519c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051a0:	608b      	strhi	r3, [r1, #8]
 80051a2:	9302      	strls	r3, [sp, #8]
 80051a4:	680b      	ldr	r3, [r1, #0]
 80051a6:	468b      	mov	fp, r1
 80051a8:	2500      	movs	r5, #0
 80051aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80051b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051b6:	4680      	mov	r8, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	465e      	mov	r6, fp
 80051bc:	46aa      	mov	sl, r5
 80051be:	46a9      	mov	r9, r5
 80051c0:	9501      	str	r5, [sp, #4]
 80051c2:	68a2      	ldr	r2, [r4, #8]
 80051c4:	b152      	cbz	r2, 80051dc <_scanf_float+0x60>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b4e      	cmp	r3, #78	; 0x4e
 80051cc:	d864      	bhi.n	8005298 <_scanf_float+0x11c>
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d83c      	bhi.n	800524c <_scanf_float+0xd0>
 80051d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80051d6:	b2c8      	uxtb	r0, r1
 80051d8:	280e      	cmp	r0, #14
 80051da:	d93a      	bls.n	8005252 <_scanf_float+0xd6>
 80051dc:	f1b9 0f00 	cmp.w	r9, #0
 80051e0:	d003      	beq.n	80051ea <_scanf_float+0x6e>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80051ee:	f1ba 0f01 	cmp.w	sl, #1
 80051f2:	f200 8113 	bhi.w	800541c <_scanf_float+0x2a0>
 80051f6:	455e      	cmp	r6, fp
 80051f8:	f200 8105 	bhi.w	8005406 <_scanf_float+0x28a>
 80051fc:	2501      	movs	r5, #1
 80051fe:	4628      	mov	r0, r5
 8005200:	b007      	add	sp, #28
 8005202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005206:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800520a:	2a0d      	cmp	r2, #13
 800520c:	d8e6      	bhi.n	80051dc <_scanf_float+0x60>
 800520e:	a101      	add	r1, pc, #4	; (adr r1, 8005214 <_scanf_float+0x98>)
 8005210:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005214:	08005353 	.word	0x08005353
 8005218:	080051dd 	.word	0x080051dd
 800521c:	080051dd 	.word	0x080051dd
 8005220:	080051dd 	.word	0x080051dd
 8005224:	080053b3 	.word	0x080053b3
 8005228:	0800538b 	.word	0x0800538b
 800522c:	080051dd 	.word	0x080051dd
 8005230:	080051dd 	.word	0x080051dd
 8005234:	08005361 	.word	0x08005361
 8005238:	080051dd 	.word	0x080051dd
 800523c:	080051dd 	.word	0x080051dd
 8005240:	080051dd 	.word	0x080051dd
 8005244:	080051dd 	.word	0x080051dd
 8005248:	08005319 	.word	0x08005319
 800524c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005250:	e7db      	b.n	800520a <_scanf_float+0x8e>
 8005252:	290e      	cmp	r1, #14
 8005254:	d8c2      	bhi.n	80051dc <_scanf_float+0x60>
 8005256:	a001      	add	r0, pc, #4	; (adr r0, 800525c <_scanf_float+0xe0>)
 8005258:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800525c:	0800530b 	.word	0x0800530b
 8005260:	080051dd 	.word	0x080051dd
 8005264:	0800530b 	.word	0x0800530b
 8005268:	0800539f 	.word	0x0800539f
 800526c:	080051dd 	.word	0x080051dd
 8005270:	080052b9 	.word	0x080052b9
 8005274:	080052f5 	.word	0x080052f5
 8005278:	080052f5 	.word	0x080052f5
 800527c:	080052f5 	.word	0x080052f5
 8005280:	080052f5 	.word	0x080052f5
 8005284:	080052f5 	.word	0x080052f5
 8005288:	080052f5 	.word	0x080052f5
 800528c:	080052f5 	.word	0x080052f5
 8005290:	080052f5 	.word	0x080052f5
 8005294:	080052f5 	.word	0x080052f5
 8005298:	2b6e      	cmp	r3, #110	; 0x6e
 800529a:	d809      	bhi.n	80052b0 <_scanf_float+0x134>
 800529c:	2b60      	cmp	r3, #96	; 0x60
 800529e:	d8b2      	bhi.n	8005206 <_scanf_float+0x8a>
 80052a0:	2b54      	cmp	r3, #84	; 0x54
 80052a2:	d077      	beq.n	8005394 <_scanf_float+0x218>
 80052a4:	2b59      	cmp	r3, #89	; 0x59
 80052a6:	d199      	bne.n	80051dc <_scanf_float+0x60>
 80052a8:	2d07      	cmp	r5, #7
 80052aa:	d197      	bne.n	80051dc <_scanf_float+0x60>
 80052ac:	2508      	movs	r5, #8
 80052ae:	e029      	b.n	8005304 <_scanf_float+0x188>
 80052b0:	2b74      	cmp	r3, #116	; 0x74
 80052b2:	d06f      	beq.n	8005394 <_scanf_float+0x218>
 80052b4:	2b79      	cmp	r3, #121	; 0x79
 80052b6:	e7f6      	b.n	80052a6 <_scanf_float+0x12a>
 80052b8:	6821      	ldr	r1, [r4, #0]
 80052ba:	05c8      	lsls	r0, r1, #23
 80052bc:	d51a      	bpl.n	80052f4 <_scanf_float+0x178>
 80052be:	9b02      	ldr	r3, [sp, #8]
 80052c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80052c4:	6021      	str	r1, [r4, #0]
 80052c6:	f109 0901 	add.w	r9, r9, #1
 80052ca:	b11b      	cbz	r3, 80052d4 <_scanf_float+0x158>
 80052cc:	3b01      	subs	r3, #1
 80052ce:	3201      	adds	r2, #1
 80052d0:	9302      	str	r3, [sp, #8]
 80052d2:	60a2      	str	r2, [r4, #8]
 80052d4:	68a3      	ldr	r3, [r4, #8]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	3301      	adds	r3, #1
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	f340 8084 	ble.w	80053f4 <_scanf_float+0x278>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	3301      	adds	r3, #1
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	e766      	b.n	80051c2 <_scanf_float+0x46>
 80052f4:	eb1a 0f05 	cmn.w	sl, r5
 80052f8:	f47f af70 	bne.w	80051dc <_scanf_float+0x60>
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005302:	6022      	str	r2, [r4, #0]
 8005304:	f806 3b01 	strb.w	r3, [r6], #1
 8005308:	e7e4      	b.n	80052d4 <_scanf_float+0x158>
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	0610      	lsls	r0, r2, #24
 800530e:	f57f af65 	bpl.w	80051dc <_scanf_float+0x60>
 8005312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005316:	e7f4      	b.n	8005302 <_scanf_float+0x186>
 8005318:	f1ba 0f00 	cmp.w	sl, #0
 800531c:	d10e      	bne.n	800533c <_scanf_float+0x1c0>
 800531e:	f1b9 0f00 	cmp.w	r9, #0
 8005322:	d10e      	bne.n	8005342 <_scanf_float+0x1c6>
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800532a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800532e:	d108      	bne.n	8005342 <_scanf_float+0x1c6>
 8005330:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	f04f 0a01 	mov.w	sl, #1
 800533a:	e7e3      	b.n	8005304 <_scanf_float+0x188>
 800533c:	f1ba 0f02 	cmp.w	sl, #2
 8005340:	d055      	beq.n	80053ee <_scanf_float+0x272>
 8005342:	2d01      	cmp	r5, #1
 8005344:	d002      	beq.n	800534c <_scanf_float+0x1d0>
 8005346:	2d04      	cmp	r5, #4
 8005348:	f47f af48 	bne.w	80051dc <_scanf_float+0x60>
 800534c:	3501      	adds	r5, #1
 800534e:	b2ed      	uxtb	r5, r5
 8005350:	e7d8      	b.n	8005304 <_scanf_float+0x188>
 8005352:	f1ba 0f01 	cmp.w	sl, #1
 8005356:	f47f af41 	bne.w	80051dc <_scanf_float+0x60>
 800535a:	f04f 0a02 	mov.w	sl, #2
 800535e:	e7d1      	b.n	8005304 <_scanf_float+0x188>
 8005360:	b97d      	cbnz	r5, 8005382 <_scanf_float+0x206>
 8005362:	f1b9 0f00 	cmp.w	r9, #0
 8005366:	f47f af3c 	bne.w	80051e2 <_scanf_float+0x66>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005370:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005374:	f47f af39 	bne.w	80051ea <_scanf_float+0x6e>
 8005378:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800537c:	6022      	str	r2, [r4, #0]
 800537e:	2501      	movs	r5, #1
 8005380:	e7c0      	b.n	8005304 <_scanf_float+0x188>
 8005382:	2d03      	cmp	r5, #3
 8005384:	d0e2      	beq.n	800534c <_scanf_float+0x1d0>
 8005386:	2d05      	cmp	r5, #5
 8005388:	e7de      	b.n	8005348 <_scanf_float+0x1cc>
 800538a:	2d02      	cmp	r5, #2
 800538c:	f47f af26 	bne.w	80051dc <_scanf_float+0x60>
 8005390:	2503      	movs	r5, #3
 8005392:	e7b7      	b.n	8005304 <_scanf_float+0x188>
 8005394:	2d06      	cmp	r5, #6
 8005396:	f47f af21 	bne.w	80051dc <_scanf_float+0x60>
 800539a:	2507      	movs	r5, #7
 800539c:	e7b2      	b.n	8005304 <_scanf_float+0x188>
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	0591      	lsls	r1, r2, #22
 80053a2:	f57f af1b 	bpl.w	80051dc <_scanf_float+0x60>
 80053a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80053b0:	e7a8      	b.n	8005304 <_scanf_float+0x188>
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80053b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80053bc:	d006      	beq.n	80053cc <_scanf_float+0x250>
 80053be:	0550      	lsls	r0, r2, #21
 80053c0:	f57f af0c 	bpl.w	80051dc <_scanf_float+0x60>
 80053c4:	f1b9 0f00 	cmp.w	r9, #0
 80053c8:	f43f af0f 	beq.w	80051ea <_scanf_float+0x6e>
 80053cc:	0591      	lsls	r1, r2, #22
 80053ce:	bf58      	it	pl
 80053d0:	9901      	ldrpl	r1, [sp, #4]
 80053d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053d6:	bf58      	it	pl
 80053d8:	eba9 0101 	subpl.w	r1, r9, r1
 80053dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80053e0:	bf58      	it	pl
 80053e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053e6:	6022      	str	r2, [r4, #0]
 80053e8:	f04f 0900 	mov.w	r9, #0
 80053ec:	e78a      	b.n	8005304 <_scanf_float+0x188>
 80053ee:	f04f 0a03 	mov.w	sl, #3
 80053f2:	e787      	b.n	8005304 <_scanf_float+0x188>
 80053f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053f8:	4639      	mov	r1, r7
 80053fa:	4640      	mov	r0, r8
 80053fc:	4798      	blx	r3
 80053fe:	2800      	cmp	r0, #0
 8005400:	f43f aedf 	beq.w	80051c2 <_scanf_float+0x46>
 8005404:	e6ea      	b.n	80051dc <_scanf_float+0x60>
 8005406:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800540a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800540e:	463a      	mov	r2, r7
 8005410:	4640      	mov	r0, r8
 8005412:	4798      	blx	r3
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	3b01      	subs	r3, #1
 8005418:	6123      	str	r3, [r4, #16]
 800541a:	e6ec      	b.n	80051f6 <_scanf_float+0x7a>
 800541c:	1e6b      	subs	r3, r5, #1
 800541e:	2b06      	cmp	r3, #6
 8005420:	d825      	bhi.n	800546e <_scanf_float+0x2f2>
 8005422:	2d02      	cmp	r5, #2
 8005424:	d836      	bhi.n	8005494 <_scanf_float+0x318>
 8005426:	455e      	cmp	r6, fp
 8005428:	f67f aee8 	bls.w	80051fc <_scanf_float+0x80>
 800542c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005430:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005434:	463a      	mov	r2, r7
 8005436:	4640      	mov	r0, r8
 8005438:	4798      	blx	r3
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	3b01      	subs	r3, #1
 800543e:	6123      	str	r3, [r4, #16]
 8005440:	e7f1      	b.n	8005426 <_scanf_float+0x2aa>
 8005442:	9802      	ldr	r0, [sp, #8]
 8005444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005448:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800544c:	9002      	str	r0, [sp, #8]
 800544e:	463a      	mov	r2, r7
 8005450:	4640      	mov	r0, r8
 8005452:	4798      	blx	r3
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	3b01      	subs	r3, #1
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800545e:	fa5f fa8a 	uxtb.w	sl, sl
 8005462:	f1ba 0f02 	cmp.w	sl, #2
 8005466:	d1ec      	bne.n	8005442 <_scanf_float+0x2c6>
 8005468:	3d03      	subs	r5, #3
 800546a:	b2ed      	uxtb	r5, r5
 800546c:	1b76      	subs	r6, r6, r5
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	05da      	lsls	r2, r3, #23
 8005472:	d52f      	bpl.n	80054d4 <_scanf_float+0x358>
 8005474:	055b      	lsls	r3, r3, #21
 8005476:	d510      	bpl.n	800549a <_scanf_float+0x31e>
 8005478:	455e      	cmp	r6, fp
 800547a:	f67f aebf 	bls.w	80051fc <_scanf_float+0x80>
 800547e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005486:	463a      	mov	r2, r7
 8005488:	4640      	mov	r0, r8
 800548a:	4798      	blx	r3
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	3b01      	subs	r3, #1
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	e7f1      	b.n	8005478 <_scanf_float+0x2fc>
 8005494:	46aa      	mov	sl, r5
 8005496:	9602      	str	r6, [sp, #8]
 8005498:	e7df      	b.n	800545a <_scanf_float+0x2de>
 800549a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	2965      	cmp	r1, #101	; 0x65
 80054a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80054a6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80054aa:	6123      	str	r3, [r4, #16]
 80054ac:	d00c      	beq.n	80054c8 <_scanf_float+0x34c>
 80054ae:	2945      	cmp	r1, #69	; 0x45
 80054b0:	d00a      	beq.n	80054c8 <_scanf_float+0x34c>
 80054b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054b6:	463a      	mov	r2, r7
 80054b8:	4640      	mov	r0, r8
 80054ba:	4798      	blx	r3
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	1eb5      	subs	r5, r6, #2
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054cc:	463a      	mov	r2, r7
 80054ce:	4640      	mov	r0, r8
 80054d0:	4798      	blx	r3
 80054d2:	462e      	mov	r6, r5
 80054d4:	6825      	ldr	r5, [r4, #0]
 80054d6:	f015 0510 	ands.w	r5, r5, #16
 80054da:	d159      	bne.n	8005590 <_scanf_float+0x414>
 80054dc:	7035      	strb	r5, [r6, #0]
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d11b      	bne.n	8005522 <_scanf_float+0x3a6>
 80054ea:	9b01      	ldr	r3, [sp, #4]
 80054ec:	454b      	cmp	r3, r9
 80054ee:	eba3 0209 	sub.w	r2, r3, r9
 80054f2:	d123      	bne.n	800553c <_scanf_float+0x3c0>
 80054f4:	2200      	movs	r2, #0
 80054f6:	4659      	mov	r1, fp
 80054f8:	4640      	mov	r0, r8
 80054fa:	f000 ff0b 	bl	8006314 <_strtod_r>
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	f012 0f02 	tst.w	r2, #2
 8005506:	ec57 6b10 	vmov	r6, r7, d0
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	d021      	beq.n	8005552 <_scanf_float+0x3d6>
 800550e:	9903      	ldr	r1, [sp, #12]
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	600a      	str	r2, [r1, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	e9c3 6700 	strd	r6, r7, [r3]
 800551a:	68e3      	ldr	r3, [r4, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60e3      	str	r3, [r4, #12]
 8005520:	e66d      	b.n	80051fe <_scanf_float+0x82>
 8005522:	9b04      	ldr	r3, [sp, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0e5      	beq.n	80054f4 <_scanf_float+0x378>
 8005528:	9905      	ldr	r1, [sp, #20]
 800552a:	230a      	movs	r3, #10
 800552c:	462a      	mov	r2, r5
 800552e:	3101      	adds	r1, #1
 8005530:	4640      	mov	r0, r8
 8005532:	f000 ff77 	bl	8006424 <_strtol_r>
 8005536:	9b04      	ldr	r3, [sp, #16]
 8005538:	9e05      	ldr	r6, [sp, #20]
 800553a:	1ac2      	subs	r2, r0, r3
 800553c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005540:	429e      	cmp	r6, r3
 8005542:	bf28      	it	cs
 8005544:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005548:	4912      	ldr	r1, [pc, #72]	; (8005594 <_scanf_float+0x418>)
 800554a:	4630      	mov	r0, r6
 800554c:	f000 f82c 	bl	80055a8 <siprintf>
 8005550:	e7d0      	b.n	80054f4 <_scanf_float+0x378>
 8005552:	9903      	ldr	r1, [sp, #12]
 8005554:	f012 0f04 	tst.w	r2, #4
 8005558:	f103 0204 	add.w	r2, r3, #4
 800555c:	600a      	str	r2, [r1, #0]
 800555e:	d1d9      	bne.n	8005514 <_scanf_float+0x398>
 8005560:	f8d3 8000 	ldr.w	r8, [r3]
 8005564:	ee10 2a10 	vmov	r2, s0
 8005568:	ee10 0a10 	vmov	r0, s0
 800556c:	463b      	mov	r3, r7
 800556e:	4639      	mov	r1, r7
 8005570:	f7fb faf4 	bl	8000b5c <__aeabi_dcmpun>
 8005574:	b128      	cbz	r0, 8005582 <_scanf_float+0x406>
 8005576:	4808      	ldr	r0, [pc, #32]	; (8005598 <_scanf_float+0x41c>)
 8005578:	f000 f810 	bl	800559c <nanf>
 800557c:	ed88 0a00 	vstr	s0, [r8]
 8005580:	e7cb      	b.n	800551a <_scanf_float+0x39e>
 8005582:	4630      	mov	r0, r6
 8005584:	4639      	mov	r1, r7
 8005586:	f7fb fb47 	bl	8000c18 <__aeabi_d2f>
 800558a:	f8c8 0000 	str.w	r0, [r8]
 800558e:	e7c4      	b.n	800551a <_scanf_float+0x39e>
 8005590:	2500      	movs	r5, #0
 8005592:	e634      	b.n	80051fe <_scanf_float+0x82>
 8005594:	08009daa 	.word	0x08009daa
 8005598:	0800a1cb 	.word	0x0800a1cb

0800559c <nanf>:
 800559c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80055a4 <nanf+0x8>
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	7fc00000 	.word	0x7fc00000

080055a8 <siprintf>:
 80055a8:	b40e      	push	{r1, r2, r3}
 80055aa:	b500      	push	{lr}
 80055ac:	b09c      	sub	sp, #112	; 0x70
 80055ae:	ab1d      	add	r3, sp, #116	; 0x74
 80055b0:	9002      	str	r0, [sp, #8]
 80055b2:	9006      	str	r0, [sp, #24]
 80055b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055b8:	4809      	ldr	r0, [pc, #36]	; (80055e0 <siprintf+0x38>)
 80055ba:	9107      	str	r1, [sp, #28]
 80055bc:	9104      	str	r1, [sp, #16]
 80055be:	4909      	ldr	r1, [pc, #36]	; (80055e4 <siprintf+0x3c>)
 80055c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c4:	9105      	str	r1, [sp, #20]
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	a902      	add	r1, sp, #8
 80055cc:	f002 ff8c 	bl	80084e8 <_svfiprintf_r>
 80055d0:	9b02      	ldr	r3, [sp, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	b01c      	add	sp, #112	; 0x70
 80055d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055dc:	b003      	add	sp, #12
 80055de:	4770      	bx	lr
 80055e0:	20000000 	.word	0x20000000
 80055e4:	ffff0208 	.word	0xffff0208

080055e8 <siscanf>:
 80055e8:	b40e      	push	{r1, r2, r3}
 80055ea:	b510      	push	{r4, lr}
 80055ec:	b09f      	sub	sp, #124	; 0x7c
 80055ee:	ac21      	add	r4, sp, #132	; 0x84
 80055f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80055f4:	f854 2b04 	ldr.w	r2, [r4], #4
 80055f8:	9201      	str	r2, [sp, #4]
 80055fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80055fe:	9004      	str	r0, [sp, #16]
 8005600:	9008      	str	r0, [sp, #32]
 8005602:	f7fa fdf7 	bl	80001f4 <strlen>
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <siscanf+0x50>)
 8005608:	9005      	str	r0, [sp, #20]
 800560a:	9009      	str	r0, [sp, #36]	; 0x24
 800560c:	930d      	str	r3, [sp, #52]	; 0x34
 800560e:	480b      	ldr	r0, [pc, #44]	; (800563c <siscanf+0x54>)
 8005610:	9a01      	ldr	r2, [sp, #4]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9403      	str	r4, [sp, #12]
 8005616:	2300      	movs	r3, #0
 8005618:	9311      	str	r3, [sp, #68]	; 0x44
 800561a:	9316      	str	r3, [sp, #88]	; 0x58
 800561c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005620:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005624:	a904      	add	r1, sp, #16
 8005626:	4623      	mov	r3, r4
 8005628:	f003 f8b8 	bl	800879c <__ssvfiscanf_r>
 800562c:	b01f      	add	sp, #124	; 0x7c
 800562e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005632:	b003      	add	sp, #12
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	08005663 	.word	0x08005663
 800563c:	20000000 	.word	0x20000000

08005640 <__sread>:
 8005640:	b510      	push	{r4, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	f003 fb72 	bl	8008d30 <_read_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	bfab      	itete	ge
 8005650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005652:	89a3      	ldrhlt	r3, [r4, #12]
 8005654:	181b      	addge	r3, r3, r0
 8005656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800565a:	bfac      	ite	ge
 800565c:	6563      	strge	r3, [r4, #84]	; 0x54
 800565e:	81a3      	strhlt	r3, [r4, #12]
 8005660:	bd10      	pop	{r4, pc}

08005662 <__seofread>:
 8005662:	2000      	movs	r0, #0
 8005664:	4770      	bx	lr

08005666 <__swrite>:
 8005666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	461f      	mov	r7, r3
 800566c:	898b      	ldrh	r3, [r1, #12]
 800566e:	05db      	lsls	r3, r3, #23
 8005670:	4605      	mov	r5, r0
 8005672:	460c      	mov	r4, r1
 8005674:	4616      	mov	r6, r2
 8005676:	d505      	bpl.n	8005684 <__swrite+0x1e>
 8005678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567c:	2302      	movs	r3, #2
 800567e:	2200      	movs	r2, #0
 8005680:	f002 f8e4 	bl	800784c <_lseek_r>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800568a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	4632      	mov	r2, r6
 8005692:	463b      	mov	r3, r7
 8005694:	4628      	mov	r0, r5
 8005696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800569a:	f000 bec5 	b.w	8006428 <_write_r>

0800569e <__sseek>:
 800569e:	b510      	push	{r4, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a6:	f002 f8d1 	bl	800784c <_lseek_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	bf15      	itete	ne
 80056b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ba:	81a3      	strheq	r3, [r4, #12]
 80056bc:	bf18      	it	ne
 80056be:	81a3      	strhne	r3, [r4, #12]
 80056c0:	bd10      	pop	{r4, pc}

080056c2 <__sclose>:
 80056c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c6:	f000 bec1 	b.w	800644c <_close_r>

080056ca <sulp>:
 80056ca:	b570      	push	{r4, r5, r6, lr}
 80056cc:	4604      	mov	r4, r0
 80056ce:	460d      	mov	r5, r1
 80056d0:	ec45 4b10 	vmov	d0, r4, r5
 80056d4:	4616      	mov	r6, r2
 80056d6:	f002 fc65 	bl	8007fa4 <__ulp>
 80056da:	ec51 0b10 	vmov	r0, r1, d0
 80056de:	b17e      	cbz	r6, 8005700 <sulp+0x36>
 80056e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80056e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dd09      	ble.n	8005700 <sulp+0x36>
 80056ec:	051b      	lsls	r3, r3, #20
 80056ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80056f2:	2400      	movs	r4, #0
 80056f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80056f8:	4622      	mov	r2, r4
 80056fa:	462b      	mov	r3, r5
 80056fc:	f7fa ff94 	bl	8000628 <__aeabi_dmul>
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	0000      	movs	r0, r0
 8005704:	0000      	movs	r0, r0
	...

08005708 <_strtod_l>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	ed2d 8b02 	vpush	{d8}
 8005710:	b09d      	sub	sp, #116	; 0x74
 8005712:	461f      	mov	r7, r3
 8005714:	2300      	movs	r3, #0
 8005716:	9318      	str	r3, [sp, #96]	; 0x60
 8005718:	4ba2      	ldr	r3, [pc, #648]	; (80059a4 <_strtod_l+0x29c>)
 800571a:	9213      	str	r2, [sp, #76]	; 0x4c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	4604      	mov	r4, r0
 8005722:	4618      	mov	r0, r3
 8005724:	4688      	mov	r8, r1
 8005726:	f7fa fd65 	bl	80001f4 <strlen>
 800572a:	f04f 0a00 	mov.w	sl, #0
 800572e:	4605      	mov	r5, r0
 8005730:	f04f 0b00 	mov.w	fp, #0
 8005734:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	2a2b      	cmp	r2, #43	; 0x2b
 800573e:	d04e      	beq.n	80057de <_strtod_l+0xd6>
 8005740:	d83b      	bhi.n	80057ba <_strtod_l+0xb2>
 8005742:	2a0d      	cmp	r2, #13
 8005744:	d834      	bhi.n	80057b0 <_strtod_l+0xa8>
 8005746:	2a08      	cmp	r2, #8
 8005748:	d834      	bhi.n	80057b4 <_strtod_l+0xac>
 800574a:	2a00      	cmp	r2, #0
 800574c:	d03e      	beq.n	80057cc <_strtod_l+0xc4>
 800574e:	2300      	movs	r3, #0
 8005750:	930a      	str	r3, [sp, #40]	; 0x28
 8005752:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005754:	7833      	ldrb	r3, [r6, #0]
 8005756:	2b30      	cmp	r3, #48	; 0x30
 8005758:	f040 80b0 	bne.w	80058bc <_strtod_l+0x1b4>
 800575c:	7873      	ldrb	r3, [r6, #1]
 800575e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005762:	2b58      	cmp	r3, #88	; 0x58
 8005764:	d168      	bne.n	8005838 <_strtod_l+0x130>
 8005766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	ab18      	add	r3, sp, #96	; 0x60
 800576c:	9702      	str	r7, [sp, #8]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	4a8d      	ldr	r2, [pc, #564]	; (80059a8 <_strtod_l+0x2a0>)
 8005772:	ab19      	add	r3, sp, #100	; 0x64
 8005774:	a917      	add	r1, sp, #92	; 0x5c
 8005776:	4620      	mov	r0, r4
 8005778:	f001 fd5c 	bl	8007234 <__gethex>
 800577c:	f010 0707 	ands.w	r7, r0, #7
 8005780:	4605      	mov	r5, r0
 8005782:	d005      	beq.n	8005790 <_strtod_l+0x88>
 8005784:	2f06      	cmp	r7, #6
 8005786:	d12c      	bne.n	80057e2 <_strtod_l+0xda>
 8005788:	3601      	adds	r6, #1
 800578a:	2300      	movs	r3, #0
 800578c:	9617      	str	r6, [sp, #92]	; 0x5c
 800578e:	930a      	str	r3, [sp, #40]	; 0x28
 8005790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 8590 	bne.w	80062b8 <_strtod_l+0xbb0>
 8005798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579a:	b1eb      	cbz	r3, 80057d8 <_strtod_l+0xd0>
 800579c:	4652      	mov	r2, sl
 800579e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057a2:	ec43 2b10 	vmov	d0, r2, r3
 80057a6:	b01d      	add	sp, #116	; 0x74
 80057a8:	ecbd 8b02 	vpop	{d8}
 80057ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b0:	2a20      	cmp	r2, #32
 80057b2:	d1cc      	bne.n	800574e <_strtod_l+0x46>
 80057b4:	3301      	adds	r3, #1
 80057b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80057b8:	e7be      	b.n	8005738 <_strtod_l+0x30>
 80057ba:	2a2d      	cmp	r2, #45	; 0x2d
 80057bc:	d1c7      	bne.n	800574e <_strtod_l+0x46>
 80057be:	2201      	movs	r2, #1
 80057c0:	920a      	str	r2, [sp, #40]	; 0x28
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1c2      	bne.n	8005752 <_strtod_l+0x4a>
 80057cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f040 856e 	bne.w	80062b4 <_strtod_l+0xbac>
 80057d8:	4652      	mov	r2, sl
 80057da:	465b      	mov	r3, fp
 80057dc:	e7e1      	b.n	80057a2 <_strtod_l+0x9a>
 80057de:	2200      	movs	r2, #0
 80057e0:	e7ee      	b.n	80057c0 <_strtod_l+0xb8>
 80057e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80057e4:	b13a      	cbz	r2, 80057f6 <_strtod_l+0xee>
 80057e6:	2135      	movs	r1, #53	; 0x35
 80057e8:	a81a      	add	r0, sp, #104	; 0x68
 80057ea:	f002 fce6 	bl	80081ba <__copybits>
 80057ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80057f0:	4620      	mov	r0, r4
 80057f2:	f002 f8a5 	bl	8007940 <_Bfree>
 80057f6:	3f01      	subs	r7, #1
 80057f8:	2f04      	cmp	r7, #4
 80057fa:	d806      	bhi.n	800580a <_strtod_l+0x102>
 80057fc:	e8df f007 	tbb	[pc, r7]
 8005800:	1714030a 	.word	0x1714030a
 8005804:	0a          	.byte	0x0a
 8005805:	00          	.byte	0x00
 8005806:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800580a:	0728      	lsls	r0, r5, #28
 800580c:	d5c0      	bpl.n	8005790 <_strtod_l+0x88>
 800580e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005812:	e7bd      	b.n	8005790 <_strtod_l+0x88>
 8005814:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005818:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800581a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800581e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005822:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005826:	e7f0      	b.n	800580a <_strtod_l+0x102>
 8005828:	f8df b180 	ldr.w	fp, [pc, #384]	; 80059ac <_strtod_l+0x2a4>
 800582c:	e7ed      	b.n	800580a <_strtod_l+0x102>
 800582e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005832:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005836:	e7e8      	b.n	800580a <_strtod_l+0x102>
 8005838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	9217      	str	r2, [sp, #92]	; 0x5c
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b30      	cmp	r3, #48	; 0x30
 8005842:	d0f9      	beq.n	8005838 <_strtod_l+0x130>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0a3      	beq.n	8005790 <_strtod_l+0x88>
 8005848:	2301      	movs	r3, #1
 800584a:	f04f 0900 	mov.w	r9, #0
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005852:	9308      	str	r3, [sp, #32]
 8005854:	f8cd 901c 	str.w	r9, [sp, #28]
 8005858:	464f      	mov	r7, r9
 800585a:	220a      	movs	r2, #10
 800585c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800585e:	7806      	ldrb	r6, [r0, #0]
 8005860:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005864:	b2d9      	uxtb	r1, r3
 8005866:	2909      	cmp	r1, #9
 8005868:	d92a      	bls.n	80058c0 <_strtod_l+0x1b8>
 800586a:	9905      	ldr	r1, [sp, #20]
 800586c:	462a      	mov	r2, r5
 800586e:	f003 fac3 	bl	8008df8 <strncmp>
 8005872:	b398      	cbz	r0, 80058dc <_strtod_l+0x1d4>
 8005874:	2000      	movs	r0, #0
 8005876:	4632      	mov	r2, r6
 8005878:	463d      	mov	r5, r7
 800587a:	9005      	str	r0, [sp, #20]
 800587c:	4603      	mov	r3, r0
 800587e:	2a65      	cmp	r2, #101	; 0x65
 8005880:	d001      	beq.n	8005886 <_strtod_l+0x17e>
 8005882:	2a45      	cmp	r2, #69	; 0x45
 8005884:	d118      	bne.n	80058b8 <_strtod_l+0x1b0>
 8005886:	b91d      	cbnz	r5, 8005890 <_strtod_l+0x188>
 8005888:	9a04      	ldr	r2, [sp, #16]
 800588a:	4302      	orrs	r2, r0
 800588c:	d09e      	beq.n	80057cc <_strtod_l+0xc4>
 800588e:	2500      	movs	r5, #0
 8005890:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005894:	f108 0201 	add.w	r2, r8, #1
 8005898:	9217      	str	r2, [sp, #92]	; 0x5c
 800589a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800589e:	2a2b      	cmp	r2, #43	; 0x2b
 80058a0:	d075      	beq.n	800598e <_strtod_l+0x286>
 80058a2:	2a2d      	cmp	r2, #45	; 0x2d
 80058a4:	d07b      	beq.n	800599e <_strtod_l+0x296>
 80058a6:	f04f 0c00 	mov.w	ip, #0
 80058aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80058ae:	2909      	cmp	r1, #9
 80058b0:	f240 8082 	bls.w	80059b8 <_strtod_l+0x2b0>
 80058b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80058b8:	2600      	movs	r6, #0
 80058ba:	e09d      	b.n	80059f8 <_strtod_l+0x2f0>
 80058bc:	2300      	movs	r3, #0
 80058be:	e7c4      	b.n	800584a <_strtod_l+0x142>
 80058c0:	2f08      	cmp	r7, #8
 80058c2:	bfd8      	it	le
 80058c4:	9907      	ldrle	r1, [sp, #28]
 80058c6:	f100 0001 	add.w	r0, r0, #1
 80058ca:	bfda      	itte	le
 80058cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80058d0:	9307      	strle	r3, [sp, #28]
 80058d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80058d6:	3701      	adds	r7, #1
 80058d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80058da:	e7bf      	b.n	800585c <_strtod_l+0x154>
 80058dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058de:	195a      	adds	r2, r3, r5
 80058e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80058e2:	5d5a      	ldrb	r2, [r3, r5]
 80058e4:	2f00      	cmp	r7, #0
 80058e6:	d037      	beq.n	8005958 <_strtod_l+0x250>
 80058e8:	9005      	str	r0, [sp, #20]
 80058ea:	463d      	mov	r5, r7
 80058ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80058f0:	2b09      	cmp	r3, #9
 80058f2:	d912      	bls.n	800591a <_strtod_l+0x212>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e7c2      	b.n	800587e <_strtod_l+0x176>
 80058f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80058fe:	785a      	ldrb	r2, [r3, #1]
 8005900:	3001      	adds	r0, #1
 8005902:	2a30      	cmp	r2, #48	; 0x30
 8005904:	d0f8      	beq.n	80058f8 <_strtod_l+0x1f0>
 8005906:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800590a:	2b08      	cmp	r3, #8
 800590c:	f200 84d9 	bhi.w	80062c2 <_strtod_l+0xbba>
 8005910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005912:	9005      	str	r0, [sp, #20]
 8005914:	2000      	movs	r0, #0
 8005916:	9308      	str	r3, [sp, #32]
 8005918:	4605      	mov	r5, r0
 800591a:	3a30      	subs	r2, #48	; 0x30
 800591c:	f100 0301 	add.w	r3, r0, #1
 8005920:	d014      	beq.n	800594c <_strtod_l+0x244>
 8005922:	9905      	ldr	r1, [sp, #20]
 8005924:	4419      	add	r1, r3
 8005926:	9105      	str	r1, [sp, #20]
 8005928:	462b      	mov	r3, r5
 800592a:	eb00 0e05 	add.w	lr, r0, r5
 800592e:	210a      	movs	r1, #10
 8005930:	4573      	cmp	r3, lr
 8005932:	d113      	bne.n	800595c <_strtod_l+0x254>
 8005934:	182b      	adds	r3, r5, r0
 8005936:	2b08      	cmp	r3, #8
 8005938:	f105 0501 	add.w	r5, r5, #1
 800593c:	4405      	add	r5, r0
 800593e:	dc1c      	bgt.n	800597a <_strtod_l+0x272>
 8005940:	9907      	ldr	r1, [sp, #28]
 8005942:	230a      	movs	r3, #10
 8005944:	fb03 2301 	mla	r3, r3, r1, r2
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	2300      	movs	r3, #0
 800594c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800594e:	1c51      	adds	r1, r2, #1
 8005950:	9117      	str	r1, [sp, #92]	; 0x5c
 8005952:	7852      	ldrb	r2, [r2, #1]
 8005954:	4618      	mov	r0, r3
 8005956:	e7c9      	b.n	80058ec <_strtod_l+0x1e4>
 8005958:	4638      	mov	r0, r7
 800595a:	e7d2      	b.n	8005902 <_strtod_l+0x1fa>
 800595c:	2b08      	cmp	r3, #8
 800595e:	dc04      	bgt.n	800596a <_strtod_l+0x262>
 8005960:	9e07      	ldr	r6, [sp, #28]
 8005962:	434e      	muls	r6, r1
 8005964:	9607      	str	r6, [sp, #28]
 8005966:	3301      	adds	r3, #1
 8005968:	e7e2      	b.n	8005930 <_strtod_l+0x228>
 800596a:	f103 0c01 	add.w	ip, r3, #1
 800596e:	f1bc 0f10 	cmp.w	ip, #16
 8005972:	bfd8      	it	le
 8005974:	fb01 f909 	mulle.w	r9, r1, r9
 8005978:	e7f5      	b.n	8005966 <_strtod_l+0x25e>
 800597a:	2d10      	cmp	r5, #16
 800597c:	bfdc      	itt	le
 800597e:	230a      	movle	r3, #10
 8005980:	fb03 2909 	mlale	r9, r3, r9, r2
 8005984:	e7e1      	b.n	800594a <_strtod_l+0x242>
 8005986:	2300      	movs	r3, #0
 8005988:	9305      	str	r3, [sp, #20]
 800598a:	2301      	movs	r3, #1
 800598c:	e77c      	b.n	8005888 <_strtod_l+0x180>
 800598e:	f04f 0c00 	mov.w	ip, #0
 8005992:	f108 0202 	add.w	r2, r8, #2
 8005996:	9217      	str	r2, [sp, #92]	; 0x5c
 8005998:	f898 2002 	ldrb.w	r2, [r8, #2]
 800599c:	e785      	b.n	80058aa <_strtod_l+0x1a2>
 800599e:	f04f 0c01 	mov.w	ip, #1
 80059a2:	e7f6      	b.n	8005992 <_strtod_l+0x28a>
 80059a4:	08009ff8 	.word	0x08009ff8
 80059a8:	08009db0 	.word	0x08009db0
 80059ac:	7ff00000 	.word	0x7ff00000
 80059b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059b2:	1c51      	adds	r1, r2, #1
 80059b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80059b6:	7852      	ldrb	r2, [r2, #1]
 80059b8:	2a30      	cmp	r2, #48	; 0x30
 80059ba:	d0f9      	beq.n	80059b0 <_strtod_l+0x2a8>
 80059bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80059c0:	2908      	cmp	r1, #8
 80059c2:	f63f af79 	bhi.w	80058b8 <_strtod_l+0x1b0>
 80059c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80059ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059cc:	9206      	str	r2, [sp, #24]
 80059ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059d0:	1c51      	adds	r1, r2, #1
 80059d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80059d4:	7852      	ldrb	r2, [r2, #1]
 80059d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80059da:	2e09      	cmp	r6, #9
 80059dc:	d937      	bls.n	8005a4e <_strtod_l+0x346>
 80059de:	9e06      	ldr	r6, [sp, #24]
 80059e0:	1b89      	subs	r1, r1, r6
 80059e2:	2908      	cmp	r1, #8
 80059e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80059e8:	dc02      	bgt.n	80059f0 <_strtod_l+0x2e8>
 80059ea:	4576      	cmp	r6, lr
 80059ec:	bfa8      	it	ge
 80059ee:	4676      	movge	r6, lr
 80059f0:	f1bc 0f00 	cmp.w	ip, #0
 80059f4:	d000      	beq.n	80059f8 <_strtod_l+0x2f0>
 80059f6:	4276      	negs	r6, r6
 80059f8:	2d00      	cmp	r5, #0
 80059fa:	d14d      	bne.n	8005a98 <_strtod_l+0x390>
 80059fc:	9904      	ldr	r1, [sp, #16]
 80059fe:	4301      	orrs	r1, r0
 8005a00:	f47f aec6 	bne.w	8005790 <_strtod_l+0x88>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f47f aee1 	bne.w	80057cc <_strtod_l+0xc4>
 8005a0a:	2a69      	cmp	r2, #105	; 0x69
 8005a0c:	d027      	beq.n	8005a5e <_strtod_l+0x356>
 8005a0e:	dc24      	bgt.n	8005a5a <_strtod_l+0x352>
 8005a10:	2a49      	cmp	r2, #73	; 0x49
 8005a12:	d024      	beq.n	8005a5e <_strtod_l+0x356>
 8005a14:	2a4e      	cmp	r2, #78	; 0x4e
 8005a16:	f47f aed9 	bne.w	80057cc <_strtod_l+0xc4>
 8005a1a:	499f      	ldr	r1, [pc, #636]	; (8005c98 <_strtod_l+0x590>)
 8005a1c:	a817      	add	r0, sp, #92	; 0x5c
 8005a1e:	f001 fe61 	bl	80076e4 <__match>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f43f aed2 	beq.w	80057cc <_strtod_l+0xc4>
 8005a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b28      	cmp	r3, #40	; 0x28
 8005a2e:	d12d      	bne.n	8005a8c <_strtod_l+0x384>
 8005a30:	499a      	ldr	r1, [pc, #616]	; (8005c9c <_strtod_l+0x594>)
 8005a32:	aa1a      	add	r2, sp, #104	; 0x68
 8005a34:	a817      	add	r0, sp, #92	; 0x5c
 8005a36:	f001 fe69 	bl	800770c <__hexnan>
 8005a3a:	2805      	cmp	r0, #5
 8005a3c:	d126      	bne.n	8005a8c <_strtod_l+0x384>
 8005a3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005a44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005a48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005a4c:	e6a0      	b.n	8005790 <_strtod_l+0x88>
 8005a4e:	210a      	movs	r1, #10
 8005a50:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005a54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a58:	e7b9      	b.n	80059ce <_strtod_l+0x2c6>
 8005a5a:	2a6e      	cmp	r2, #110	; 0x6e
 8005a5c:	e7db      	b.n	8005a16 <_strtod_l+0x30e>
 8005a5e:	4990      	ldr	r1, [pc, #576]	; (8005ca0 <_strtod_l+0x598>)
 8005a60:	a817      	add	r0, sp, #92	; 0x5c
 8005a62:	f001 fe3f 	bl	80076e4 <__match>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f43f aeb0 	beq.w	80057cc <_strtod_l+0xc4>
 8005a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a6e:	498d      	ldr	r1, [pc, #564]	; (8005ca4 <_strtod_l+0x59c>)
 8005a70:	3b01      	subs	r3, #1
 8005a72:	a817      	add	r0, sp, #92	; 0x5c
 8005a74:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a76:	f001 fe35 	bl	80076e4 <__match>
 8005a7a:	b910      	cbnz	r0, 8005a82 <_strtod_l+0x37a>
 8005a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a7e:	3301      	adds	r3, #1
 8005a80:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a82:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005cb4 <_strtod_l+0x5ac>
 8005a86:	f04f 0a00 	mov.w	sl, #0
 8005a8a:	e681      	b.n	8005790 <_strtod_l+0x88>
 8005a8c:	4886      	ldr	r0, [pc, #536]	; (8005ca8 <_strtod_l+0x5a0>)
 8005a8e:	f003 f963 	bl	8008d58 <nan>
 8005a92:	ec5b ab10 	vmov	sl, fp, d0
 8005a96:	e67b      	b.n	8005790 <_strtod_l+0x88>
 8005a98:	9b05      	ldr	r3, [sp, #20]
 8005a9a:	9807      	ldr	r0, [sp, #28]
 8005a9c:	1af3      	subs	r3, r6, r3
 8005a9e:	2f00      	cmp	r7, #0
 8005aa0:	bf08      	it	eq
 8005aa2:	462f      	moveq	r7, r5
 8005aa4:	2d10      	cmp	r5, #16
 8005aa6:	9306      	str	r3, [sp, #24]
 8005aa8:	46a8      	mov	r8, r5
 8005aaa:	bfa8      	it	ge
 8005aac:	f04f 0810 	movge.w	r8, #16
 8005ab0:	f7fa fd40 	bl	8000534 <__aeabi_ui2d>
 8005ab4:	2d09      	cmp	r5, #9
 8005ab6:	4682      	mov	sl, r0
 8005ab8:	468b      	mov	fp, r1
 8005aba:	dd13      	ble.n	8005ae4 <_strtod_l+0x3dc>
 8005abc:	4b7b      	ldr	r3, [pc, #492]	; (8005cac <_strtod_l+0x5a4>)
 8005abe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005ac2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005ac6:	f7fa fdaf 	bl	8000628 <__aeabi_dmul>
 8005aca:	4682      	mov	sl, r0
 8005acc:	4648      	mov	r0, r9
 8005ace:	468b      	mov	fp, r1
 8005ad0:	f7fa fd30 	bl	8000534 <__aeabi_ui2d>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4650      	mov	r0, sl
 8005ada:	4659      	mov	r1, fp
 8005adc:	f7fa fbee 	bl	80002bc <__adddf3>
 8005ae0:	4682      	mov	sl, r0
 8005ae2:	468b      	mov	fp, r1
 8005ae4:	2d0f      	cmp	r5, #15
 8005ae6:	dc38      	bgt.n	8005b5a <_strtod_l+0x452>
 8005ae8:	9b06      	ldr	r3, [sp, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f43f ae50 	beq.w	8005790 <_strtod_l+0x88>
 8005af0:	dd24      	ble.n	8005b3c <_strtod_l+0x434>
 8005af2:	2b16      	cmp	r3, #22
 8005af4:	dc0b      	bgt.n	8005b0e <_strtod_l+0x406>
 8005af6:	496d      	ldr	r1, [pc, #436]	; (8005cac <_strtod_l+0x5a4>)
 8005af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b00:	4652      	mov	r2, sl
 8005b02:	465b      	mov	r3, fp
 8005b04:	f7fa fd90 	bl	8000628 <__aeabi_dmul>
 8005b08:	4682      	mov	sl, r0
 8005b0a:	468b      	mov	fp, r1
 8005b0c:	e640      	b.n	8005790 <_strtod_l+0x88>
 8005b0e:	9a06      	ldr	r2, [sp, #24]
 8005b10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005b14:	4293      	cmp	r3, r2
 8005b16:	db20      	blt.n	8005b5a <_strtod_l+0x452>
 8005b18:	4c64      	ldr	r4, [pc, #400]	; (8005cac <_strtod_l+0x5a4>)
 8005b1a:	f1c5 050f 	rsb	r5, r5, #15
 8005b1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005b22:	4652      	mov	r2, sl
 8005b24:	465b      	mov	r3, fp
 8005b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b2a:	f7fa fd7d 	bl	8000628 <__aeabi_dmul>
 8005b2e:	9b06      	ldr	r3, [sp, #24]
 8005b30:	1b5d      	subs	r5, r3, r5
 8005b32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b3a:	e7e3      	b.n	8005b04 <_strtod_l+0x3fc>
 8005b3c:	9b06      	ldr	r3, [sp, #24]
 8005b3e:	3316      	adds	r3, #22
 8005b40:	db0b      	blt.n	8005b5a <_strtod_l+0x452>
 8005b42:	9b05      	ldr	r3, [sp, #20]
 8005b44:	1b9e      	subs	r6, r3, r6
 8005b46:	4b59      	ldr	r3, [pc, #356]	; (8005cac <_strtod_l+0x5a4>)
 8005b48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005b4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b50:	4650      	mov	r0, sl
 8005b52:	4659      	mov	r1, fp
 8005b54:	f7fa fe92 	bl	800087c <__aeabi_ddiv>
 8005b58:	e7d6      	b.n	8005b08 <_strtod_l+0x400>
 8005b5a:	9b06      	ldr	r3, [sp, #24]
 8005b5c:	eba5 0808 	sub.w	r8, r5, r8
 8005b60:	4498      	add	r8, r3
 8005b62:	f1b8 0f00 	cmp.w	r8, #0
 8005b66:	dd74      	ble.n	8005c52 <_strtod_l+0x54a>
 8005b68:	f018 030f 	ands.w	r3, r8, #15
 8005b6c:	d00a      	beq.n	8005b84 <_strtod_l+0x47c>
 8005b6e:	494f      	ldr	r1, [pc, #316]	; (8005cac <_strtod_l+0x5a4>)
 8005b70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b74:	4652      	mov	r2, sl
 8005b76:	465b      	mov	r3, fp
 8005b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b7c:	f7fa fd54 	bl	8000628 <__aeabi_dmul>
 8005b80:	4682      	mov	sl, r0
 8005b82:	468b      	mov	fp, r1
 8005b84:	f038 080f 	bics.w	r8, r8, #15
 8005b88:	d04f      	beq.n	8005c2a <_strtod_l+0x522>
 8005b8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b8e:	dd22      	ble.n	8005bd6 <_strtod_l+0x4ce>
 8005b90:	2500      	movs	r5, #0
 8005b92:	462e      	mov	r6, r5
 8005b94:	9507      	str	r5, [sp, #28]
 8005b96:	9505      	str	r5, [sp, #20]
 8005b98:	2322      	movs	r3, #34	; 0x22
 8005b9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005cb4 <_strtod_l+0x5ac>
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	f04f 0a00 	mov.w	sl, #0
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f43f adf2 	beq.w	8005790 <_strtod_l+0x88>
 8005bac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f001 fec6 	bl	8007940 <_Bfree>
 8005bb4:	9905      	ldr	r1, [sp, #20]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f001 fec2 	bl	8007940 <_Bfree>
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f001 febe 	bl	8007940 <_Bfree>
 8005bc4:	9907      	ldr	r1, [sp, #28]
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f001 feba 	bl	8007940 <_Bfree>
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f001 feb6 	bl	8007940 <_Bfree>
 8005bd4:	e5dc      	b.n	8005790 <_strtod_l+0x88>
 8005bd6:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <_strtod_l+0x5a8>)
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005be0:	4650      	mov	r0, sl
 8005be2:	4659      	mov	r1, fp
 8005be4:	4699      	mov	r9, r3
 8005be6:	f1b8 0f01 	cmp.w	r8, #1
 8005bea:	dc21      	bgt.n	8005c30 <_strtod_l+0x528>
 8005bec:	b10b      	cbz	r3, 8005bf2 <_strtod_l+0x4ea>
 8005bee:	4682      	mov	sl, r0
 8005bf0:	468b      	mov	fp, r1
 8005bf2:	4b2f      	ldr	r3, [pc, #188]	; (8005cb0 <_strtod_l+0x5a8>)
 8005bf4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005bf8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	465b      	mov	r3, fp
 8005c00:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005c04:	f7fa fd10 	bl	8000628 <__aeabi_dmul>
 8005c08:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <_strtod_l+0x5ac>)
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	400b      	ands	r3, r1
 8005c0e:	492a      	ldr	r1, [pc, #168]	; (8005cb8 <_strtod_l+0x5b0>)
 8005c10:	428b      	cmp	r3, r1
 8005c12:	4682      	mov	sl, r0
 8005c14:	d8bc      	bhi.n	8005b90 <_strtod_l+0x488>
 8005c16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c1a:	428b      	cmp	r3, r1
 8005c1c:	bf86      	itte	hi
 8005c1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005cbc <_strtod_l+0x5b4>
 8005c22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005c26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9304      	str	r3, [sp, #16]
 8005c2e:	e084      	b.n	8005d3a <_strtod_l+0x632>
 8005c30:	f018 0f01 	tst.w	r8, #1
 8005c34:	d005      	beq.n	8005c42 <_strtod_l+0x53a>
 8005c36:	9b04      	ldr	r3, [sp, #16]
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fcf4 	bl	8000628 <__aeabi_dmul>
 8005c40:	2301      	movs	r3, #1
 8005c42:	9a04      	ldr	r2, [sp, #16]
 8005c44:	3208      	adds	r2, #8
 8005c46:	f109 0901 	add.w	r9, r9, #1
 8005c4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c4e:	9204      	str	r2, [sp, #16]
 8005c50:	e7c9      	b.n	8005be6 <_strtod_l+0x4de>
 8005c52:	d0ea      	beq.n	8005c2a <_strtod_l+0x522>
 8005c54:	f1c8 0800 	rsb	r8, r8, #0
 8005c58:	f018 020f 	ands.w	r2, r8, #15
 8005c5c:	d00a      	beq.n	8005c74 <_strtod_l+0x56c>
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <_strtod_l+0x5a4>)
 8005c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c64:	4650      	mov	r0, sl
 8005c66:	4659      	mov	r1, fp
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fe06 	bl	800087c <__aeabi_ddiv>
 8005c70:	4682      	mov	sl, r0
 8005c72:	468b      	mov	fp, r1
 8005c74:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005c78:	d0d7      	beq.n	8005c2a <_strtod_l+0x522>
 8005c7a:	f1b8 0f1f 	cmp.w	r8, #31
 8005c7e:	dd1f      	ble.n	8005cc0 <_strtod_l+0x5b8>
 8005c80:	2500      	movs	r5, #0
 8005c82:	462e      	mov	r6, r5
 8005c84:	9507      	str	r5, [sp, #28]
 8005c86:	9505      	str	r5, [sp, #20]
 8005c88:	2322      	movs	r3, #34	; 0x22
 8005c8a:	f04f 0a00 	mov.w	sl, #0
 8005c8e:	f04f 0b00 	mov.w	fp, #0
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	e786      	b.n	8005ba4 <_strtod_l+0x49c>
 8005c96:	bf00      	nop
 8005c98:	08009d85 	.word	0x08009d85
 8005c9c:	08009dc4 	.word	0x08009dc4
 8005ca0:	08009d7d 	.word	0x08009d7d
 8005ca4:	08009f04 	.word	0x08009f04
 8005ca8:	0800a1cb 	.word	0x0800a1cb
 8005cac:	0800a090 	.word	0x0800a090
 8005cb0:	0800a068 	.word	0x0800a068
 8005cb4:	7ff00000 	.word	0x7ff00000
 8005cb8:	7ca00000 	.word	0x7ca00000
 8005cbc:	7fefffff 	.word	0x7fefffff
 8005cc0:	f018 0310 	ands.w	r3, r8, #16
 8005cc4:	bf18      	it	ne
 8005cc6:	236a      	movne	r3, #106	; 0x6a
 8005cc8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006078 <_strtod_l+0x970>
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	4650      	mov	r0, sl
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f018 0f01 	tst.w	r8, #1
 8005cd8:	d004      	beq.n	8005ce4 <_strtod_l+0x5dc>
 8005cda:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005cde:	f7fa fca3 	bl	8000628 <__aeabi_dmul>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005ce8:	f109 0908 	add.w	r9, r9, #8
 8005cec:	d1f2      	bne.n	8005cd4 <_strtod_l+0x5cc>
 8005cee:	b10b      	cbz	r3, 8005cf4 <_strtod_l+0x5ec>
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	468b      	mov	fp, r1
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	b1c3      	cbz	r3, 8005d2a <_strtod_l+0x622>
 8005cf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005cfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	4659      	mov	r1, fp
 8005d04:	dd11      	ble.n	8005d2a <_strtod_l+0x622>
 8005d06:	2b1f      	cmp	r3, #31
 8005d08:	f340 8124 	ble.w	8005f54 <_strtod_l+0x84c>
 8005d0c:	2b34      	cmp	r3, #52	; 0x34
 8005d0e:	bfde      	ittt	le
 8005d10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005d14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005d18:	fa03 f202 	lslle.w	r2, r3, r2
 8005d1c:	f04f 0a00 	mov.w	sl, #0
 8005d20:	bfcc      	ite	gt
 8005d22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005d26:	ea02 0b01 	andle.w	fp, r2, r1
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4650      	mov	r0, sl
 8005d30:	4659      	mov	r1, fp
 8005d32:	f7fa fee1 	bl	8000af8 <__aeabi_dcmpeq>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1a2      	bne.n	8005c80 <_strtod_l+0x578>
 8005d3a:	9b07      	ldr	r3, [sp, #28]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	9908      	ldr	r1, [sp, #32]
 8005d40:	462b      	mov	r3, r5
 8005d42:	463a      	mov	r2, r7
 8005d44:	4620      	mov	r0, r4
 8005d46:	f001 fe63 	bl	8007a10 <__s2b>
 8005d4a:	9007      	str	r0, [sp, #28]
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	f43f af1f 	beq.w	8005b90 <_strtod_l+0x488>
 8005d52:	9b05      	ldr	r3, [sp, #20]
 8005d54:	1b9e      	subs	r6, r3, r6
 8005d56:	9b06      	ldr	r3, [sp, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bfb4      	ite	lt
 8005d5c:	4633      	movlt	r3, r6
 8005d5e:	2300      	movge	r3, #0
 8005d60:	930c      	str	r3, [sp, #48]	; 0x30
 8005d62:	9b06      	ldr	r3, [sp, #24]
 8005d64:	2500      	movs	r5, #0
 8005d66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d6a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d6c:	462e      	mov	r6, r5
 8005d6e:	9b07      	ldr	r3, [sp, #28]
 8005d70:	4620      	mov	r0, r4
 8005d72:	6859      	ldr	r1, [r3, #4]
 8005d74:	f001 fda4 	bl	80078c0 <_Balloc>
 8005d78:	9005      	str	r0, [sp, #20]
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f43f af0c 	beq.w	8005b98 <_strtod_l+0x490>
 8005d80:	9b07      	ldr	r3, [sp, #28]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	3202      	adds	r2, #2
 8005d86:	f103 010c 	add.w	r1, r3, #12
 8005d8a:	0092      	lsls	r2, r2, #2
 8005d8c:	300c      	adds	r0, #12
 8005d8e:	f001 fd89 	bl	80078a4 <memcpy>
 8005d92:	ec4b ab10 	vmov	d0, sl, fp
 8005d96:	aa1a      	add	r2, sp, #104	; 0x68
 8005d98:	a919      	add	r1, sp, #100	; 0x64
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f002 f97e 	bl	800809c <__d2b>
 8005da0:	ec4b ab18 	vmov	d8, sl, fp
 8005da4:	9018      	str	r0, [sp, #96]	; 0x60
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f43f aef6 	beq.w	8005b98 <_strtod_l+0x490>
 8005dac:	2101      	movs	r1, #1
 8005dae:	4620      	mov	r0, r4
 8005db0:	f001 fec8 	bl	8007b44 <__i2b>
 8005db4:	4606      	mov	r6, r0
 8005db6:	2800      	cmp	r0, #0
 8005db8:	f43f aeee 	beq.w	8005b98 <_strtod_l+0x490>
 8005dbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dbe:	9904      	ldr	r1, [sp, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bfab      	itete	ge
 8005dc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005dc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005dc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005dca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005dce:	bfac      	ite	ge
 8005dd0:	eb03 0902 	addge.w	r9, r3, r2
 8005dd4:	1ad7      	sublt	r7, r2, r3
 8005dd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005dd8:	eba3 0801 	sub.w	r8, r3, r1
 8005ddc:	4490      	add	r8, r2
 8005dde:	4ba1      	ldr	r3, [pc, #644]	; (8006064 <_strtod_l+0x95c>)
 8005de0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005de4:	4598      	cmp	r8, r3
 8005de6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005dea:	f280 80c7 	bge.w	8005f7c <_strtod_l+0x874>
 8005dee:	eba3 0308 	sub.w	r3, r3, r8
 8005df2:	2b1f      	cmp	r3, #31
 8005df4:	eba2 0203 	sub.w	r2, r2, r3
 8005df8:	f04f 0101 	mov.w	r1, #1
 8005dfc:	f300 80b1 	bgt.w	8005f62 <_strtod_l+0x85a>
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	930d      	str	r3, [sp, #52]	; 0x34
 8005e06:	2300      	movs	r3, #0
 8005e08:	9308      	str	r3, [sp, #32]
 8005e0a:	eb09 0802 	add.w	r8, r9, r2
 8005e0e:	9b04      	ldr	r3, [sp, #16]
 8005e10:	45c1      	cmp	r9, r8
 8005e12:	4417      	add	r7, r2
 8005e14:	441f      	add	r7, r3
 8005e16:	464b      	mov	r3, r9
 8005e18:	bfa8      	it	ge
 8005e1a:	4643      	movge	r3, r8
 8005e1c:	42bb      	cmp	r3, r7
 8005e1e:	bfa8      	it	ge
 8005e20:	463b      	movge	r3, r7
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bfc2      	ittt	gt
 8005e26:	eba8 0803 	subgt.w	r8, r8, r3
 8005e2a:	1aff      	subgt	r7, r7, r3
 8005e2c:	eba9 0903 	subgt.w	r9, r9, r3
 8005e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd17      	ble.n	8005e66 <_strtod_l+0x75e>
 8005e36:	4631      	mov	r1, r6
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f001 ff42 	bl	8007cc4 <__pow5mult>
 8005e40:	4606      	mov	r6, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f43f aea8 	beq.w	8005b98 <_strtod_l+0x490>
 8005e48:	4601      	mov	r1, r0
 8005e4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f001 fe8f 	bl	8007b70 <__multiply>
 8005e52:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f43f ae9f 	beq.w	8005b98 <_strtod_l+0x490>
 8005e5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f001 fd6f 	bl	8007940 <_Bfree>
 8005e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e64:	9318      	str	r3, [sp, #96]	; 0x60
 8005e66:	f1b8 0f00 	cmp.w	r8, #0
 8005e6a:	f300 808c 	bgt.w	8005f86 <_strtod_l+0x87e>
 8005e6e:	9b06      	ldr	r3, [sp, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	dd08      	ble.n	8005e86 <_strtod_l+0x77e>
 8005e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e76:	9905      	ldr	r1, [sp, #20]
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f001 ff23 	bl	8007cc4 <__pow5mult>
 8005e7e:	9005      	str	r0, [sp, #20]
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f43f ae89 	beq.w	8005b98 <_strtod_l+0x490>
 8005e86:	2f00      	cmp	r7, #0
 8005e88:	dd08      	ble.n	8005e9c <_strtod_l+0x794>
 8005e8a:	9905      	ldr	r1, [sp, #20]
 8005e8c:	463a      	mov	r2, r7
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f001 ff72 	bl	8007d78 <__lshift>
 8005e94:	9005      	str	r0, [sp, #20]
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f43f ae7e 	beq.w	8005b98 <_strtod_l+0x490>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	dd08      	ble.n	8005eb4 <_strtod_l+0x7ac>
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	464a      	mov	r2, r9
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f001 ff66 	bl	8007d78 <__lshift>
 8005eac:	4606      	mov	r6, r0
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f43f ae72 	beq.w	8005b98 <_strtod_l+0x490>
 8005eb4:	9a05      	ldr	r2, [sp, #20]
 8005eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f001 ffe9 	bl	8007e90 <__mdiff>
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f43f ae69 	beq.w	8005b98 <_strtod_l+0x490>
 8005ec6:	68c3      	ldr	r3, [r0, #12]
 8005ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60c3      	str	r3, [r0, #12]
 8005ece:	4631      	mov	r1, r6
 8005ed0:	f001 ffc2 	bl	8007e58 <__mcmp>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	da60      	bge.n	8005f9a <_strtod_l+0x892>
 8005ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eda:	ea53 030a 	orrs.w	r3, r3, sl
 8005ede:	f040 8082 	bne.w	8005fe6 <_strtod_l+0x8de>
 8005ee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d17d      	bne.n	8005fe6 <_strtod_l+0x8de>
 8005eea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005eee:	0d1b      	lsrs	r3, r3, #20
 8005ef0:	051b      	lsls	r3, r3, #20
 8005ef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ef6:	d976      	bls.n	8005fe6 <_strtod_l+0x8de>
 8005ef8:	696b      	ldr	r3, [r5, #20]
 8005efa:	b913      	cbnz	r3, 8005f02 <_strtod_l+0x7fa>
 8005efc:	692b      	ldr	r3, [r5, #16]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	dd71      	ble.n	8005fe6 <_strtod_l+0x8de>
 8005f02:	4629      	mov	r1, r5
 8005f04:	2201      	movs	r2, #1
 8005f06:	4620      	mov	r0, r4
 8005f08:	f001 ff36 	bl	8007d78 <__lshift>
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4605      	mov	r5, r0
 8005f10:	f001 ffa2 	bl	8007e58 <__mcmp>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	dd66      	ble.n	8005fe6 <_strtod_l+0x8de>
 8005f18:	9904      	ldr	r1, [sp, #16]
 8005f1a:	4a53      	ldr	r2, [pc, #332]	; (8006068 <_strtod_l+0x960>)
 8005f1c:	465b      	mov	r3, fp
 8005f1e:	2900      	cmp	r1, #0
 8005f20:	f000 8081 	beq.w	8006026 <_strtod_l+0x91e>
 8005f24:	ea02 010b 	and.w	r1, r2, fp
 8005f28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005f2c:	dc7b      	bgt.n	8006026 <_strtod_l+0x91e>
 8005f2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005f32:	f77f aea9 	ble.w	8005c88 <_strtod_l+0x580>
 8005f36:	4b4d      	ldr	r3, [pc, #308]	; (800606c <_strtod_l+0x964>)
 8005f38:	4650      	mov	r0, sl
 8005f3a:	4659      	mov	r1, fp
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f7fa fb73 	bl	8000628 <__aeabi_dmul>
 8005f42:	460b      	mov	r3, r1
 8005f44:	4303      	orrs	r3, r0
 8005f46:	bf08      	it	eq
 8005f48:	2322      	moveq	r3, #34	; 0x22
 8005f4a:	4682      	mov	sl, r0
 8005f4c:	468b      	mov	fp, r1
 8005f4e:	bf08      	it	eq
 8005f50:	6023      	streq	r3, [r4, #0]
 8005f52:	e62b      	b.n	8005bac <_strtod_l+0x4a4>
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	ea03 0a0a 	and.w	sl, r3, sl
 8005f60:	e6e3      	b.n	8005d2a <_strtod_l+0x622>
 8005f62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005f66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005f6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005f6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005f72:	fa01 f308 	lsl.w	r3, r1, r8
 8005f76:	9308      	str	r3, [sp, #32]
 8005f78:	910d      	str	r1, [sp, #52]	; 0x34
 8005f7a:	e746      	b.n	8005e0a <_strtod_l+0x702>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9308      	str	r3, [sp, #32]
 8005f80:	2301      	movs	r3, #1
 8005f82:	930d      	str	r3, [sp, #52]	; 0x34
 8005f84:	e741      	b.n	8005e0a <_strtod_l+0x702>
 8005f86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f88:	4642      	mov	r2, r8
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f001 fef4 	bl	8007d78 <__lshift>
 8005f90:	9018      	str	r0, [sp, #96]	; 0x60
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f47f af6b 	bne.w	8005e6e <_strtod_l+0x766>
 8005f98:	e5fe      	b.n	8005b98 <_strtod_l+0x490>
 8005f9a:	465f      	mov	r7, fp
 8005f9c:	d16e      	bne.n	800607c <_strtod_l+0x974>
 8005f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fa4:	b342      	cbz	r2, 8005ff8 <_strtod_l+0x8f0>
 8005fa6:	4a32      	ldr	r2, [pc, #200]	; (8006070 <_strtod_l+0x968>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d128      	bne.n	8005ffe <_strtod_l+0x8f6>
 8005fac:	9b04      	ldr	r3, [sp, #16]
 8005fae:	4651      	mov	r1, sl
 8005fb0:	b1eb      	cbz	r3, 8005fee <_strtod_l+0x8e6>
 8005fb2:	4b2d      	ldr	r3, [pc, #180]	; (8006068 <_strtod_l+0x960>)
 8005fb4:	403b      	ands	r3, r7
 8005fb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fbe:	d819      	bhi.n	8005ff4 <_strtod_l+0x8ec>
 8005fc0:	0d1b      	lsrs	r3, r3, #20
 8005fc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d117      	bne.n	8005ffe <_strtod_l+0x8f6>
 8005fce:	4b29      	ldr	r3, [pc, #164]	; (8006074 <_strtod_l+0x96c>)
 8005fd0:	429f      	cmp	r7, r3
 8005fd2:	d102      	bne.n	8005fda <_strtod_l+0x8d2>
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	f43f addf 	beq.w	8005b98 <_strtod_l+0x490>
 8005fda:	4b23      	ldr	r3, [pc, #140]	; (8006068 <_strtod_l+0x960>)
 8005fdc:	403b      	ands	r3, r7
 8005fde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005fe2:	f04f 0a00 	mov.w	sl, #0
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1a4      	bne.n	8005f36 <_strtod_l+0x82e>
 8005fec:	e5de      	b.n	8005bac <_strtod_l+0x4a4>
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff2:	e7ea      	b.n	8005fca <_strtod_l+0x8c2>
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	e7e8      	b.n	8005fca <_strtod_l+0x8c2>
 8005ff8:	ea53 030a 	orrs.w	r3, r3, sl
 8005ffc:	d08c      	beq.n	8005f18 <_strtod_l+0x810>
 8005ffe:	9b08      	ldr	r3, [sp, #32]
 8006000:	b1db      	cbz	r3, 800603a <_strtod_l+0x932>
 8006002:	423b      	tst	r3, r7
 8006004:	d0ef      	beq.n	8005fe6 <_strtod_l+0x8de>
 8006006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006008:	9a04      	ldr	r2, [sp, #16]
 800600a:	4650      	mov	r0, sl
 800600c:	4659      	mov	r1, fp
 800600e:	b1c3      	cbz	r3, 8006042 <_strtod_l+0x93a>
 8006010:	f7ff fb5b 	bl	80056ca <sulp>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	ec51 0b18 	vmov	r0, r1, d8
 800601c:	f7fa f94e 	bl	80002bc <__adddf3>
 8006020:	4682      	mov	sl, r0
 8006022:	468b      	mov	fp, r1
 8006024:	e7df      	b.n	8005fe6 <_strtod_l+0x8de>
 8006026:	4013      	ands	r3, r2
 8006028:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800602c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006030:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006034:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006038:	e7d5      	b.n	8005fe6 <_strtod_l+0x8de>
 800603a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800603c:	ea13 0f0a 	tst.w	r3, sl
 8006040:	e7e0      	b.n	8006004 <_strtod_l+0x8fc>
 8006042:	f7ff fb42 	bl	80056ca <sulp>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	ec51 0b18 	vmov	r0, r1, d8
 800604e:	f7fa f933 	bl	80002b8 <__aeabi_dsub>
 8006052:	2200      	movs	r2, #0
 8006054:	2300      	movs	r3, #0
 8006056:	4682      	mov	sl, r0
 8006058:	468b      	mov	fp, r1
 800605a:	f7fa fd4d 	bl	8000af8 <__aeabi_dcmpeq>
 800605e:	2800      	cmp	r0, #0
 8006060:	d0c1      	beq.n	8005fe6 <_strtod_l+0x8de>
 8006062:	e611      	b.n	8005c88 <_strtod_l+0x580>
 8006064:	fffffc02 	.word	0xfffffc02
 8006068:	7ff00000 	.word	0x7ff00000
 800606c:	39500000 	.word	0x39500000
 8006070:	000fffff 	.word	0x000fffff
 8006074:	7fefffff 	.word	0x7fefffff
 8006078:	08009dd8 	.word	0x08009dd8
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	f002 f868 	bl	8008154 <__ratio>
 8006084:	ec59 8b10 	vmov	r8, r9, d0
 8006088:	ee10 0a10 	vmov	r0, s0
 800608c:	2200      	movs	r2, #0
 800608e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006092:	4649      	mov	r1, r9
 8006094:	f7fa fd44 	bl	8000b20 <__aeabi_dcmple>
 8006098:	2800      	cmp	r0, #0
 800609a:	d07a      	beq.n	8006192 <_strtod_l+0xa8a>
 800609c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d04a      	beq.n	8006138 <_strtod_l+0xa30>
 80060a2:	4b95      	ldr	r3, [pc, #596]	; (80062f8 <_strtod_l+0xbf0>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80062f8 <_strtod_l+0xbf0>
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	4b92      	ldr	r3, [pc, #584]	; (80062fc <_strtod_l+0xbf4>)
 80060b4:	403b      	ands	r3, r7
 80060b6:	930d      	str	r3, [sp, #52]	; 0x34
 80060b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060ba:	4b91      	ldr	r3, [pc, #580]	; (8006300 <_strtod_l+0xbf8>)
 80060bc:	429a      	cmp	r2, r3
 80060be:	f040 80b0 	bne.w	8006222 <_strtod_l+0xb1a>
 80060c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80060ca:	ec4b ab10 	vmov	d0, sl, fp
 80060ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060d2:	f001 ff67 	bl	8007fa4 <__ulp>
 80060d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060da:	ec53 2b10 	vmov	r2, r3, d0
 80060de:	f7fa faa3 	bl	8000628 <__aeabi_dmul>
 80060e2:	4652      	mov	r2, sl
 80060e4:	465b      	mov	r3, fp
 80060e6:	f7fa f8e9 	bl	80002bc <__adddf3>
 80060ea:	460b      	mov	r3, r1
 80060ec:	4983      	ldr	r1, [pc, #524]	; (80062fc <_strtod_l+0xbf4>)
 80060ee:	4a85      	ldr	r2, [pc, #532]	; (8006304 <_strtod_l+0xbfc>)
 80060f0:	4019      	ands	r1, r3
 80060f2:	4291      	cmp	r1, r2
 80060f4:	4682      	mov	sl, r0
 80060f6:	d960      	bls.n	80061ba <_strtod_l+0xab2>
 80060f8:	ee18 3a90 	vmov	r3, s17
 80060fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006100:	4293      	cmp	r3, r2
 8006102:	d104      	bne.n	800610e <_strtod_l+0xa06>
 8006104:	ee18 3a10 	vmov	r3, s16
 8006108:	3301      	adds	r3, #1
 800610a:	f43f ad45 	beq.w	8005b98 <_strtod_l+0x490>
 800610e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006310 <_strtod_l+0xc08>
 8006112:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006116:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006118:	4620      	mov	r0, r4
 800611a:	f001 fc11 	bl	8007940 <_Bfree>
 800611e:	9905      	ldr	r1, [sp, #20]
 8006120:	4620      	mov	r0, r4
 8006122:	f001 fc0d 	bl	8007940 <_Bfree>
 8006126:	4631      	mov	r1, r6
 8006128:	4620      	mov	r0, r4
 800612a:	f001 fc09 	bl	8007940 <_Bfree>
 800612e:	4629      	mov	r1, r5
 8006130:	4620      	mov	r0, r4
 8006132:	f001 fc05 	bl	8007940 <_Bfree>
 8006136:	e61a      	b.n	8005d6e <_strtod_l+0x666>
 8006138:	f1ba 0f00 	cmp.w	sl, #0
 800613c:	d11b      	bne.n	8006176 <_strtod_l+0xa6e>
 800613e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006142:	b9f3      	cbnz	r3, 8006182 <_strtod_l+0xa7a>
 8006144:	4b6c      	ldr	r3, [pc, #432]	; (80062f8 <_strtod_l+0xbf0>)
 8006146:	2200      	movs	r2, #0
 8006148:	4640      	mov	r0, r8
 800614a:	4649      	mov	r1, r9
 800614c:	f7fa fcde 	bl	8000b0c <__aeabi_dcmplt>
 8006150:	b9d0      	cbnz	r0, 8006188 <_strtod_l+0xa80>
 8006152:	4640      	mov	r0, r8
 8006154:	4649      	mov	r1, r9
 8006156:	4b6c      	ldr	r3, [pc, #432]	; (8006308 <_strtod_l+0xc00>)
 8006158:	2200      	movs	r2, #0
 800615a:	f7fa fa65 	bl	8000628 <__aeabi_dmul>
 800615e:	4680      	mov	r8, r0
 8006160:	4689      	mov	r9, r1
 8006162:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006166:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800616a:	9315      	str	r3, [sp, #84]	; 0x54
 800616c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006174:	e79d      	b.n	80060b2 <_strtod_l+0x9aa>
 8006176:	f1ba 0f01 	cmp.w	sl, #1
 800617a:	d102      	bne.n	8006182 <_strtod_l+0xa7a>
 800617c:	2f00      	cmp	r7, #0
 800617e:	f43f ad83 	beq.w	8005c88 <_strtod_l+0x580>
 8006182:	4b62      	ldr	r3, [pc, #392]	; (800630c <_strtod_l+0xc04>)
 8006184:	2200      	movs	r2, #0
 8006186:	e78e      	b.n	80060a6 <_strtod_l+0x99e>
 8006188:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006308 <_strtod_l+0xc00>
 800618c:	f04f 0800 	mov.w	r8, #0
 8006190:	e7e7      	b.n	8006162 <_strtod_l+0xa5a>
 8006192:	4b5d      	ldr	r3, [pc, #372]	; (8006308 <_strtod_l+0xc00>)
 8006194:	4640      	mov	r0, r8
 8006196:	4649      	mov	r1, r9
 8006198:	2200      	movs	r2, #0
 800619a:	f7fa fa45 	bl	8000628 <__aeabi_dmul>
 800619e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a0:	4680      	mov	r8, r0
 80061a2:	4689      	mov	r9, r1
 80061a4:	b933      	cbnz	r3, 80061b4 <_strtod_l+0xaac>
 80061a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061aa:	900e      	str	r0, [sp, #56]	; 0x38
 80061ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80061ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80061b2:	e7dd      	b.n	8006170 <_strtod_l+0xa68>
 80061b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80061b8:	e7f9      	b.n	80061ae <_strtod_l+0xaa6>
 80061ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80061be:	9b04      	ldr	r3, [sp, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1a8      	bne.n	8006116 <_strtod_l+0xa0e>
 80061c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061ca:	0d1b      	lsrs	r3, r3, #20
 80061cc:	051b      	lsls	r3, r3, #20
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d1a1      	bne.n	8006116 <_strtod_l+0xa0e>
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	f7fa fd6f 	bl	8000cb8 <__aeabi_d2lz>
 80061da:	f7fa f9f7 	bl	80005cc <__aeabi_l2d>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4640      	mov	r0, r8
 80061e4:	4649      	mov	r1, r9
 80061e6:	f7fa f867 	bl	80002b8 <__aeabi_dsub>
 80061ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061f0:	ea43 030a 	orr.w	r3, r3, sl
 80061f4:	4313      	orrs	r3, r2
 80061f6:	4680      	mov	r8, r0
 80061f8:	4689      	mov	r9, r1
 80061fa:	d055      	beq.n	80062a8 <_strtod_l+0xba0>
 80061fc:	a336      	add	r3, pc, #216	; (adr r3, 80062d8 <_strtod_l+0xbd0>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f7fa fc83 	bl	8000b0c <__aeabi_dcmplt>
 8006206:	2800      	cmp	r0, #0
 8006208:	f47f acd0 	bne.w	8005bac <_strtod_l+0x4a4>
 800620c:	a334      	add	r3, pc, #208	; (adr r3, 80062e0 <_strtod_l+0xbd8>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	4640      	mov	r0, r8
 8006214:	4649      	mov	r1, r9
 8006216:	f7fa fc97 	bl	8000b48 <__aeabi_dcmpgt>
 800621a:	2800      	cmp	r0, #0
 800621c:	f43f af7b 	beq.w	8006116 <_strtod_l+0xa0e>
 8006220:	e4c4      	b.n	8005bac <_strtod_l+0x4a4>
 8006222:	9b04      	ldr	r3, [sp, #16]
 8006224:	b333      	cbz	r3, 8006274 <_strtod_l+0xb6c>
 8006226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006228:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800622c:	d822      	bhi.n	8006274 <_strtod_l+0xb6c>
 800622e:	a32e      	add	r3, pc, #184	; (adr r3, 80062e8 <_strtod_l+0xbe0>)
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	4640      	mov	r0, r8
 8006236:	4649      	mov	r1, r9
 8006238:	f7fa fc72 	bl	8000b20 <__aeabi_dcmple>
 800623c:	b1a0      	cbz	r0, 8006268 <_strtod_l+0xb60>
 800623e:	4649      	mov	r1, r9
 8006240:	4640      	mov	r0, r8
 8006242:	f7fa fcc9 	bl	8000bd8 <__aeabi_d2uiz>
 8006246:	2801      	cmp	r0, #1
 8006248:	bf38      	it	cc
 800624a:	2001      	movcc	r0, #1
 800624c:	f7fa f972 	bl	8000534 <__aeabi_ui2d>
 8006250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006252:	4680      	mov	r8, r0
 8006254:	4689      	mov	r9, r1
 8006256:	bb23      	cbnz	r3, 80062a2 <_strtod_l+0xb9a>
 8006258:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800625c:	9010      	str	r0, [sp, #64]	; 0x40
 800625e:	9311      	str	r3, [sp, #68]	; 0x44
 8006260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006264:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800626c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	9309      	str	r3, [sp, #36]	; 0x24
 8006274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006278:	eeb0 0a48 	vmov.f32	s0, s16
 800627c:	eef0 0a68 	vmov.f32	s1, s17
 8006280:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006284:	f001 fe8e 	bl	8007fa4 <__ulp>
 8006288:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800628c:	ec53 2b10 	vmov	r2, r3, d0
 8006290:	f7fa f9ca 	bl	8000628 <__aeabi_dmul>
 8006294:	ec53 2b18 	vmov	r2, r3, d8
 8006298:	f7fa f810 	bl	80002bc <__adddf3>
 800629c:	4682      	mov	sl, r0
 800629e:	468b      	mov	fp, r1
 80062a0:	e78d      	b.n	80061be <_strtod_l+0xab6>
 80062a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80062a6:	e7db      	b.n	8006260 <_strtod_l+0xb58>
 80062a8:	a311      	add	r3, pc, #68	; (adr r3, 80062f0 <_strtod_l+0xbe8>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa fc2d 	bl	8000b0c <__aeabi_dcmplt>
 80062b2:	e7b2      	b.n	800621a <_strtod_l+0xb12>
 80062b4:	2300      	movs	r3, #0
 80062b6:	930a      	str	r3, [sp, #40]	; 0x28
 80062b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	f7ff ba6b 	b.w	8005798 <_strtod_l+0x90>
 80062c2:	2a65      	cmp	r2, #101	; 0x65
 80062c4:	f43f ab5f 	beq.w	8005986 <_strtod_l+0x27e>
 80062c8:	2a45      	cmp	r2, #69	; 0x45
 80062ca:	f43f ab5c 	beq.w	8005986 <_strtod_l+0x27e>
 80062ce:	2301      	movs	r3, #1
 80062d0:	f7ff bb94 	b.w	80059fc <_strtod_l+0x2f4>
 80062d4:	f3af 8000 	nop.w
 80062d8:	94a03595 	.word	0x94a03595
 80062dc:	3fdfffff 	.word	0x3fdfffff
 80062e0:	35afe535 	.word	0x35afe535
 80062e4:	3fe00000 	.word	0x3fe00000
 80062e8:	ffc00000 	.word	0xffc00000
 80062ec:	41dfffff 	.word	0x41dfffff
 80062f0:	94a03595 	.word	0x94a03595
 80062f4:	3fcfffff 	.word	0x3fcfffff
 80062f8:	3ff00000 	.word	0x3ff00000
 80062fc:	7ff00000 	.word	0x7ff00000
 8006300:	7fe00000 	.word	0x7fe00000
 8006304:	7c9fffff 	.word	0x7c9fffff
 8006308:	3fe00000 	.word	0x3fe00000
 800630c:	bff00000 	.word	0xbff00000
 8006310:	7fefffff 	.word	0x7fefffff

08006314 <_strtod_r>:
 8006314:	4b01      	ldr	r3, [pc, #4]	; (800631c <_strtod_r+0x8>)
 8006316:	f7ff b9f7 	b.w	8005708 <_strtod_l>
 800631a:	bf00      	nop
 800631c:	20000068 	.word	0x20000068

08006320 <_strtol_l.constprop.0>:
 8006320:	2b01      	cmp	r3, #1
 8006322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006326:	d001      	beq.n	800632c <_strtol_l.constprop.0+0xc>
 8006328:	2b24      	cmp	r3, #36	; 0x24
 800632a:	d906      	bls.n	800633a <_strtol_l.constprop.0+0x1a>
 800632c:	f7fe fa8a 	bl	8004844 <__errno>
 8006330:	2316      	movs	r3, #22
 8006332:	6003      	str	r3, [r0, #0]
 8006334:	2000      	movs	r0, #0
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006420 <_strtol_l.constprop.0+0x100>
 800633e:	460d      	mov	r5, r1
 8006340:	462e      	mov	r6, r5
 8006342:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006346:	f814 700c 	ldrb.w	r7, [r4, ip]
 800634a:	f017 0708 	ands.w	r7, r7, #8
 800634e:	d1f7      	bne.n	8006340 <_strtol_l.constprop.0+0x20>
 8006350:	2c2d      	cmp	r4, #45	; 0x2d
 8006352:	d132      	bne.n	80063ba <_strtol_l.constprop.0+0x9a>
 8006354:	782c      	ldrb	r4, [r5, #0]
 8006356:	2701      	movs	r7, #1
 8006358:	1cb5      	adds	r5, r6, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d05b      	beq.n	8006416 <_strtol_l.constprop.0+0xf6>
 800635e:	2b10      	cmp	r3, #16
 8006360:	d109      	bne.n	8006376 <_strtol_l.constprop.0+0x56>
 8006362:	2c30      	cmp	r4, #48	; 0x30
 8006364:	d107      	bne.n	8006376 <_strtol_l.constprop.0+0x56>
 8006366:	782c      	ldrb	r4, [r5, #0]
 8006368:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800636c:	2c58      	cmp	r4, #88	; 0x58
 800636e:	d14d      	bne.n	800640c <_strtol_l.constprop.0+0xec>
 8006370:	786c      	ldrb	r4, [r5, #1]
 8006372:	2310      	movs	r3, #16
 8006374:	3502      	adds	r5, #2
 8006376:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800637a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800637e:	f04f 0c00 	mov.w	ip, #0
 8006382:	fbb8 f9f3 	udiv	r9, r8, r3
 8006386:	4666      	mov	r6, ip
 8006388:	fb03 8a19 	mls	sl, r3, r9, r8
 800638c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006390:	f1be 0f09 	cmp.w	lr, #9
 8006394:	d816      	bhi.n	80063c4 <_strtol_l.constprop.0+0xa4>
 8006396:	4674      	mov	r4, lr
 8006398:	42a3      	cmp	r3, r4
 800639a:	dd24      	ble.n	80063e6 <_strtol_l.constprop.0+0xc6>
 800639c:	f1bc 0f00 	cmp.w	ip, #0
 80063a0:	db1e      	blt.n	80063e0 <_strtol_l.constprop.0+0xc0>
 80063a2:	45b1      	cmp	r9, r6
 80063a4:	d31c      	bcc.n	80063e0 <_strtol_l.constprop.0+0xc0>
 80063a6:	d101      	bne.n	80063ac <_strtol_l.constprop.0+0x8c>
 80063a8:	45a2      	cmp	sl, r4
 80063aa:	db19      	blt.n	80063e0 <_strtol_l.constprop.0+0xc0>
 80063ac:	fb06 4603 	mla	r6, r6, r3, r4
 80063b0:	f04f 0c01 	mov.w	ip, #1
 80063b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063b8:	e7e8      	b.n	800638c <_strtol_l.constprop.0+0x6c>
 80063ba:	2c2b      	cmp	r4, #43	; 0x2b
 80063bc:	bf04      	itt	eq
 80063be:	782c      	ldrbeq	r4, [r5, #0]
 80063c0:	1cb5      	addeq	r5, r6, #2
 80063c2:	e7ca      	b.n	800635a <_strtol_l.constprop.0+0x3a>
 80063c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80063c8:	f1be 0f19 	cmp.w	lr, #25
 80063cc:	d801      	bhi.n	80063d2 <_strtol_l.constprop.0+0xb2>
 80063ce:	3c37      	subs	r4, #55	; 0x37
 80063d0:	e7e2      	b.n	8006398 <_strtol_l.constprop.0+0x78>
 80063d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80063d6:	f1be 0f19 	cmp.w	lr, #25
 80063da:	d804      	bhi.n	80063e6 <_strtol_l.constprop.0+0xc6>
 80063dc:	3c57      	subs	r4, #87	; 0x57
 80063de:	e7db      	b.n	8006398 <_strtol_l.constprop.0+0x78>
 80063e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80063e4:	e7e6      	b.n	80063b4 <_strtol_l.constprop.0+0x94>
 80063e6:	f1bc 0f00 	cmp.w	ip, #0
 80063ea:	da05      	bge.n	80063f8 <_strtol_l.constprop.0+0xd8>
 80063ec:	2322      	movs	r3, #34	; 0x22
 80063ee:	6003      	str	r3, [r0, #0]
 80063f0:	4646      	mov	r6, r8
 80063f2:	b942      	cbnz	r2, 8006406 <_strtol_l.constprop.0+0xe6>
 80063f4:	4630      	mov	r0, r6
 80063f6:	e79e      	b.n	8006336 <_strtol_l.constprop.0+0x16>
 80063f8:	b107      	cbz	r7, 80063fc <_strtol_l.constprop.0+0xdc>
 80063fa:	4276      	negs	r6, r6
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	d0f9      	beq.n	80063f4 <_strtol_l.constprop.0+0xd4>
 8006400:	f1bc 0f00 	cmp.w	ip, #0
 8006404:	d000      	beq.n	8006408 <_strtol_l.constprop.0+0xe8>
 8006406:	1e69      	subs	r1, r5, #1
 8006408:	6011      	str	r1, [r2, #0]
 800640a:	e7f3      	b.n	80063f4 <_strtol_l.constprop.0+0xd4>
 800640c:	2430      	movs	r4, #48	; 0x30
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1b1      	bne.n	8006376 <_strtol_l.constprop.0+0x56>
 8006412:	2308      	movs	r3, #8
 8006414:	e7af      	b.n	8006376 <_strtol_l.constprop.0+0x56>
 8006416:	2c30      	cmp	r4, #48	; 0x30
 8006418:	d0a5      	beq.n	8006366 <_strtol_l.constprop.0+0x46>
 800641a:	230a      	movs	r3, #10
 800641c:	e7ab      	b.n	8006376 <_strtol_l.constprop.0+0x56>
 800641e:	bf00      	nop
 8006420:	08009e01 	.word	0x08009e01

08006424 <_strtol_r>:
 8006424:	f7ff bf7c 	b.w	8006320 <_strtol_l.constprop.0>

08006428 <_write_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d07      	ldr	r5, [pc, #28]	; (8006448 <_write_r+0x20>)
 800642c:	4604      	mov	r4, r0
 800642e:	4608      	mov	r0, r1
 8006430:	4611      	mov	r1, r2
 8006432:	2200      	movs	r2, #0
 8006434:	602a      	str	r2, [r5, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f7fb f9ed 	bl	8001816 <_write>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_write_r+0x1e>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_write_r+0x1e>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	20000504 	.word	0x20000504

0800644c <_close_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4d06      	ldr	r5, [pc, #24]	; (8006468 <_close_r+0x1c>)
 8006450:	2300      	movs	r3, #0
 8006452:	4604      	mov	r4, r0
 8006454:	4608      	mov	r0, r1
 8006456:	602b      	str	r3, [r5, #0]
 8006458:	f7fb f9f9 	bl	800184e <_close>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_close_r+0x1a>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	b103      	cbz	r3, 8006466 <_close_r+0x1a>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20000504 	.word	0x20000504

0800646c <quorem>:
 800646c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	6903      	ldr	r3, [r0, #16]
 8006472:	690c      	ldr	r4, [r1, #16]
 8006474:	42a3      	cmp	r3, r4
 8006476:	4607      	mov	r7, r0
 8006478:	f2c0 8081 	blt.w	800657e <quorem+0x112>
 800647c:	3c01      	subs	r4, #1
 800647e:	f101 0814 	add.w	r8, r1, #20
 8006482:	f100 0514 	add.w	r5, r0, #20
 8006486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006494:	3301      	adds	r3, #1
 8006496:	429a      	cmp	r2, r3
 8006498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800649c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064a4:	d331      	bcc.n	800650a <quorem+0x9e>
 80064a6:	f04f 0e00 	mov.w	lr, #0
 80064aa:	4640      	mov	r0, r8
 80064ac:	46ac      	mov	ip, r5
 80064ae:	46f2      	mov	sl, lr
 80064b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064b4:	b293      	uxth	r3, r2
 80064b6:	fb06 e303 	mla	r3, r6, r3, lr
 80064ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ebaa 0303 	sub.w	r3, sl, r3
 80064c4:	f8dc a000 	ldr.w	sl, [ip]
 80064c8:	0c12      	lsrs	r2, r2, #16
 80064ca:	fa13 f38a 	uxtah	r3, r3, sl
 80064ce:	fb06 e202 	mla	r2, r6, r2, lr
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	9b00      	ldr	r3, [sp, #0]
 80064d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064da:	b292      	uxth	r2, r2
 80064dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80064e8:	4581      	cmp	r9, r0
 80064ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064ee:	f84c 3b04 	str.w	r3, [ip], #4
 80064f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064f6:	d2db      	bcs.n	80064b0 <quorem+0x44>
 80064f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80064fc:	b92b      	cbnz	r3, 800650a <quorem+0x9e>
 80064fe:	9b01      	ldr	r3, [sp, #4]
 8006500:	3b04      	subs	r3, #4
 8006502:	429d      	cmp	r5, r3
 8006504:	461a      	mov	r2, r3
 8006506:	d32e      	bcc.n	8006566 <quorem+0xfa>
 8006508:	613c      	str	r4, [r7, #16]
 800650a:	4638      	mov	r0, r7
 800650c:	f001 fca4 	bl	8007e58 <__mcmp>
 8006510:	2800      	cmp	r0, #0
 8006512:	db24      	blt.n	800655e <quorem+0xf2>
 8006514:	3601      	adds	r6, #1
 8006516:	4628      	mov	r0, r5
 8006518:	f04f 0c00 	mov.w	ip, #0
 800651c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006520:	f8d0 e000 	ldr.w	lr, [r0]
 8006524:	b293      	uxth	r3, r2
 8006526:	ebac 0303 	sub.w	r3, ip, r3
 800652a:	0c12      	lsrs	r2, r2, #16
 800652c:	fa13 f38e 	uxtah	r3, r3, lr
 8006530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006538:	b29b      	uxth	r3, r3
 800653a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800653e:	45c1      	cmp	r9, r8
 8006540:	f840 3b04 	str.w	r3, [r0], #4
 8006544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006548:	d2e8      	bcs.n	800651c <quorem+0xb0>
 800654a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800654e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006552:	b922      	cbnz	r2, 800655e <quorem+0xf2>
 8006554:	3b04      	subs	r3, #4
 8006556:	429d      	cmp	r5, r3
 8006558:	461a      	mov	r2, r3
 800655a:	d30a      	bcc.n	8006572 <quorem+0x106>
 800655c:	613c      	str	r4, [r7, #16]
 800655e:	4630      	mov	r0, r6
 8006560:	b003      	add	sp, #12
 8006562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	3b04      	subs	r3, #4
 800656a:	2a00      	cmp	r2, #0
 800656c:	d1cc      	bne.n	8006508 <quorem+0x9c>
 800656e:	3c01      	subs	r4, #1
 8006570:	e7c7      	b.n	8006502 <quorem+0x96>
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	3b04      	subs	r3, #4
 8006576:	2a00      	cmp	r2, #0
 8006578:	d1f0      	bne.n	800655c <quorem+0xf0>
 800657a:	3c01      	subs	r4, #1
 800657c:	e7eb      	b.n	8006556 <quorem+0xea>
 800657e:	2000      	movs	r0, #0
 8006580:	e7ee      	b.n	8006560 <quorem+0xf4>
 8006582:	0000      	movs	r0, r0
 8006584:	0000      	movs	r0, r0
	...

08006588 <_dtoa_r>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	ed2d 8b04 	vpush	{d8-d9}
 8006590:	ec57 6b10 	vmov	r6, r7, d0
 8006594:	b093      	sub	sp, #76	; 0x4c
 8006596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800659c:	9106      	str	r1, [sp, #24]
 800659e:	ee10 aa10 	vmov	sl, s0
 80065a2:	4604      	mov	r4, r0
 80065a4:	9209      	str	r2, [sp, #36]	; 0x24
 80065a6:	930c      	str	r3, [sp, #48]	; 0x30
 80065a8:	46bb      	mov	fp, r7
 80065aa:	b975      	cbnz	r5, 80065ca <_dtoa_r+0x42>
 80065ac:	2010      	movs	r0, #16
 80065ae:	f001 f95f 	bl	8007870 <malloc>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6260      	str	r0, [r4, #36]	; 0x24
 80065b6:	b920      	cbnz	r0, 80065c2 <_dtoa_r+0x3a>
 80065b8:	4ba7      	ldr	r3, [pc, #668]	; (8006858 <_dtoa_r+0x2d0>)
 80065ba:	21ea      	movs	r1, #234	; 0xea
 80065bc:	48a7      	ldr	r0, [pc, #668]	; (800685c <_dtoa_r+0x2d4>)
 80065be:	f002 fceb 	bl	8008f98 <__assert_func>
 80065c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065c6:	6005      	str	r5, [r0, #0]
 80065c8:	60c5      	str	r5, [r0, #12]
 80065ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065cc:	6819      	ldr	r1, [r3, #0]
 80065ce:	b151      	cbz	r1, 80065e6 <_dtoa_r+0x5e>
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	604a      	str	r2, [r1, #4]
 80065d4:	2301      	movs	r3, #1
 80065d6:	4093      	lsls	r3, r2
 80065d8:	608b      	str	r3, [r1, #8]
 80065da:	4620      	mov	r0, r4
 80065dc:	f001 f9b0 	bl	8007940 <_Bfree>
 80065e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	1e3b      	subs	r3, r7, #0
 80065e8:	bfaa      	itet	ge
 80065ea:	2300      	movge	r3, #0
 80065ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80065f0:	f8c8 3000 	strge.w	r3, [r8]
 80065f4:	4b9a      	ldr	r3, [pc, #616]	; (8006860 <_dtoa_r+0x2d8>)
 80065f6:	bfbc      	itt	lt
 80065f8:	2201      	movlt	r2, #1
 80065fa:	f8c8 2000 	strlt.w	r2, [r8]
 80065fe:	ea33 030b 	bics.w	r3, r3, fp
 8006602:	d11b      	bne.n	800663c <_dtoa_r+0xb4>
 8006604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006606:	f242 730f 	movw	r3, #9999	; 0x270f
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006610:	4333      	orrs	r3, r6
 8006612:	f000 8592 	beq.w	800713a <_dtoa_r+0xbb2>
 8006616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006618:	b963      	cbnz	r3, 8006634 <_dtoa_r+0xac>
 800661a:	4b92      	ldr	r3, [pc, #584]	; (8006864 <_dtoa_r+0x2dc>)
 800661c:	e022      	b.n	8006664 <_dtoa_r+0xdc>
 800661e:	4b92      	ldr	r3, [pc, #584]	; (8006868 <_dtoa_r+0x2e0>)
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	3308      	adds	r3, #8
 8006624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	9801      	ldr	r0, [sp, #4]
 800662a:	b013      	add	sp, #76	; 0x4c
 800662c:	ecbd 8b04 	vpop	{d8-d9}
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4b8b      	ldr	r3, [pc, #556]	; (8006864 <_dtoa_r+0x2dc>)
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	3303      	adds	r3, #3
 800663a:	e7f3      	b.n	8006624 <_dtoa_r+0x9c>
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	4650      	mov	r0, sl
 8006642:	4659      	mov	r1, fp
 8006644:	f7fa fa58 	bl	8000af8 <__aeabi_dcmpeq>
 8006648:	ec4b ab19 	vmov	d9, sl, fp
 800664c:	4680      	mov	r8, r0
 800664e:	b158      	cbz	r0, 8006668 <_dtoa_r+0xe0>
 8006650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006652:	2301      	movs	r3, #1
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 856b 	beq.w	8007134 <_dtoa_r+0xbac>
 800665e:	4883      	ldr	r0, [pc, #524]	; (800686c <_dtoa_r+0x2e4>)
 8006660:	6018      	str	r0, [r3, #0]
 8006662:	1e43      	subs	r3, r0, #1
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	e7df      	b.n	8006628 <_dtoa_r+0xa0>
 8006668:	ec4b ab10 	vmov	d0, sl, fp
 800666c:	aa10      	add	r2, sp, #64	; 0x40
 800666e:	a911      	add	r1, sp, #68	; 0x44
 8006670:	4620      	mov	r0, r4
 8006672:	f001 fd13 	bl	800809c <__d2b>
 8006676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800667a:	ee08 0a10 	vmov	s16, r0
 800667e:	2d00      	cmp	r5, #0
 8006680:	f000 8084 	beq.w	800678c <_dtoa_r+0x204>
 8006684:	ee19 3a90 	vmov	r3, s19
 8006688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800668c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006690:	4656      	mov	r6, sl
 8006692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800669a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800669e:	4b74      	ldr	r3, [pc, #464]	; (8006870 <_dtoa_r+0x2e8>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7f9 fe07 	bl	80002b8 <__aeabi_dsub>
 80066aa:	a365      	add	r3, pc, #404	; (adr r3, 8006840 <_dtoa_r+0x2b8>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 ffba 	bl	8000628 <__aeabi_dmul>
 80066b4:	a364      	add	r3, pc, #400	; (adr r3, 8006848 <_dtoa_r+0x2c0>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 fdff 	bl	80002bc <__adddf3>
 80066be:	4606      	mov	r6, r0
 80066c0:	4628      	mov	r0, r5
 80066c2:	460f      	mov	r7, r1
 80066c4:	f7f9 ff46 	bl	8000554 <__aeabi_i2d>
 80066c8:	a361      	add	r3, pc, #388	; (adr r3, 8006850 <_dtoa_r+0x2c8>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7f9 ffab 	bl	8000628 <__aeabi_dmul>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7f9 fdef 	bl	80002bc <__adddf3>
 80066de:	4606      	mov	r6, r0
 80066e0:	460f      	mov	r7, r1
 80066e2:	f7fa fa51 	bl	8000b88 <__aeabi_d2iz>
 80066e6:	2200      	movs	r2, #0
 80066e8:	9000      	str	r0, [sp, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7fa fa0c 	bl	8000b0c <__aeabi_dcmplt>
 80066f4:	b150      	cbz	r0, 800670c <_dtoa_r+0x184>
 80066f6:	9800      	ldr	r0, [sp, #0]
 80066f8:	f7f9 ff2c 	bl	8000554 <__aeabi_i2d>
 80066fc:	4632      	mov	r2, r6
 80066fe:	463b      	mov	r3, r7
 8006700:	f7fa f9fa 	bl	8000af8 <__aeabi_dcmpeq>
 8006704:	b910      	cbnz	r0, 800670c <_dtoa_r+0x184>
 8006706:	9b00      	ldr	r3, [sp, #0]
 8006708:	3b01      	subs	r3, #1
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	9b00      	ldr	r3, [sp, #0]
 800670e:	2b16      	cmp	r3, #22
 8006710:	d85a      	bhi.n	80067c8 <_dtoa_r+0x240>
 8006712:	9a00      	ldr	r2, [sp, #0]
 8006714:	4b57      	ldr	r3, [pc, #348]	; (8006874 <_dtoa_r+0x2ec>)
 8006716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	ec51 0b19 	vmov	r0, r1, d9
 8006722:	f7fa f9f3 	bl	8000b0c <__aeabi_dcmplt>
 8006726:	2800      	cmp	r0, #0
 8006728:	d050      	beq.n	80067cc <_dtoa_r+0x244>
 800672a:	9b00      	ldr	r3, [sp, #0]
 800672c:	3b01      	subs	r3, #1
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2300      	movs	r3, #0
 8006732:	930b      	str	r3, [sp, #44]	; 0x2c
 8006734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006736:	1b5d      	subs	r5, r3, r5
 8006738:	1e6b      	subs	r3, r5, #1
 800673a:	9305      	str	r3, [sp, #20]
 800673c:	bf45      	ittet	mi
 800673e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006742:	9304      	strmi	r3, [sp, #16]
 8006744:	2300      	movpl	r3, #0
 8006746:	2300      	movmi	r3, #0
 8006748:	bf4c      	ite	mi
 800674a:	9305      	strmi	r3, [sp, #20]
 800674c:	9304      	strpl	r3, [sp, #16]
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	db3d      	blt.n	80067d0 <_dtoa_r+0x248>
 8006754:	9b05      	ldr	r3, [sp, #20]
 8006756:	9a00      	ldr	r2, [sp, #0]
 8006758:	920a      	str	r2, [sp, #40]	; 0x28
 800675a:	4413      	add	r3, r2
 800675c:	9305      	str	r3, [sp, #20]
 800675e:	2300      	movs	r3, #0
 8006760:	9307      	str	r3, [sp, #28]
 8006762:	9b06      	ldr	r3, [sp, #24]
 8006764:	2b09      	cmp	r3, #9
 8006766:	f200 8089 	bhi.w	800687c <_dtoa_r+0x2f4>
 800676a:	2b05      	cmp	r3, #5
 800676c:	bfc4      	itt	gt
 800676e:	3b04      	subgt	r3, #4
 8006770:	9306      	strgt	r3, [sp, #24]
 8006772:	9b06      	ldr	r3, [sp, #24]
 8006774:	f1a3 0302 	sub.w	r3, r3, #2
 8006778:	bfcc      	ite	gt
 800677a:	2500      	movgt	r5, #0
 800677c:	2501      	movle	r5, #1
 800677e:	2b03      	cmp	r3, #3
 8006780:	f200 8087 	bhi.w	8006892 <_dtoa_r+0x30a>
 8006784:	e8df f003 	tbb	[pc, r3]
 8006788:	59383a2d 	.word	0x59383a2d
 800678c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006790:	441d      	add	r5, r3
 8006792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006796:	2b20      	cmp	r3, #32
 8006798:	bfc1      	itttt	gt
 800679a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800679e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80067a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067aa:	bfda      	itte	le
 80067ac:	f1c3 0320 	rsble	r3, r3, #32
 80067b0:	fa06 f003 	lslle.w	r0, r6, r3
 80067b4:	4318      	orrgt	r0, r3
 80067b6:	f7f9 febd 	bl	8000534 <__aeabi_ui2d>
 80067ba:	2301      	movs	r3, #1
 80067bc:	4606      	mov	r6, r0
 80067be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067c2:	3d01      	subs	r5, #1
 80067c4:	930e      	str	r3, [sp, #56]	; 0x38
 80067c6:	e76a      	b.n	800669e <_dtoa_r+0x116>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e7b2      	b.n	8006732 <_dtoa_r+0x1aa>
 80067cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80067ce:	e7b1      	b.n	8006734 <_dtoa_r+0x1ac>
 80067d0:	9b04      	ldr	r3, [sp, #16]
 80067d2:	9a00      	ldr	r2, [sp, #0]
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	9304      	str	r3, [sp, #16]
 80067d8:	4253      	negs	r3, r2
 80067da:	9307      	str	r3, [sp, #28]
 80067dc:	2300      	movs	r3, #0
 80067de:	930a      	str	r3, [sp, #40]	; 0x28
 80067e0:	e7bf      	b.n	8006762 <_dtoa_r+0x1da>
 80067e2:	2300      	movs	r3, #0
 80067e4:	9308      	str	r3, [sp, #32]
 80067e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dc55      	bgt.n	8006898 <_dtoa_r+0x310>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067f2:	461a      	mov	r2, r3
 80067f4:	9209      	str	r2, [sp, #36]	; 0x24
 80067f6:	e00c      	b.n	8006812 <_dtoa_r+0x28a>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e7f3      	b.n	80067e4 <_dtoa_r+0x25c>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006800:	9308      	str	r3, [sp, #32]
 8006802:	9b00      	ldr	r3, [sp, #0]
 8006804:	4413      	add	r3, r2
 8006806:	9302      	str	r3, [sp, #8]
 8006808:	3301      	adds	r3, #1
 800680a:	2b01      	cmp	r3, #1
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	bfb8      	it	lt
 8006810:	2301      	movlt	r3, #1
 8006812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006814:	2200      	movs	r2, #0
 8006816:	6042      	str	r2, [r0, #4]
 8006818:	2204      	movs	r2, #4
 800681a:	f102 0614 	add.w	r6, r2, #20
 800681e:	429e      	cmp	r6, r3
 8006820:	6841      	ldr	r1, [r0, #4]
 8006822:	d93d      	bls.n	80068a0 <_dtoa_r+0x318>
 8006824:	4620      	mov	r0, r4
 8006826:	f001 f84b 	bl	80078c0 <_Balloc>
 800682a:	9001      	str	r0, [sp, #4]
 800682c:	2800      	cmp	r0, #0
 800682e:	d13b      	bne.n	80068a8 <_dtoa_r+0x320>
 8006830:	4b11      	ldr	r3, [pc, #68]	; (8006878 <_dtoa_r+0x2f0>)
 8006832:	4602      	mov	r2, r0
 8006834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006838:	e6c0      	b.n	80065bc <_dtoa_r+0x34>
 800683a:	2301      	movs	r3, #1
 800683c:	e7df      	b.n	80067fe <_dtoa_r+0x276>
 800683e:	bf00      	nop
 8006840:	636f4361 	.word	0x636f4361
 8006844:	3fd287a7 	.word	0x3fd287a7
 8006848:	8b60c8b3 	.word	0x8b60c8b3
 800684c:	3fc68a28 	.word	0x3fc68a28
 8006850:	509f79fb 	.word	0x509f79fb
 8006854:	3fd34413 	.word	0x3fd34413
 8006858:	08009f0e 	.word	0x08009f0e
 800685c:	08009f25 	.word	0x08009f25
 8006860:	7ff00000 	.word	0x7ff00000
 8006864:	08009f0a 	.word	0x08009f0a
 8006868:	08009f01 	.word	0x08009f01
 800686c:	0800a17a 	.word	0x0800a17a
 8006870:	3ff80000 	.word	0x3ff80000
 8006874:	0800a090 	.word	0x0800a090
 8006878:	08009f80 	.word	0x08009f80
 800687c:	2501      	movs	r5, #1
 800687e:	2300      	movs	r3, #0
 8006880:	9306      	str	r3, [sp, #24]
 8006882:	9508      	str	r5, [sp, #32]
 8006884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800688c:	2200      	movs	r2, #0
 800688e:	2312      	movs	r3, #18
 8006890:	e7b0      	b.n	80067f4 <_dtoa_r+0x26c>
 8006892:	2301      	movs	r3, #1
 8006894:	9308      	str	r3, [sp, #32]
 8006896:	e7f5      	b.n	8006884 <_dtoa_r+0x2fc>
 8006898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800689e:	e7b8      	b.n	8006812 <_dtoa_r+0x28a>
 80068a0:	3101      	adds	r1, #1
 80068a2:	6041      	str	r1, [r0, #4]
 80068a4:	0052      	lsls	r2, r2, #1
 80068a6:	e7b8      	b.n	800681a <_dtoa_r+0x292>
 80068a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068aa:	9a01      	ldr	r2, [sp, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	2b0e      	cmp	r3, #14
 80068b2:	f200 809d 	bhi.w	80069f0 <_dtoa_r+0x468>
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	f000 809a 	beq.w	80069f0 <_dtoa_r+0x468>
 80068bc:	9b00      	ldr	r3, [sp, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dd32      	ble.n	8006928 <_dtoa_r+0x3a0>
 80068c2:	4ab7      	ldr	r2, [pc, #732]	; (8006ba0 <_dtoa_r+0x618>)
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	05d8      	lsls	r0, r3, #23
 80068d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80068d8:	d516      	bpl.n	8006908 <_dtoa_r+0x380>
 80068da:	4bb2      	ldr	r3, [pc, #712]	; (8006ba4 <_dtoa_r+0x61c>)
 80068dc:	ec51 0b19 	vmov	r0, r1, d9
 80068e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068e4:	f7f9 ffca 	bl	800087c <__aeabi_ddiv>
 80068e8:	f007 070f 	and.w	r7, r7, #15
 80068ec:	4682      	mov	sl, r0
 80068ee:	468b      	mov	fp, r1
 80068f0:	2503      	movs	r5, #3
 80068f2:	4eac      	ldr	r6, [pc, #688]	; (8006ba4 <_dtoa_r+0x61c>)
 80068f4:	b957      	cbnz	r7, 800690c <_dtoa_r+0x384>
 80068f6:	4642      	mov	r2, r8
 80068f8:	464b      	mov	r3, r9
 80068fa:	4650      	mov	r0, sl
 80068fc:	4659      	mov	r1, fp
 80068fe:	f7f9 ffbd 	bl	800087c <__aeabi_ddiv>
 8006902:	4682      	mov	sl, r0
 8006904:	468b      	mov	fp, r1
 8006906:	e028      	b.n	800695a <_dtoa_r+0x3d2>
 8006908:	2502      	movs	r5, #2
 800690a:	e7f2      	b.n	80068f2 <_dtoa_r+0x36a>
 800690c:	07f9      	lsls	r1, r7, #31
 800690e:	d508      	bpl.n	8006922 <_dtoa_r+0x39a>
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006918:	f7f9 fe86 	bl	8000628 <__aeabi_dmul>
 800691c:	3501      	adds	r5, #1
 800691e:	4680      	mov	r8, r0
 8006920:	4689      	mov	r9, r1
 8006922:	107f      	asrs	r7, r7, #1
 8006924:	3608      	adds	r6, #8
 8006926:	e7e5      	b.n	80068f4 <_dtoa_r+0x36c>
 8006928:	f000 809b 	beq.w	8006a62 <_dtoa_r+0x4da>
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	4f9d      	ldr	r7, [pc, #628]	; (8006ba4 <_dtoa_r+0x61c>)
 8006930:	425e      	negs	r6, r3
 8006932:	4b9b      	ldr	r3, [pc, #620]	; (8006ba0 <_dtoa_r+0x618>)
 8006934:	f006 020f 	and.w	r2, r6, #15
 8006938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	ec51 0b19 	vmov	r0, r1, d9
 8006944:	f7f9 fe70 	bl	8000628 <__aeabi_dmul>
 8006948:	1136      	asrs	r6, r6, #4
 800694a:	4682      	mov	sl, r0
 800694c:	468b      	mov	fp, r1
 800694e:	2300      	movs	r3, #0
 8006950:	2502      	movs	r5, #2
 8006952:	2e00      	cmp	r6, #0
 8006954:	d17a      	bne.n	8006a4c <_dtoa_r+0x4c4>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1d3      	bne.n	8006902 <_dtoa_r+0x37a>
 800695a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8082 	beq.w	8006a66 <_dtoa_r+0x4de>
 8006962:	4b91      	ldr	r3, [pc, #580]	; (8006ba8 <_dtoa_r+0x620>)
 8006964:	2200      	movs	r2, #0
 8006966:	4650      	mov	r0, sl
 8006968:	4659      	mov	r1, fp
 800696a:	f7fa f8cf 	bl	8000b0c <__aeabi_dcmplt>
 800696e:	2800      	cmp	r0, #0
 8006970:	d079      	beq.n	8006a66 <_dtoa_r+0x4de>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d076      	beq.n	8006a66 <_dtoa_r+0x4de>
 8006978:	9b02      	ldr	r3, [sp, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	dd36      	ble.n	80069ec <_dtoa_r+0x464>
 800697e:	9b00      	ldr	r3, [sp, #0]
 8006980:	4650      	mov	r0, sl
 8006982:	4659      	mov	r1, fp
 8006984:	1e5f      	subs	r7, r3, #1
 8006986:	2200      	movs	r2, #0
 8006988:	4b88      	ldr	r3, [pc, #544]	; (8006bac <_dtoa_r+0x624>)
 800698a:	f7f9 fe4d 	bl	8000628 <__aeabi_dmul>
 800698e:	9e02      	ldr	r6, [sp, #8]
 8006990:	4682      	mov	sl, r0
 8006992:	468b      	mov	fp, r1
 8006994:	3501      	adds	r5, #1
 8006996:	4628      	mov	r0, r5
 8006998:	f7f9 fddc 	bl	8000554 <__aeabi_i2d>
 800699c:	4652      	mov	r2, sl
 800699e:	465b      	mov	r3, fp
 80069a0:	f7f9 fe42 	bl	8000628 <__aeabi_dmul>
 80069a4:	4b82      	ldr	r3, [pc, #520]	; (8006bb0 <_dtoa_r+0x628>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	f7f9 fc88 	bl	80002bc <__adddf3>
 80069ac:	46d0      	mov	r8, sl
 80069ae:	46d9      	mov	r9, fp
 80069b0:	4682      	mov	sl, r0
 80069b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	d158      	bne.n	8006a6c <_dtoa_r+0x4e4>
 80069ba:	4b7e      	ldr	r3, [pc, #504]	; (8006bb4 <_dtoa_r+0x62c>)
 80069bc:	2200      	movs	r2, #0
 80069be:	4640      	mov	r0, r8
 80069c0:	4649      	mov	r1, r9
 80069c2:	f7f9 fc79 	bl	80002b8 <__aeabi_dsub>
 80069c6:	4652      	mov	r2, sl
 80069c8:	465b      	mov	r3, fp
 80069ca:	4680      	mov	r8, r0
 80069cc:	4689      	mov	r9, r1
 80069ce:	f7fa f8bb 	bl	8000b48 <__aeabi_dcmpgt>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f040 8295 	bne.w	8006f02 <_dtoa_r+0x97a>
 80069d8:	4652      	mov	r2, sl
 80069da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069de:	4640      	mov	r0, r8
 80069e0:	4649      	mov	r1, r9
 80069e2:	f7fa f893 	bl	8000b0c <__aeabi_dcmplt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	f040 8289 	bne.w	8006efe <_dtoa_r+0x976>
 80069ec:	ec5b ab19 	vmov	sl, fp, d9
 80069f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f2c0 8148 	blt.w	8006c88 <_dtoa_r+0x700>
 80069f8:	9a00      	ldr	r2, [sp, #0]
 80069fa:	2a0e      	cmp	r2, #14
 80069fc:	f300 8144 	bgt.w	8006c88 <_dtoa_r+0x700>
 8006a00:	4b67      	ldr	r3, [pc, #412]	; (8006ba0 <_dtoa_r+0x618>)
 8006a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f280 80d5 	bge.w	8006bbc <_dtoa_r+0x634>
 8006a12:	9b03      	ldr	r3, [sp, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f300 80d1 	bgt.w	8006bbc <_dtoa_r+0x634>
 8006a1a:	f040 826f 	bne.w	8006efc <_dtoa_r+0x974>
 8006a1e:	4b65      	ldr	r3, [pc, #404]	; (8006bb4 <_dtoa_r+0x62c>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7f9 fdff 	bl	8000628 <__aeabi_dmul>
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	465b      	mov	r3, fp
 8006a2e:	f7fa f881 	bl	8000b34 <__aeabi_dcmpge>
 8006a32:	9e03      	ldr	r6, [sp, #12]
 8006a34:	4637      	mov	r7, r6
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f040 8245 	bne.w	8006ec6 <_dtoa_r+0x93e>
 8006a3c:	9d01      	ldr	r5, [sp, #4]
 8006a3e:	2331      	movs	r3, #49	; 0x31
 8006a40:	f805 3b01 	strb.w	r3, [r5], #1
 8006a44:	9b00      	ldr	r3, [sp, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	e240      	b.n	8006ece <_dtoa_r+0x946>
 8006a4c:	07f2      	lsls	r2, r6, #31
 8006a4e:	d505      	bpl.n	8006a5c <_dtoa_r+0x4d4>
 8006a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a54:	f7f9 fde8 	bl	8000628 <__aeabi_dmul>
 8006a58:	3501      	adds	r5, #1
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	1076      	asrs	r6, r6, #1
 8006a5e:	3708      	adds	r7, #8
 8006a60:	e777      	b.n	8006952 <_dtoa_r+0x3ca>
 8006a62:	2502      	movs	r5, #2
 8006a64:	e779      	b.n	800695a <_dtoa_r+0x3d2>
 8006a66:	9f00      	ldr	r7, [sp, #0]
 8006a68:	9e03      	ldr	r6, [sp, #12]
 8006a6a:	e794      	b.n	8006996 <_dtoa_r+0x40e>
 8006a6c:	9901      	ldr	r1, [sp, #4]
 8006a6e:	4b4c      	ldr	r3, [pc, #304]	; (8006ba0 <_dtoa_r+0x618>)
 8006a70:	4431      	add	r1, r6
 8006a72:	910d      	str	r1, [sp, #52]	; 0x34
 8006a74:	9908      	ldr	r1, [sp, #32]
 8006a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d043      	beq.n	8006b0a <_dtoa_r+0x582>
 8006a82:	494d      	ldr	r1, [pc, #308]	; (8006bb8 <_dtoa_r+0x630>)
 8006a84:	2000      	movs	r0, #0
 8006a86:	f7f9 fef9 	bl	800087c <__aeabi_ddiv>
 8006a8a:	4652      	mov	r2, sl
 8006a8c:	465b      	mov	r3, fp
 8006a8e:	f7f9 fc13 	bl	80002b8 <__aeabi_dsub>
 8006a92:	9d01      	ldr	r5, [sp, #4]
 8006a94:	4682      	mov	sl, r0
 8006a96:	468b      	mov	fp, r1
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f7fa f874 	bl	8000b88 <__aeabi_d2iz>
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	f7f9 fd57 	bl	8000554 <__aeabi_i2d>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4640      	mov	r0, r8
 8006aac:	4649      	mov	r1, r9
 8006aae:	f7f9 fc03 	bl	80002b8 <__aeabi_dsub>
 8006ab2:	3630      	adds	r6, #48	; 0x30
 8006ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ab8:	4652      	mov	r2, sl
 8006aba:	465b      	mov	r3, fp
 8006abc:	4680      	mov	r8, r0
 8006abe:	4689      	mov	r9, r1
 8006ac0:	f7fa f824 	bl	8000b0c <__aeabi_dcmplt>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d163      	bne.n	8006b90 <_dtoa_r+0x608>
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	4936      	ldr	r1, [pc, #216]	; (8006ba8 <_dtoa_r+0x620>)
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f7f9 fbf2 	bl	80002b8 <__aeabi_dsub>
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	f7fa f818 	bl	8000b0c <__aeabi_dcmplt>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f040 80b5 	bne.w	8006c4c <_dtoa_r+0x6c4>
 8006ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ae4:	429d      	cmp	r5, r3
 8006ae6:	d081      	beq.n	80069ec <_dtoa_r+0x464>
 8006ae8:	4b30      	ldr	r3, [pc, #192]	; (8006bac <_dtoa_r+0x624>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	4650      	mov	r0, sl
 8006aee:	4659      	mov	r1, fp
 8006af0:	f7f9 fd9a 	bl	8000628 <__aeabi_dmul>
 8006af4:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <_dtoa_r+0x624>)
 8006af6:	4682      	mov	sl, r0
 8006af8:	468b      	mov	fp, r1
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	2200      	movs	r2, #0
 8006b00:	f7f9 fd92 	bl	8000628 <__aeabi_dmul>
 8006b04:	4680      	mov	r8, r0
 8006b06:	4689      	mov	r9, r1
 8006b08:	e7c6      	b.n	8006a98 <_dtoa_r+0x510>
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	f7f9 fd8b 	bl	8000628 <__aeabi_dmul>
 8006b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b14:	9d01      	ldr	r5, [sp, #4]
 8006b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b18:	4682      	mov	sl, r0
 8006b1a:	468b      	mov	fp, r1
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4640      	mov	r0, r8
 8006b20:	f7fa f832 	bl	8000b88 <__aeabi_d2iz>
 8006b24:	4606      	mov	r6, r0
 8006b26:	f7f9 fd15 	bl	8000554 <__aeabi_i2d>
 8006b2a:	3630      	adds	r6, #48	; 0x30
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4640      	mov	r0, r8
 8006b32:	4649      	mov	r1, r9
 8006b34:	f7f9 fbc0 	bl	80002b8 <__aeabi_dsub>
 8006b38:	f805 6b01 	strb.w	r6, [r5], #1
 8006b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	4680      	mov	r8, r0
 8006b42:	4689      	mov	r9, r1
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	d124      	bne.n	8006b94 <_dtoa_r+0x60c>
 8006b4a:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <_dtoa_r+0x630>)
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	4659      	mov	r1, fp
 8006b50:	f7f9 fbb4 	bl	80002bc <__adddf3>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4640      	mov	r0, r8
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	f7f9 fff4 	bl	8000b48 <__aeabi_dcmpgt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d173      	bne.n	8006c4c <_dtoa_r+0x6c4>
 8006b64:	4652      	mov	r2, sl
 8006b66:	465b      	mov	r3, fp
 8006b68:	4913      	ldr	r1, [pc, #76]	; (8006bb8 <_dtoa_r+0x630>)
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f7f9 fba4 	bl	80002b8 <__aeabi_dsub>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4640      	mov	r0, r8
 8006b76:	4649      	mov	r1, r9
 8006b78:	f7f9 ffc8 	bl	8000b0c <__aeabi_dcmplt>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f43f af35 	beq.w	80069ec <_dtoa_r+0x464>
 8006b82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b84:	1e6b      	subs	r3, r5, #1
 8006b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b8c:	2b30      	cmp	r3, #48	; 0x30
 8006b8e:	d0f8      	beq.n	8006b82 <_dtoa_r+0x5fa>
 8006b90:	9700      	str	r7, [sp, #0]
 8006b92:	e049      	b.n	8006c28 <_dtoa_r+0x6a0>
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <_dtoa_r+0x624>)
 8006b96:	f7f9 fd47 	bl	8000628 <__aeabi_dmul>
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	4689      	mov	r9, r1
 8006b9e:	e7bd      	b.n	8006b1c <_dtoa_r+0x594>
 8006ba0:	0800a090 	.word	0x0800a090
 8006ba4:	0800a068 	.word	0x0800a068
 8006ba8:	3ff00000 	.word	0x3ff00000
 8006bac:	40240000 	.word	0x40240000
 8006bb0:	401c0000 	.word	0x401c0000
 8006bb4:	40140000 	.word	0x40140000
 8006bb8:	3fe00000 	.word	0x3fe00000
 8006bbc:	9d01      	ldr	r5, [sp, #4]
 8006bbe:	4656      	mov	r6, sl
 8006bc0:	465f      	mov	r7, fp
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 fe57 	bl	800087c <__aeabi_ddiv>
 8006bce:	f7f9 ffdb 	bl	8000b88 <__aeabi_d2iz>
 8006bd2:	4682      	mov	sl, r0
 8006bd4:	f7f9 fcbe 	bl	8000554 <__aeabi_i2d>
 8006bd8:	4642      	mov	r2, r8
 8006bda:	464b      	mov	r3, r9
 8006bdc:	f7f9 fd24 	bl	8000628 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4630      	mov	r0, r6
 8006be6:	4639      	mov	r1, r7
 8006be8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006bec:	f7f9 fb64 	bl	80002b8 <__aeabi_dsub>
 8006bf0:	f805 6b01 	strb.w	r6, [r5], #1
 8006bf4:	9e01      	ldr	r6, [sp, #4]
 8006bf6:	9f03      	ldr	r7, [sp, #12]
 8006bf8:	1bae      	subs	r6, r5, r6
 8006bfa:	42b7      	cmp	r7, r6
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	d135      	bne.n	8006c6e <_dtoa_r+0x6e6>
 8006c02:	f7f9 fb5b 	bl	80002bc <__adddf3>
 8006c06:	4642      	mov	r2, r8
 8006c08:	464b      	mov	r3, r9
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	f7f9 ff9b 	bl	8000b48 <__aeabi_dcmpgt>
 8006c12:	b9d0      	cbnz	r0, 8006c4a <_dtoa_r+0x6c2>
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 ff6c 	bl	8000af8 <__aeabi_dcmpeq>
 8006c20:	b110      	cbz	r0, 8006c28 <_dtoa_r+0x6a0>
 8006c22:	f01a 0f01 	tst.w	sl, #1
 8006c26:	d110      	bne.n	8006c4a <_dtoa_r+0x6c2>
 8006c28:	4620      	mov	r0, r4
 8006c2a:	ee18 1a10 	vmov	r1, s16
 8006c2e:	f000 fe87 	bl	8007940 <_Bfree>
 8006c32:	2300      	movs	r3, #0
 8006c34:	9800      	ldr	r0, [sp, #0]
 8006c36:	702b      	strb	r3, [r5, #0]
 8006c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	6018      	str	r0, [r3, #0]
 8006c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f43f acf1 	beq.w	8006628 <_dtoa_r+0xa0>
 8006c46:	601d      	str	r5, [r3, #0]
 8006c48:	e4ee      	b.n	8006628 <_dtoa_r+0xa0>
 8006c4a:	9f00      	ldr	r7, [sp, #0]
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	461d      	mov	r5, r3
 8006c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c54:	2a39      	cmp	r2, #57	; 0x39
 8006c56:	d106      	bne.n	8006c66 <_dtoa_r+0x6de>
 8006c58:	9a01      	ldr	r2, [sp, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d1f7      	bne.n	8006c4e <_dtoa_r+0x6c6>
 8006c5e:	9901      	ldr	r1, [sp, #4]
 8006c60:	2230      	movs	r2, #48	; 0x30
 8006c62:	3701      	adds	r7, #1
 8006c64:	700a      	strb	r2, [r1, #0]
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	3201      	adds	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e790      	b.n	8006b90 <_dtoa_r+0x608>
 8006c6e:	4ba6      	ldr	r3, [pc, #664]	; (8006f08 <_dtoa_r+0x980>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	f7f9 fcd9 	bl	8000628 <__aeabi_dmul>
 8006c76:	2200      	movs	r2, #0
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460f      	mov	r7, r1
 8006c7e:	f7f9 ff3b 	bl	8000af8 <__aeabi_dcmpeq>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d09d      	beq.n	8006bc2 <_dtoa_r+0x63a>
 8006c86:	e7cf      	b.n	8006c28 <_dtoa_r+0x6a0>
 8006c88:	9a08      	ldr	r2, [sp, #32]
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	f000 80d7 	beq.w	8006e3e <_dtoa_r+0x8b6>
 8006c90:	9a06      	ldr	r2, [sp, #24]
 8006c92:	2a01      	cmp	r2, #1
 8006c94:	f300 80ba 	bgt.w	8006e0c <_dtoa_r+0x884>
 8006c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	f000 80b2 	beq.w	8006e04 <_dtoa_r+0x87c>
 8006ca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ca4:	9e07      	ldr	r6, [sp, #28]
 8006ca6:	9d04      	ldr	r5, [sp, #16]
 8006ca8:	9a04      	ldr	r2, [sp, #16]
 8006caa:	441a      	add	r2, r3
 8006cac:	9204      	str	r2, [sp, #16]
 8006cae:	9a05      	ldr	r2, [sp, #20]
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	441a      	add	r2, r3
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	9205      	str	r2, [sp, #20]
 8006cb8:	f000 ff44 	bl	8007b44 <__i2b>
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	dd0c      	ble.n	8006cdc <_dtoa_r+0x754>
 8006cc2:	9b05      	ldr	r3, [sp, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dd09      	ble.n	8006cdc <_dtoa_r+0x754>
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	9a04      	ldr	r2, [sp, #16]
 8006ccc:	bfa8      	it	ge
 8006cce:	462b      	movge	r3, r5
 8006cd0:	1ad2      	subs	r2, r2, r3
 8006cd2:	9204      	str	r2, [sp, #16]
 8006cd4:	9a05      	ldr	r2, [sp, #20]
 8006cd6:	1aed      	subs	r5, r5, r3
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	b31b      	cbz	r3, 8006d28 <_dtoa_r+0x7a0>
 8006ce0:	9b08      	ldr	r3, [sp, #32]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80af 	beq.w	8006e46 <_dtoa_r+0x8be>
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	dd13      	ble.n	8006d14 <_dtoa_r+0x78c>
 8006cec:	4639      	mov	r1, r7
 8006cee:	4632      	mov	r2, r6
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 ffe7 	bl	8007cc4 <__pow5mult>
 8006cf6:	ee18 2a10 	vmov	r2, s16
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4607      	mov	r7, r0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 ff36 	bl	8007b70 <__multiply>
 8006d04:	ee18 1a10 	vmov	r1, s16
 8006d08:	4680      	mov	r8, r0
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 fe18 	bl	8007940 <_Bfree>
 8006d10:	ee08 8a10 	vmov	s16, r8
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	1b9a      	subs	r2, r3, r6
 8006d18:	d006      	beq.n	8006d28 <_dtoa_r+0x7a0>
 8006d1a:	ee18 1a10 	vmov	r1, s16
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 ffd0 	bl	8007cc4 <__pow5mult>
 8006d24:	ee08 0a10 	vmov	s16, r0
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 ff0a 	bl	8007b44 <__i2b>
 8006d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	4606      	mov	r6, r0
 8006d36:	f340 8088 	ble.w	8006e4a <_dtoa_r+0x8c2>
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 ffc0 	bl	8007cc4 <__pow5mult>
 8006d44:	9b06      	ldr	r3, [sp, #24]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	4606      	mov	r6, r0
 8006d4a:	f340 8081 	ble.w	8006e50 <_dtoa_r+0x8c8>
 8006d4e:	f04f 0800 	mov.w	r8, #0
 8006d52:	6933      	ldr	r3, [r6, #16]
 8006d54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d58:	6918      	ldr	r0, [r3, #16]
 8006d5a:	f000 fea3 	bl	8007aa4 <__hi0bits>
 8006d5e:	f1c0 0020 	rsb	r0, r0, #32
 8006d62:	9b05      	ldr	r3, [sp, #20]
 8006d64:	4418      	add	r0, r3
 8006d66:	f010 001f 	ands.w	r0, r0, #31
 8006d6a:	f000 8092 	beq.w	8006e92 <_dtoa_r+0x90a>
 8006d6e:	f1c0 0320 	rsb	r3, r0, #32
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	f340 808a 	ble.w	8006e8c <_dtoa_r+0x904>
 8006d78:	f1c0 001c 	rsb	r0, r0, #28
 8006d7c:	9b04      	ldr	r3, [sp, #16]
 8006d7e:	4403      	add	r3, r0
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	9b05      	ldr	r3, [sp, #20]
 8006d84:	4403      	add	r3, r0
 8006d86:	4405      	add	r5, r0
 8006d88:	9305      	str	r3, [sp, #20]
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dd07      	ble.n	8006da0 <_dtoa_r+0x818>
 8006d90:	ee18 1a10 	vmov	r1, s16
 8006d94:	461a      	mov	r2, r3
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 ffee 	bl	8007d78 <__lshift>
 8006d9c:	ee08 0a10 	vmov	s16, r0
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	dd05      	ble.n	8006db2 <_dtoa_r+0x82a>
 8006da6:	4631      	mov	r1, r6
 8006da8:	461a      	mov	r2, r3
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 ffe4 	bl	8007d78 <__lshift>
 8006db0:	4606      	mov	r6, r0
 8006db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d06e      	beq.n	8006e96 <_dtoa_r+0x90e>
 8006db8:	ee18 0a10 	vmov	r0, s16
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	f001 f84b 	bl	8007e58 <__mcmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	da67      	bge.n	8006e96 <_dtoa_r+0x90e>
 8006dc6:	9b00      	ldr	r3, [sp, #0]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	ee18 1a10 	vmov	r1, s16
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	220a      	movs	r2, #10
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fdd5 	bl	8007984 <__multadd>
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	ee08 0a10 	vmov	s16, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 81b1 	beq.w	8007148 <_dtoa_r+0xbc0>
 8006de6:	2300      	movs	r3, #0
 8006de8:	4639      	mov	r1, r7
 8006dea:	220a      	movs	r2, #10
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fdc9 	bl	8007984 <__multadd>
 8006df2:	9b02      	ldr	r3, [sp, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	4607      	mov	r7, r0
 8006df8:	f300 808e 	bgt.w	8006f18 <_dtoa_r+0x990>
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	dc51      	bgt.n	8006ea6 <_dtoa_r+0x91e>
 8006e02:	e089      	b.n	8006f18 <_dtoa_r+0x990>
 8006e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e0a:	e74b      	b.n	8006ca4 <_dtoa_r+0x71c>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	1e5e      	subs	r6, r3, #1
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	42b3      	cmp	r3, r6
 8006e14:	bfbf      	itttt	lt
 8006e16:	9b07      	ldrlt	r3, [sp, #28]
 8006e18:	9607      	strlt	r6, [sp, #28]
 8006e1a:	1af2      	sublt	r2, r6, r3
 8006e1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e1e:	bfb6      	itet	lt
 8006e20:	189b      	addlt	r3, r3, r2
 8006e22:	1b9e      	subge	r6, r3, r6
 8006e24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	bfb8      	it	lt
 8006e2a:	2600      	movlt	r6, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bfb7      	itett	lt
 8006e30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e38:	1a9d      	sublt	r5, r3, r2
 8006e3a:	2300      	movlt	r3, #0
 8006e3c:	e734      	b.n	8006ca8 <_dtoa_r+0x720>
 8006e3e:	9e07      	ldr	r6, [sp, #28]
 8006e40:	9d04      	ldr	r5, [sp, #16]
 8006e42:	9f08      	ldr	r7, [sp, #32]
 8006e44:	e73b      	b.n	8006cbe <_dtoa_r+0x736>
 8006e46:	9a07      	ldr	r2, [sp, #28]
 8006e48:	e767      	b.n	8006d1a <_dtoa_r+0x792>
 8006e4a:	9b06      	ldr	r3, [sp, #24]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	dc18      	bgt.n	8006e82 <_dtoa_r+0x8fa>
 8006e50:	f1ba 0f00 	cmp.w	sl, #0
 8006e54:	d115      	bne.n	8006e82 <_dtoa_r+0x8fa>
 8006e56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e5a:	b993      	cbnz	r3, 8006e82 <_dtoa_r+0x8fa>
 8006e5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e60:	0d1b      	lsrs	r3, r3, #20
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	b183      	cbz	r3, 8006e88 <_dtoa_r+0x900>
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	9b05      	ldr	r3, [sp, #20]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	f04f 0801 	mov.w	r8, #1
 8006e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f af6a 	bne.w	8006d52 <_dtoa_r+0x7ca>
 8006e7e:	2001      	movs	r0, #1
 8006e80:	e76f      	b.n	8006d62 <_dtoa_r+0x7da>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	e7f6      	b.n	8006e76 <_dtoa_r+0x8ee>
 8006e88:	4698      	mov	r8, r3
 8006e8a:	e7f4      	b.n	8006e76 <_dtoa_r+0x8ee>
 8006e8c:	f43f af7d 	beq.w	8006d8a <_dtoa_r+0x802>
 8006e90:	4618      	mov	r0, r3
 8006e92:	301c      	adds	r0, #28
 8006e94:	e772      	b.n	8006d7c <_dtoa_r+0x7f4>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc37      	bgt.n	8006f0c <_dtoa_r+0x984>
 8006e9c:	9b06      	ldr	r3, [sp, #24]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	dd34      	ble.n	8006f0c <_dtoa_r+0x984>
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	9302      	str	r3, [sp, #8]
 8006ea6:	9b02      	ldr	r3, [sp, #8]
 8006ea8:	b96b      	cbnz	r3, 8006ec6 <_dtoa_r+0x93e>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	2205      	movs	r2, #5
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 fd68 	bl	8007984 <__multadd>
 8006eb4:	4601      	mov	r1, r0
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	ee18 0a10 	vmov	r0, s16
 8006ebc:	f000 ffcc 	bl	8007e58 <__mcmp>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f73f adbb 	bgt.w	8006a3c <_dtoa_r+0x4b4>
 8006ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec8:	9d01      	ldr	r5, [sp, #4]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fd33 	bl	8007940 <_Bfree>
 8006eda:	2f00      	cmp	r7, #0
 8006edc:	f43f aea4 	beq.w	8006c28 <_dtoa_r+0x6a0>
 8006ee0:	f1b8 0f00 	cmp.w	r8, #0
 8006ee4:	d005      	beq.n	8006ef2 <_dtoa_r+0x96a>
 8006ee6:	45b8      	cmp	r8, r7
 8006ee8:	d003      	beq.n	8006ef2 <_dtoa_r+0x96a>
 8006eea:	4641      	mov	r1, r8
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 fd27 	bl	8007940 <_Bfree>
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fd23 	bl	8007940 <_Bfree>
 8006efa:	e695      	b.n	8006c28 <_dtoa_r+0x6a0>
 8006efc:	2600      	movs	r6, #0
 8006efe:	4637      	mov	r7, r6
 8006f00:	e7e1      	b.n	8006ec6 <_dtoa_r+0x93e>
 8006f02:	9700      	str	r7, [sp, #0]
 8006f04:	4637      	mov	r7, r6
 8006f06:	e599      	b.n	8006a3c <_dtoa_r+0x4b4>
 8006f08:	40240000 	.word	0x40240000
 8006f0c:	9b08      	ldr	r3, [sp, #32]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80ca 	beq.w	80070a8 <_dtoa_r+0xb20>
 8006f14:	9b03      	ldr	r3, [sp, #12]
 8006f16:	9302      	str	r3, [sp, #8]
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	dd05      	ble.n	8006f28 <_dtoa_r+0x9a0>
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 ff29 	bl	8007d78 <__lshift>
 8006f26:	4607      	mov	r7, r0
 8006f28:	f1b8 0f00 	cmp.w	r8, #0
 8006f2c:	d05b      	beq.n	8006fe6 <_dtoa_r+0xa5e>
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fcc5 	bl	80078c0 <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b928      	cbnz	r0, 8006f46 <_dtoa_r+0x9be>
 8006f3a:	4b87      	ldr	r3, [pc, #540]	; (8007158 <_dtoa_r+0xbd0>)
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f42:	f7ff bb3b 	b.w	80065bc <_dtoa_r+0x34>
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	3202      	adds	r2, #2
 8006f4a:	0092      	lsls	r2, r2, #2
 8006f4c:	f107 010c 	add.w	r1, r7, #12
 8006f50:	300c      	adds	r0, #12
 8006f52:	f000 fca7 	bl	80078a4 <memcpy>
 8006f56:	2201      	movs	r2, #1
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 ff0c 	bl	8007d78 <__lshift>
 8006f60:	9b01      	ldr	r3, [sp, #4]
 8006f62:	f103 0901 	add.w	r9, r3, #1
 8006f66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	f00a 0301 	and.w	r3, sl, #1
 8006f72:	46b8      	mov	r8, r7
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	4607      	mov	r7, r0
 8006f78:	4631      	mov	r1, r6
 8006f7a:	ee18 0a10 	vmov	r0, s16
 8006f7e:	f7ff fa75 	bl	800646c <quorem>
 8006f82:	4641      	mov	r1, r8
 8006f84:	9002      	str	r0, [sp, #8]
 8006f86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f8a:	ee18 0a10 	vmov	r0, s16
 8006f8e:	f000 ff63 	bl	8007e58 <__mcmp>
 8006f92:	463a      	mov	r2, r7
 8006f94:	9003      	str	r0, [sp, #12]
 8006f96:	4631      	mov	r1, r6
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 ff79 	bl	8007e90 <__mdiff>
 8006f9e:	68c2      	ldr	r2, [r0, #12]
 8006fa0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	bb02      	cbnz	r2, 8006fea <_dtoa_r+0xa62>
 8006fa8:	4601      	mov	r1, r0
 8006faa:	ee18 0a10 	vmov	r0, s16
 8006fae:	f000 ff53 	bl	8007e58 <__mcmp>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	9207      	str	r2, [sp, #28]
 8006fba:	f000 fcc1 	bl	8007940 <_Bfree>
 8006fbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006fc2:	ea43 0102 	orr.w	r1, r3, r2
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	464d      	mov	r5, r9
 8006fcc:	d10f      	bne.n	8006fee <_dtoa_r+0xa66>
 8006fce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fd2:	d02a      	beq.n	800702a <_dtoa_r+0xaa2>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	dd02      	ble.n	8006fe0 <_dtoa_r+0xa58>
 8006fda:	9b02      	ldr	r3, [sp, #8]
 8006fdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006fe0:	f88b a000 	strb.w	sl, [fp]
 8006fe4:	e775      	b.n	8006ed2 <_dtoa_r+0x94a>
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	e7ba      	b.n	8006f60 <_dtoa_r+0x9d8>
 8006fea:	2201      	movs	r2, #1
 8006fec:	e7e2      	b.n	8006fb4 <_dtoa_r+0xa2c>
 8006fee:	9b03      	ldr	r3, [sp, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	db04      	blt.n	8006ffe <_dtoa_r+0xa76>
 8006ff4:	9906      	ldr	r1, [sp, #24]
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	9904      	ldr	r1, [sp, #16]
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	d122      	bne.n	8007044 <_dtoa_r+0xabc>
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	ddee      	ble.n	8006fe0 <_dtoa_r+0xa58>
 8007002:	ee18 1a10 	vmov	r1, s16
 8007006:	2201      	movs	r2, #1
 8007008:	4620      	mov	r0, r4
 800700a:	f000 feb5 	bl	8007d78 <__lshift>
 800700e:	4631      	mov	r1, r6
 8007010:	ee08 0a10 	vmov	s16, r0
 8007014:	f000 ff20 	bl	8007e58 <__mcmp>
 8007018:	2800      	cmp	r0, #0
 800701a:	dc03      	bgt.n	8007024 <_dtoa_r+0xa9c>
 800701c:	d1e0      	bne.n	8006fe0 <_dtoa_r+0xa58>
 800701e:	f01a 0f01 	tst.w	sl, #1
 8007022:	d0dd      	beq.n	8006fe0 <_dtoa_r+0xa58>
 8007024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007028:	d1d7      	bne.n	8006fda <_dtoa_r+0xa52>
 800702a:	2339      	movs	r3, #57	; 0x39
 800702c:	f88b 3000 	strb.w	r3, [fp]
 8007030:	462b      	mov	r3, r5
 8007032:	461d      	mov	r5, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800703a:	2a39      	cmp	r2, #57	; 0x39
 800703c:	d071      	beq.n	8007122 <_dtoa_r+0xb9a>
 800703e:	3201      	adds	r2, #1
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e746      	b.n	8006ed2 <_dtoa_r+0x94a>
 8007044:	2a00      	cmp	r2, #0
 8007046:	dd07      	ble.n	8007058 <_dtoa_r+0xad0>
 8007048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800704c:	d0ed      	beq.n	800702a <_dtoa_r+0xaa2>
 800704e:	f10a 0301 	add.w	r3, sl, #1
 8007052:	f88b 3000 	strb.w	r3, [fp]
 8007056:	e73c      	b.n	8006ed2 <_dtoa_r+0x94a>
 8007058:	9b05      	ldr	r3, [sp, #20]
 800705a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800705e:	4599      	cmp	r9, r3
 8007060:	d047      	beq.n	80070f2 <_dtoa_r+0xb6a>
 8007062:	ee18 1a10 	vmov	r1, s16
 8007066:	2300      	movs	r3, #0
 8007068:	220a      	movs	r2, #10
 800706a:	4620      	mov	r0, r4
 800706c:	f000 fc8a 	bl	8007984 <__multadd>
 8007070:	45b8      	cmp	r8, r7
 8007072:	ee08 0a10 	vmov	s16, r0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	f04f 020a 	mov.w	r2, #10
 800707e:	4641      	mov	r1, r8
 8007080:	4620      	mov	r0, r4
 8007082:	d106      	bne.n	8007092 <_dtoa_r+0xb0a>
 8007084:	f000 fc7e 	bl	8007984 <__multadd>
 8007088:	4680      	mov	r8, r0
 800708a:	4607      	mov	r7, r0
 800708c:	f109 0901 	add.w	r9, r9, #1
 8007090:	e772      	b.n	8006f78 <_dtoa_r+0x9f0>
 8007092:	f000 fc77 	bl	8007984 <__multadd>
 8007096:	4639      	mov	r1, r7
 8007098:	4680      	mov	r8, r0
 800709a:	2300      	movs	r3, #0
 800709c:	220a      	movs	r2, #10
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fc70 	bl	8007984 <__multadd>
 80070a4:	4607      	mov	r7, r0
 80070a6:	e7f1      	b.n	800708c <_dtoa_r+0xb04>
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	9302      	str	r3, [sp, #8]
 80070ac:	9d01      	ldr	r5, [sp, #4]
 80070ae:	ee18 0a10 	vmov	r0, s16
 80070b2:	4631      	mov	r1, r6
 80070b4:	f7ff f9da 	bl	800646c <quorem>
 80070b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	f805 ab01 	strb.w	sl, [r5], #1
 80070c2:	1aea      	subs	r2, r5, r3
 80070c4:	9b02      	ldr	r3, [sp, #8]
 80070c6:	4293      	cmp	r3, r2
 80070c8:	dd09      	ble.n	80070de <_dtoa_r+0xb56>
 80070ca:	ee18 1a10 	vmov	r1, s16
 80070ce:	2300      	movs	r3, #0
 80070d0:	220a      	movs	r2, #10
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fc56 	bl	8007984 <__multadd>
 80070d8:	ee08 0a10 	vmov	s16, r0
 80070dc:	e7e7      	b.n	80070ae <_dtoa_r+0xb26>
 80070de:	9b02      	ldr	r3, [sp, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bfc8      	it	gt
 80070e4:	461d      	movgt	r5, r3
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	bfd8      	it	le
 80070ea:	2501      	movle	r5, #1
 80070ec:	441d      	add	r5, r3
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	ee18 1a10 	vmov	r1, s16
 80070f6:	2201      	movs	r2, #1
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fe3d 	bl	8007d78 <__lshift>
 80070fe:	4631      	mov	r1, r6
 8007100:	ee08 0a10 	vmov	s16, r0
 8007104:	f000 fea8 	bl	8007e58 <__mcmp>
 8007108:	2800      	cmp	r0, #0
 800710a:	dc91      	bgt.n	8007030 <_dtoa_r+0xaa8>
 800710c:	d102      	bne.n	8007114 <_dtoa_r+0xb8c>
 800710e:	f01a 0f01 	tst.w	sl, #1
 8007112:	d18d      	bne.n	8007030 <_dtoa_r+0xaa8>
 8007114:	462b      	mov	r3, r5
 8007116:	461d      	mov	r5, r3
 8007118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800711c:	2a30      	cmp	r2, #48	; 0x30
 800711e:	d0fa      	beq.n	8007116 <_dtoa_r+0xb8e>
 8007120:	e6d7      	b.n	8006ed2 <_dtoa_r+0x94a>
 8007122:	9a01      	ldr	r2, [sp, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d184      	bne.n	8007032 <_dtoa_r+0xaaa>
 8007128:	9b00      	ldr	r3, [sp, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	2331      	movs	r3, #49	; 0x31
 8007130:	7013      	strb	r3, [r2, #0]
 8007132:	e6ce      	b.n	8006ed2 <_dtoa_r+0x94a>
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <_dtoa_r+0xbd4>)
 8007136:	f7ff ba95 	b.w	8006664 <_dtoa_r+0xdc>
 800713a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800713c:	2b00      	cmp	r3, #0
 800713e:	f47f aa6e 	bne.w	800661e <_dtoa_r+0x96>
 8007142:	4b07      	ldr	r3, [pc, #28]	; (8007160 <_dtoa_r+0xbd8>)
 8007144:	f7ff ba8e 	b.w	8006664 <_dtoa_r+0xdc>
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	dcae      	bgt.n	80070ac <_dtoa_r+0xb24>
 800714e:	9b06      	ldr	r3, [sp, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f73f aea8 	bgt.w	8006ea6 <_dtoa_r+0x91e>
 8007156:	e7a9      	b.n	80070ac <_dtoa_r+0xb24>
 8007158:	08009f80 	.word	0x08009f80
 800715c:	0800a179 	.word	0x0800a179
 8007160:	08009f01 	.word	0x08009f01

08007164 <rshift>:
 8007164:	6903      	ldr	r3, [r0, #16]
 8007166:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800716a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800716e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007172:	f100 0414 	add.w	r4, r0, #20
 8007176:	dd45      	ble.n	8007204 <rshift+0xa0>
 8007178:	f011 011f 	ands.w	r1, r1, #31
 800717c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007180:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007184:	d10c      	bne.n	80071a0 <rshift+0x3c>
 8007186:	f100 0710 	add.w	r7, r0, #16
 800718a:	4629      	mov	r1, r5
 800718c:	42b1      	cmp	r1, r6
 800718e:	d334      	bcc.n	80071fa <rshift+0x96>
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	1eea      	subs	r2, r5, #3
 8007196:	4296      	cmp	r6, r2
 8007198:	bf38      	it	cc
 800719a:	2300      	movcc	r3, #0
 800719c:	4423      	add	r3, r4
 800719e:	e015      	b.n	80071cc <rshift+0x68>
 80071a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071a4:	f1c1 0820 	rsb	r8, r1, #32
 80071a8:	40cf      	lsrs	r7, r1
 80071aa:	f105 0e04 	add.w	lr, r5, #4
 80071ae:	46a1      	mov	r9, r4
 80071b0:	4576      	cmp	r6, lr
 80071b2:	46f4      	mov	ip, lr
 80071b4:	d815      	bhi.n	80071e2 <rshift+0x7e>
 80071b6:	1a9a      	subs	r2, r3, r2
 80071b8:	0092      	lsls	r2, r2, #2
 80071ba:	3a04      	subs	r2, #4
 80071bc:	3501      	adds	r5, #1
 80071be:	42ae      	cmp	r6, r5
 80071c0:	bf38      	it	cc
 80071c2:	2200      	movcc	r2, #0
 80071c4:	18a3      	adds	r3, r4, r2
 80071c6:	50a7      	str	r7, [r4, r2]
 80071c8:	b107      	cbz	r7, 80071cc <rshift+0x68>
 80071ca:	3304      	adds	r3, #4
 80071cc:	1b1a      	subs	r2, r3, r4
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071d4:	bf08      	it	eq
 80071d6:	2300      	moveq	r3, #0
 80071d8:	6102      	str	r2, [r0, #16]
 80071da:	bf08      	it	eq
 80071dc:	6143      	streq	r3, [r0, #20]
 80071de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071e2:	f8dc c000 	ldr.w	ip, [ip]
 80071e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80071ea:	ea4c 0707 	orr.w	r7, ip, r7
 80071ee:	f849 7b04 	str.w	r7, [r9], #4
 80071f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071f6:	40cf      	lsrs	r7, r1
 80071f8:	e7da      	b.n	80071b0 <rshift+0x4c>
 80071fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80071fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8007202:	e7c3      	b.n	800718c <rshift+0x28>
 8007204:	4623      	mov	r3, r4
 8007206:	e7e1      	b.n	80071cc <rshift+0x68>

08007208 <__hexdig_fun>:
 8007208:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800720c:	2b09      	cmp	r3, #9
 800720e:	d802      	bhi.n	8007216 <__hexdig_fun+0xe>
 8007210:	3820      	subs	r0, #32
 8007212:	b2c0      	uxtb	r0, r0
 8007214:	4770      	bx	lr
 8007216:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800721a:	2b05      	cmp	r3, #5
 800721c:	d801      	bhi.n	8007222 <__hexdig_fun+0x1a>
 800721e:	3847      	subs	r0, #71	; 0x47
 8007220:	e7f7      	b.n	8007212 <__hexdig_fun+0xa>
 8007222:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007226:	2b05      	cmp	r3, #5
 8007228:	d801      	bhi.n	800722e <__hexdig_fun+0x26>
 800722a:	3827      	subs	r0, #39	; 0x27
 800722c:	e7f1      	b.n	8007212 <__hexdig_fun+0xa>
 800722e:	2000      	movs	r0, #0
 8007230:	4770      	bx	lr
	...

08007234 <__gethex>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	ed2d 8b02 	vpush	{d8}
 800723c:	b089      	sub	sp, #36	; 0x24
 800723e:	ee08 0a10 	vmov	s16, r0
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	4bb4      	ldr	r3, [pc, #720]	; (8007518 <__gethex+0x2e4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	4618      	mov	r0, r3
 800724c:	468b      	mov	fp, r1
 800724e:	4690      	mov	r8, r2
 8007250:	f7f8 ffd0 	bl	80001f4 <strlen>
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	f8db 2000 	ldr.w	r2, [fp]
 800725a:	4403      	add	r3, r0
 800725c:	4682      	mov	sl, r0
 800725e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007262:	9305      	str	r3, [sp, #20]
 8007264:	1c93      	adds	r3, r2, #2
 8007266:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800726a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800726e:	32fe      	adds	r2, #254	; 0xfe
 8007270:	18d1      	adds	r1, r2, r3
 8007272:	461f      	mov	r7, r3
 8007274:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007278:	9100      	str	r1, [sp, #0]
 800727a:	2830      	cmp	r0, #48	; 0x30
 800727c:	d0f8      	beq.n	8007270 <__gethex+0x3c>
 800727e:	f7ff ffc3 	bl	8007208 <__hexdig_fun>
 8007282:	4604      	mov	r4, r0
 8007284:	2800      	cmp	r0, #0
 8007286:	d13a      	bne.n	80072fe <__gethex+0xca>
 8007288:	9901      	ldr	r1, [sp, #4]
 800728a:	4652      	mov	r2, sl
 800728c:	4638      	mov	r0, r7
 800728e:	f001 fdb3 	bl	8008df8 <strncmp>
 8007292:	4605      	mov	r5, r0
 8007294:	2800      	cmp	r0, #0
 8007296:	d168      	bne.n	800736a <__gethex+0x136>
 8007298:	f817 000a 	ldrb.w	r0, [r7, sl]
 800729c:	eb07 060a 	add.w	r6, r7, sl
 80072a0:	f7ff ffb2 	bl	8007208 <__hexdig_fun>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d062      	beq.n	800736e <__gethex+0x13a>
 80072a8:	4633      	mov	r3, r6
 80072aa:	7818      	ldrb	r0, [r3, #0]
 80072ac:	2830      	cmp	r0, #48	; 0x30
 80072ae:	461f      	mov	r7, r3
 80072b0:	f103 0301 	add.w	r3, r3, #1
 80072b4:	d0f9      	beq.n	80072aa <__gethex+0x76>
 80072b6:	f7ff ffa7 	bl	8007208 <__hexdig_fun>
 80072ba:	2301      	movs	r3, #1
 80072bc:	fab0 f480 	clz	r4, r0
 80072c0:	0964      	lsrs	r4, r4, #5
 80072c2:	4635      	mov	r5, r6
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	463a      	mov	r2, r7
 80072c8:	4616      	mov	r6, r2
 80072ca:	3201      	adds	r2, #1
 80072cc:	7830      	ldrb	r0, [r6, #0]
 80072ce:	f7ff ff9b 	bl	8007208 <__hexdig_fun>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d1f8      	bne.n	80072c8 <__gethex+0x94>
 80072d6:	9901      	ldr	r1, [sp, #4]
 80072d8:	4652      	mov	r2, sl
 80072da:	4630      	mov	r0, r6
 80072dc:	f001 fd8c 	bl	8008df8 <strncmp>
 80072e0:	b980      	cbnz	r0, 8007304 <__gethex+0xd0>
 80072e2:	b94d      	cbnz	r5, 80072f8 <__gethex+0xc4>
 80072e4:	eb06 050a 	add.w	r5, r6, sl
 80072e8:	462a      	mov	r2, r5
 80072ea:	4616      	mov	r6, r2
 80072ec:	3201      	adds	r2, #1
 80072ee:	7830      	ldrb	r0, [r6, #0]
 80072f0:	f7ff ff8a 	bl	8007208 <__hexdig_fun>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d1f8      	bne.n	80072ea <__gethex+0xb6>
 80072f8:	1bad      	subs	r5, r5, r6
 80072fa:	00ad      	lsls	r5, r5, #2
 80072fc:	e004      	b.n	8007308 <__gethex+0xd4>
 80072fe:	2400      	movs	r4, #0
 8007300:	4625      	mov	r5, r4
 8007302:	e7e0      	b.n	80072c6 <__gethex+0x92>
 8007304:	2d00      	cmp	r5, #0
 8007306:	d1f7      	bne.n	80072f8 <__gethex+0xc4>
 8007308:	7833      	ldrb	r3, [r6, #0]
 800730a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800730e:	2b50      	cmp	r3, #80	; 0x50
 8007310:	d13b      	bne.n	800738a <__gethex+0x156>
 8007312:	7873      	ldrb	r3, [r6, #1]
 8007314:	2b2b      	cmp	r3, #43	; 0x2b
 8007316:	d02c      	beq.n	8007372 <__gethex+0x13e>
 8007318:	2b2d      	cmp	r3, #45	; 0x2d
 800731a:	d02e      	beq.n	800737a <__gethex+0x146>
 800731c:	1c71      	adds	r1, r6, #1
 800731e:	f04f 0900 	mov.w	r9, #0
 8007322:	7808      	ldrb	r0, [r1, #0]
 8007324:	f7ff ff70 	bl	8007208 <__hexdig_fun>
 8007328:	1e43      	subs	r3, r0, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b18      	cmp	r3, #24
 800732e:	d82c      	bhi.n	800738a <__gethex+0x156>
 8007330:	f1a0 0210 	sub.w	r2, r0, #16
 8007334:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007338:	f7ff ff66 	bl	8007208 <__hexdig_fun>
 800733c:	1e43      	subs	r3, r0, #1
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b18      	cmp	r3, #24
 8007342:	d91d      	bls.n	8007380 <__gethex+0x14c>
 8007344:	f1b9 0f00 	cmp.w	r9, #0
 8007348:	d000      	beq.n	800734c <__gethex+0x118>
 800734a:	4252      	negs	r2, r2
 800734c:	4415      	add	r5, r2
 800734e:	f8cb 1000 	str.w	r1, [fp]
 8007352:	b1e4      	cbz	r4, 800738e <__gethex+0x15a>
 8007354:	9b00      	ldr	r3, [sp, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	bf14      	ite	ne
 800735a:	2700      	movne	r7, #0
 800735c:	2706      	moveq	r7, #6
 800735e:	4638      	mov	r0, r7
 8007360:	b009      	add	sp, #36	; 0x24
 8007362:	ecbd 8b02 	vpop	{d8}
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	463e      	mov	r6, r7
 800736c:	4625      	mov	r5, r4
 800736e:	2401      	movs	r4, #1
 8007370:	e7ca      	b.n	8007308 <__gethex+0xd4>
 8007372:	f04f 0900 	mov.w	r9, #0
 8007376:	1cb1      	adds	r1, r6, #2
 8007378:	e7d3      	b.n	8007322 <__gethex+0xee>
 800737a:	f04f 0901 	mov.w	r9, #1
 800737e:	e7fa      	b.n	8007376 <__gethex+0x142>
 8007380:	230a      	movs	r3, #10
 8007382:	fb03 0202 	mla	r2, r3, r2, r0
 8007386:	3a10      	subs	r2, #16
 8007388:	e7d4      	b.n	8007334 <__gethex+0x100>
 800738a:	4631      	mov	r1, r6
 800738c:	e7df      	b.n	800734e <__gethex+0x11a>
 800738e:	1bf3      	subs	r3, r6, r7
 8007390:	3b01      	subs	r3, #1
 8007392:	4621      	mov	r1, r4
 8007394:	2b07      	cmp	r3, #7
 8007396:	dc0b      	bgt.n	80073b0 <__gethex+0x17c>
 8007398:	ee18 0a10 	vmov	r0, s16
 800739c:	f000 fa90 	bl	80078c0 <_Balloc>
 80073a0:	4604      	mov	r4, r0
 80073a2:	b940      	cbnz	r0, 80073b6 <__gethex+0x182>
 80073a4:	4b5d      	ldr	r3, [pc, #372]	; (800751c <__gethex+0x2e8>)
 80073a6:	4602      	mov	r2, r0
 80073a8:	21de      	movs	r1, #222	; 0xde
 80073aa:	485d      	ldr	r0, [pc, #372]	; (8007520 <__gethex+0x2ec>)
 80073ac:	f001 fdf4 	bl	8008f98 <__assert_func>
 80073b0:	3101      	adds	r1, #1
 80073b2:	105b      	asrs	r3, r3, #1
 80073b4:	e7ee      	b.n	8007394 <__gethex+0x160>
 80073b6:	f100 0914 	add.w	r9, r0, #20
 80073ba:	f04f 0b00 	mov.w	fp, #0
 80073be:	f1ca 0301 	rsb	r3, sl, #1
 80073c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80073c6:	f8cd b000 	str.w	fp, [sp]
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	42b7      	cmp	r7, r6
 80073ce:	d340      	bcc.n	8007452 <__gethex+0x21e>
 80073d0:	9802      	ldr	r0, [sp, #8]
 80073d2:	9b00      	ldr	r3, [sp, #0]
 80073d4:	f840 3b04 	str.w	r3, [r0], #4
 80073d8:	eba0 0009 	sub.w	r0, r0, r9
 80073dc:	1080      	asrs	r0, r0, #2
 80073de:	0146      	lsls	r6, r0, #5
 80073e0:	6120      	str	r0, [r4, #16]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fb5e 	bl	8007aa4 <__hi0bits>
 80073e8:	1a30      	subs	r0, r6, r0
 80073ea:	f8d8 6000 	ldr.w	r6, [r8]
 80073ee:	42b0      	cmp	r0, r6
 80073f0:	dd63      	ble.n	80074ba <__gethex+0x286>
 80073f2:	1b87      	subs	r7, r0, r6
 80073f4:	4639      	mov	r1, r7
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 ff02 	bl	8008200 <__any_on>
 80073fc:	4682      	mov	sl, r0
 80073fe:	b1a8      	cbz	r0, 800742c <__gethex+0x1f8>
 8007400:	1e7b      	subs	r3, r7, #1
 8007402:	1159      	asrs	r1, r3, #5
 8007404:	f003 021f 	and.w	r2, r3, #31
 8007408:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800740c:	f04f 0a01 	mov.w	sl, #1
 8007410:	fa0a f202 	lsl.w	r2, sl, r2
 8007414:	420a      	tst	r2, r1
 8007416:	d009      	beq.n	800742c <__gethex+0x1f8>
 8007418:	4553      	cmp	r3, sl
 800741a:	dd05      	ble.n	8007428 <__gethex+0x1f4>
 800741c:	1eb9      	subs	r1, r7, #2
 800741e:	4620      	mov	r0, r4
 8007420:	f000 feee 	bl	8008200 <__any_on>
 8007424:	2800      	cmp	r0, #0
 8007426:	d145      	bne.n	80074b4 <__gethex+0x280>
 8007428:	f04f 0a02 	mov.w	sl, #2
 800742c:	4639      	mov	r1, r7
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff fe98 	bl	8007164 <rshift>
 8007434:	443d      	add	r5, r7
 8007436:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800743a:	42ab      	cmp	r3, r5
 800743c:	da4c      	bge.n	80074d8 <__gethex+0x2a4>
 800743e:	ee18 0a10 	vmov	r0, s16
 8007442:	4621      	mov	r1, r4
 8007444:	f000 fa7c 	bl	8007940 <_Bfree>
 8007448:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800744a:	2300      	movs	r3, #0
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	27a3      	movs	r7, #163	; 0xa3
 8007450:	e785      	b.n	800735e <__gethex+0x12a>
 8007452:	1e73      	subs	r3, r6, #1
 8007454:	9a05      	ldr	r2, [sp, #20]
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800745c:	4293      	cmp	r3, r2
 800745e:	d019      	beq.n	8007494 <__gethex+0x260>
 8007460:	f1bb 0f20 	cmp.w	fp, #32
 8007464:	d107      	bne.n	8007476 <__gethex+0x242>
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	9a00      	ldr	r2, [sp, #0]
 800746a:	f843 2b04 	str.w	r2, [r3], #4
 800746e:	9302      	str	r3, [sp, #8]
 8007470:	2300      	movs	r3, #0
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	469b      	mov	fp, r3
 8007476:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800747a:	f7ff fec5 	bl	8007208 <__hexdig_fun>
 800747e:	9b00      	ldr	r3, [sp, #0]
 8007480:	f000 000f 	and.w	r0, r0, #15
 8007484:	fa00 f00b 	lsl.w	r0, r0, fp
 8007488:	4303      	orrs	r3, r0
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	f10b 0b04 	add.w	fp, fp, #4
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	e00d      	b.n	80074b0 <__gethex+0x27c>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	9a06      	ldr	r2, [sp, #24]
 8007498:	4413      	add	r3, r2
 800749a:	42bb      	cmp	r3, r7
 800749c:	d3e0      	bcc.n	8007460 <__gethex+0x22c>
 800749e:	4618      	mov	r0, r3
 80074a0:	9901      	ldr	r1, [sp, #4]
 80074a2:	9307      	str	r3, [sp, #28]
 80074a4:	4652      	mov	r2, sl
 80074a6:	f001 fca7 	bl	8008df8 <strncmp>
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d1d7      	bne.n	8007460 <__gethex+0x22c>
 80074b0:	461e      	mov	r6, r3
 80074b2:	e78b      	b.n	80073cc <__gethex+0x198>
 80074b4:	f04f 0a03 	mov.w	sl, #3
 80074b8:	e7b8      	b.n	800742c <__gethex+0x1f8>
 80074ba:	da0a      	bge.n	80074d2 <__gethex+0x29e>
 80074bc:	1a37      	subs	r7, r6, r0
 80074be:	4621      	mov	r1, r4
 80074c0:	ee18 0a10 	vmov	r0, s16
 80074c4:	463a      	mov	r2, r7
 80074c6:	f000 fc57 	bl	8007d78 <__lshift>
 80074ca:	1bed      	subs	r5, r5, r7
 80074cc:	4604      	mov	r4, r0
 80074ce:	f100 0914 	add.w	r9, r0, #20
 80074d2:	f04f 0a00 	mov.w	sl, #0
 80074d6:	e7ae      	b.n	8007436 <__gethex+0x202>
 80074d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074dc:	42a8      	cmp	r0, r5
 80074de:	dd72      	ble.n	80075c6 <__gethex+0x392>
 80074e0:	1b45      	subs	r5, r0, r5
 80074e2:	42ae      	cmp	r6, r5
 80074e4:	dc36      	bgt.n	8007554 <__gethex+0x320>
 80074e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d02a      	beq.n	8007544 <__gethex+0x310>
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d02c      	beq.n	800754c <__gethex+0x318>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d11c      	bne.n	8007530 <__gethex+0x2fc>
 80074f6:	42ae      	cmp	r6, r5
 80074f8:	d11a      	bne.n	8007530 <__gethex+0x2fc>
 80074fa:	2e01      	cmp	r6, #1
 80074fc:	d112      	bne.n	8007524 <__gethex+0x2f0>
 80074fe:	9a04      	ldr	r2, [sp, #16]
 8007500:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	2301      	movs	r3, #1
 8007508:	6123      	str	r3, [r4, #16]
 800750a:	f8c9 3000 	str.w	r3, [r9]
 800750e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007510:	2762      	movs	r7, #98	; 0x62
 8007512:	601c      	str	r4, [r3, #0]
 8007514:	e723      	b.n	800735e <__gethex+0x12a>
 8007516:	bf00      	nop
 8007518:	08009ff8 	.word	0x08009ff8
 800751c:	08009f80 	.word	0x08009f80
 8007520:	08009f91 	.word	0x08009f91
 8007524:	1e71      	subs	r1, r6, #1
 8007526:	4620      	mov	r0, r4
 8007528:	f000 fe6a 	bl	8008200 <__any_on>
 800752c:	2800      	cmp	r0, #0
 800752e:	d1e6      	bne.n	80074fe <__gethex+0x2ca>
 8007530:	ee18 0a10 	vmov	r0, s16
 8007534:	4621      	mov	r1, r4
 8007536:	f000 fa03 	bl	8007940 <_Bfree>
 800753a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800753c:	2300      	movs	r3, #0
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	2750      	movs	r7, #80	; 0x50
 8007542:	e70c      	b.n	800735e <__gethex+0x12a>
 8007544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1f2      	bne.n	8007530 <__gethex+0x2fc>
 800754a:	e7d8      	b.n	80074fe <__gethex+0x2ca>
 800754c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1d5      	bne.n	80074fe <__gethex+0x2ca>
 8007552:	e7ed      	b.n	8007530 <__gethex+0x2fc>
 8007554:	1e6f      	subs	r7, r5, #1
 8007556:	f1ba 0f00 	cmp.w	sl, #0
 800755a:	d131      	bne.n	80075c0 <__gethex+0x38c>
 800755c:	b127      	cbz	r7, 8007568 <__gethex+0x334>
 800755e:	4639      	mov	r1, r7
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fe4d 	bl	8008200 <__any_on>
 8007566:	4682      	mov	sl, r0
 8007568:	117b      	asrs	r3, r7, #5
 800756a:	2101      	movs	r1, #1
 800756c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007570:	f007 071f 	and.w	r7, r7, #31
 8007574:	fa01 f707 	lsl.w	r7, r1, r7
 8007578:	421f      	tst	r7, r3
 800757a:	4629      	mov	r1, r5
 800757c:	4620      	mov	r0, r4
 800757e:	bf18      	it	ne
 8007580:	f04a 0a02 	orrne.w	sl, sl, #2
 8007584:	1b76      	subs	r6, r6, r5
 8007586:	f7ff fded 	bl	8007164 <rshift>
 800758a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800758e:	2702      	movs	r7, #2
 8007590:	f1ba 0f00 	cmp.w	sl, #0
 8007594:	d048      	beq.n	8007628 <__gethex+0x3f4>
 8007596:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d015      	beq.n	80075ca <__gethex+0x396>
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d017      	beq.n	80075d2 <__gethex+0x39e>
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d109      	bne.n	80075ba <__gethex+0x386>
 80075a6:	f01a 0f02 	tst.w	sl, #2
 80075aa:	d006      	beq.n	80075ba <__gethex+0x386>
 80075ac:	f8d9 0000 	ldr.w	r0, [r9]
 80075b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80075b4:	f01a 0f01 	tst.w	sl, #1
 80075b8:	d10e      	bne.n	80075d8 <__gethex+0x3a4>
 80075ba:	f047 0710 	orr.w	r7, r7, #16
 80075be:	e033      	b.n	8007628 <__gethex+0x3f4>
 80075c0:	f04f 0a01 	mov.w	sl, #1
 80075c4:	e7d0      	b.n	8007568 <__gethex+0x334>
 80075c6:	2701      	movs	r7, #1
 80075c8:	e7e2      	b.n	8007590 <__gethex+0x35c>
 80075ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075cc:	f1c3 0301 	rsb	r3, r3, #1
 80075d0:	9315      	str	r3, [sp, #84]	; 0x54
 80075d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f0      	beq.n	80075ba <__gethex+0x386>
 80075d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80075dc:	f104 0314 	add.w	r3, r4, #20
 80075e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80075e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80075e8:	f04f 0c00 	mov.w	ip, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80075f6:	d01c      	beq.n	8007632 <__gethex+0x3fe>
 80075f8:	3201      	adds	r2, #1
 80075fa:	6002      	str	r2, [r0, #0]
 80075fc:	2f02      	cmp	r7, #2
 80075fe:	f104 0314 	add.w	r3, r4, #20
 8007602:	d13f      	bne.n	8007684 <__gethex+0x450>
 8007604:	f8d8 2000 	ldr.w	r2, [r8]
 8007608:	3a01      	subs	r2, #1
 800760a:	42b2      	cmp	r2, r6
 800760c:	d10a      	bne.n	8007624 <__gethex+0x3f0>
 800760e:	1171      	asrs	r1, r6, #5
 8007610:	2201      	movs	r2, #1
 8007612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007616:	f006 061f 	and.w	r6, r6, #31
 800761a:	fa02 f606 	lsl.w	r6, r2, r6
 800761e:	421e      	tst	r6, r3
 8007620:	bf18      	it	ne
 8007622:	4617      	movne	r7, r2
 8007624:	f047 0720 	orr.w	r7, r7, #32
 8007628:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800762a:	601c      	str	r4, [r3, #0]
 800762c:	9b04      	ldr	r3, [sp, #16]
 800762e:	601d      	str	r5, [r3, #0]
 8007630:	e695      	b.n	800735e <__gethex+0x12a>
 8007632:	4299      	cmp	r1, r3
 8007634:	f843 cc04 	str.w	ip, [r3, #-4]
 8007638:	d8d8      	bhi.n	80075ec <__gethex+0x3b8>
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	459b      	cmp	fp, r3
 800763e:	db19      	blt.n	8007674 <__gethex+0x440>
 8007640:	6861      	ldr	r1, [r4, #4]
 8007642:	ee18 0a10 	vmov	r0, s16
 8007646:	3101      	adds	r1, #1
 8007648:	f000 f93a 	bl	80078c0 <_Balloc>
 800764c:	4681      	mov	r9, r0
 800764e:	b918      	cbnz	r0, 8007658 <__gethex+0x424>
 8007650:	4b1a      	ldr	r3, [pc, #104]	; (80076bc <__gethex+0x488>)
 8007652:	4602      	mov	r2, r0
 8007654:	2184      	movs	r1, #132	; 0x84
 8007656:	e6a8      	b.n	80073aa <__gethex+0x176>
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	3202      	adds	r2, #2
 800765c:	f104 010c 	add.w	r1, r4, #12
 8007660:	0092      	lsls	r2, r2, #2
 8007662:	300c      	adds	r0, #12
 8007664:	f000 f91e 	bl	80078a4 <memcpy>
 8007668:	4621      	mov	r1, r4
 800766a:	ee18 0a10 	vmov	r0, s16
 800766e:	f000 f967 	bl	8007940 <_Bfree>
 8007672:	464c      	mov	r4, r9
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800767c:	6122      	str	r2, [r4, #16]
 800767e:	2201      	movs	r2, #1
 8007680:	615a      	str	r2, [r3, #20]
 8007682:	e7bb      	b.n	80075fc <__gethex+0x3c8>
 8007684:	6922      	ldr	r2, [r4, #16]
 8007686:	455a      	cmp	r2, fp
 8007688:	dd0b      	ble.n	80076a2 <__gethex+0x46e>
 800768a:	2101      	movs	r1, #1
 800768c:	4620      	mov	r0, r4
 800768e:	f7ff fd69 	bl	8007164 <rshift>
 8007692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007696:	3501      	adds	r5, #1
 8007698:	42ab      	cmp	r3, r5
 800769a:	f6ff aed0 	blt.w	800743e <__gethex+0x20a>
 800769e:	2701      	movs	r7, #1
 80076a0:	e7c0      	b.n	8007624 <__gethex+0x3f0>
 80076a2:	f016 061f 	ands.w	r6, r6, #31
 80076a6:	d0fa      	beq.n	800769e <__gethex+0x46a>
 80076a8:	4453      	add	r3, sl
 80076aa:	f1c6 0620 	rsb	r6, r6, #32
 80076ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80076b2:	f000 f9f7 	bl	8007aa4 <__hi0bits>
 80076b6:	42b0      	cmp	r0, r6
 80076b8:	dbe7      	blt.n	800768a <__gethex+0x456>
 80076ba:	e7f0      	b.n	800769e <__gethex+0x46a>
 80076bc:	08009f80 	.word	0x08009f80

080076c0 <L_shift>:
 80076c0:	f1c2 0208 	rsb	r2, r2, #8
 80076c4:	0092      	lsls	r2, r2, #2
 80076c6:	b570      	push	{r4, r5, r6, lr}
 80076c8:	f1c2 0620 	rsb	r6, r2, #32
 80076cc:	6843      	ldr	r3, [r0, #4]
 80076ce:	6804      	ldr	r4, [r0, #0]
 80076d0:	fa03 f506 	lsl.w	r5, r3, r6
 80076d4:	432c      	orrs	r4, r5
 80076d6:	40d3      	lsrs	r3, r2
 80076d8:	6004      	str	r4, [r0, #0]
 80076da:	f840 3f04 	str.w	r3, [r0, #4]!
 80076de:	4288      	cmp	r0, r1
 80076e0:	d3f4      	bcc.n	80076cc <L_shift+0xc>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}

080076e4 <__match>:
 80076e4:	b530      	push	{r4, r5, lr}
 80076e6:	6803      	ldr	r3, [r0, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ee:	b914      	cbnz	r4, 80076f6 <__match+0x12>
 80076f0:	6003      	str	r3, [r0, #0]
 80076f2:	2001      	movs	r0, #1
 80076f4:	bd30      	pop	{r4, r5, pc}
 80076f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80076fe:	2d19      	cmp	r5, #25
 8007700:	bf98      	it	ls
 8007702:	3220      	addls	r2, #32
 8007704:	42a2      	cmp	r2, r4
 8007706:	d0f0      	beq.n	80076ea <__match+0x6>
 8007708:	2000      	movs	r0, #0
 800770a:	e7f3      	b.n	80076f4 <__match+0x10>

0800770c <__hexnan>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	680b      	ldr	r3, [r1, #0]
 8007712:	115e      	asrs	r6, r3, #5
 8007714:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007718:	f013 031f 	ands.w	r3, r3, #31
 800771c:	b087      	sub	sp, #28
 800771e:	bf18      	it	ne
 8007720:	3604      	addne	r6, #4
 8007722:	2500      	movs	r5, #0
 8007724:	1f37      	subs	r7, r6, #4
 8007726:	4690      	mov	r8, r2
 8007728:	6802      	ldr	r2, [r0, #0]
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	4682      	mov	sl, r0
 800772e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007732:	46b9      	mov	r9, r7
 8007734:	463c      	mov	r4, r7
 8007736:	9502      	str	r5, [sp, #8]
 8007738:	46ab      	mov	fp, r5
 800773a:	7851      	ldrb	r1, [r2, #1]
 800773c:	1c53      	adds	r3, r2, #1
 800773e:	9303      	str	r3, [sp, #12]
 8007740:	b341      	cbz	r1, 8007794 <__hexnan+0x88>
 8007742:	4608      	mov	r0, r1
 8007744:	9205      	str	r2, [sp, #20]
 8007746:	9104      	str	r1, [sp, #16]
 8007748:	f7ff fd5e 	bl	8007208 <__hexdig_fun>
 800774c:	2800      	cmp	r0, #0
 800774e:	d14f      	bne.n	80077f0 <__hexnan+0xe4>
 8007750:	9904      	ldr	r1, [sp, #16]
 8007752:	9a05      	ldr	r2, [sp, #20]
 8007754:	2920      	cmp	r1, #32
 8007756:	d818      	bhi.n	800778a <__hexnan+0x7e>
 8007758:	9b02      	ldr	r3, [sp, #8]
 800775a:	459b      	cmp	fp, r3
 800775c:	dd13      	ble.n	8007786 <__hexnan+0x7a>
 800775e:	454c      	cmp	r4, r9
 8007760:	d206      	bcs.n	8007770 <__hexnan+0x64>
 8007762:	2d07      	cmp	r5, #7
 8007764:	dc04      	bgt.n	8007770 <__hexnan+0x64>
 8007766:	462a      	mov	r2, r5
 8007768:	4649      	mov	r1, r9
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff ffa8 	bl	80076c0 <L_shift>
 8007770:	4544      	cmp	r4, r8
 8007772:	d950      	bls.n	8007816 <__hexnan+0x10a>
 8007774:	2300      	movs	r3, #0
 8007776:	f1a4 0904 	sub.w	r9, r4, #4
 800777a:	f844 3c04 	str.w	r3, [r4, #-4]
 800777e:	f8cd b008 	str.w	fp, [sp, #8]
 8007782:	464c      	mov	r4, r9
 8007784:	461d      	mov	r5, r3
 8007786:	9a03      	ldr	r2, [sp, #12]
 8007788:	e7d7      	b.n	800773a <__hexnan+0x2e>
 800778a:	2929      	cmp	r1, #41	; 0x29
 800778c:	d156      	bne.n	800783c <__hexnan+0x130>
 800778e:	3202      	adds	r2, #2
 8007790:	f8ca 2000 	str.w	r2, [sl]
 8007794:	f1bb 0f00 	cmp.w	fp, #0
 8007798:	d050      	beq.n	800783c <__hexnan+0x130>
 800779a:	454c      	cmp	r4, r9
 800779c:	d206      	bcs.n	80077ac <__hexnan+0xa0>
 800779e:	2d07      	cmp	r5, #7
 80077a0:	dc04      	bgt.n	80077ac <__hexnan+0xa0>
 80077a2:	462a      	mov	r2, r5
 80077a4:	4649      	mov	r1, r9
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7ff ff8a 	bl	80076c0 <L_shift>
 80077ac:	4544      	cmp	r4, r8
 80077ae:	d934      	bls.n	800781a <__hexnan+0x10e>
 80077b0:	f1a8 0204 	sub.w	r2, r8, #4
 80077b4:	4623      	mov	r3, r4
 80077b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80077ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80077be:	429f      	cmp	r7, r3
 80077c0:	d2f9      	bcs.n	80077b6 <__hexnan+0xaa>
 80077c2:	1b3b      	subs	r3, r7, r4
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	3304      	adds	r3, #4
 80077ca:	3401      	adds	r4, #1
 80077cc:	3e03      	subs	r6, #3
 80077ce:	42b4      	cmp	r4, r6
 80077d0:	bf88      	it	hi
 80077d2:	2304      	movhi	r3, #4
 80077d4:	4443      	add	r3, r8
 80077d6:	2200      	movs	r2, #0
 80077d8:	f843 2b04 	str.w	r2, [r3], #4
 80077dc:	429f      	cmp	r7, r3
 80077de:	d2fb      	bcs.n	80077d8 <__hexnan+0xcc>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	b91b      	cbnz	r3, 80077ec <__hexnan+0xe0>
 80077e4:	4547      	cmp	r7, r8
 80077e6:	d127      	bne.n	8007838 <__hexnan+0x12c>
 80077e8:	2301      	movs	r3, #1
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	2005      	movs	r0, #5
 80077ee:	e026      	b.n	800783e <__hexnan+0x132>
 80077f0:	3501      	adds	r5, #1
 80077f2:	2d08      	cmp	r5, #8
 80077f4:	f10b 0b01 	add.w	fp, fp, #1
 80077f8:	dd06      	ble.n	8007808 <__hexnan+0xfc>
 80077fa:	4544      	cmp	r4, r8
 80077fc:	d9c3      	bls.n	8007786 <__hexnan+0x7a>
 80077fe:	2300      	movs	r3, #0
 8007800:	f844 3c04 	str.w	r3, [r4, #-4]
 8007804:	2501      	movs	r5, #1
 8007806:	3c04      	subs	r4, #4
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	f000 000f 	and.w	r0, r0, #15
 800780e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007812:	6022      	str	r2, [r4, #0]
 8007814:	e7b7      	b.n	8007786 <__hexnan+0x7a>
 8007816:	2508      	movs	r5, #8
 8007818:	e7b5      	b.n	8007786 <__hexnan+0x7a>
 800781a:	9b01      	ldr	r3, [sp, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0df      	beq.n	80077e0 <__hexnan+0xd4>
 8007820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007824:	f1c3 0320 	rsb	r3, r3, #32
 8007828:	fa22 f303 	lsr.w	r3, r2, r3
 800782c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007830:	401a      	ands	r2, r3
 8007832:	f846 2c04 	str.w	r2, [r6, #-4]
 8007836:	e7d3      	b.n	80077e0 <__hexnan+0xd4>
 8007838:	3f04      	subs	r7, #4
 800783a:	e7d1      	b.n	80077e0 <__hexnan+0xd4>
 800783c:	2004      	movs	r0, #4
 800783e:	b007      	add	sp, #28
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007844 <_localeconv_r>:
 8007844:	4800      	ldr	r0, [pc, #0]	; (8007848 <_localeconv_r+0x4>)
 8007846:	4770      	bx	lr
 8007848:	20000158 	.word	0x20000158

0800784c <_lseek_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4d07      	ldr	r5, [pc, #28]	; (800786c <_lseek_r+0x20>)
 8007850:	4604      	mov	r4, r0
 8007852:	4608      	mov	r0, r1
 8007854:	4611      	mov	r1, r2
 8007856:	2200      	movs	r2, #0
 8007858:	602a      	str	r2, [r5, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	f7fa f81e 	bl	800189c <_lseek>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_lseek_r+0x1e>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_lseek_r+0x1e>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	20000504 	.word	0x20000504

08007870 <malloc>:
 8007870:	4b02      	ldr	r3, [pc, #8]	; (800787c <malloc+0xc>)
 8007872:	4601      	mov	r1, r0
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	f000 bd67 	b.w	8008348 <_malloc_r>
 800787a:	bf00      	nop
 800787c:	20000000 	.word	0x20000000

08007880 <__ascii_mbtowc>:
 8007880:	b082      	sub	sp, #8
 8007882:	b901      	cbnz	r1, 8007886 <__ascii_mbtowc+0x6>
 8007884:	a901      	add	r1, sp, #4
 8007886:	b142      	cbz	r2, 800789a <__ascii_mbtowc+0x1a>
 8007888:	b14b      	cbz	r3, 800789e <__ascii_mbtowc+0x1e>
 800788a:	7813      	ldrb	r3, [r2, #0]
 800788c:	600b      	str	r3, [r1, #0]
 800788e:	7812      	ldrb	r2, [r2, #0]
 8007890:	1e10      	subs	r0, r2, #0
 8007892:	bf18      	it	ne
 8007894:	2001      	movne	r0, #1
 8007896:	b002      	add	sp, #8
 8007898:	4770      	bx	lr
 800789a:	4610      	mov	r0, r2
 800789c:	e7fb      	b.n	8007896 <__ascii_mbtowc+0x16>
 800789e:	f06f 0001 	mvn.w	r0, #1
 80078a2:	e7f8      	b.n	8007896 <__ascii_mbtowc+0x16>

080078a4 <memcpy>:
 80078a4:	440a      	add	r2, r1
 80078a6:	4291      	cmp	r1, r2
 80078a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078ac:	d100      	bne.n	80078b0 <memcpy+0xc>
 80078ae:	4770      	bx	lr
 80078b0:	b510      	push	{r4, lr}
 80078b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ba:	4291      	cmp	r1, r2
 80078bc:	d1f9      	bne.n	80078b2 <memcpy+0xe>
 80078be:	bd10      	pop	{r4, pc}

080078c0 <_Balloc>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078c4:	4604      	mov	r4, r0
 80078c6:	460d      	mov	r5, r1
 80078c8:	b976      	cbnz	r6, 80078e8 <_Balloc+0x28>
 80078ca:	2010      	movs	r0, #16
 80078cc:	f7ff ffd0 	bl	8007870 <malloc>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6260      	str	r0, [r4, #36]	; 0x24
 80078d4:	b920      	cbnz	r0, 80078e0 <_Balloc+0x20>
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <_Balloc+0x78>)
 80078d8:	4818      	ldr	r0, [pc, #96]	; (800793c <_Balloc+0x7c>)
 80078da:	2166      	movs	r1, #102	; 0x66
 80078dc:	f001 fb5c 	bl	8008f98 <__assert_func>
 80078e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078e4:	6006      	str	r6, [r0, #0]
 80078e6:	60c6      	str	r6, [r0, #12]
 80078e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078ea:	68f3      	ldr	r3, [r6, #12]
 80078ec:	b183      	cbz	r3, 8007910 <_Balloc+0x50>
 80078ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078f6:	b9b8      	cbnz	r0, 8007928 <_Balloc+0x68>
 80078f8:	2101      	movs	r1, #1
 80078fa:	fa01 f605 	lsl.w	r6, r1, r5
 80078fe:	1d72      	adds	r2, r6, #5
 8007900:	0092      	lsls	r2, r2, #2
 8007902:	4620      	mov	r0, r4
 8007904:	f000 fc9d 	bl	8008242 <_calloc_r>
 8007908:	b160      	cbz	r0, 8007924 <_Balloc+0x64>
 800790a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800790e:	e00e      	b.n	800792e <_Balloc+0x6e>
 8007910:	2221      	movs	r2, #33	; 0x21
 8007912:	2104      	movs	r1, #4
 8007914:	4620      	mov	r0, r4
 8007916:	f000 fc94 	bl	8008242 <_calloc_r>
 800791a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800791c:	60f0      	str	r0, [r6, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e4      	bne.n	80078ee <_Balloc+0x2e>
 8007924:	2000      	movs	r0, #0
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	6802      	ldr	r2, [r0, #0]
 800792a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800792e:	2300      	movs	r3, #0
 8007930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007934:	e7f7      	b.n	8007926 <_Balloc+0x66>
 8007936:	bf00      	nop
 8007938:	08009f0e 	.word	0x08009f0e
 800793c:	0800a00c 	.word	0x0800a00c

08007940 <_Bfree>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007944:	4605      	mov	r5, r0
 8007946:	460c      	mov	r4, r1
 8007948:	b976      	cbnz	r6, 8007968 <_Bfree+0x28>
 800794a:	2010      	movs	r0, #16
 800794c:	f7ff ff90 	bl	8007870 <malloc>
 8007950:	4602      	mov	r2, r0
 8007952:	6268      	str	r0, [r5, #36]	; 0x24
 8007954:	b920      	cbnz	r0, 8007960 <_Bfree+0x20>
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <_Bfree+0x3c>)
 8007958:	4809      	ldr	r0, [pc, #36]	; (8007980 <_Bfree+0x40>)
 800795a:	218a      	movs	r1, #138	; 0x8a
 800795c:	f001 fb1c 	bl	8008f98 <__assert_func>
 8007960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007964:	6006      	str	r6, [r0, #0]
 8007966:	60c6      	str	r6, [r0, #12]
 8007968:	b13c      	cbz	r4, 800797a <_Bfree+0x3a>
 800796a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800796c:	6862      	ldr	r2, [r4, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007974:	6021      	str	r1, [r4, #0]
 8007976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	08009f0e 	.word	0x08009f0e
 8007980:	0800a00c 	.word	0x0800a00c

08007984 <__multadd>:
 8007984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007988:	690d      	ldr	r5, [r1, #16]
 800798a:	4607      	mov	r7, r0
 800798c:	460c      	mov	r4, r1
 800798e:	461e      	mov	r6, r3
 8007990:	f101 0c14 	add.w	ip, r1, #20
 8007994:	2000      	movs	r0, #0
 8007996:	f8dc 3000 	ldr.w	r3, [ip]
 800799a:	b299      	uxth	r1, r3
 800799c:	fb02 6101 	mla	r1, r2, r1, r6
 80079a0:	0c1e      	lsrs	r6, r3, #16
 80079a2:	0c0b      	lsrs	r3, r1, #16
 80079a4:	fb02 3306 	mla	r3, r2, r6, r3
 80079a8:	b289      	uxth	r1, r1
 80079aa:	3001      	adds	r0, #1
 80079ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079b0:	4285      	cmp	r5, r0
 80079b2:	f84c 1b04 	str.w	r1, [ip], #4
 80079b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ba:	dcec      	bgt.n	8007996 <__multadd+0x12>
 80079bc:	b30e      	cbz	r6, 8007a02 <__multadd+0x7e>
 80079be:	68a3      	ldr	r3, [r4, #8]
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	dc19      	bgt.n	80079f8 <__multadd+0x74>
 80079c4:	6861      	ldr	r1, [r4, #4]
 80079c6:	4638      	mov	r0, r7
 80079c8:	3101      	adds	r1, #1
 80079ca:	f7ff ff79 	bl	80078c0 <_Balloc>
 80079ce:	4680      	mov	r8, r0
 80079d0:	b928      	cbnz	r0, 80079de <__multadd+0x5a>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <__multadd+0x84>)
 80079d6:	480d      	ldr	r0, [pc, #52]	; (8007a0c <__multadd+0x88>)
 80079d8:	21b5      	movs	r1, #181	; 0xb5
 80079da:	f001 fadd 	bl	8008f98 <__assert_func>
 80079de:	6922      	ldr	r2, [r4, #16]
 80079e0:	3202      	adds	r2, #2
 80079e2:	f104 010c 	add.w	r1, r4, #12
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	300c      	adds	r0, #12
 80079ea:	f7ff ff5b 	bl	80078a4 <memcpy>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7ff ffa5 	bl	8007940 <_Bfree>
 80079f6:	4644      	mov	r4, r8
 80079f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079fc:	3501      	adds	r5, #1
 80079fe:	615e      	str	r6, [r3, #20]
 8007a00:	6125      	str	r5, [r4, #16]
 8007a02:	4620      	mov	r0, r4
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a08:	08009f80 	.word	0x08009f80
 8007a0c:	0800a00c 	.word	0x0800a00c

08007a10 <__s2b>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	460c      	mov	r4, r1
 8007a16:	4615      	mov	r5, r2
 8007a18:	461f      	mov	r7, r3
 8007a1a:	2209      	movs	r2, #9
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	4606      	mov	r6, r0
 8007a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a24:	2100      	movs	r1, #0
 8007a26:	2201      	movs	r2, #1
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	db09      	blt.n	8007a40 <__s2b+0x30>
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f7ff ff47 	bl	80078c0 <_Balloc>
 8007a32:	b940      	cbnz	r0, 8007a46 <__s2b+0x36>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <__s2b+0x8c>)
 8007a38:	4819      	ldr	r0, [pc, #100]	; (8007aa0 <__s2b+0x90>)
 8007a3a:	21ce      	movs	r1, #206	; 0xce
 8007a3c:	f001 faac 	bl	8008f98 <__assert_func>
 8007a40:	0052      	lsls	r2, r2, #1
 8007a42:	3101      	adds	r1, #1
 8007a44:	e7f0      	b.n	8007a28 <__s2b+0x18>
 8007a46:	9b08      	ldr	r3, [sp, #32]
 8007a48:	6143      	str	r3, [r0, #20]
 8007a4a:	2d09      	cmp	r5, #9
 8007a4c:	f04f 0301 	mov.w	r3, #1
 8007a50:	6103      	str	r3, [r0, #16]
 8007a52:	dd16      	ble.n	8007a82 <__s2b+0x72>
 8007a54:	f104 0909 	add.w	r9, r4, #9
 8007a58:	46c8      	mov	r8, r9
 8007a5a:	442c      	add	r4, r5
 8007a5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a60:	4601      	mov	r1, r0
 8007a62:	3b30      	subs	r3, #48	; 0x30
 8007a64:	220a      	movs	r2, #10
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ff8c 	bl	8007984 <__multadd>
 8007a6c:	45a0      	cmp	r8, r4
 8007a6e:	d1f5      	bne.n	8007a5c <__s2b+0x4c>
 8007a70:	f1a5 0408 	sub.w	r4, r5, #8
 8007a74:	444c      	add	r4, r9
 8007a76:	1b2d      	subs	r5, r5, r4
 8007a78:	1963      	adds	r3, r4, r5
 8007a7a:	42bb      	cmp	r3, r7
 8007a7c:	db04      	blt.n	8007a88 <__s2b+0x78>
 8007a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a82:	340a      	adds	r4, #10
 8007a84:	2509      	movs	r5, #9
 8007a86:	e7f6      	b.n	8007a76 <__s2b+0x66>
 8007a88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	3b30      	subs	r3, #48	; 0x30
 8007a90:	220a      	movs	r2, #10
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7ff ff76 	bl	8007984 <__multadd>
 8007a98:	e7ee      	b.n	8007a78 <__s2b+0x68>
 8007a9a:	bf00      	nop
 8007a9c:	08009f80 	.word	0x08009f80
 8007aa0:	0800a00c 	.word	0x0800a00c

08007aa4 <__hi0bits>:
 8007aa4:	0c03      	lsrs	r3, r0, #16
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	b9d3      	cbnz	r3, 8007ae0 <__hi0bits+0x3c>
 8007aaa:	0400      	lsls	r0, r0, #16
 8007aac:	2310      	movs	r3, #16
 8007aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ab2:	bf04      	itt	eq
 8007ab4:	0200      	lsleq	r0, r0, #8
 8007ab6:	3308      	addeq	r3, #8
 8007ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007abc:	bf04      	itt	eq
 8007abe:	0100      	lsleq	r0, r0, #4
 8007ac0:	3304      	addeq	r3, #4
 8007ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ac6:	bf04      	itt	eq
 8007ac8:	0080      	lsleq	r0, r0, #2
 8007aca:	3302      	addeq	r3, #2
 8007acc:	2800      	cmp	r0, #0
 8007ace:	db05      	blt.n	8007adc <__hi0bits+0x38>
 8007ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ad4:	f103 0301 	add.w	r3, r3, #1
 8007ad8:	bf08      	it	eq
 8007ada:	2320      	moveq	r3, #32
 8007adc:	4618      	mov	r0, r3
 8007ade:	4770      	bx	lr
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e7e4      	b.n	8007aae <__hi0bits+0xa>

08007ae4 <__lo0bits>:
 8007ae4:	6803      	ldr	r3, [r0, #0]
 8007ae6:	f013 0207 	ands.w	r2, r3, #7
 8007aea:	4601      	mov	r1, r0
 8007aec:	d00b      	beq.n	8007b06 <__lo0bits+0x22>
 8007aee:	07da      	lsls	r2, r3, #31
 8007af0:	d423      	bmi.n	8007b3a <__lo0bits+0x56>
 8007af2:	0798      	lsls	r0, r3, #30
 8007af4:	bf49      	itett	mi
 8007af6:	085b      	lsrmi	r3, r3, #1
 8007af8:	089b      	lsrpl	r3, r3, #2
 8007afa:	2001      	movmi	r0, #1
 8007afc:	600b      	strmi	r3, [r1, #0]
 8007afe:	bf5c      	itt	pl
 8007b00:	600b      	strpl	r3, [r1, #0]
 8007b02:	2002      	movpl	r0, #2
 8007b04:	4770      	bx	lr
 8007b06:	b298      	uxth	r0, r3
 8007b08:	b9a8      	cbnz	r0, 8007b36 <__lo0bits+0x52>
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	2010      	movs	r0, #16
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	b90a      	cbnz	r2, 8007b16 <__lo0bits+0x32>
 8007b12:	3008      	adds	r0, #8
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	071a      	lsls	r2, r3, #28
 8007b18:	bf04      	itt	eq
 8007b1a:	091b      	lsreq	r3, r3, #4
 8007b1c:	3004      	addeq	r0, #4
 8007b1e:	079a      	lsls	r2, r3, #30
 8007b20:	bf04      	itt	eq
 8007b22:	089b      	lsreq	r3, r3, #2
 8007b24:	3002      	addeq	r0, #2
 8007b26:	07da      	lsls	r2, r3, #31
 8007b28:	d403      	bmi.n	8007b32 <__lo0bits+0x4e>
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	f100 0001 	add.w	r0, r0, #1
 8007b30:	d005      	beq.n	8007b3e <__lo0bits+0x5a>
 8007b32:	600b      	str	r3, [r1, #0]
 8007b34:	4770      	bx	lr
 8007b36:	4610      	mov	r0, r2
 8007b38:	e7e9      	b.n	8007b0e <__lo0bits+0x2a>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	4770      	bx	lr
 8007b3e:	2020      	movs	r0, #32
 8007b40:	4770      	bx	lr
	...

08007b44 <__i2b>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	460c      	mov	r4, r1
 8007b48:	2101      	movs	r1, #1
 8007b4a:	f7ff feb9 	bl	80078c0 <_Balloc>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	b928      	cbnz	r0, 8007b5e <__i2b+0x1a>
 8007b52:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <__i2b+0x24>)
 8007b54:	4805      	ldr	r0, [pc, #20]	; (8007b6c <__i2b+0x28>)
 8007b56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b5a:	f001 fa1d 	bl	8008f98 <__assert_func>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	6144      	str	r4, [r0, #20]
 8007b62:	6103      	str	r3, [r0, #16]
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	bf00      	nop
 8007b68:	08009f80 	.word	0x08009f80
 8007b6c:	0800a00c 	.word	0x0800a00c

08007b70 <__multiply>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	4691      	mov	r9, r2
 8007b76:	690a      	ldr	r2, [r1, #16]
 8007b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bfb8      	it	lt
 8007b80:	460b      	movlt	r3, r1
 8007b82:	460c      	mov	r4, r1
 8007b84:	bfbc      	itt	lt
 8007b86:	464c      	movlt	r4, r9
 8007b88:	4699      	movlt	r9, r3
 8007b8a:	6927      	ldr	r7, [r4, #16]
 8007b8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b90:	68a3      	ldr	r3, [r4, #8]
 8007b92:	6861      	ldr	r1, [r4, #4]
 8007b94:	eb07 060a 	add.w	r6, r7, sl
 8007b98:	42b3      	cmp	r3, r6
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	bfb8      	it	lt
 8007b9e:	3101      	addlt	r1, #1
 8007ba0:	f7ff fe8e 	bl	80078c0 <_Balloc>
 8007ba4:	b930      	cbnz	r0, 8007bb4 <__multiply+0x44>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	4b44      	ldr	r3, [pc, #272]	; (8007cbc <__multiply+0x14c>)
 8007baa:	4845      	ldr	r0, [pc, #276]	; (8007cc0 <__multiply+0x150>)
 8007bac:	f240 115d 	movw	r1, #349	; 0x15d
 8007bb0:	f001 f9f2 	bl	8008f98 <__assert_func>
 8007bb4:	f100 0514 	add.w	r5, r0, #20
 8007bb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4543      	cmp	r3, r8
 8007bc2:	d321      	bcc.n	8007c08 <__multiply+0x98>
 8007bc4:	f104 0314 	add.w	r3, r4, #20
 8007bc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bcc:	f109 0314 	add.w	r3, r9, #20
 8007bd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bd4:	9202      	str	r2, [sp, #8]
 8007bd6:	1b3a      	subs	r2, r7, r4
 8007bd8:	3a15      	subs	r2, #21
 8007bda:	f022 0203 	bic.w	r2, r2, #3
 8007bde:	3204      	adds	r2, #4
 8007be0:	f104 0115 	add.w	r1, r4, #21
 8007be4:	428f      	cmp	r7, r1
 8007be6:	bf38      	it	cc
 8007be8:	2204      	movcc	r2, #4
 8007bea:	9201      	str	r2, [sp, #4]
 8007bec:	9a02      	ldr	r2, [sp, #8]
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d80c      	bhi.n	8007c0e <__multiply+0x9e>
 8007bf4:	2e00      	cmp	r6, #0
 8007bf6:	dd03      	ble.n	8007c00 <__multiply+0x90>
 8007bf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d05a      	beq.n	8007cb6 <__multiply+0x146>
 8007c00:	6106      	str	r6, [r0, #16]
 8007c02:	b005      	add	sp, #20
 8007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c08:	f843 2b04 	str.w	r2, [r3], #4
 8007c0c:	e7d8      	b.n	8007bc0 <__multiply+0x50>
 8007c0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c12:	f1ba 0f00 	cmp.w	sl, #0
 8007c16:	d024      	beq.n	8007c62 <__multiply+0xf2>
 8007c18:	f104 0e14 	add.w	lr, r4, #20
 8007c1c:	46a9      	mov	r9, r5
 8007c1e:	f04f 0c00 	mov.w	ip, #0
 8007c22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c26:	f8d9 1000 	ldr.w	r1, [r9]
 8007c2a:	fa1f fb82 	uxth.w	fp, r2
 8007c2e:	b289      	uxth	r1, r1
 8007c30:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c38:	f8d9 2000 	ldr.w	r2, [r9]
 8007c3c:	4461      	add	r1, ip
 8007c3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c42:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c4a:	b289      	uxth	r1, r1
 8007c4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c50:	4577      	cmp	r7, lr
 8007c52:	f849 1b04 	str.w	r1, [r9], #4
 8007c56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c5a:	d8e2      	bhi.n	8007c22 <__multiply+0xb2>
 8007c5c:	9a01      	ldr	r2, [sp, #4]
 8007c5e:	f845 c002 	str.w	ip, [r5, r2]
 8007c62:	9a03      	ldr	r2, [sp, #12]
 8007c64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	f1b9 0f00 	cmp.w	r9, #0
 8007c6e:	d020      	beq.n	8007cb2 <__multiply+0x142>
 8007c70:	6829      	ldr	r1, [r5, #0]
 8007c72:	f104 0c14 	add.w	ip, r4, #20
 8007c76:	46ae      	mov	lr, r5
 8007c78:	f04f 0a00 	mov.w	sl, #0
 8007c7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007c80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c84:	fb09 220b 	mla	r2, r9, fp, r2
 8007c88:	4492      	add	sl, r2
 8007c8a:	b289      	uxth	r1, r1
 8007c8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c90:	f84e 1b04 	str.w	r1, [lr], #4
 8007c94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c98:	f8be 1000 	ldrh.w	r1, [lr]
 8007c9c:	0c12      	lsrs	r2, r2, #16
 8007c9e:	fb09 1102 	mla	r1, r9, r2, r1
 8007ca2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ca6:	4567      	cmp	r7, ip
 8007ca8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cac:	d8e6      	bhi.n	8007c7c <__multiply+0x10c>
 8007cae:	9a01      	ldr	r2, [sp, #4]
 8007cb0:	50a9      	str	r1, [r5, r2]
 8007cb2:	3504      	adds	r5, #4
 8007cb4:	e79a      	b.n	8007bec <__multiply+0x7c>
 8007cb6:	3e01      	subs	r6, #1
 8007cb8:	e79c      	b.n	8007bf4 <__multiply+0x84>
 8007cba:	bf00      	nop
 8007cbc:	08009f80 	.word	0x08009f80
 8007cc0:	0800a00c 	.word	0x0800a00c

08007cc4 <__pow5mult>:
 8007cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	4615      	mov	r5, r2
 8007cca:	f012 0203 	ands.w	r2, r2, #3
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	d007      	beq.n	8007ce4 <__pow5mult+0x20>
 8007cd4:	4c25      	ldr	r4, [pc, #148]	; (8007d6c <__pow5mult+0xa8>)
 8007cd6:	3a01      	subs	r2, #1
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cde:	f7ff fe51 	bl	8007984 <__multadd>
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	10ad      	asrs	r5, r5, #2
 8007ce6:	d03d      	beq.n	8007d64 <__pow5mult+0xa0>
 8007ce8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cea:	b97c      	cbnz	r4, 8007d0c <__pow5mult+0x48>
 8007cec:	2010      	movs	r0, #16
 8007cee:	f7ff fdbf 	bl	8007870 <malloc>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6270      	str	r0, [r6, #36]	; 0x24
 8007cf6:	b928      	cbnz	r0, 8007d04 <__pow5mult+0x40>
 8007cf8:	4b1d      	ldr	r3, [pc, #116]	; (8007d70 <__pow5mult+0xac>)
 8007cfa:	481e      	ldr	r0, [pc, #120]	; (8007d74 <__pow5mult+0xb0>)
 8007cfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d00:	f001 f94a 	bl	8008f98 <__assert_func>
 8007d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d08:	6004      	str	r4, [r0, #0]
 8007d0a:	60c4      	str	r4, [r0, #12]
 8007d0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d14:	b94c      	cbnz	r4, 8007d2a <__pow5mult+0x66>
 8007d16:	f240 2171 	movw	r1, #625	; 0x271
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7ff ff12 	bl	8007b44 <__i2b>
 8007d20:	2300      	movs	r3, #0
 8007d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d26:	4604      	mov	r4, r0
 8007d28:	6003      	str	r3, [r0, #0]
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	07eb      	lsls	r3, r5, #31
 8007d30:	d50a      	bpl.n	8007d48 <__pow5mult+0x84>
 8007d32:	4639      	mov	r1, r7
 8007d34:	4622      	mov	r2, r4
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff ff1a 	bl	8007b70 <__multiply>
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	4680      	mov	r8, r0
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff fdfd 	bl	8007940 <_Bfree>
 8007d46:	4647      	mov	r7, r8
 8007d48:	106d      	asrs	r5, r5, #1
 8007d4a:	d00b      	beq.n	8007d64 <__pow5mult+0xa0>
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	b938      	cbnz	r0, 8007d60 <__pow5mult+0x9c>
 8007d50:	4622      	mov	r2, r4
 8007d52:	4621      	mov	r1, r4
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff ff0b 	bl	8007b70 <__multiply>
 8007d5a:	6020      	str	r0, [r4, #0]
 8007d5c:	f8c0 9000 	str.w	r9, [r0]
 8007d60:	4604      	mov	r4, r0
 8007d62:	e7e4      	b.n	8007d2e <__pow5mult+0x6a>
 8007d64:	4638      	mov	r0, r7
 8007d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	bf00      	nop
 8007d6c:	0800a158 	.word	0x0800a158
 8007d70:	08009f0e 	.word	0x08009f0e
 8007d74:	0800a00c 	.word	0x0800a00c

08007d78 <__lshift>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	6849      	ldr	r1, [r1, #4]
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d86:	68a3      	ldr	r3, [r4, #8]
 8007d88:	4607      	mov	r7, r0
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d90:	f108 0601 	add.w	r6, r8, #1
 8007d94:	42b3      	cmp	r3, r6
 8007d96:	db0b      	blt.n	8007db0 <__lshift+0x38>
 8007d98:	4638      	mov	r0, r7
 8007d9a:	f7ff fd91 	bl	80078c0 <_Balloc>
 8007d9e:	4605      	mov	r5, r0
 8007da0:	b948      	cbnz	r0, 8007db6 <__lshift+0x3e>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b2a      	ldr	r3, [pc, #168]	; (8007e50 <__lshift+0xd8>)
 8007da6:	482b      	ldr	r0, [pc, #172]	; (8007e54 <__lshift+0xdc>)
 8007da8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007dac:	f001 f8f4 	bl	8008f98 <__assert_func>
 8007db0:	3101      	adds	r1, #1
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	e7ee      	b.n	8007d94 <__lshift+0x1c>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f100 0114 	add.w	r1, r0, #20
 8007dbc:	f100 0210 	add.w	r2, r0, #16
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	4553      	cmp	r3, sl
 8007dc4:	db37      	blt.n	8007e36 <__lshift+0xbe>
 8007dc6:	6920      	ldr	r0, [r4, #16]
 8007dc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dcc:	f104 0314 	add.w	r3, r4, #20
 8007dd0:	f019 091f 	ands.w	r9, r9, #31
 8007dd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ddc:	d02f      	beq.n	8007e3e <__lshift+0xc6>
 8007dde:	f1c9 0e20 	rsb	lr, r9, #32
 8007de2:	468a      	mov	sl, r1
 8007de4:	f04f 0c00 	mov.w	ip, #0
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	fa02 f209 	lsl.w	r2, r2, r9
 8007dee:	ea42 020c 	orr.w	r2, r2, ip
 8007df2:	f84a 2b04 	str.w	r2, [sl], #4
 8007df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfa:	4298      	cmp	r0, r3
 8007dfc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e00:	d8f2      	bhi.n	8007de8 <__lshift+0x70>
 8007e02:	1b03      	subs	r3, r0, r4
 8007e04:	3b15      	subs	r3, #21
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	f104 0215 	add.w	r2, r4, #21
 8007e10:	4290      	cmp	r0, r2
 8007e12:	bf38      	it	cc
 8007e14:	2304      	movcc	r3, #4
 8007e16:	f841 c003 	str.w	ip, [r1, r3]
 8007e1a:	f1bc 0f00 	cmp.w	ip, #0
 8007e1e:	d001      	beq.n	8007e24 <__lshift+0xac>
 8007e20:	f108 0602 	add.w	r6, r8, #2
 8007e24:	3e01      	subs	r6, #1
 8007e26:	4638      	mov	r0, r7
 8007e28:	612e      	str	r6, [r5, #16]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	f7ff fd88 	bl	8007940 <_Bfree>
 8007e30:	4628      	mov	r0, r5
 8007e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e36:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	e7c1      	b.n	8007dc2 <__lshift+0x4a>
 8007e3e:	3904      	subs	r1, #4
 8007e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e48:	4298      	cmp	r0, r3
 8007e4a:	d8f9      	bhi.n	8007e40 <__lshift+0xc8>
 8007e4c:	e7ea      	b.n	8007e24 <__lshift+0xac>
 8007e4e:	bf00      	nop
 8007e50:	08009f80 	.word	0x08009f80
 8007e54:	0800a00c 	.word	0x0800a00c

08007e58 <__mcmp>:
 8007e58:	b530      	push	{r4, r5, lr}
 8007e5a:	6902      	ldr	r2, [r0, #16]
 8007e5c:	690c      	ldr	r4, [r1, #16]
 8007e5e:	1b12      	subs	r2, r2, r4
 8007e60:	d10e      	bne.n	8007e80 <__mcmp+0x28>
 8007e62:	f100 0314 	add.w	r3, r0, #20
 8007e66:	3114      	adds	r1, #20
 8007e68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e78:	42a5      	cmp	r5, r4
 8007e7a:	d003      	beq.n	8007e84 <__mcmp+0x2c>
 8007e7c:	d305      	bcc.n	8007e8a <__mcmp+0x32>
 8007e7e:	2201      	movs	r2, #1
 8007e80:	4610      	mov	r0, r2
 8007e82:	bd30      	pop	{r4, r5, pc}
 8007e84:	4283      	cmp	r3, r0
 8007e86:	d3f3      	bcc.n	8007e70 <__mcmp+0x18>
 8007e88:	e7fa      	b.n	8007e80 <__mcmp+0x28>
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e8e:	e7f7      	b.n	8007e80 <__mcmp+0x28>

08007e90 <__mdiff>:
 8007e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	460c      	mov	r4, r1
 8007e96:	4606      	mov	r6, r0
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4690      	mov	r8, r2
 8007e9e:	f7ff ffdb 	bl	8007e58 <__mcmp>
 8007ea2:	1e05      	subs	r5, r0, #0
 8007ea4:	d110      	bne.n	8007ec8 <__mdiff+0x38>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff fd09 	bl	80078c0 <_Balloc>
 8007eae:	b930      	cbnz	r0, 8007ebe <__mdiff+0x2e>
 8007eb0:	4b3a      	ldr	r3, [pc, #232]	; (8007f9c <__mdiff+0x10c>)
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	f240 2132 	movw	r1, #562	; 0x232
 8007eb8:	4839      	ldr	r0, [pc, #228]	; (8007fa0 <__mdiff+0x110>)
 8007eba:	f001 f86d 	bl	8008f98 <__assert_func>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	bfa4      	itt	ge
 8007eca:	4643      	movge	r3, r8
 8007ecc:	46a0      	movge	r8, r4
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ed4:	bfa6      	itte	ge
 8007ed6:	461c      	movge	r4, r3
 8007ed8:	2500      	movge	r5, #0
 8007eda:	2501      	movlt	r5, #1
 8007edc:	f7ff fcf0 	bl	80078c0 <_Balloc>
 8007ee0:	b920      	cbnz	r0, 8007eec <__mdiff+0x5c>
 8007ee2:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <__mdiff+0x10c>)
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007eea:	e7e5      	b.n	8007eb8 <__mdiff+0x28>
 8007eec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ef0:	6926      	ldr	r6, [r4, #16]
 8007ef2:	60c5      	str	r5, [r0, #12]
 8007ef4:	f104 0914 	add.w	r9, r4, #20
 8007ef8:	f108 0514 	add.w	r5, r8, #20
 8007efc:	f100 0e14 	add.w	lr, r0, #20
 8007f00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f08:	f108 0210 	add.w	r2, r8, #16
 8007f0c:	46f2      	mov	sl, lr
 8007f0e:	2100      	movs	r1, #0
 8007f10:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f18:	fa1f f883 	uxth.w	r8, r3
 8007f1c:	fa11 f18b 	uxtah	r1, r1, fp
 8007f20:	0c1b      	lsrs	r3, r3, #16
 8007f22:	eba1 0808 	sub.w	r8, r1, r8
 8007f26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f2e:	fa1f f888 	uxth.w	r8, r8
 8007f32:	1419      	asrs	r1, r3, #16
 8007f34:	454e      	cmp	r6, r9
 8007f36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f3a:	f84a 3b04 	str.w	r3, [sl], #4
 8007f3e:	d8e7      	bhi.n	8007f10 <__mdiff+0x80>
 8007f40:	1b33      	subs	r3, r6, r4
 8007f42:	3b15      	subs	r3, #21
 8007f44:	f023 0303 	bic.w	r3, r3, #3
 8007f48:	3304      	adds	r3, #4
 8007f4a:	3415      	adds	r4, #21
 8007f4c:	42a6      	cmp	r6, r4
 8007f4e:	bf38      	it	cc
 8007f50:	2304      	movcc	r3, #4
 8007f52:	441d      	add	r5, r3
 8007f54:	4473      	add	r3, lr
 8007f56:	469e      	mov	lr, r3
 8007f58:	462e      	mov	r6, r5
 8007f5a:	4566      	cmp	r6, ip
 8007f5c:	d30e      	bcc.n	8007f7c <__mdiff+0xec>
 8007f5e:	f10c 0203 	add.w	r2, ip, #3
 8007f62:	1b52      	subs	r2, r2, r5
 8007f64:	f022 0203 	bic.w	r2, r2, #3
 8007f68:	3d03      	subs	r5, #3
 8007f6a:	45ac      	cmp	ip, r5
 8007f6c:	bf38      	it	cc
 8007f6e:	2200      	movcc	r2, #0
 8007f70:	441a      	add	r2, r3
 8007f72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f76:	b17b      	cbz	r3, 8007f98 <__mdiff+0x108>
 8007f78:	6107      	str	r7, [r0, #16]
 8007f7a:	e7a3      	b.n	8007ec4 <__mdiff+0x34>
 8007f7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f80:	fa11 f288 	uxtah	r2, r1, r8
 8007f84:	1414      	asrs	r4, r2, #16
 8007f86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f8a:	b292      	uxth	r2, r2
 8007f8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f90:	f84e 2b04 	str.w	r2, [lr], #4
 8007f94:	1421      	asrs	r1, r4, #16
 8007f96:	e7e0      	b.n	8007f5a <__mdiff+0xca>
 8007f98:	3f01      	subs	r7, #1
 8007f9a:	e7ea      	b.n	8007f72 <__mdiff+0xe2>
 8007f9c:	08009f80 	.word	0x08009f80
 8007fa0:	0800a00c 	.word	0x0800a00c

08007fa4 <__ulp>:
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	ed8d 0b00 	vstr	d0, [sp]
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	4912      	ldr	r1, [pc, #72]	; (8007ff8 <__ulp+0x54>)
 8007fae:	4019      	ands	r1, r3
 8007fb0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	dd05      	ble.n	8007fc4 <__ulp+0x20>
 8007fb8:	2200      	movs	r2, #0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	ec43 2b10 	vmov	d0, r2, r3
 8007fc0:	b002      	add	sp, #8
 8007fc2:	4770      	bx	lr
 8007fc4:	4249      	negs	r1, r1
 8007fc6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007fca:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	da04      	bge.n	8007fe2 <__ulp+0x3e>
 8007fd8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007fdc:	fa41 f300 	asr.w	r3, r1, r0
 8007fe0:	e7ec      	b.n	8007fbc <__ulp+0x18>
 8007fe2:	f1a0 0114 	sub.w	r1, r0, #20
 8007fe6:	291e      	cmp	r1, #30
 8007fe8:	bfda      	itte	le
 8007fea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007fee:	fa20 f101 	lsrle.w	r1, r0, r1
 8007ff2:	2101      	movgt	r1, #1
 8007ff4:	460a      	mov	r2, r1
 8007ff6:	e7e1      	b.n	8007fbc <__ulp+0x18>
 8007ff8:	7ff00000 	.word	0x7ff00000

08007ffc <__b2d>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	6905      	ldr	r5, [r0, #16]
 8008000:	f100 0714 	add.w	r7, r0, #20
 8008004:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008008:	1f2e      	subs	r6, r5, #4
 800800a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800800e:	4620      	mov	r0, r4
 8008010:	f7ff fd48 	bl	8007aa4 <__hi0bits>
 8008014:	f1c0 0320 	rsb	r3, r0, #32
 8008018:	280a      	cmp	r0, #10
 800801a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008098 <__b2d+0x9c>
 800801e:	600b      	str	r3, [r1, #0]
 8008020:	dc14      	bgt.n	800804c <__b2d+0x50>
 8008022:	f1c0 0e0b 	rsb	lr, r0, #11
 8008026:	fa24 f10e 	lsr.w	r1, r4, lr
 800802a:	42b7      	cmp	r7, r6
 800802c:	ea41 030c 	orr.w	r3, r1, ip
 8008030:	bf34      	ite	cc
 8008032:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008036:	2100      	movcs	r1, #0
 8008038:	3015      	adds	r0, #21
 800803a:	fa04 f000 	lsl.w	r0, r4, r0
 800803e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008042:	ea40 0201 	orr.w	r2, r0, r1
 8008046:	ec43 2b10 	vmov	d0, r2, r3
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804c:	42b7      	cmp	r7, r6
 800804e:	bf3a      	itte	cc
 8008050:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008054:	f1a5 0608 	subcc.w	r6, r5, #8
 8008058:	2100      	movcs	r1, #0
 800805a:	380b      	subs	r0, #11
 800805c:	d017      	beq.n	800808e <__b2d+0x92>
 800805e:	f1c0 0c20 	rsb	ip, r0, #32
 8008062:	fa04 f500 	lsl.w	r5, r4, r0
 8008066:	42be      	cmp	r6, r7
 8008068:	fa21 f40c 	lsr.w	r4, r1, ip
 800806c:	ea45 0504 	orr.w	r5, r5, r4
 8008070:	bf8c      	ite	hi
 8008072:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008076:	2400      	movls	r4, #0
 8008078:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800807c:	fa01 f000 	lsl.w	r0, r1, r0
 8008080:	fa24 f40c 	lsr.w	r4, r4, ip
 8008084:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008088:	ea40 0204 	orr.w	r2, r0, r4
 800808c:	e7db      	b.n	8008046 <__b2d+0x4a>
 800808e:	ea44 030c 	orr.w	r3, r4, ip
 8008092:	460a      	mov	r2, r1
 8008094:	e7d7      	b.n	8008046 <__b2d+0x4a>
 8008096:	bf00      	nop
 8008098:	3ff00000 	.word	0x3ff00000

0800809c <__d2b>:
 800809c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080a0:	4689      	mov	r9, r1
 80080a2:	2101      	movs	r1, #1
 80080a4:	ec57 6b10 	vmov	r6, r7, d0
 80080a8:	4690      	mov	r8, r2
 80080aa:	f7ff fc09 	bl	80078c0 <_Balloc>
 80080ae:	4604      	mov	r4, r0
 80080b0:	b930      	cbnz	r0, 80080c0 <__d2b+0x24>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4b25      	ldr	r3, [pc, #148]	; (800814c <__d2b+0xb0>)
 80080b6:	4826      	ldr	r0, [pc, #152]	; (8008150 <__d2b+0xb4>)
 80080b8:	f240 310a 	movw	r1, #778	; 0x30a
 80080bc:	f000 ff6c 	bl	8008f98 <__assert_func>
 80080c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080c8:	bb35      	cbnz	r5, 8008118 <__d2b+0x7c>
 80080ca:	2e00      	cmp	r6, #0
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	d028      	beq.n	8008122 <__d2b+0x86>
 80080d0:	4668      	mov	r0, sp
 80080d2:	9600      	str	r6, [sp, #0]
 80080d4:	f7ff fd06 	bl	8007ae4 <__lo0bits>
 80080d8:	9900      	ldr	r1, [sp, #0]
 80080da:	b300      	cbz	r0, 800811e <__d2b+0x82>
 80080dc:	9a01      	ldr	r2, [sp, #4]
 80080de:	f1c0 0320 	rsb	r3, r0, #32
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	430b      	orrs	r3, r1
 80080e8:	40c2      	lsrs	r2, r0
 80080ea:	6163      	str	r3, [r4, #20]
 80080ec:	9201      	str	r2, [sp, #4]
 80080ee:	9b01      	ldr	r3, [sp, #4]
 80080f0:	61a3      	str	r3, [r4, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bf14      	ite	ne
 80080f6:	2202      	movne	r2, #2
 80080f8:	2201      	moveq	r2, #1
 80080fa:	6122      	str	r2, [r4, #16]
 80080fc:	b1d5      	cbz	r5, 8008134 <__d2b+0x98>
 80080fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008102:	4405      	add	r5, r0
 8008104:	f8c9 5000 	str.w	r5, [r9]
 8008108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800810c:	f8c8 0000 	str.w	r0, [r8]
 8008110:	4620      	mov	r0, r4
 8008112:	b003      	add	sp, #12
 8008114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800811c:	e7d5      	b.n	80080ca <__d2b+0x2e>
 800811e:	6161      	str	r1, [r4, #20]
 8008120:	e7e5      	b.n	80080ee <__d2b+0x52>
 8008122:	a801      	add	r0, sp, #4
 8008124:	f7ff fcde 	bl	8007ae4 <__lo0bits>
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	2201      	movs	r2, #1
 800812e:	6122      	str	r2, [r4, #16]
 8008130:	3020      	adds	r0, #32
 8008132:	e7e3      	b.n	80080fc <__d2b+0x60>
 8008134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800813c:	f8c9 0000 	str.w	r0, [r9]
 8008140:	6918      	ldr	r0, [r3, #16]
 8008142:	f7ff fcaf 	bl	8007aa4 <__hi0bits>
 8008146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800814a:	e7df      	b.n	800810c <__d2b+0x70>
 800814c:	08009f80 	.word	0x08009f80
 8008150:	0800a00c 	.word	0x0800a00c

08008154 <__ratio>:
 8008154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	4688      	mov	r8, r1
 800815a:	4669      	mov	r1, sp
 800815c:	4681      	mov	r9, r0
 800815e:	f7ff ff4d 	bl	8007ffc <__b2d>
 8008162:	a901      	add	r1, sp, #4
 8008164:	4640      	mov	r0, r8
 8008166:	ec55 4b10 	vmov	r4, r5, d0
 800816a:	f7ff ff47 	bl	8007ffc <__b2d>
 800816e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008172:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008176:	eba3 0c02 	sub.w	ip, r3, r2
 800817a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008184:	ec51 0b10 	vmov	r0, r1, d0
 8008188:	2b00      	cmp	r3, #0
 800818a:	bfd6      	itet	le
 800818c:	460a      	movle	r2, r1
 800818e:	462a      	movgt	r2, r5
 8008190:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008194:	468b      	mov	fp, r1
 8008196:	462f      	mov	r7, r5
 8008198:	bfd4      	ite	le
 800819a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800819e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80081a2:	4620      	mov	r0, r4
 80081a4:	ee10 2a10 	vmov	r2, s0
 80081a8:	465b      	mov	r3, fp
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 fb66 	bl	800087c <__aeabi_ddiv>
 80081b0:	ec41 0b10 	vmov	d0, r0, r1
 80081b4:	b003      	add	sp, #12
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081ba <__copybits>:
 80081ba:	3901      	subs	r1, #1
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	1149      	asrs	r1, r1, #5
 80081c0:	6914      	ldr	r4, [r2, #16]
 80081c2:	3101      	adds	r1, #1
 80081c4:	f102 0314 	add.w	r3, r2, #20
 80081c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081d0:	1f05      	subs	r5, r0, #4
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	d30c      	bcc.n	80081f0 <__copybits+0x36>
 80081d6:	1aa3      	subs	r3, r4, r2
 80081d8:	3b11      	subs	r3, #17
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	3211      	adds	r2, #17
 80081e0:	42a2      	cmp	r2, r4
 80081e2:	bf88      	it	hi
 80081e4:	2300      	movhi	r3, #0
 80081e6:	4418      	add	r0, r3
 80081e8:	2300      	movs	r3, #0
 80081ea:	4288      	cmp	r0, r1
 80081ec:	d305      	bcc.n	80081fa <__copybits+0x40>
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	f853 6b04 	ldr.w	r6, [r3], #4
 80081f4:	f845 6f04 	str.w	r6, [r5, #4]!
 80081f8:	e7eb      	b.n	80081d2 <__copybits+0x18>
 80081fa:	f840 3b04 	str.w	r3, [r0], #4
 80081fe:	e7f4      	b.n	80081ea <__copybits+0x30>

08008200 <__any_on>:
 8008200:	f100 0214 	add.w	r2, r0, #20
 8008204:	6900      	ldr	r0, [r0, #16]
 8008206:	114b      	asrs	r3, r1, #5
 8008208:	4298      	cmp	r0, r3
 800820a:	b510      	push	{r4, lr}
 800820c:	db11      	blt.n	8008232 <__any_on+0x32>
 800820e:	dd0a      	ble.n	8008226 <__any_on+0x26>
 8008210:	f011 011f 	ands.w	r1, r1, #31
 8008214:	d007      	beq.n	8008226 <__any_on+0x26>
 8008216:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800821a:	fa24 f001 	lsr.w	r0, r4, r1
 800821e:	fa00 f101 	lsl.w	r1, r0, r1
 8008222:	428c      	cmp	r4, r1
 8008224:	d10b      	bne.n	800823e <__any_on+0x3e>
 8008226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800822a:	4293      	cmp	r3, r2
 800822c:	d803      	bhi.n	8008236 <__any_on+0x36>
 800822e:	2000      	movs	r0, #0
 8008230:	bd10      	pop	{r4, pc}
 8008232:	4603      	mov	r3, r0
 8008234:	e7f7      	b.n	8008226 <__any_on+0x26>
 8008236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800823a:	2900      	cmp	r1, #0
 800823c:	d0f5      	beq.n	800822a <__any_on+0x2a>
 800823e:	2001      	movs	r0, #1
 8008240:	e7f6      	b.n	8008230 <__any_on+0x30>

08008242 <_calloc_r>:
 8008242:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008244:	fba1 2402 	umull	r2, r4, r1, r2
 8008248:	b94c      	cbnz	r4, 800825e <_calloc_r+0x1c>
 800824a:	4611      	mov	r1, r2
 800824c:	9201      	str	r2, [sp, #4]
 800824e:	f000 f87b 	bl	8008348 <_malloc_r>
 8008252:	9a01      	ldr	r2, [sp, #4]
 8008254:	4605      	mov	r5, r0
 8008256:	b930      	cbnz	r0, 8008266 <_calloc_r+0x24>
 8008258:	4628      	mov	r0, r5
 800825a:	b003      	add	sp, #12
 800825c:	bd30      	pop	{r4, r5, pc}
 800825e:	220c      	movs	r2, #12
 8008260:	6002      	str	r2, [r0, #0]
 8008262:	2500      	movs	r5, #0
 8008264:	e7f8      	b.n	8008258 <_calloc_r+0x16>
 8008266:	4621      	mov	r1, r4
 8008268:	f7fc fb16 	bl	8004898 <memset>
 800826c:	e7f4      	b.n	8008258 <_calloc_r+0x16>
	...

08008270 <_free_r>:
 8008270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008272:	2900      	cmp	r1, #0
 8008274:	d044      	beq.n	8008300 <_free_r+0x90>
 8008276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800827a:	9001      	str	r0, [sp, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f1a1 0404 	sub.w	r4, r1, #4
 8008282:	bfb8      	it	lt
 8008284:	18e4      	addlt	r4, r4, r3
 8008286:	f001 f88b 	bl	80093a0 <__malloc_lock>
 800828a:	4a1e      	ldr	r2, [pc, #120]	; (8008304 <_free_r+0x94>)
 800828c:	9801      	ldr	r0, [sp, #4]
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	b933      	cbnz	r3, 80082a0 <_free_r+0x30>
 8008292:	6063      	str	r3, [r4, #4]
 8008294:	6014      	str	r4, [r2, #0]
 8008296:	b003      	add	sp, #12
 8008298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800829c:	f001 b886 	b.w	80093ac <__malloc_unlock>
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	d908      	bls.n	80082b6 <_free_r+0x46>
 80082a4:	6825      	ldr	r5, [r4, #0]
 80082a6:	1961      	adds	r1, r4, r5
 80082a8:	428b      	cmp	r3, r1
 80082aa:	bf01      	itttt	eq
 80082ac:	6819      	ldreq	r1, [r3, #0]
 80082ae:	685b      	ldreq	r3, [r3, #4]
 80082b0:	1949      	addeq	r1, r1, r5
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	e7ed      	b.n	8008292 <_free_r+0x22>
 80082b6:	461a      	mov	r2, r3
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	b10b      	cbz	r3, 80082c0 <_free_r+0x50>
 80082bc:	42a3      	cmp	r3, r4
 80082be:	d9fa      	bls.n	80082b6 <_free_r+0x46>
 80082c0:	6811      	ldr	r1, [r2, #0]
 80082c2:	1855      	adds	r5, r2, r1
 80082c4:	42a5      	cmp	r5, r4
 80082c6:	d10b      	bne.n	80082e0 <_free_r+0x70>
 80082c8:	6824      	ldr	r4, [r4, #0]
 80082ca:	4421      	add	r1, r4
 80082cc:	1854      	adds	r4, r2, r1
 80082ce:	42a3      	cmp	r3, r4
 80082d0:	6011      	str	r1, [r2, #0]
 80082d2:	d1e0      	bne.n	8008296 <_free_r+0x26>
 80082d4:	681c      	ldr	r4, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	6053      	str	r3, [r2, #4]
 80082da:	4421      	add	r1, r4
 80082dc:	6011      	str	r1, [r2, #0]
 80082de:	e7da      	b.n	8008296 <_free_r+0x26>
 80082e0:	d902      	bls.n	80082e8 <_free_r+0x78>
 80082e2:	230c      	movs	r3, #12
 80082e4:	6003      	str	r3, [r0, #0]
 80082e6:	e7d6      	b.n	8008296 <_free_r+0x26>
 80082e8:	6825      	ldr	r5, [r4, #0]
 80082ea:	1961      	adds	r1, r4, r5
 80082ec:	428b      	cmp	r3, r1
 80082ee:	bf04      	itt	eq
 80082f0:	6819      	ldreq	r1, [r3, #0]
 80082f2:	685b      	ldreq	r3, [r3, #4]
 80082f4:	6063      	str	r3, [r4, #4]
 80082f6:	bf04      	itt	eq
 80082f8:	1949      	addeq	r1, r1, r5
 80082fa:	6021      	streq	r1, [r4, #0]
 80082fc:	6054      	str	r4, [r2, #4]
 80082fe:	e7ca      	b.n	8008296 <_free_r+0x26>
 8008300:	b003      	add	sp, #12
 8008302:	bd30      	pop	{r4, r5, pc}
 8008304:	200004fc 	.word	0x200004fc

08008308 <sbrk_aligned>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	4e0e      	ldr	r6, [pc, #56]	; (8008344 <sbrk_aligned+0x3c>)
 800830c:	460c      	mov	r4, r1
 800830e:	6831      	ldr	r1, [r6, #0]
 8008310:	4605      	mov	r5, r0
 8008312:	b911      	cbnz	r1, 800831a <sbrk_aligned+0x12>
 8008314:	f000 fd28 	bl	8008d68 <_sbrk_r>
 8008318:	6030      	str	r0, [r6, #0]
 800831a:	4621      	mov	r1, r4
 800831c:	4628      	mov	r0, r5
 800831e:	f000 fd23 	bl	8008d68 <_sbrk_r>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d00a      	beq.n	800833c <sbrk_aligned+0x34>
 8008326:	1cc4      	adds	r4, r0, #3
 8008328:	f024 0403 	bic.w	r4, r4, #3
 800832c:	42a0      	cmp	r0, r4
 800832e:	d007      	beq.n	8008340 <sbrk_aligned+0x38>
 8008330:	1a21      	subs	r1, r4, r0
 8008332:	4628      	mov	r0, r5
 8008334:	f000 fd18 	bl	8008d68 <_sbrk_r>
 8008338:	3001      	adds	r0, #1
 800833a:	d101      	bne.n	8008340 <sbrk_aligned+0x38>
 800833c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008340:	4620      	mov	r0, r4
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	20000500 	.word	0x20000500

08008348 <_malloc_r>:
 8008348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834c:	1ccd      	adds	r5, r1, #3
 800834e:	f025 0503 	bic.w	r5, r5, #3
 8008352:	3508      	adds	r5, #8
 8008354:	2d0c      	cmp	r5, #12
 8008356:	bf38      	it	cc
 8008358:	250c      	movcc	r5, #12
 800835a:	2d00      	cmp	r5, #0
 800835c:	4607      	mov	r7, r0
 800835e:	db01      	blt.n	8008364 <_malloc_r+0x1c>
 8008360:	42a9      	cmp	r1, r5
 8008362:	d905      	bls.n	8008370 <_malloc_r+0x28>
 8008364:	230c      	movs	r3, #12
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	2600      	movs	r6, #0
 800836a:	4630      	mov	r0, r6
 800836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008370:	4e2e      	ldr	r6, [pc, #184]	; (800842c <_malloc_r+0xe4>)
 8008372:	f001 f815 	bl	80093a0 <__malloc_lock>
 8008376:	6833      	ldr	r3, [r6, #0]
 8008378:	461c      	mov	r4, r3
 800837a:	bb34      	cbnz	r4, 80083ca <_malloc_r+0x82>
 800837c:	4629      	mov	r1, r5
 800837e:	4638      	mov	r0, r7
 8008380:	f7ff ffc2 	bl	8008308 <sbrk_aligned>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	4604      	mov	r4, r0
 8008388:	d14d      	bne.n	8008426 <_malloc_r+0xde>
 800838a:	6834      	ldr	r4, [r6, #0]
 800838c:	4626      	mov	r6, r4
 800838e:	2e00      	cmp	r6, #0
 8008390:	d140      	bne.n	8008414 <_malloc_r+0xcc>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	4631      	mov	r1, r6
 8008396:	4638      	mov	r0, r7
 8008398:	eb04 0803 	add.w	r8, r4, r3
 800839c:	f000 fce4 	bl	8008d68 <_sbrk_r>
 80083a0:	4580      	cmp	r8, r0
 80083a2:	d13a      	bne.n	800841a <_malloc_r+0xd2>
 80083a4:	6821      	ldr	r1, [r4, #0]
 80083a6:	3503      	adds	r5, #3
 80083a8:	1a6d      	subs	r5, r5, r1
 80083aa:	f025 0503 	bic.w	r5, r5, #3
 80083ae:	3508      	adds	r5, #8
 80083b0:	2d0c      	cmp	r5, #12
 80083b2:	bf38      	it	cc
 80083b4:	250c      	movcc	r5, #12
 80083b6:	4629      	mov	r1, r5
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff ffa5 	bl	8008308 <sbrk_aligned>
 80083be:	3001      	adds	r0, #1
 80083c0:	d02b      	beq.n	800841a <_malloc_r+0xd2>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	442b      	add	r3, r5
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	e00e      	b.n	80083e8 <_malloc_r+0xa0>
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	1b52      	subs	r2, r2, r5
 80083ce:	d41e      	bmi.n	800840e <_malloc_r+0xc6>
 80083d0:	2a0b      	cmp	r2, #11
 80083d2:	d916      	bls.n	8008402 <_malloc_r+0xba>
 80083d4:	1961      	adds	r1, r4, r5
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	6025      	str	r5, [r4, #0]
 80083da:	bf18      	it	ne
 80083dc:	6059      	strne	r1, [r3, #4]
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	bf08      	it	eq
 80083e2:	6031      	streq	r1, [r6, #0]
 80083e4:	5162      	str	r2, [r4, r5]
 80083e6:	604b      	str	r3, [r1, #4]
 80083e8:	4638      	mov	r0, r7
 80083ea:	f104 060b 	add.w	r6, r4, #11
 80083ee:	f000 ffdd 	bl	80093ac <__malloc_unlock>
 80083f2:	f026 0607 	bic.w	r6, r6, #7
 80083f6:	1d23      	adds	r3, r4, #4
 80083f8:	1af2      	subs	r2, r6, r3
 80083fa:	d0b6      	beq.n	800836a <_malloc_r+0x22>
 80083fc:	1b9b      	subs	r3, r3, r6
 80083fe:	50a3      	str	r3, [r4, r2]
 8008400:	e7b3      	b.n	800836a <_malloc_r+0x22>
 8008402:	6862      	ldr	r2, [r4, #4]
 8008404:	42a3      	cmp	r3, r4
 8008406:	bf0c      	ite	eq
 8008408:	6032      	streq	r2, [r6, #0]
 800840a:	605a      	strne	r2, [r3, #4]
 800840c:	e7ec      	b.n	80083e8 <_malloc_r+0xa0>
 800840e:	4623      	mov	r3, r4
 8008410:	6864      	ldr	r4, [r4, #4]
 8008412:	e7b2      	b.n	800837a <_malloc_r+0x32>
 8008414:	4634      	mov	r4, r6
 8008416:	6876      	ldr	r6, [r6, #4]
 8008418:	e7b9      	b.n	800838e <_malloc_r+0x46>
 800841a:	230c      	movs	r3, #12
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	4638      	mov	r0, r7
 8008420:	f000 ffc4 	bl	80093ac <__malloc_unlock>
 8008424:	e7a1      	b.n	800836a <_malloc_r+0x22>
 8008426:	6025      	str	r5, [r4, #0]
 8008428:	e7de      	b.n	80083e8 <_malloc_r+0xa0>
 800842a:	bf00      	nop
 800842c:	200004fc 	.word	0x200004fc

08008430 <__ssputs_r>:
 8008430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	688e      	ldr	r6, [r1, #8]
 8008436:	429e      	cmp	r6, r3
 8008438:	4682      	mov	sl, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4690      	mov	r8, r2
 800843e:	461f      	mov	r7, r3
 8008440:	d838      	bhi.n	80084b4 <__ssputs_r+0x84>
 8008442:	898a      	ldrh	r2, [r1, #12]
 8008444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008448:	d032      	beq.n	80084b0 <__ssputs_r+0x80>
 800844a:	6825      	ldr	r5, [r4, #0]
 800844c:	6909      	ldr	r1, [r1, #16]
 800844e:	eba5 0901 	sub.w	r9, r5, r1
 8008452:	6965      	ldr	r5, [r4, #20]
 8008454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800845c:	3301      	adds	r3, #1
 800845e:	444b      	add	r3, r9
 8008460:	106d      	asrs	r5, r5, #1
 8008462:	429d      	cmp	r5, r3
 8008464:	bf38      	it	cc
 8008466:	461d      	movcc	r5, r3
 8008468:	0553      	lsls	r3, r2, #21
 800846a:	d531      	bpl.n	80084d0 <__ssputs_r+0xa0>
 800846c:	4629      	mov	r1, r5
 800846e:	f7ff ff6b 	bl	8008348 <_malloc_r>
 8008472:	4606      	mov	r6, r0
 8008474:	b950      	cbnz	r0, 800848c <__ssputs_r+0x5c>
 8008476:	230c      	movs	r3, #12
 8008478:	f8ca 3000 	str.w	r3, [sl]
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848c:	6921      	ldr	r1, [r4, #16]
 800848e:	464a      	mov	r2, r9
 8008490:	f7ff fa08 	bl	80078a4 <memcpy>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800849a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	6126      	str	r6, [r4, #16]
 80084a2:	6165      	str	r5, [r4, #20]
 80084a4:	444e      	add	r6, r9
 80084a6:	eba5 0509 	sub.w	r5, r5, r9
 80084aa:	6026      	str	r6, [r4, #0]
 80084ac:	60a5      	str	r5, [r4, #8]
 80084ae:	463e      	mov	r6, r7
 80084b0:	42be      	cmp	r6, r7
 80084b2:	d900      	bls.n	80084b6 <__ssputs_r+0x86>
 80084b4:	463e      	mov	r6, r7
 80084b6:	6820      	ldr	r0, [r4, #0]
 80084b8:	4632      	mov	r2, r6
 80084ba:	4641      	mov	r1, r8
 80084bc:	f000 ff56 	bl	800936c <memmove>
 80084c0:	68a3      	ldr	r3, [r4, #8]
 80084c2:	1b9b      	subs	r3, r3, r6
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	4433      	add	r3, r6
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	2000      	movs	r0, #0
 80084ce:	e7db      	b.n	8008488 <__ssputs_r+0x58>
 80084d0:	462a      	mov	r2, r5
 80084d2:	f000 ff71 	bl	80093b8 <_realloc_r>
 80084d6:	4606      	mov	r6, r0
 80084d8:	2800      	cmp	r0, #0
 80084da:	d1e1      	bne.n	80084a0 <__ssputs_r+0x70>
 80084dc:	6921      	ldr	r1, [r4, #16]
 80084de:	4650      	mov	r0, sl
 80084e0:	f7ff fec6 	bl	8008270 <_free_r>
 80084e4:	e7c7      	b.n	8008476 <__ssputs_r+0x46>
	...

080084e8 <_svfiprintf_r>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	4698      	mov	r8, r3
 80084ee:	898b      	ldrh	r3, [r1, #12]
 80084f0:	061b      	lsls	r3, r3, #24
 80084f2:	b09d      	sub	sp, #116	; 0x74
 80084f4:	4607      	mov	r7, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	4614      	mov	r4, r2
 80084fa:	d50e      	bpl.n	800851a <_svfiprintf_r+0x32>
 80084fc:	690b      	ldr	r3, [r1, #16]
 80084fe:	b963      	cbnz	r3, 800851a <_svfiprintf_r+0x32>
 8008500:	2140      	movs	r1, #64	; 0x40
 8008502:	f7ff ff21 	bl	8008348 <_malloc_r>
 8008506:	6028      	str	r0, [r5, #0]
 8008508:	6128      	str	r0, [r5, #16]
 800850a:	b920      	cbnz	r0, 8008516 <_svfiprintf_r+0x2e>
 800850c:	230c      	movs	r3, #12
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008514:	e0d1      	b.n	80086ba <_svfiprintf_r+0x1d2>
 8008516:	2340      	movs	r3, #64	; 0x40
 8008518:	616b      	str	r3, [r5, #20]
 800851a:	2300      	movs	r3, #0
 800851c:	9309      	str	r3, [sp, #36]	; 0x24
 800851e:	2320      	movs	r3, #32
 8008520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008524:	f8cd 800c 	str.w	r8, [sp, #12]
 8008528:	2330      	movs	r3, #48	; 0x30
 800852a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086d4 <_svfiprintf_r+0x1ec>
 800852e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008532:	f04f 0901 	mov.w	r9, #1
 8008536:	4623      	mov	r3, r4
 8008538:	469a      	mov	sl, r3
 800853a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853e:	b10a      	cbz	r2, 8008544 <_svfiprintf_r+0x5c>
 8008540:	2a25      	cmp	r2, #37	; 0x25
 8008542:	d1f9      	bne.n	8008538 <_svfiprintf_r+0x50>
 8008544:	ebba 0b04 	subs.w	fp, sl, r4
 8008548:	d00b      	beq.n	8008562 <_svfiprintf_r+0x7a>
 800854a:	465b      	mov	r3, fp
 800854c:	4622      	mov	r2, r4
 800854e:	4629      	mov	r1, r5
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff ff6d 	bl	8008430 <__ssputs_r>
 8008556:	3001      	adds	r0, #1
 8008558:	f000 80aa 	beq.w	80086b0 <_svfiprintf_r+0x1c8>
 800855c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800855e:	445a      	add	r2, fp
 8008560:	9209      	str	r2, [sp, #36]	; 0x24
 8008562:	f89a 3000 	ldrb.w	r3, [sl]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80a2 	beq.w	80086b0 <_svfiprintf_r+0x1c8>
 800856c:	2300      	movs	r3, #0
 800856e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008576:	f10a 0a01 	add.w	sl, sl, #1
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	9307      	str	r3, [sp, #28]
 800857e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008582:	931a      	str	r3, [sp, #104]	; 0x68
 8008584:	4654      	mov	r4, sl
 8008586:	2205      	movs	r2, #5
 8008588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858c:	4851      	ldr	r0, [pc, #324]	; (80086d4 <_svfiprintf_r+0x1ec>)
 800858e:	f7f7 fe3f 	bl	8000210 <memchr>
 8008592:	9a04      	ldr	r2, [sp, #16]
 8008594:	b9d8      	cbnz	r0, 80085ce <_svfiprintf_r+0xe6>
 8008596:	06d0      	lsls	r0, r2, #27
 8008598:	bf44      	itt	mi
 800859a:	2320      	movmi	r3, #32
 800859c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a0:	0711      	lsls	r1, r2, #28
 80085a2:	bf44      	itt	mi
 80085a4:	232b      	movmi	r3, #43	; 0x2b
 80085a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085aa:	f89a 3000 	ldrb.w	r3, [sl]
 80085ae:	2b2a      	cmp	r3, #42	; 0x2a
 80085b0:	d015      	beq.n	80085de <_svfiprintf_r+0xf6>
 80085b2:	9a07      	ldr	r2, [sp, #28]
 80085b4:	4654      	mov	r4, sl
 80085b6:	2000      	movs	r0, #0
 80085b8:	f04f 0c0a 	mov.w	ip, #10
 80085bc:	4621      	mov	r1, r4
 80085be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c2:	3b30      	subs	r3, #48	; 0x30
 80085c4:	2b09      	cmp	r3, #9
 80085c6:	d94e      	bls.n	8008666 <_svfiprintf_r+0x17e>
 80085c8:	b1b0      	cbz	r0, 80085f8 <_svfiprintf_r+0x110>
 80085ca:	9207      	str	r2, [sp, #28]
 80085cc:	e014      	b.n	80085f8 <_svfiprintf_r+0x110>
 80085ce:	eba0 0308 	sub.w	r3, r0, r8
 80085d2:	fa09 f303 	lsl.w	r3, r9, r3
 80085d6:	4313      	orrs	r3, r2
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	46a2      	mov	sl, r4
 80085dc:	e7d2      	b.n	8008584 <_svfiprintf_r+0x9c>
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	1d19      	adds	r1, r3, #4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	9103      	str	r1, [sp, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bfbb      	ittet	lt
 80085ea:	425b      	neglt	r3, r3
 80085ec:	f042 0202 	orrlt.w	r2, r2, #2
 80085f0:	9307      	strge	r3, [sp, #28]
 80085f2:	9307      	strlt	r3, [sp, #28]
 80085f4:	bfb8      	it	lt
 80085f6:	9204      	strlt	r2, [sp, #16]
 80085f8:	7823      	ldrb	r3, [r4, #0]
 80085fa:	2b2e      	cmp	r3, #46	; 0x2e
 80085fc:	d10c      	bne.n	8008618 <_svfiprintf_r+0x130>
 80085fe:	7863      	ldrb	r3, [r4, #1]
 8008600:	2b2a      	cmp	r3, #42	; 0x2a
 8008602:	d135      	bne.n	8008670 <_svfiprintf_r+0x188>
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	9203      	str	r2, [sp, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfb8      	it	lt
 8008610:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008614:	3402      	adds	r4, #2
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086e4 <_svfiprintf_r+0x1fc>
 800861c:	7821      	ldrb	r1, [r4, #0]
 800861e:	2203      	movs	r2, #3
 8008620:	4650      	mov	r0, sl
 8008622:	f7f7 fdf5 	bl	8000210 <memchr>
 8008626:	b140      	cbz	r0, 800863a <_svfiprintf_r+0x152>
 8008628:	2340      	movs	r3, #64	; 0x40
 800862a:	eba0 000a 	sub.w	r0, r0, sl
 800862e:	fa03 f000 	lsl.w	r0, r3, r0
 8008632:	9b04      	ldr	r3, [sp, #16]
 8008634:	4303      	orrs	r3, r0
 8008636:	3401      	adds	r4, #1
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863e:	4826      	ldr	r0, [pc, #152]	; (80086d8 <_svfiprintf_r+0x1f0>)
 8008640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008644:	2206      	movs	r2, #6
 8008646:	f7f7 fde3 	bl	8000210 <memchr>
 800864a:	2800      	cmp	r0, #0
 800864c:	d038      	beq.n	80086c0 <_svfiprintf_r+0x1d8>
 800864e:	4b23      	ldr	r3, [pc, #140]	; (80086dc <_svfiprintf_r+0x1f4>)
 8008650:	bb1b      	cbnz	r3, 800869a <_svfiprintf_r+0x1b2>
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	3307      	adds	r3, #7
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	3308      	adds	r3, #8
 800865c:	9303      	str	r3, [sp, #12]
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	4433      	add	r3, r6
 8008662:	9309      	str	r3, [sp, #36]	; 0x24
 8008664:	e767      	b.n	8008536 <_svfiprintf_r+0x4e>
 8008666:	fb0c 3202 	mla	r2, ip, r2, r3
 800866a:	460c      	mov	r4, r1
 800866c:	2001      	movs	r0, #1
 800866e:	e7a5      	b.n	80085bc <_svfiprintf_r+0xd4>
 8008670:	2300      	movs	r3, #0
 8008672:	3401      	adds	r4, #1
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	4619      	mov	r1, r3
 8008678:	f04f 0c0a 	mov.w	ip, #10
 800867c:	4620      	mov	r0, r4
 800867e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008682:	3a30      	subs	r2, #48	; 0x30
 8008684:	2a09      	cmp	r2, #9
 8008686:	d903      	bls.n	8008690 <_svfiprintf_r+0x1a8>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0c5      	beq.n	8008618 <_svfiprintf_r+0x130>
 800868c:	9105      	str	r1, [sp, #20]
 800868e:	e7c3      	b.n	8008618 <_svfiprintf_r+0x130>
 8008690:	fb0c 2101 	mla	r1, ip, r1, r2
 8008694:	4604      	mov	r4, r0
 8008696:	2301      	movs	r3, #1
 8008698:	e7f0      	b.n	800867c <_svfiprintf_r+0x194>
 800869a:	ab03      	add	r3, sp, #12
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	462a      	mov	r2, r5
 80086a0:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <_svfiprintf_r+0x1f8>)
 80086a2:	a904      	add	r1, sp, #16
 80086a4:	4638      	mov	r0, r7
 80086a6:	f7fc f99f 	bl	80049e8 <_printf_float>
 80086aa:	1c42      	adds	r2, r0, #1
 80086ac:	4606      	mov	r6, r0
 80086ae:	d1d6      	bne.n	800865e <_svfiprintf_r+0x176>
 80086b0:	89ab      	ldrh	r3, [r5, #12]
 80086b2:	065b      	lsls	r3, r3, #25
 80086b4:	f53f af2c 	bmi.w	8008510 <_svfiprintf_r+0x28>
 80086b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ba:	b01d      	add	sp, #116	; 0x74
 80086bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c0:	ab03      	add	r3, sp, #12
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	462a      	mov	r2, r5
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <_svfiprintf_r+0x1f8>)
 80086c8:	a904      	add	r1, sp, #16
 80086ca:	4638      	mov	r0, r7
 80086cc:	f7fc fc30 	bl	8004f30 <_printf_i>
 80086d0:	e7eb      	b.n	80086aa <_svfiprintf_r+0x1c2>
 80086d2:	bf00      	nop
 80086d4:	0800a164 	.word	0x0800a164
 80086d8:	0800a16e 	.word	0x0800a16e
 80086dc:	080049e9 	.word	0x080049e9
 80086e0:	08008431 	.word	0x08008431
 80086e4:	0800a16a 	.word	0x0800a16a

080086e8 <_sungetc_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	1c4b      	adds	r3, r1, #1
 80086ec:	4614      	mov	r4, r2
 80086ee:	d103      	bne.n	80086f8 <_sungetc_r+0x10>
 80086f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80086f4:	4628      	mov	r0, r5
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	8993      	ldrh	r3, [r2, #12]
 80086fa:	f023 0320 	bic.w	r3, r3, #32
 80086fe:	8193      	strh	r3, [r2, #12]
 8008700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008702:	6852      	ldr	r2, [r2, #4]
 8008704:	b2cd      	uxtb	r5, r1
 8008706:	b18b      	cbz	r3, 800872c <_sungetc_r+0x44>
 8008708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800870a:	4293      	cmp	r3, r2
 800870c:	dd08      	ble.n	8008720 <_sungetc_r+0x38>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	1e5a      	subs	r2, r3, #1
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	3301      	adds	r3, #1
 800871c:	6063      	str	r3, [r4, #4]
 800871e:	e7e9      	b.n	80086f4 <_sungetc_r+0xc>
 8008720:	4621      	mov	r1, r4
 8008722:	f000 fbf1 	bl	8008f08 <__submore>
 8008726:	2800      	cmp	r0, #0
 8008728:	d0f1      	beq.n	800870e <_sungetc_r+0x26>
 800872a:	e7e1      	b.n	80086f0 <_sungetc_r+0x8>
 800872c:	6921      	ldr	r1, [r4, #16]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	b151      	cbz	r1, 8008748 <_sungetc_r+0x60>
 8008732:	4299      	cmp	r1, r3
 8008734:	d208      	bcs.n	8008748 <_sungetc_r+0x60>
 8008736:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800873a:	42a9      	cmp	r1, r5
 800873c:	d104      	bne.n	8008748 <_sungetc_r+0x60>
 800873e:	3b01      	subs	r3, #1
 8008740:	3201      	adds	r2, #1
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	6062      	str	r2, [r4, #4]
 8008746:	e7d5      	b.n	80086f4 <_sungetc_r+0xc>
 8008748:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800874c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008750:	6363      	str	r3, [r4, #52]	; 0x34
 8008752:	2303      	movs	r3, #3
 8008754:	63a3      	str	r3, [r4, #56]	; 0x38
 8008756:	4623      	mov	r3, r4
 8008758:	f803 5f46 	strb.w	r5, [r3, #70]!
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	2301      	movs	r3, #1
 8008760:	e7dc      	b.n	800871c <_sungetc_r+0x34>

08008762 <__ssrefill_r>:
 8008762:	b510      	push	{r4, lr}
 8008764:	460c      	mov	r4, r1
 8008766:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008768:	b169      	cbz	r1, 8008786 <__ssrefill_r+0x24>
 800876a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800876e:	4299      	cmp	r1, r3
 8008770:	d001      	beq.n	8008776 <__ssrefill_r+0x14>
 8008772:	f7ff fd7d 	bl	8008270 <_free_r>
 8008776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008778:	6063      	str	r3, [r4, #4]
 800877a:	2000      	movs	r0, #0
 800877c:	6360      	str	r0, [r4, #52]	; 0x34
 800877e:	b113      	cbz	r3, 8008786 <__ssrefill_r+0x24>
 8008780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	bd10      	pop	{r4, pc}
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	2300      	movs	r3, #0
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f043 0320 	orr.w	r3, r3, #32
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800879a:	e7f3      	b.n	8008784 <__ssrefill_r+0x22>

0800879c <__ssvfiscanf_r>:
 800879c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a0:	460c      	mov	r4, r1
 80087a2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80087a6:	2100      	movs	r1, #0
 80087a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80087ac:	49a6      	ldr	r1, [pc, #664]	; (8008a48 <__ssvfiscanf_r+0x2ac>)
 80087ae:	91a0      	str	r1, [sp, #640]	; 0x280
 80087b0:	f10d 0804 	add.w	r8, sp, #4
 80087b4:	49a5      	ldr	r1, [pc, #660]	; (8008a4c <__ssvfiscanf_r+0x2b0>)
 80087b6:	4fa6      	ldr	r7, [pc, #664]	; (8008a50 <__ssvfiscanf_r+0x2b4>)
 80087b8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008a54 <__ssvfiscanf_r+0x2b8>
 80087bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80087c0:	4606      	mov	r6, r0
 80087c2:	91a1      	str	r1, [sp, #644]	; 0x284
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	7813      	ldrb	r3, [r2, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 815a 	beq.w	8008a82 <__ssvfiscanf_r+0x2e6>
 80087ce:	5dd9      	ldrb	r1, [r3, r7]
 80087d0:	f011 0108 	ands.w	r1, r1, #8
 80087d4:	f102 0501 	add.w	r5, r2, #1
 80087d8:	d019      	beq.n	800880e <__ssvfiscanf_r+0x72>
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dd0f      	ble.n	8008800 <__ssvfiscanf_r+0x64>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	5cba      	ldrb	r2, [r7, r2]
 80087e6:	0712      	lsls	r2, r2, #28
 80087e8:	d401      	bmi.n	80087ee <__ssvfiscanf_r+0x52>
 80087ea:	462a      	mov	r2, r5
 80087ec:	e7eb      	b.n	80087c6 <__ssvfiscanf_r+0x2a>
 80087ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80087f0:	3201      	adds	r2, #1
 80087f2:	9245      	str	r2, [sp, #276]	; 0x114
 80087f4:	6862      	ldr	r2, [r4, #4]
 80087f6:	3301      	adds	r3, #1
 80087f8:	3a01      	subs	r2, #1
 80087fa:	6062      	str	r2, [r4, #4]
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	e7ec      	b.n	80087da <__ssvfiscanf_r+0x3e>
 8008800:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008802:	4621      	mov	r1, r4
 8008804:	4630      	mov	r0, r6
 8008806:	4798      	blx	r3
 8008808:	2800      	cmp	r0, #0
 800880a:	d0e9      	beq.n	80087e0 <__ssvfiscanf_r+0x44>
 800880c:	e7ed      	b.n	80087ea <__ssvfiscanf_r+0x4e>
 800880e:	2b25      	cmp	r3, #37	; 0x25
 8008810:	d012      	beq.n	8008838 <__ssvfiscanf_r+0x9c>
 8008812:	469a      	mov	sl, r3
 8008814:	6863      	ldr	r3, [r4, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f340 8091 	ble.w	800893e <__ssvfiscanf_r+0x1a2>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	7813      	ldrb	r3, [r2, #0]
 8008820:	4553      	cmp	r3, sl
 8008822:	f040 812e 	bne.w	8008a82 <__ssvfiscanf_r+0x2e6>
 8008826:	6863      	ldr	r3, [r4, #4]
 8008828:	3b01      	subs	r3, #1
 800882a:	6063      	str	r3, [r4, #4]
 800882c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800882e:	3201      	adds	r2, #1
 8008830:	3301      	adds	r3, #1
 8008832:	6022      	str	r2, [r4, #0]
 8008834:	9345      	str	r3, [sp, #276]	; 0x114
 8008836:	e7d8      	b.n	80087ea <__ssvfiscanf_r+0x4e>
 8008838:	9141      	str	r1, [sp, #260]	; 0x104
 800883a:	9143      	str	r1, [sp, #268]	; 0x10c
 800883c:	7853      	ldrb	r3, [r2, #1]
 800883e:	2b2a      	cmp	r3, #42	; 0x2a
 8008840:	bf02      	ittt	eq
 8008842:	2310      	moveq	r3, #16
 8008844:	1c95      	addeq	r5, r2, #2
 8008846:	9341      	streq	r3, [sp, #260]	; 0x104
 8008848:	220a      	movs	r2, #10
 800884a:	46aa      	mov	sl, r5
 800884c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008850:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008854:	2b09      	cmp	r3, #9
 8008856:	d91d      	bls.n	8008894 <__ssvfiscanf_r+0xf8>
 8008858:	487e      	ldr	r0, [pc, #504]	; (8008a54 <__ssvfiscanf_r+0x2b8>)
 800885a:	2203      	movs	r2, #3
 800885c:	f7f7 fcd8 	bl	8000210 <memchr>
 8008860:	b140      	cbz	r0, 8008874 <__ssvfiscanf_r+0xd8>
 8008862:	2301      	movs	r3, #1
 8008864:	eba0 0009 	sub.w	r0, r0, r9
 8008868:	fa03 f000 	lsl.w	r0, r3, r0
 800886c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800886e:	4318      	orrs	r0, r3
 8008870:	9041      	str	r0, [sp, #260]	; 0x104
 8008872:	4655      	mov	r5, sl
 8008874:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008878:	2b78      	cmp	r3, #120	; 0x78
 800887a:	d806      	bhi.n	800888a <__ssvfiscanf_r+0xee>
 800887c:	2b57      	cmp	r3, #87	; 0x57
 800887e:	d810      	bhi.n	80088a2 <__ssvfiscanf_r+0x106>
 8008880:	2b25      	cmp	r3, #37	; 0x25
 8008882:	d0c6      	beq.n	8008812 <__ssvfiscanf_r+0x76>
 8008884:	d856      	bhi.n	8008934 <__ssvfiscanf_r+0x198>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d064      	beq.n	8008954 <__ssvfiscanf_r+0x1b8>
 800888a:	2303      	movs	r3, #3
 800888c:	9347      	str	r3, [sp, #284]	; 0x11c
 800888e:	230a      	movs	r3, #10
 8008890:	9342      	str	r3, [sp, #264]	; 0x108
 8008892:	e071      	b.n	8008978 <__ssvfiscanf_r+0x1dc>
 8008894:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008896:	fb02 1103 	mla	r1, r2, r3, r1
 800889a:	3930      	subs	r1, #48	; 0x30
 800889c:	9143      	str	r1, [sp, #268]	; 0x10c
 800889e:	4655      	mov	r5, sl
 80088a0:	e7d3      	b.n	800884a <__ssvfiscanf_r+0xae>
 80088a2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80088a6:	2a20      	cmp	r2, #32
 80088a8:	d8ef      	bhi.n	800888a <__ssvfiscanf_r+0xee>
 80088aa:	a101      	add	r1, pc, #4	; (adr r1, 80088b0 <__ssvfiscanf_r+0x114>)
 80088ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088b0:	08008963 	.word	0x08008963
 80088b4:	0800888b 	.word	0x0800888b
 80088b8:	0800888b 	.word	0x0800888b
 80088bc:	080089c1 	.word	0x080089c1
 80088c0:	0800888b 	.word	0x0800888b
 80088c4:	0800888b 	.word	0x0800888b
 80088c8:	0800888b 	.word	0x0800888b
 80088cc:	0800888b 	.word	0x0800888b
 80088d0:	0800888b 	.word	0x0800888b
 80088d4:	0800888b 	.word	0x0800888b
 80088d8:	0800888b 	.word	0x0800888b
 80088dc:	080089d7 	.word	0x080089d7
 80088e0:	080089ad 	.word	0x080089ad
 80088e4:	0800893b 	.word	0x0800893b
 80088e8:	0800893b 	.word	0x0800893b
 80088ec:	0800893b 	.word	0x0800893b
 80088f0:	0800888b 	.word	0x0800888b
 80088f4:	080089b1 	.word	0x080089b1
 80088f8:	0800888b 	.word	0x0800888b
 80088fc:	0800888b 	.word	0x0800888b
 8008900:	0800888b 	.word	0x0800888b
 8008904:	0800888b 	.word	0x0800888b
 8008908:	080089e7 	.word	0x080089e7
 800890c:	080089b9 	.word	0x080089b9
 8008910:	0800895b 	.word	0x0800895b
 8008914:	0800888b 	.word	0x0800888b
 8008918:	0800888b 	.word	0x0800888b
 800891c:	080089e3 	.word	0x080089e3
 8008920:	0800888b 	.word	0x0800888b
 8008924:	080089ad 	.word	0x080089ad
 8008928:	0800888b 	.word	0x0800888b
 800892c:	0800888b 	.word	0x0800888b
 8008930:	08008963 	.word	0x08008963
 8008934:	3b45      	subs	r3, #69	; 0x45
 8008936:	2b02      	cmp	r3, #2
 8008938:	d8a7      	bhi.n	800888a <__ssvfiscanf_r+0xee>
 800893a:	2305      	movs	r3, #5
 800893c:	e01b      	b.n	8008976 <__ssvfiscanf_r+0x1da>
 800893e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008940:	4621      	mov	r1, r4
 8008942:	4630      	mov	r0, r6
 8008944:	4798      	blx	r3
 8008946:	2800      	cmp	r0, #0
 8008948:	f43f af68 	beq.w	800881c <__ssvfiscanf_r+0x80>
 800894c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800894e:	2800      	cmp	r0, #0
 8008950:	f040 808d 	bne.w	8008a6e <__ssvfiscanf_r+0x2d2>
 8008954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008958:	e08f      	b.n	8008a7a <__ssvfiscanf_r+0x2de>
 800895a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800895c:	f042 0220 	orr.w	r2, r2, #32
 8008960:	9241      	str	r2, [sp, #260]	; 0x104
 8008962:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008968:	9241      	str	r2, [sp, #260]	; 0x104
 800896a:	2210      	movs	r2, #16
 800896c:	2b6f      	cmp	r3, #111	; 0x6f
 800896e:	9242      	str	r2, [sp, #264]	; 0x108
 8008970:	bf34      	ite	cc
 8008972:	2303      	movcc	r3, #3
 8008974:	2304      	movcs	r3, #4
 8008976:	9347      	str	r3, [sp, #284]	; 0x11c
 8008978:	6863      	ldr	r3, [r4, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	dd42      	ble.n	8008a04 <__ssvfiscanf_r+0x268>
 800897e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008980:	0659      	lsls	r1, r3, #25
 8008982:	d404      	bmi.n	800898e <__ssvfiscanf_r+0x1f2>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	781a      	ldrb	r2, [r3, #0]
 8008988:	5cba      	ldrb	r2, [r7, r2]
 800898a:	0712      	lsls	r2, r2, #28
 800898c:	d441      	bmi.n	8008a12 <__ssvfiscanf_r+0x276>
 800898e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008990:	2b02      	cmp	r3, #2
 8008992:	dc50      	bgt.n	8008a36 <__ssvfiscanf_r+0x29a>
 8008994:	466b      	mov	r3, sp
 8008996:	4622      	mov	r2, r4
 8008998:	a941      	add	r1, sp, #260	; 0x104
 800899a:	4630      	mov	r0, r6
 800899c:	f000 f876 	bl	8008a8c <_scanf_chars>
 80089a0:	2801      	cmp	r0, #1
 80089a2:	d06e      	beq.n	8008a82 <__ssvfiscanf_r+0x2e6>
 80089a4:	2802      	cmp	r0, #2
 80089a6:	f47f af20 	bne.w	80087ea <__ssvfiscanf_r+0x4e>
 80089aa:	e7cf      	b.n	800894c <__ssvfiscanf_r+0x1b0>
 80089ac:	220a      	movs	r2, #10
 80089ae:	e7dd      	b.n	800896c <__ssvfiscanf_r+0x1d0>
 80089b0:	2300      	movs	r3, #0
 80089b2:	9342      	str	r3, [sp, #264]	; 0x108
 80089b4:	2303      	movs	r3, #3
 80089b6:	e7de      	b.n	8008976 <__ssvfiscanf_r+0x1da>
 80089b8:	2308      	movs	r3, #8
 80089ba:	9342      	str	r3, [sp, #264]	; 0x108
 80089bc:	2304      	movs	r3, #4
 80089be:	e7da      	b.n	8008976 <__ssvfiscanf_r+0x1da>
 80089c0:	4629      	mov	r1, r5
 80089c2:	4640      	mov	r0, r8
 80089c4:	f000 f9e0 	bl	8008d88 <__sccl>
 80089c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ce:	9341      	str	r3, [sp, #260]	; 0x104
 80089d0:	4605      	mov	r5, r0
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7cf      	b.n	8008976 <__ssvfiscanf_r+0x1da>
 80089d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089dc:	9341      	str	r3, [sp, #260]	; 0x104
 80089de:	2300      	movs	r3, #0
 80089e0:	e7c9      	b.n	8008976 <__ssvfiscanf_r+0x1da>
 80089e2:	2302      	movs	r3, #2
 80089e4:	e7c7      	b.n	8008976 <__ssvfiscanf_r+0x1da>
 80089e6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80089e8:	06c3      	lsls	r3, r0, #27
 80089ea:	f53f aefe 	bmi.w	80087ea <__ssvfiscanf_r+0x4e>
 80089ee:	9b00      	ldr	r3, [sp, #0]
 80089f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80089f2:	1d19      	adds	r1, r3, #4
 80089f4:	9100      	str	r1, [sp, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f010 0f01 	tst.w	r0, #1
 80089fc:	bf14      	ite	ne
 80089fe:	801a      	strhne	r2, [r3, #0]
 8008a00:	601a      	streq	r2, [r3, #0]
 8008a02:	e6f2      	b.n	80087ea <__ssvfiscanf_r+0x4e>
 8008a04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a06:	4621      	mov	r1, r4
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4798      	blx	r3
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d0b6      	beq.n	800897e <__ssvfiscanf_r+0x1e2>
 8008a10:	e79c      	b.n	800894c <__ssvfiscanf_r+0x1b0>
 8008a12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a14:	3201      	adds	r2, #1
 8008a16:	9245      	str	r2, [sp, #276]	; 0x114
 8008a18:	6862      	ldr	r2, [r4, #4]
 8008a1a:	3a01      	subs	r2, #1
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	6062      	str	r2, [r4, #4]
 8008a20:	dd02      	ble.n	8008a28 <__ssvfiscanf_r+0x28c>
 8008a22:	3301      	adds	r3, #1
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	e7ad      	b.n	8008984 <__ssvfiscanf_r+0x1e8>
 8008a28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4798      	blx	r3
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0a7      	beq.n	8008984 <__ssvfiscanf_r+0x1e8>
 8008a34:	e78a      	b.n	800894c <__ssvfiscanf_r+0x1b0>
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	dc0e      	bgt.n	8008a58 <__ssvfiscanf_r+0x2bc>
 8008a3a:	466b      	mov	r3, sp
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	a941      	add	r1, sp, #260	; 0x104
 8008a40:	4630      	mov	r0, r6
 8008a42:	f000 f87d 	bl	8008b40 <_scanf_i>
 8008a46:	e7ab      	b.n	80089a0 <__ssvfiscanf_r+0x204>
 8008a48:	080086e9 	.word	0x080086e9
 8008a4c:	08008763 	.word	0x08008763
 8008a50:	08009e01 	.word	0x08009e01
 8008a54:	0800a16a 	.word	0x0800a16a
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <__ssvfiscanf_r+0x2ec>)
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f43f aec5 	beq.w	80087ea <__ssvfiscanf_r+0x4e>
 8008a60:	466b      	mov	r3, sp
 8008a62:	4622      	mov	r2, r4
 8008a64:	a941      	add	r1, sp, #260	; 0x104
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7fc fb88 	bl	800517c <_scanf_float>
 8008a6c:	e798      	b.n	80089a0 <__ssvfiscanf_r+0x204>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a74:	bf18      	it	ne
 8008a76:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008a7a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a82:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a84:	e7f9      	b.n	8008a7a <__ssvfiscanf_r+0x2de>
 8008a86:	bf00      	nop
 8008a88:	0800517d 	.word	0x0800517d

08008a8c <_scanf_chars>:
 8008a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a90:	4615      	mov	r5, r2
 8008a92:	688a      	ldr	r2, [r1, #8]
 8008a94:	4680      	mov	r8, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	b932      	cbnz	r2, 8008aa8 <_scanf_chars+0x1c>
 8008a9a:	698a      	ldr	r2, [r1, #24]
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	bf0c      	ite	eq
 8008aa0:	2201      	moveq	r2, #1
 8008aa2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008aa6:	608a      	str	r2, [r1, #8]
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008b3c <_scanf_chars+0xb0>
 8008aae:	06d1      	lsls	r1, r2, #27
 8008ab0:	bf5f      	itttt	pl
 8008ab2:	681a      	ldrpl	r2, [r3, #0]
 8008ab4:	1d11      	addpl	r1, r2, #4
 8008ab6:	6019      	strpl	r1, [r3, #0]
 8008ab8:	6816      	ldrpl	r6, [r2, #0]
 8008aba:	2700      	movs	r7, #0
 8008abc:	69a0      	ldr	r0, [r4, #24]
 8008abe:	b188      	cbz	r0, 8008ae4 <_scanf_chars+0x58>
 8008ac0:	2801      	cmp	r0, #1
 8008ac2:	d107      	bne.n	8008ad4 <_scanf_chars+0x48>
 8008ac4:	682a      	ldr	r2, [r5, #0]
 8008ac6:	7811      	ldrb	r1, [r2, #0]
 8008ac8:	6962      	ldr	r2, [r4, #20]
 8008aca:	5c52      	ldrb	r2, [r2, r1]
 8008acc:	b952      	cbnz	r2, 8008ae4 <_scanf_chars+0x58>
 8008ace:	2f00      	cmp	r7, #0
 8008ad0:	d031      	beq.n	8008b36 <_scanf_chars+0xaa>
 8008ad2:	e022      	b.n	8008b1a <_scanf_chars+0x8e>
 8008ad4:	2802      	cmp	r0, #2
 8008ad6:	d120      	bne.n	8008b1a <_scanf_chars+0x8e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008ae0:	071b      	lsls	r3, r3, #28
 8008ae2:	d41a      	bmi.n	8008b1a <_scanf_chars+0x8e>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	06da      	lsls	r2, r3, #27
 8008ae8:	bf5e      	ittt	pl
 8008aea:	682b      	ldrpl	r3, [r5, #0]
 8008aec:	781b      	ldrbpl	r3, [r3, #0]
 8008aee:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008af2:	682a      	ldr	r2, [r5, #0]
 8008af4:	686b      	ldr	r3, [r5, #4]
 8008af6:	3201      	adds	r2, #1
 8008af8:	602a      	str	r2, [r5, #0]
 8008afa:	68a2      	ldr	r2, [r4, #8]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	3a01      	subs	r2, #1
 8008b00:	606b      	str	r3, [r5, #4]
 8008b02:	3701      	adds	r7, #1
 8008b04:	60a2      	str	r2, [r4, #8]
 8008b06:	b142      	cbz	r2, 8008b1a <_scanf_chars+0x8e>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dcd7      	bgt.n	8008abc <_scanf_chars+0x30>
 8008b0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b10:	4629      	mov	r1, r5
 8008b12:	4640      	mov	r0, r8
 8008b14:	4798      	blx	r3
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d0d0      	beq.n	8008abc <_scanf_chars+0x30>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f013 0310 	ands.w	r3, r3, #16
 8008b20:	d105      	bne.n	8008b2e <_scanf_chars+0xa2>
 8008b22:	68e2      	ldr	r2, [r4, #12]
 8008b24:	3201      	adds	r2, #1
 8008b26:	60e2      	str	r2, [r4, #12]
 8008b28:	69a2      	ldr	r2, [r4, #24]
 8008b2a:	b102      	cbz	r2, 8008b2e <_scanf_chars+0xa2>
 8008b2c:	7033      	strb	r3, [r6, #0]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	443b      	add	r3, r7
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	2000      	movs	r0, #0
 8008b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08009e01 	.word	0x08009e01

08008b40 <_scanf_i>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	4698      	mov	r8, r3
 8008b46:	4b76      	ldr	r3, [pc, #472]	; (8008d20 <_scanf_i+0x1e0>)
 8008b48:	460c      	mov	r4, r1
 8008b4a:	4682      	mov	sl, r0
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b52:	b087      	sub	sp, #28
 8008b54:	ab03      	add	r3, sp, #12
 8008b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b5a:	4b72      	ldr	r3, [pc, #456]	; (8008d24 <_scanf_i+0x1e4>)
 8008b5c:	69a1      	ldr	r1, [r4, #24]
 8008b5e:	4a72      	ldr	r2, [pc, #456]	; (8008d28 <_scanf_i+0x1e8>)
 8008b60:	2903      	cmp	r1, #3
 8008b62:	bf18      	it	ne
 8008b64:	461a      	movne	r2, r3
 8008b66:	68a3      	ldr	r3, [r4, #8]
 8008b68:	9201      	str	r2, [sp, #4]
 8008b6a:	1e5a      	subs	r2, r3, #1
 8008b6c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b70:	bf88      	it	hi
 8008b72:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b76:	4627      	mov	r7, r4
 8008b78:	bf82      	ittt	hi
 8008b7a:	eb03 0905 	addhi.w	r9, r3, r5
 8008b7e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b82:	60a3      	strhi	r3, [r4, #8]
 8008b84:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008b88:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008b8c:	bf98      	it	ls
 8008b8e:	f04f 0900 	movls.w	r9, #0
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	463d      	mov	r5, r7
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	6831      	ldr	r1, [r6, #0]
 8008b9c:	ab03      	add	r3, sp, #12
 8008b9e:	7809      	ldrb	r1, [r1, #0]
 8008ba0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f7f7 fb33 	bl	8000210 <memchr>
 8008baa:	b328      	cbz	r0, 8008bf8 <_scanf_i+0xb8>
 8008bac:	f1bb 0f01 	cmp.w	fp, #1
 8008bb0:	d159      	bne.n	8008c66 <_scanf_i+0x126>
 8008bb2:	6862      	ldr	r2, [r4, #4]
 8008bb4:	b92a      	cbnz	r2, 8008bc2 <_scanf_i+0x82>
 8008bb6:	6822      	ldr	r2, [r4, #0]
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bbe:	6063      	str	r3, [r4, #4]
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008bc8:	6022      	str	r2, [r4, #0]
 8008bca:	68a2      	ldr	r2, [r4, #8]
 8008bcc:	1e51      	subs	r1, r2, #1
 8008bce:	60a1      	str	r1, [r4, #8]
 8008bd0:	b192      	cbz	r2, 8008bf8 <_scanf_i+0xb8>
 8008bd2:	6832      	ldr	r2, [r6, #0]
 8008bd4:	1c51      	adds	r1, r2, #1
 8008bd6:	6031      	str	r1, [r6, #0]
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	f805 2b01 	strb.w	r2, [r5], #1
 8008bde:	6872      	ldr	r2, [r6, #4]
 8008be0:	3a01      	subs	r2, #1
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	6072      	str	r2, [r6, #4]
 8008be6:	dc07      	bgt.n	8008bf8 <_scanf_i+0xb8>
 8008be8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008bec:	4631      	mov	r1, r6
 8008bee:	4650      	mov	r0, sl
 8008bf0:	4790      	blx	r2
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	f040 8085 	bne.w	8008d02 <_scanf_i+0x1c2>
 8008bf8:	f10b 0b01 	add.w	fp, fp, #1
 8008bfc:	f1bb 0f03 	cmp.w	fp, #3
 8008c00:	d1cb      	bne.n	8008b9a <_scanf_i+0x5a>
 8008c02:	6863      	ldr	r3, [r4, #4]
 8008c04:	b90b      	cbnz	r3, 8008c0a <_scanf_i+0xca>
 8008c06:	230a      	movs	r3, #10
 8008c08:	6063      	str	r3, [r4, #4]
 8008c0a:	6863      	ldr	r3, [r4, #4]
 8008c0c:	4947      	ldr	r1, [pc, #284]	; (8008d2c <_scanf_i+0x1ec>)
 8008c0e:	6960      	ldr	r0, [r4, #20]
 8008c10:	1ac9      	subs	r1, r1, r3
 8008c12:	f000 f8b9 	bl	8008d88 <__sccl>
 8008c16:	f04f 0b00 	mov.w	fp, #0
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	6822      	ldr	r2, [r4, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d03d      	beq.n	8008c9e <_scanf_i+0x15e>
 8008c22:	6831      	ldr	r1, [r6, #0]
 8008c24:	6960      	ldr	r0, [r4, #20]
 8008c26:	f891 c000 	ldrb.w	ip, [r1]
 8008c2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d035      	beq.n	8008c9e <_scanf_i+0x15e>
 8008c32:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008c36:	d124      	bne.n	8008c82 <_scanf_i+0x142>
 8008c38:	0510      	lsls	r0, r2, #20
 8008c3a:	d522      	bpl.n	8008c82 <_scanf_i+0x142>
 8008c3c:	f10b 0b01 	add.w	fp, fp, #1
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	d003      	beq.n	8008c4e <_scanf_i+0x10e>
 8008c46:	3301      	adds	r3, #1
 8008c48:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008c4c:	60a3      	str	r3, [r4, #8]
 8008c4e:	6873      	ldr	r3, [r6, #4]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	6073      	str	r3, [r6, #4]
 8008c56:	dd1b      	ble.n	8008c90 <_scanf_i+0x150>
 8008c58:	6833      	ldr	r3, [r6, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	e7d9      	b.n	8008c1a <_scanf_i+0xda>
 8008c66:	f1bb 0f02 	cmp.w	fp, #2
 8008c6a:	d1ae      	bne.n	8008bca <_scanf_i+0x8a>
 8008c6c:	6822      	ldr	r2, [r4, #0]
 8008c6e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008c72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008c76:	d1bf      	bne.n	8008bf8 <_scanf_i+0xb8>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	6063      	str	r3, [r4, #4]
 8008c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c80:	e7a2      	b.n	8008bc8 <_scanf_i+0x88>
 8008c82:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	780b      	ldrb	r3, [r1, #0]
 8008c8a:	f805 3b01 	strb.w	r3, [r5], #1
 8008c8e:	e7de      	b.n	8008c4e <_scanf_i+0x10e>
 8008c90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c94:	4631      	mov	r1, r6
 8008c96:	4650      	mov	r0, sl
 8008c98:	4798      	blx	r3
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d0df      	beq.n	8008c5e <_scanf_i+0x11e>
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	05db      	lsls	r3, r3, #23
 8008ca2:	d50d      	bpl.n	8008cc0 <_scanf_i+0x180>
 8008ca4:	42bd      	cmp	r5, r7
 8008ca6:	d909      	bls.n	8008cbc <_scanf_i+0x17c>
 8008ca8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	4798      	blx	r3
 8008cb6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008cba:	464d      	mov	r5, r9
 8008cbc:	42bd      	cmp	r5, r7
 8008cbe:	d02d      	beq.n	8008d1c <_scanf_i+0x1dc>
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	f012 0210 	ands.w	r2, r2, #16
 8008cc6:	d113      	bne.n	8008cf0 <_scanf_i+0x1b0>
 8008cc8:	702a      	strb	r2, [r5, #0]
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	9e01      	ldr	r6, [sp, #4]
 8008cce:	4639      	mov	r1, r7
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	47b0      	blx	r6
 8008cd4:	6821      	ldr	r1, [r4, #0]
 8008cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cda:	f011 0f20 	tst.w	r1, #32
 8008cde:	d013      	beq.n	8008d08 <_scanf_i+0x1c8>
 8008ce0:	1d1a      	adds	r2, r3, #4
 8008ce2:	f8c8 2000 	str.w	r2, [r8]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6018      	str	r0, [r3, #0]
 8008cea:	68e3      	ldr	r3, [r4, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60e3      	str	r3, [r4, #12]
 8008cf0:	1bed      	subs	r5, r5, r7
 8008cf2:	44ab      	add	fp, r5
 8008cf4:	6925      	ldr	r5, [r4, #16]
 8008cf6:	445d      	add	r5, fp
 8008cf8:	6125      	str	r5, [r4, #16]
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	b007      	add	sp, #28
 8008cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d02:	f04f 0b00 	mov.w	fp, #0
 8008d06:	e7ca      	b.n	8008c9e <_scanf_i+0x15e>
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	f8c8 2000 	str.w	r2, [r8]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f011 0f01 	tst.w	r1, #1
 8008d14:	bf14      	ite	ne
 8008d16:	8018      	strhne	r0, [r3, #0]
 8008d18:	6018      	streq	r0, [r3, #0]
 8008d1a:	e7e6      	b.n	8008cea <_scanf_i+0x1aa>
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	e7ed      	b.n	8008cfc <_scanf_i+0x1bc>
 8008d20:	08009d68 	.word	0x08009d68
 8008d24:	08008f05 	.word	0x08008f05
 8008d28:	08006425 	.word	0x08006425
 8008d2c:	0800a18e 	.word	0x0800a18e

08008d30 <_read_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d07      	ldr	r5, [pc, #28]	; (8008d50 <_read_r+0x20>)
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f7f8 fd4c 	bl	80017dc <_read>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_read_r+0x1e>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_read_r+0x1e>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20000504 	.word	0x20000504
 8008d54:	00000000 	.word	0x00000000

08008d58 <nan>:
 8008d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d60 <nan+0x8>
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	00000000 	.word	0x00000000
 8008d64:	7ff80000 	.word	0x7ff80000

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 fda0 	bl	80018b8 <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20000504 	.word	0x20000504

08008d88 <__sccl>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	780b      	ldrb	r3, [r1, #0]
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	2b5e      	cmp	r3, #94	; 0x5e
 8008d90:	bf0b      	itete	eq
 8008d92:	784b      	ldrbeq	r3, [r1, #1]
 8008d94:	1c48      	addne	r0, r1, #1
 8008d96:	1c88      	addeq	r0, r1, #2
 8008d98:	2200      	movne	r2, #0
 8008d9a:	bf08      	it	eq
 8008d9c:	2201      	moveq	r2, #1
 8008d9e:	1e61      	subs	r1, r4, #1
 8008da0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008da4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008da8:	42a9      	cmp	r1, r5
 8008daa:	d1fb      	bne.n	8008da4 <__sccl+0x1c>
 8008dac:	b90b      	cbnz	r3, 8008db2 <__sccl+0x2a>
 8008dae:	3801      	subs	r0, #1
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
 8008db2:	f082 0201 	eor.w	r2, r2, #1
 8008db6:	54e2      	strb	r2, [r4, r3]
 8008db8:	4605      	mov	r5, r0
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008dc0:	292d      	cmp	r1, #45	; 0x2d
 8008dc2:	d006      	beq.n	8008dd2 <__sccl+0x4a>
 8008dc4:	295d      	cmp	r1, #93	; 0x5d
 8008dc6:	d0f3      	beq.n	8008db0 <__sccl+0x28>
 8008dc8:	b909      	cbnz	r1, 8008dce <__sccl+0x46>
 8008dca:	4628      	mov	r0, r5
 8008dcc:	e7f0      	b.n	8008db0 <__sccl+0x28>
 8008dce:	460b      	mov	r3, r1
 8008dd0:	e7f1      	b.n	8008db6 <__sccl+0x2e>
 8008dd2:	786e      	ldrb	r6, [r5, #1]
 8008dd4:	2e5d      	cmp	r6, #93	; 0x5d
 8008dd6:	d0fa      	beq.n	8008dce <__sccl+0x46>
 8008dd8:	42b3      	cmp	r3, r6
 8008dda:	dcf8      	bgt.n	8008dce <__sccl+0x46>
 8008ddc:	3502      	adds	r5, #2
 8008dde:	4619      	mov	r1, r3
 8008de0:	3101      	adds	r1, #1
 8008de2:	428e      	cmp	r6, r1
 8008de4:	5462      	strb	r2, [r4, r1]
 8008de6:	dcfb      	bgt.n	8008de0 <__sccl+0x58>
 8008de8:	1af1      	subs	r1, r6, r3
 8008dea:	3901      	subs	r1, #1
 8008dec:	1c58      	adds	r0, r3, #1
 8008dee:	42b3      	cmp	r3, r6
 8008df0:	bfa8      	it	ge
 8008df2:	2100      	movge	r1, #0
 8008df4:	1843      	adds	r3, r0, r1
 8008df6:	e7e0      	b.n	8008dba <__sccl+0x32>

08008df8 <strncmp>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	b17a      	cbz	r2, 8008e1c <strncmp+0x24>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	3901      	subs	r1, #1
 8008e00:	1884      	adds	r4, r0, r2
 8008e02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e0a:	4290      	cmp	r0, r2
 8008e0c:	d101      	bne.n	8008e12 <strncmp+0x1a>
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	d101      	bne.n	8008e16 <strncmp+0x1e>
 8008e12:	1a80      	subs	r0, r0, r2
 8008e14:	bd10      	pop	{r4, pc}
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d1f3      	bne.n	8008e02 <strncmp+0xa>
 8008e1a:	e7fa      	b.n	8008e12 <strncmp+0x1a>
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	e7f9      	b.n	8008e14 <strncmp+0x1c>

08008e20 <_strtoul_l.constprop.0>:
 8008e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e24:	4f36      	ldr	r7, [pc, #216]	; (8008f00 <_strtoul_l.constprop.0+0xe0>)
 8008e26:	4686      	mov	lr, r0
 8008e28:	460d      	mov	r5, r1
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e30:	5de6      	ldrb	r6, [r4, r7]
 8008e32:	f016 0608 	ands.w	r6, r6, #8
 8008e36:	d1f8      	bne.n	8008e2a <_strtoul_l.constprop.0+0xa>
 8008e38:	2c2d      	cmp	r4, #45	; 0x2d
 8008e3a:	d12f      	bne.n	8008e9c <_strtoul_l.constprop.0+0x7c>
 8008e3c:	782c      	ldrb	r4, [r5, #0]
 8008e3e:	2601      	movs	r6, #1
 8008e40:	1c85      	adds	r5, r0, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d057      	beq.n	8008ef6 <_strtoul_l.constprop.0+0xd6>
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d109      	bne.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008e4a:	2c30      	cmp	r4, #48	; 0x30
 8008e4c:	d107      	bne.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008e4e:	7828      	ldrb	r0, [r5, #0]
 8008e50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008e54:	2858      	cmp	r0, #88	; 0x58
 8008e56:	d149      	bne.n	8008eec <_strtoul_l.constprop.0+0xcc>
 8008e58:	786c      	ldrb	r4, [r5, #1]
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	3502      	adds	r5, #2
 8008e5e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008e62:	2700      	movs	r7, #0
 8008e64:	fbb8 f8f3 	udiv	r8, r8, r3
 8008e68:	fb03 f908 	mul.w	r9, r3, r8
 8008e6c:	ea6f 0909 	mvn.w	r9, r9
 8008e70:	4638      	mov	r0, r7
 8008e72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e76:	f1bc 0f09 	cmp.w	ip, #9
 8008e7a:	d814      	bhi.n	8008ea6 <_strtoul_l.constprop.0+0x86>
 8008e7c:	4664      	mov	r4, ip
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	dd22      	ble.n	8008ec8 <_strtoul_l.constprop.0+0xa8>
 8008e82:	2f00      	cmp	r7, #0
 8008e84:	db1d      	blt.n	8008ec2 <_strtoul_l.constprop.0+0xa2>
 8008e86:	4580      	cmp	r8, r0
 8008e88:	d31b      	bcc.n	8008ec2 <_strtoul_l.constprop.0+0xa2>
 8008e8a:	d101      	bne.n	8008e90 <_strtoul_l.constprop.0+0x70>
 8008e8c:	45a1      	cmp	r9, r4
 8008e8e:	db18      	blt.n	8008ec2 <_strtoul_l.constprop.0+0xa2>
 8008e90:	fb00 4003 	mla	r0, r0, r3, r4
 8008e94:	2701      	movs	r7, #1
 8008e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e9a:	e7ea      	b.n	8008e72 <_strtoul_l.constprop.0+0x52>
 8008e9c:	2c2b      	cmp	r4, #43	; 0x2b
 8008e9e:	bf04      	itt	eq
 8008ea0:	782c      	ldrbeq	r4, [r5, #0]
 8008ea2:	1c85      	addeq	r5, r0, #2
 8008ea4:	e7cd      	b.n	8008e42 <_strtoul_l.constprop.0+0x22>
 8008ea6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008eaa:	f1bc 0f19 	cmp.w	ip, #25
 8008eae:	d801      	bhi.n	8008eb4 <_strtoul_l.constprop.0+0x94>
 8008eb0:	3c37      	subs	r4, #55	; 0x37
 8008eb2:	e7e4      	b.n	8008e7e <_strtoul_l.constprop.0+0x5e>
 8008eb4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008eb8:	f1bc 0f19 	cmp.w	ip, #25
 8008ebc:	d804      	bhi.n	8008ec8 <_strtoul_l.constprop.0+0xa8>
 8008ebe:	3c57      	subs	r4, #87	; 0x57
 8008ec0:	e7dd      	b.n	8008e7e <_strtoul_l.constprop.0+0x5e>
 8008ec2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ec6:	e7e6      	b.n	8008e96 <_strtoul_l.constprop.0+0x76>
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	da07      	bge.n	8008edc <_strtoul_l.constprop.0+0xbc>
 8008ecc:	2322      	movs	r3, #34	; 0x22
 8008ece:	f8ce 3000 	str.w	r3, [lr]
 8008ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ed6:	b932      	cbnz	r2, 8008ee6 <_strtoul_l.constprop.0+0xc6>
 8008ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008edc:	b106      	cbz	r6, 8008ee0 <_strtoul_l.constprop.0+0xc0>
 8008ede:	4240      	negs	r0, r0
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	d0f9      	beq.n	8008ed8 <_strtoul_l.constprop.0+0xb8>
 8008ee4:	b107      	cbz	r7, 8008ee8 <_strtoul_l.constprop.0+0xc8>
 8008ee6:	1e69      	subs	r1, r5, #1
 8008ee8:	6011      	str	r1, [r2, #0]
 8008eea:	e7f5      	b.n	8008ed8 <_strtoul_l.constprop.0+0xb8>
 8008eec:	2430      	movs	r4, #48	; 0x30
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1b5      	bne.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008ef2:	2308      	movs	r3, #8
 8008ef4:	e7b3      	b.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008ef6:	2c30      	cmp	r4, #48	; 0x30
 8008ef8:	d0a9      	beq.n	8008e4e <_strtoul_l.constprop.0+0x2e>
 8008efa:	230a      	movs	r3, #10
 8008efc:	e7af      	b.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008efe:	bf00      	nop
 8008f00:	08009e01 	.word	0x08009e01

08008f04 <_strtoul_r>:
 8008f04:	f7ff bf8c 	b.w	8008e20 <_strtoul_l.constprop.0>

08008f08 <__submore>:
 8008f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f14:	4299      	cmp	r1, r3
 8008f16:	d11d      	bne.n	8008f54 <__submore+0x4c>
 8008f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f1c:	f7ff fa14 	bl	8008348 <_malloc_r>
 8008f20:	b918      	cbnz	r0, 8008f2a <__submore+0x22>
 8008f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008f34:	6360      	str	r0, [r4, #52]	; 0x34
 8008f36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008f3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008f42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008f4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008f4e:	6020      	str	r0, [r4, #0]
 8008f50:	2000      	movs	r0, #0
 8008f52:	e7e8      	b.n	8008f26 <__submore+0x1e>
 8008f54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f56:	0077      	lsls	r7, r6, #1
 8008f58:	463a      	mov	r2, r7
 8008f5a:	f000 fa2d 	bl	80093b8 <_realloc_r>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d0de      	beq.n	8008f22 <__submore+0x1a>
 8008f64:	eb00 0806 	add.w	r8, r0, r6
 8008f68:	4601      	mov	r1, r0
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	4640      	mov	r0, r8
 8008f6e:	f7fe fc99 	bl	80078a4 <memcpy>
 8008f72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008f76:	f8c4 8000 	str.w	r8, [r4]
 8008f7a:	e7e9      	b.n	8008f50 <__submore+0x48>

08008f7c <__ascii_wctomb>:
 8008f7c:	b149      	cbz	r1, 8008f92 <__ascii_wctomb+0x16>
 8008f7e:	2aff      	cmp	r2, #255	; 0xff
 8008f80:	bf85      	ittet	hi
 8008f82:	238a      	movhi	r3, #138	; 0x8a
 8008f84:	6003      	strhi	r3, [r0, #0]
 8008f86:	700a      	strbls	r2, [r1, #0]
 8008f88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008f8c:	bf98      	it	ls
 8008f8e:	2001      	movls	r0, #1
 8008f90:	4770      	bx	lr
 8008f92:	4608      	mov	r0, r1
 8008f94:	4770      	bx	lr
	...

08008f98 <__assert_func>:
 8008f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <__assert_func+0x2c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	68d8      	ldr	r0, [r3, #12]
 8008fa6:	b14c      	cbz	r4, 8008fbc <__assert_func+0x24>
 8008fa8:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <__assert_func+0x30>)
 8008faa:	9100      	str	r1, [sp, #0]
 8008fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fb0:	4906      	ldr	r1, [pc, #24]	; (8008fcc <__assert_func+0x34>)
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	f000 f9a6 	bl	8009304 <fiprintf>
 8008fb8:	f000 fc46 	bl	8009848 <abort>
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <__assert_func+0x38>)
 8008fbe:	461c      	mov	r4, r3
 8008fc0:	e7f3      	b.n	8008faa <__assert_func+0x12>
 8008fc2:	bf00      	nop
 8008fc4:	20000000 	.word	0x20000000
 8008fc8:	0800a190 	.word	0x0800a190
 8008fcc:	0800a19d 	.word	0x0800a19d
 8008fd0:	0800a1cb 	.word	0x0800a1cb

08008fd4 <__sflush_r>:
 8008fd4:	898a      	ldrh	r2, [r1, #12]
 8008fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	4605      	mov	r5, r0
 8008fdc:	0710      	lsls	r0, r2, #28
 8008fde:	460c      	mov	r4, r1
 8008fe0:	d458      	bmi.n	8009094 <__sflush_r+0xc0>
 8008fe2:	684b      	ldr	r3, [r1, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dc05      	bgt.n	8008ff4 <__sflush_r+0x20>
 8008fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	dc02      	bgt.n	8008ff4 <__sflush_r+0x20>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	d0f9      	beq.n	8008fee <__sflush_r+0x1a>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009000:	682f      	ldr	r7, [r5, #0]
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	d032      	beq.n	800906c <__sflush_r+0x98>
 8009006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	075a      	lsls	r2, r3, #29
 800900c:	d505      	bpl.n	800901a <__sflush_r+0x46>
 800900e:	6863      	ldr	r3, [r4, #4]
 8009010:	1ac0      	subs	r0, r0, r3
 8009012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009014:	b10b      	cbz	r3, 800901a <__sflush_r+0x46>
 8009016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009018:	1ac0      	subs	r0, r0, r3
 800901a:	2300      	movs	r3, #0
 800901c:	4602      	mov	r2, r0
 800901e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	4628      	mov	r0, r5
 8009024:	47b0      	blx	r6
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	d106      	bne.n	800903a <__sflush_r+0x66>
 800902c:	6829      	ldr	r1, [r5, #0]
 800902e:	291d      	cmp	r1, #29
 8009030:	d82c      	bhi.n	800908c <__sflush_r+0xb8>
 8009032:	4a2a      	ldr	r2, [pc, #168]	; (80090dc <__sflush_r+0x108>)
 8009034:	40ca      	lsrs	r2, r1
 8009036:	07d6      	lsls	r6, r2, #31
 8009038:	d528      	bpl.n	800908c <__sflush_r+0xb8>
 800903a:	2200      	movs	r2, #0
 800903c:	6062      	str	r2, [r4, #4]
 800903e:	04d9      	lsls	r1, r3, #19
 8009040:	6922      	ldr	r2, [r4, #16]
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	d504      	bpl.n	8009050 <__sflush_r+0x7c>
 8009046:	1c42      	adds	r2, r0, #1
 8009048:	d101      	bne.n	800904e <__sflush_r+0x7a>
 800904a:	682b      	ldr	r3, [r5, #0]
 800904c:	b903      	cbnz	r3, 8009050 <__sflush_r+0x7c>
 800904e:	6560      	str	r0, [r4, #84]	; 0x54
 8009050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009052:	602f      	str	r7, [r5, #0]
 8009054:	2900      	cmp	r1, #0
 8009056:	d0ca      	beq.n	8008fee <__sflush_r+0x1a>
 8009058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800905c:	4299      	cmp	r1, r3
 800905e:	d002      	beq.n	8009066 <__sflush_r+0x92>
 8009060:	4628      	mov	r0, r5
 8009062:	f7ff f905 	bl	8008270 <_free_r>
 8009066:	2000      	movs	r0, #0
 8009068:	6360      	str	r0, [r4, #52]	; 0x34
 800906a:	e7c1      	b.n	8008ff0 <__sflush_r+0x1c>
 800906c:	6a21      	ldr	r1, [r4, #32]
 800906e:	2301      	movs	r3, #1
 8009070:	4628      	mov	r0, r5
 8009072:	47b0      	blx	r6
 8009074:	1c41      	adds	r1, r0, #1
 8009076:	d1c7      	bne.n	8009008 <__sflush_r+0x34>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c4      	beq.n	8009008 <__sflush_r+0x34>
 800907e:	2b1d      	cmp	r3, #29
 8009080:	d001      	beq.n	8009086 <__sflush_r+0xb2>
 8009082:	2b16      	cmp	r3, #22
 8009084:	d101      	bne.n	800908a <__sflush_r+0xb6>
 8009086:	602f      	str	r7, [r5, #0]
 8009088:	e7b1      	b.n	8008fee <__sflush_r+0x1a>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	e7ad      	b.n	8008ff0 <__sflush_r+0x1c>
 8009094:	690f      	ldr	r7, [r1, #16]
 8009096:	2f00      	cmp	r7, #0
 8009098:	d0a9      	beq.n	8008fee <__sflush_r+0x1a>
 800909a:	0793      	lsls	r3, r2, #30
 800909c:	680e      	ldr	r6, [r1, #0]
 800909e:	bf08      	it	eq
 80090a0:	694b      	ldreq	r3, [r1, #20]
 80090a2:	600f      	str	r7, [r1, #0]
 80090a4:	bf18      	it	ne
 80090a6:	2300      	movne	r3, #0
 80090a8:	eba6 0807 	sub.w	r8, r6, r7
 80090ac:	608b      	str	r3, [r1, #8]
 80090ae:	f1b8 0f00 	cmp.w	r8, #0
 80090b2:	dd9c      	ble.n	8008fee <__sflush_r+0x1a>
 80090b4:	6a21      	ldr	r1, [r4, #32]
 80090b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090b8:	4643      	mov	r3, r8
 80090ba:	463a      	mov	r2, r7
 80090bc:	4628      	mov	r0, r5
 80090be:	47b0      	blx	r6
 80090c0:	2800      	cmp	r0, #0
 80090c2:	dc06      	bgt.n	80090d2 <__sflush_r+0xfe>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090d0:	e78e      	b.n	8008ff0 <__sflush_r+0x1c>
 80090d2:	4407      	add	r7, r0
 80090d4:	eba8 0800 	sub.w	r8, r8, r0
 80090d8:	e7e9      	b.n	80090ae <__sflush_r+0xda>
 80090da:	bf00      	nop
 80090dc:	20400001 	.word	0x20400001

080090e0 <_fflush_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	690b      	ldr	r3, [r1, #16]
 80090e4:	4605      	mov	r5, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	b913      	cbnz	r3, 80090f0 <_fflush_r+0x10>
 80090ea:	2500      	movs	r5, #0
 80090ec:	4628      	mov	r0, r5
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	b118      	cbz	r0, 80090fa <_fflush_r+0x1a>
 80090f2:	6983      	ldr	r3, [r0, #24]
 80090f4:	b90b      	cbnz	r3, 80090fa <_fflush_r+0x1a>
 80090f6:	f000 f887 	bl	8009208 <__sinit>
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <_fflush_r+0x6c>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	d11b      	bne.n	8009138 <_fflush_r+0x58>
 8009100:	686c      	ldr	r4, [r5, #4]
 8009102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0ef      	beq.n	80090ea <_fflush_r+0xa>
 800910a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800910c:	07d0      	lsls	r0, r2, #31
 800910e:	d404      	bmi.n	800911a <_fflush_r+0x3a>
 8009110:	0599      	lsls	r1, r3, #22
 8009112:	d402      	bmi.n	800911a <_fflush_r+0x3a>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f000 f927 	bl	8009368 <__retarget_lock_acquire_recursive>
 800911a:	4628      	mov	r0, r5
 800911c:	4621      	mov	r1, r4
 800911e:	f7ff ff59 	bl	8008fd4 <__sflush_r>
 8009122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009124:	07da      	lsls	r2, r3, #31
 8009126:	4605      	mov	r5, r0
 8009128:	d4e0      	bmi.n	80090ec <_fflush_r+0xc>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	059b      	lsls	r3, r3, #22
 800912e:	d4dd      	bmi.n	80090ec <_fflush_r+0xc>
 8009130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009132:	f000 f91a 	bl	800936a <__retarget_lock_release_recursive>
 8009136:	e7d9      	b.n	80090ec <_fflush_r+0xc>
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <_fflush_r+0x70>)
 800913a:	429c      	cmp	r4, r3
 800913c:	d101      	bne.n	8009142 <_fflush_r+0x62>
 800913e:	68ac      	ldr	r4, [r5, #8]
 8009140:	e7df      	b.n	8009102 <_fflush_r+0x22>
 8009142:	4b04      	ldr	r3, [pc, #16]	; (8009154 <_fflush_r+0x74>)
 8009144:	429c      	cmp	r4, r3
 8009146:	bf08      	it	eq
 8009148:	68ec      	ldreq	r4, [r5, #12]
 800914a:	e7da      	b.n	8009102 <_fflush_r+0x22>
 800914c:	0800a1ec 	.word	0x0800a1ec
 8009150:	0800a20c 	.word	0x0800a20c
 8009154:	0800a1cc 	.word	0x0800a1cc

08009158 <std>:
 8009158:	2300      	movs	r3, #0
 800915a:	b510      	push	{r4, lr}
 800915c:	4604      	mov	r4, r0
 800915e:	e9c0 3300 	strd	r3, r3, [r0]
 8009162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009166:	6083      	str	r3, [r0, #8]
 8009168:	8181      	strh	r1, [r0, #12]
 800916a:	6643      	str	r3, [r0, #100]	; 0x64
 800916c:	81c2      	strh	r2, [r0, #14]
 800916e:	6183      	str	r3, [r0, #24]
 8009170:	4619      	mov	r1, r3
 8009172:	2208      	movs	r2, #8
 8009174:	305c      	adds	r0, #92	; 0x5c
 8009176:	f7fb fb8f 	bl	8004898 <memset>
 800917a:	4b05      	ldr	r3, [pc, #20]	; (8009190 <std+0x38>)
 800917c:	6263      	str	r3, [r4, #36]	; 0x24
 800917e:	4b05      	ldr	r3, [pc, #20]	; (8009194 <std+0x3c>)
 8009180:	62a3      	str	r3, [r4, #40]	; 0x28
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <std+0x40>)
 8009184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <std+0x44>)
 8009188:	6224      	str	r4, [r4, #32]
 800918a:	6323      	str	r3, [r4, #48]	; 0x30
 800918c:	bd10      	pop	{r4, pc}
 800918e:	bf00      	nop
 8009190:	08005641 	.word	0x08005641
 8009194:	08005667 	.word	0x08005667
 8009198:	0800569f 	.word	0x0800569f
 800919c:	080056c3 	.word	0x080056c3

080091a0 <_cleanup_r>:
 80091a0:	4901      	ldr	r1, [pc, #4]	; (80091a8 <_cleanup_r+0x8>)
 80091a2:	f000 b8c1 	b.w	8009328 <_fwalk_reent>
 80091a6:	bf00      	nop
 80091a8:	080090e1 	.word	0x080090e1

080091ac <__sfmoreglue>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	2268      	movs	r2, #104	; 0x68
 80091b0:	1e4d      	subs	r5, r1, #1
 80091b2:	4355      	muls	r5, r2
 80091b4:	460e      	mov	r6, r1
 80091b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ba:	f7ff f8c5 	bl	8008348 <_malloc_r>
 80091be:	4604      	mov	r4, r0
 80091c0:	b140      	cbz	r0, 80091d4 <__sfmoreglue+0x28>
 80091c2:	2100      	movs	r1, #0
 80091c4:	e9c0 1600 	strd	r1, r6, [r0]
 80091c8:	300c      	adds	r0, #12
 80091ca:	60a0      	str	r0, [r4, #8]
 80091cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091d0:	f7fb fb62 	bl	8004898 <memset>
 80091d4:	4620      	mov	r0, r4
 80091d6:	bd70      	pop	{r4, r5, r6, pc}

080091d8 <__sfp_lock_acquire>:
 80091d8:	4801      	ldr	r0, [pc, #4]	; (80091e0 <__sfp_lock_acquire+0x8>)
 80091da:	f000 b8c5 	b.w	8009368 <__retarget_lock_acquire_recursive>
 80091de:	bf00      	nop
 80091e0:	20000509 	.word	0x20000509

080091e4 <__sfp_lock_release>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__sfp_lock_release+0x8>)
 80091e6:	f000 b8c0 	b.w	800936a <__retarget_lock_release_recursive>
 80091ea:	bf00      	nop
 80091ec:	20000509 	.word	0x20000509

080091f0 <__sinit_lock_acquire>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__sinit_lock_acquire+0x8>)
 80091f2:	f000 b8b9 	b.w	8009368 <__retarget_lock_acquire_recursive>
 80091f6:	bf00      	nop
 80091f8:	2000050a 	.word	0x2000050a

080091fc <__sinit_lock_release>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sinit_lock_release+0x8>)
 80091fe:	f000 b8b4 	b.w	800936a <__retarget_lock_release_recursive>
 8009202:	bf00      	nop
 8009204:	2000050a 	.word	0x2000050a

08009208 <__sinit>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	f7ff fff0 	bl	80091f0 <__sinit_lock_acquire>
 8009210:	69a3      	ldr	r3, [r4, #24]
 8009212:	b11b      	cbz	r3, 800921c <__sinit+0x14>
 8009214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009218:	f7ff bff0 	b.w	80091fc <__sinit_lock_release>
 800921c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009220:	6523      	str	r3, [r4, #80]	; 0x50
 8009222:	4b13      	ldr	r3, [pc, #76]	; (8009270 <__sinit+0x68>)
 8009224:	4a13      	ldr	r2, [pc, #76]	; (8009274 <__sinit+0x6c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	62a2      	str	r2, [r4, #40]	; 0x28
 800922a:	42a3      	cmp	r3, r4
 800922c:	bf04      	itt	eq
 800922e:	2301      	moveq	r3, #1
 8009230:	61a3      	streq	r3, [r4, #24]
 8009232:	4620      	mov	r0, r4
 8009234:	f000 f820 	bl	8009278 <__sfp>
 8009238:	6060      	str	r0, [r4, #4]
 800923a:	4620      	mov	r0, r4
 800923c:	f000 f81c 	bl	8009278 <__sfp>
 8009240:	60a0      	str	r0, [r4, #8]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f818 	bl	8009278 <__sfp>
 8009248:	2200      	movs	r2, #0
 800924a:	60e0      	str	r0, [r4, #12]
 800924c:	2104      	movs	r1, #4
 800924e:	6860      	ldr	r0, [r4, #4]
 8009250:	f7ff ff82 	bl	8009158 <std>
 8009254:	68a0      	ldr	r0, [r4, #8]
 8009256:	2201      	movs	r2, #1
 8009258:	2109      	movs	r1, #9
 800925a:	f7ff ff7d 	bl	8009158 <std>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	2202      	movs	r2, #2
 8009262:	2112      	movs	r1, #18
 8009264:	f7ff ff78 	bl	8009158 <std>
 8009268:	2301      	movs	r3, #1
 800926a:	61a3      	str	r3, [r4, #24]
 800926c:	e7d2      	b.n	8009214 <__sinit+0xc>
 800926e:	bf00      	nop
 8009270:	08009d74 	.word	0x08009d74
 8009274:	080091a1 	.word	0x080091a1

08009278 <__sfp>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	4607      	mov	r7, r0
 800927c:	f7ff ffac 	bl	80091d8 <__sfp_lock_acquire>
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <__sfp+0x84>)
 8009282:	681e      	ldr	r6, [r3, #0]
 8009284:	69b3      	ldr	r3, [r6, #24]
 8009286:	b913      	cbnz	r3, 800928e <__sfp+0x16>
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff ffbd 	bl	8009208 <__sinit>
 800928e:	3648      	adds	r6, #72	; 0x48
 8009290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009294:	3b01      	subs	r3, #1
 8009296:	d503      	bpl.n	80092a0 <__sfp+0x28>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	b30b      	cbz	r3, 80092e0 <__sfp+0x68>
 800929c:	6836      	ldr	r6, [r6, #0]
 800929e:	e7f7      	b.n	8009290 <__sfp+0x18>
 80092a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092a4:	b9d5      	cbnz	r5, 80092dc <__sfp+0x64>
 80092a6:	4b16      	ldr	r3, [pc, #88]	; (8009300 <__sfp+0x88>)
 80092a8:	60e3      	str	r3, [r4, #12]
 80092aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ae:	6665      	str	r5, [r4, #100]	; 0x64
 80092b0:	f000 f859 	bl	8009366 <__retarget_lock_init_recursive>
 80092b4:	f7ff ff96 	bl	80091e4 <__sfp_lock_release>
 80092b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092c0:	6025      	str	r5, [r4, #0]
 80092c2:	61a5      	str	r5, [r4, #24]
 80092c4:	2208      	movs	r2, #8
 80092c6:	4629      	mov	r1, r5
 80092c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092cc:	f7fb fae4 	bl	8004898 <memset>
 80092d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092d8:	4620      	mov	r0, r4
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	3468      	adds	r4, #104	; 0x68
 80092de:	e7d9      	b.n	8009294 <__sfp+0x1c>
 80092e0:	2104      	movs	r1, #4
 80092e2:	4638      	mov	r0, r7
 80092e4:	f7ff ff62 	bl	80091ac <__sfmoreglue>
 80092e8:	4604      	mov	r4, r0
 80092ea:	6030      	str	r0, [r6, #0]
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1d5      	bne.n	800929c <__sfp+0x24>
 80092f0:	f7ff ff78 	bl	80091e4 <__sfp_lock_release>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	e7ee      	b.n	80092d8 <__sfp+0x60>
 80092fa:	bf00      	nop
 80092fc:	08009d74 	.word	0x08009d74
 8009300:	ffff0001 	.word	0xffff0001

08009304 <fiprintf>:
 8009304:	b40e      	push	{r1, r2, r3}
 8009306:	b503      	push	{r0, r1, lr}
 8009308:	4601      	mov	r1, r0
 800930a:	ab03      	add	r3, sp, #12
 800930c:	4805      	ldr	r0, [pc, #20]	; (8009324 <fiprintf+0x20>)
 800930e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009312:	6800      	ldr	r0, [r0, #0]
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	f000 f8a7 	bl	8009468 <_vfiprintf_r>
 800931a:	b002      	add	sp, #8
 800931c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009320:	b003      	add	sp, #12
 8009322:	4770      	bx	lr
 8009324:	20000000 	.word	0x20000000

08009328 <_fwalk_reent>:
 8009328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800932c:	4606      	mov	r6, r0
 800932e:	4688      	mov	r8, r1
 8009330:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009334:	2700      	movs	r7, #0
 8009336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800933a:	f1b9 0901 	subs.w	r9, r9, #1
 800933e:	d505      	bpl.n	800934c <_fwalk_reent+0x24>
 8009340:	6824      	ldr	r4, [r4, #0]
 8009342:	2c00      	cmp	r4, #0
 8009344:	d1f7      	bne.n	8009336 <_fwalk_reent+0xe>
 8009346:	4638      	mov	r0, r7
 8009348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800934c:	89ab      	ldrh	r3, [r5, #12]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d907      	bls.n	8009362 <_fwalk_reent+0x3a>
 8009352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009356:	3301      	adds	r3, #1
 8009358:	d003      	beq.n	8009362 <_fwalk_reent+0x3a>
 800935a:	4629      	mov	r1, r5
 800935c:	4630      	mov	r0, r6
 800935e:	47c0      	blx	r8
 8009360:	4307      	orrs	r7, r0
 8009362:	3568      	adds	r5, #104	; 0x68
 8009364:	e7e9      	b.n	800933a <_fwalk_reent+0x12>

08009366 <__retarget_lock_init_recursive>:
 8009366:	4770      	bx	lr

08009368 <__retarget_lock_acquire_recursive>:
 8009368:	4770      	bx	lr

0800936a <__retarget_lock_release_recursive>:
 800936a:	4770      	bx	lr

0800936c <memmove>:
 800936c:	4288      	cmp	r0, r1
 800936e:	b510      	push	{r4, lr}
 8009370:	eb01 0402 	add.w	r4, r1, r2
 8009374:	d902      	bls.n	800937c <memmove+0x10>
 8009376:	4284      	cmp	r4, r0
 8009378:	4623      	mov	r3, r4
 800937a:	d807      	bhi.n	800938c <memmove+0x20>
 800937c:	1e43      	subs	r3, r0, #1
 800937e:	42a1      	cmp	r1, r4
 8009380:	d008      	beq.n	8009394 <memmove+0x28>
 8009382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800938a:	e7f8      	b.n	800937e <memmove+0x12>
 800938c:	4402      	add	r2, r0
 800938e:	4601      	mov	r1, r0
 8009390:	428a      	cmp	r2, r1
 8009392:	d100      	bne.n	8009396 <memmove+0x2a>
 8009394:	bd10      	pop	{r4, pc}
 8009396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800939a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800939e:	e7f7      	b.n	8009390 <memmove+0x24>

080093a0 <__malloc_lock>:
 80093a0:	4801      	ldr	r0, [pc, #4]	; (80093a8 <__malloc_lock+0x8>)
 80093a2:	f7ff bfe1 	b.w	8009368 <__retarget_lock_acquire_recursive>
 80093a6:	bf00      	nop
 80093a8:	20000508 	.word	0x20000508

080093ac <__malloc_unlock>:
 80093ac:	4801      	ldr	r0, [pc, #4]	; (80093b4 <__malloc_unlock+0x8>)
 80093ae:	f7ff bfdc 	b.w	800936a <__retarget_lock_release_recursive>
 80093b2:	bf00      	nop
 80093b4:	20000508 	.word	0x20000508

080093b8 <_realloc_r>:
 80093b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093bc:	4680      	mov	r8, r0
 80093be:	4614      	mov	r4, r2
 80093c0:	460e      	mov	r6, r1
 80093c2:	b921      	cbnz	r1, 80093ce <_realloc_r+0x16>
 80093c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	4611      	mov	r1, r2
 80093ca:	f7fe bfbd 	b.w	8008348 <_malloc_r>
 80093ce:	b92a      	cbnz	r2, 80093dc <_realloc_r+0x24>
 80093d0:	f7fe ff4e 	bl	8008270 <_free_r>
 80093d4:	4625      	mov	r5, r4
 80093d6:	4628      	mov	r0, r5
 80093d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093dc:	f000 faa0 	bl	8009920 <_malloc_usable_size_r>
 80093e0:	4284      	cmp	r4, r0
 80093e2:	4607      	mov	r7, r0
 80093e4:	d802      	bhi.n	80093ec <_realloc_r+0x34>
 80093e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093ea:	d812      	bhi.n	8009412 <_realloc_r+0x5a>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4640      	mov	r0, r8
 80093f0:	f7fe ffaa 	bl	8008348 <_malloc_r>
 80093f4:	4605      	mov	r5, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0ed      	beq.n	80093d6 <_realloc_r+0x1e>
 80093fa:	42bc      	cmp	r4, r7
 80093fc:	4622      	mov	r2, r4
 80093fe:	4631      	mov	r1, r6
 8009400:	bf28      	it	cs
 8009402:	463a      	movcs	r2, r7
 8009404:	f7fe fa4e 	bl	80078a4 <memcpy>
 8009408:	4631      	mov	r1, r6
 800940a:	4640      	mov	r0, r8
 800940c:	f7fe ff30 	bl	8008270 <_free_r>
 8009410:	e7e1      	b.n	80093d6 <_realloc_r+0x1e>
 8009412:	4635      	mov	r5, r6
 8009414:	e7df      	b.n	80093d6 <_realloc_r+0x1e>

08009416 <__sfputc_r>:
 8009416:	6893      	ldr	r3, [r2, #8]
 8009418:	3b01      	subs	r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	b410      	push	{r4}
 800941e:	6093      	str	r3, [r2, #8]
 8009420:	da08      	bge.n	8009434 <__sfputc_r+0x1e>
 8009422:	6994      	ldr	r4, [r2, #24]
 8009424:	42a3      	cmp	r3, r4
 8009426:	db01      	blt.n	800942c <__sfputc_r+0x16>
 8009428:	290a      	cmp	r1, #10
 800942a:	d103      	bne.n	8009434 <__sfputc_r+0x1e>
 800942c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009430:	f000 b94a 	b.w	80096c8 <__swbuf_r>
 8009434:	6813      	ldr	r3, [r2, #0]
 8009436:	1c58      	adds	r0, r3, #1
 8009438:	6010      	str	r0, [r2, #0]
 800943a:	7019      	strb	r1, [r3, #0]
 800943c:	4608      	mov	r0, r1
 800943e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009442:	4770      	bx	lr

08009444 <__sfputs_r>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	4606      	mov	r6, r0
 8009448:	460f      	mov	r7, r1
 800944a:	4614      	mov	r4, r2
 800944c:	18d5      	adds	r5, r2, r3
 800944e:	42ac      	cmp	r4, r5
 8009450:	d101      	bne.n	8009456 <__sfputs_r+0x12>
 8009452:	2000      	movs	r0, #0
 8009454:	e007      	b.n	8009466 <__sfputs_r+0x22>
 8009456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945a:	463a      	mov	r2, r7
 800945c:	4630      	mov	r0, r6
 800945e:	f7ff ffda 	bl	8009416 <__sfputc_r>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d1f3      	bne.n	800944e <__sfputs_r+0xa>
 8009466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009468 <_vfiprintf_r>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	460d      	mov	r5, r1
 800946e:	b09d      	sub	sp, #116	; 0x74
 8009470:	4614      	mov	r4, r2
 8009472:	4698      	mov	r8, r3
 8009474:	4606      	mov	r6, r0
 8009476:	b118      	cbz	r0, 8009480 <_vfiprintf_r+0x18>
 8009478:	6983      	ldr	r3, [r0, #24]
 800947a:	b90b      	cbnz	r3, 8009480 <_vfiprintf_r+0x18>
 800947c:	f7ff fec4 	bl	8009208 <__sinit>
 8009480:	4b89      	ldr	r3, [pc, #548]	; (80096a8 <_vfiprintf_r+0x240>)
 8009482:	429d      	cmp	r5, r3
 8009484:	d11b      	bne.n	80094be <_vfiprintf_r+0x56>
 8009486:	6875      	ldr	r5, [r6, #4]
 8009488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	d405      	bmi.n	800949a <_vfiprintf_r+0x32>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	059a      	lsls	r2, r3, #22
 8009492:	d402      	bmi.n	800949a <_vfiprintf_r+0x32>
 8009494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009496:	f7ff ff67 	bl	8009368 <__retarget_lock_acquire_recursive>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	071b      	lsls	r3, r3, #28
 800949e:	d501      	bpl.n	80094a4 <_vfiprintf_r+0x3c>
 80094a0:	692b      	ldr	r3, [r5, #16]
 80094a2:	b9eb      	cbnz	r3, 80094e0 <_vfiprintf_r+0x78>
 80094a4:	4629      	mov	r1, r5
 80094a6:	4630      	mov	r0, r6
 80094a8:	f000 f960 	bl	800976c <__swsetup_r>
 80094ac:	b1c0      	cbz	r0, 80094e0 <_vfiprintf_r+0x78>
 80094ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b0:	07dc      	lsls	r4, r3, #31
 80094b2:	d50e      	bpl.n	80094d2 <_vfiprintf_r+0x6a>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094b8:	b01d      	add	sp, #116	; 0x74
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094be:	4b7b      	ldr	r3, [pc, #492]	; (80096ac <_vfiprintf_r+0x244>)
 80094c0:	429d      	cmp	r5, r3
 80094c2:	d101      	bne.n	80094c8 <_vfiprintf_r+0x60>
 80094c4:	68b5      	ldr	r5, [r6, #8]
 80094c6:	e7df      	b.n	8009488 <_vfiprintf_r+0x20>
 80094c8:	4b79      	ldr	r3, [pc, #484]	; (80096b0 <_vfiprintf_r+0x248>)
 80094ca:	429d      	cmp	r5, r3
 80094cc:	bf08      	it	eq
 80094ce:	68f5      	ldreq	r5, [r6, #12]
 80094d0:	e7da      	b.n	8009488 <_vfiprintf_r+0x20>
 80094d2:	89ab      	ldrh	r3, [r5, #12]
 80094d4:	0598      	lsls	r0, r3, #22
 80094d6:	d4ed      	bmi.n	80094b4 <_vfiprintf_r+0x4c>
 80094d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094da:	f7ff ff46 	bl	800936a <__retarget_lock_release_recursive>
 80094de:	e7e9      	b.n	80094b4 <_vfiprintf_r+0x4c>
 80094e0:	2300      	movs	r3, #0
 80094e2:	9309      	str	r3, [sp, #36]	; 0x24
 80094e4:	2320      	movs	r3, #32
 80094e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ee:	2330      	movs	r3, #48	; 0x30
 80094f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096b4 <_vfiprintf_r+0x24c>
 80094f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094f8:	f04f 0901 	mov.w	r9, #1
 80094fc:	4623      	mov	r3, r4
 80094fe:	469a      	mov	sl, r3
 8009500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009504:	b10a      	cbz	r2, 800950a <_vfiprintf_r+0xa2>
 8009506:	2a25      	cmp	r2, #37	; 0x25
 8009508:	d1f9      	bne.n	80094fe <_vfiprintf_r+0x96>
 800950a:	ebba 0b04 	subs.w	fp, sl, r4
 800950e:	d00b      	beq.n	8009528 <_vfiprintf_r+0xc0>
 8009510:	465b      	mov	r3, fp
 8009512:	4622      	mov	r2, r4
 8009514:	4629      	mov	r1, r5
 8009516:	4630      	mov	r0, r6
 8009518:	f7ff ff94 	bl	8009444 <__sfputs_r>
 800951c:	3001      	adds	r0, #1
 800951e:	f000 80aa 	beq.w	8009676 <_vfiprintf_r+0x20e>
 8009522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009524:	445a      	add	r2, fp
 8009526:	9209      	str	r2, [sp, #36]	; 0x24
 8009528:	f89a 3000 	ldrb.w	r3, [sl]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80a2 	beq.w	8009676 <_vfiprintf_r+0x20e>
 8009532:	2300      	movs	r3, #0
 8009534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800953c:	f10a 0a01 	add.w	sl, sl, #1
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	9307      	str	r3, [sp, #28]
 8009544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009548:	931a      	str	r3, [sp, #104]	; 0x68
 800954a:	4654      	mov	r4, sl
 800954c:	2205      	movs	r2, #5
 800954e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009552:	4858      	ldr	r0, [pc, #352]	; (80096b4 <_vfiprintf_r+0x24c>)
 8009554:	f7f6 fe5c 	bl	8000210 <memchr>
 8009558:	9a04      	ldr	r2, [sp, #16]
 800955a:	b9d8      	cbnz	r0, 8009594 <_vfiprintf_r+0x12c>
 800955c:	06d1      	lsls	r1, r2, #27
 800955e:	bf44      	itt	mi
 8009560:	2320      	movmi	r3, #32
 8009562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009566:	0713      	lsls	r3, r2, #28
 8009568:	bf44      	itt	mi
 800956a:	232b      	movmi	r3, #43	; 0x2b
 800956c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009570:	f89a 3000 	ldrb.w	r3, [sl]
 8009574:	2b2a      	cmp	r3, #42	; 0x2a
 8009576:	d015      	beq.n	80095a4 <_vfiprintf_r+0x13c>
 8009578:	9a07      	ldr	r2, [sp, #28]
 800957a:	4654      	mov	r4, sl
 800957c:	2000      	movs	r0, #0
 800957e:	f04f 0c0a 	mov.w	ip, #10
 8009582:	4621      	mov	r1, r4
 8009584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009588:	3b30      	subs	r3, #48	; 0x30
 800958a:	2b09      	cmp	r3, #9
 800958c:	d94e      	bls.n	800962c <_vfiprintf_r+0x1c4>
 800958e:	b1b0      	cbz	r0, 80095be <_vfiprintf_r+0x156>
 8009590:	9207      	str	r2, [sp, #28]
 8009592:	e014      	b.n	80095be <_vfiprintf_r+0x156>
 8009594:	eba0 0308 	sub.w	r3, r0, r8
 8009598:	fa09 f303 	lsl.w	r3, r9, r3
 800959c:	4313      	orrs	r3, r2
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	46a2      	mov	sl, r4
 80095a2:	e7d2      	b.n	800954a <_vfiprintf_r+0xe2>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	1d19      	adds	r1, r3, #4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	9103      	str	r1, [sp, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	bfbb      	ittet	lt
 80095b0:	425b      	neglt	r3, r3
 80095b2:	f042 0202 	orrlt.w	r2, r2, #2
 80095b6:	9307      	strge	r3, [sp, #28]
 80095b8:	9307      	strlt	r3, [sp, #28]
 80095ba:	bfb8      	it	lt
 80095bc:	9204      	strlt	r2, [sp, #16]
 80095be:	7823      	ldrb	r3, [r4, #0]
 80095c0:	2b2e      	cmp	r3, #46	; 0x2e
 80095c2:	d10c      	bne.n	80095de <_vfiprintf_r+0x176>
 80095c4:	7863      	ldrb	r3, [r4, #1]
 80095c6:	2b2a      	cmp	r3, #42	; 0x2a
 80095c8:	d135      	bne.n	8009636 <_vfiprintf_r+0x1ce>
 80095ca:	9b03      	ldr	r3, [sp, #12]
 80095cc:	1d1a      	adds	r2, r3, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	9203      	str	r2, [sp, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bfb8      	it	lt
 80095d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095da:	3402      	adds	r4, #2
 80095dc:	9305      	str	r3, [sp, #20]
 80095de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096c4 <_vfiprintf_r+0x25c>
 80095e2:	7821      	ldrb	r1, [r4, #0]
 80095e4:	2203      	movs	r2, #3
 80095e6:	4650      	mov	r0, sl
 80095e8:	f7f6 fe12 	bl	8000210 <memchr>
 80095ec:	b140      	cbz	r0, 8009600 <_vfiprintf_r+0x198>
 80095ee:	2340      	movs	r3, #64	; 0x40
 80095f0:	eba0 000a 	sub.w	r0, r0, sl
 80095f4:	fa03 f000 	lsl.w	r0, r3, r0
 80095f8:	9b04      	ldr	r3, [sp, #16]
 80095fa:	4303      	orrs	r3, r0
 80095fc:	3401      	adds	r4, #1
 80095fe:	9304      	str	r3, [sp, #16]
 8009600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009604:	482c      	ldr	r0, [pc, #176]	; (80096b8 <_vfiprintf_r+0x250>)
 8009606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800960a:	2206      	movs	r2, #6
 800960c:	f7f6 fe00 	bl	8000210 <memchr>
 8009610:	2800      	cmp	r0, #0
 8009612:	d03f      	beq.n	8009694 <_vfiprintf_r+0x22c>
 8009614:	4b29      	ldr	r3, [pc, #164]	; (80096bc <_vfiprintf_r+0x254>)
 8009616:	bb1b      	cbnz	r3, 8009660 <_vfiprintf_r+0x1f8>
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	3307      	adds	r3, #7
 800961c:	f023 0307 	bic.w	r3, r3, #7
 8009620:	3308      	adds	r3, #8
 8009622:	9303      	str	r3, [sp, #12]
 8009624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009626:	443b      	add	r3, r7
 8009628:	9309      	str	r3, [sp, #36]	; 0x24
 800962a:	e767      	b.n	80094fc <_vfiprintf_r+0x94>
 800962c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009630:	460c      	mov	r4, r1
 8009632:	2001      	movs	r0, #1
 8009634:	e7a5      	b.n	8009582 <_vfiprintf_r+0x11a>
 8009636:	2300      	movs	r3, #0
 8009638:	3401      	adds	r4, #1
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	4619      	mov	r1, r3
 800963e:	f04f 0c0a 	mov.w	ip, #10
 8009642:	4620      	mov	r0, r4
 8009644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009648:	3a30      	subs	r2, #48	; 0x30
 800964a:	2a09      	cmp	r2, #9
 800964c:	d903      	bls.n	8009656 <_vfiprintf_r+0x1ee>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0c5      	beq.n	80095de <_vfiprintf_r+0x176>
 8009652:	9105      	str	r1, [sp, #20]
 8009654:	e7c3      	b.n	80095de <_vfiprintf_r+0x176>
 8009656:	fb0c 2101 	mla	r1, ip, r1, r2
 800965a:	4604      	mov	r4, r0
 800965c:	2301      	movs	r3, #1
 800965e:	e7f0      	b.n	8009642 <_vfiprintf_r+0x1da>
 8009660:	ab03      	add	r3, sp, #12
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	462a      	mov	r2, r5
 8009666:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <_vfiprintf_r+0x258>)
 8009668:	a904      	add	r1, sp, #16
 800966a:	4630      	mov	r0, r6
 800966c:	f7fb f9bc 	bl	80049e8 <_printf_float>
 8009670:	4607      	mov	r7, r0
 8009672:	1c78      	adds	r0, r7, #1
 8009674:	d1d6      	bne.n	8009624 <_vfiprintf_r+0x1bc>
 8009676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009678:	07d9      	lsls	r1, r3, #31
 800967a:	d405      	bmi.n	8009688 <_vfiprintf_r+0x220>
 800967c:	89ab      	ldrh	r3, [r5, #12]
 800967e:	059a      	lsls	r2, r3, #22
 8009680:	d402      	bmi.n	8009688 <_vfiprintf_r+0x220>
 8009682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009684:	f7ff fe71 	bl	800936a <__retarget_lock_release_recursive>
 8009688:	89ab      	ldrh	r3, [r5, #12]
 800968a:	065b      	lsls	r3, r3, #25
 800968c:	f53f af12 	bmi.w	80094b4 <_vfiprintf_r+0x4c>
 8009690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009692:	e711      	b.n	80094b8 <_vfiprintf_r+0x50>
 8009694:	ab03      	add	r3, sp, #12
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	462a      	mov	r2, r5
 800969a:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <_vfiprintf_r+0x258>)
 800969c:	a904      	add	r1, sp, #16
 800969e:	4630      	mov	r0, r6
 80096a0:	f7fb fc46 	bl	8004f30 <_printf_i>
 80096a4:	e7e4      	b.n	8009670 <_vfiprintf_r+0x208>
 80096a6:	bf00      	nop
 80096a8:	0800a1ec 	.word	0x0800a1ec
 80096ac:	0800a20c 	.word	0x0800a20c
 80096b0:	0800a1cc 	.word	0x0800a1cc
 80096b4:	0800a164 	.word	0x0800a164
 80096b8:	0800a16e 	.word	0x0800a16e
 80096bc:	080049e9 	.word	0x080049e9
 80096c0:	08009445 	.word	0x08009445
 80096c4:	0800a16a 	.word	0x0800a16a

080096c8 <__swbuf_r>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	460e      	mov	r6, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	4605      	mov	r5, r0
 80096d0:	b118      	cbz	r0, 80096da <__swbuf_r+0x12>
 80096d2:	6983      	ldr	r3, [r0, #24]
 80096d4:	b90b      	cbnz	r3, 80096da <__swbuf_r+0x12>
 80096d6:	f7ff fd97 	bl	8009208 <__sinit>
 80096da:	4b21      	ldr	r3, [pc, #132]	; (8009760 <__swbuf_r+0x98>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	d12b      	bne.n	8009738 <__swbuf_r+0x70>
 80096e0:	686c      	ldr	r4, [r5, #4]
 80096e2:	69a3      	ldr	r3, [r4, #24]
 80096e4:	60a3      	str	r3, [r4, #8]
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	071a      	lsls	r2, r3, #28
 80096ea:	d52f      	bpl.n	800974c <__swbuf_r+0x84>
 80096ec:	6923      	ldr	r3, [r4, #16]
 80096ee:	b36b      	cbz	r3, 800974c <__swbuf_r+0x84>
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	6820      	ldr	r0, [r4, #0]
 80096f4:	1ac0      	subs	r0, r0, r3
 80096f6:	6963      	ldr	r3, [r4, #20]
 80096f8:	b2f6      	uxtb	r6, r6
 80096fa:	4283      	cmp	r3, r0
 80096fc:	4637      	mov	r7, r6
 80096fe:	dc04      	bgt.n	800970a <__swbuf_r+0x42>
 8009700:	4621      	mov	r1, r4
 8009702:	4628      	mov	r0, r5
 8009704:	f7ff fcec 	bl	80090e0 <_fflush_r>
 8009708:	bb30      	cbnz	r0, 8009758 <__swbuf_r+0x90>
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	3b01      	subs	r3, #1
 800970e:	60a3      	str	r3, [r4, #8]
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	6022      	str	r2, [r4, #0]
 8009716:	701e      	strb	r6, [r3, #0]
 8009718:	6963      	ldr	r3, [r4, #20]
 800971a:	3001      	adds	r0, #1
 800971c:	4283      	cmp	r3, r0
 800971e:	d004      	beq.n	800972a <__swbuf_r+0x62>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	07db      	lsls	r3, r3, #31
 8009724:	d506      	bpl.n	8009734 <__swbuf_r+0x6c>
 8009726:	2e0a      	cmp	r6, #10
 8009728:	d104      	bne.n	8009734 <__swbuf_r+0x6c>
 800972a:	4621      	mov	r1, r4
 800972c:	4628      	mov	r0, r5
 800972e:	f7ff fcd7 	bl	80090e0 <_fflush_r>
 8009732:	b988      	cbnz	r0, 8009758 <__swbuf_r+0x90>
 8009734:	4638      	mov	r0, r7
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009738:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <__swbuf_r+0x9c>)
 800973a:	429c      	cmp	r4, r3
 800973c:	d101      	bne.n	8009742 <__swbuf_r+0x7a>
 800973e:	68ac      	ldr	r4, [r5, #8]
 8009740:	e7cf      	b.n	80096e2 <__swbuf_r+0x1a>
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <__swbuf_r+0xa0>)
 8009744:	429c      	cmp	r4, r3
 8009746:	bf08      	it	eq
 8009748:	68ec      	ldreq	r4, [r5, #12]
 800974a:	e7ca      	b.n	80096e2 <__swbuf_r+0x1a>
 800974c:	4621      	mov	r1, r4
 800974e:	4628      	mov	r0, r5
 8009750:	f000 f80c 	bl	800976c <__swsetup_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	d0cb      	beq.n	80096f0 <__swbuf_r+0x28>
 8009758:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800975c:	e7ea      	b.n	8009734 <__swbuf_r+0x6c>
 800975e:	bf00      	nop
 8009760:	0800a1ec 	.word	0x0800a1ec
 8009764:	0800a20c 	.word	0x0800a20c
 8009768:	0800a1cc 	.word	0x0800a1cc

0800976c <__swsetup_r>:
 800976c:	4b32      	ldr	r3, [pc, #200]	; (8009838 <__swsetup_r+0xcc>)
 800976e:	b570      	push	{r4, r5, r6, lr}
 8009770:	681d      	ldr	r5, [r3, #0]
 8009772:	4606      	mov	r6, r0
 8009774:	460c      	mov	r4, r1
 8009776:	b125      	cbz	r5, 8009782 <__swsetup_r+0x16>
 8009778:	69ab      	ldr	r3, [r5, #24]
 800977a:	b913      	cbnz	r3, 8009782 <__swsetup_r+0x16>
 800977c:	4628      	mov	r0, r5
 800977e:	f7ff fd43 	bl	8009208 <__sinit>
 8009782:	4b2e      	ldr	r3, [pc, #184]	; (800983c <__swsetup_r+0xd0>)
 8009784:	429c      	cmp	r4, r3
 8009786:	d10f      	bne.n	80097a8 <__swsetup_r+0x3c>
 8009788:	686c      	ldr	r4, [r5, #4]
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009790:	0719      	lsls	r1, r3, #28
 8009792:	d42c      	bmi.n	80097ee <__swsetup_r+0x82>
 8009794:	06dd      	lsls	r5, r3, #27
 8009796:	d411      	bmi.n	80097bc <__swsetup_r+0x50>
 8009798:	2309      	movs	r3, #9
 800979a:	6033      	str	r3, [r6, #0]
 800979c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097a6:	e03e      	b.n	8009826 <__swsetup_r+0xba>
 80097a8:	4b25      	ldr	r3, [pc, #148]	; (8009840 <__swsetup_r+0xd4>)
 80097aa:	429c      	cmp	r4, r3
 80097ac:	d101      	bne.n	80097b2 <__swsetup_r+0x46>
 80097ae:	68ac      	ldr	r4, [r5, #8]
 80097b0:	e7eb      	b.n	800978a <__swsetup_r+0x1e>
 80097b2:	4b24      	ldr	r3, [pc, #144]	; (8009844 <__swsetup_r+0xd8>)
 80097b4:	429c      	cmp	r4, r3
 80097b6:	bf08      	it	eq
 80097b8:	68ec      	ldreq	r4, [r5, #12]
 80097ba:	e7e6      	b.n	800978a <__swsetup_r+0x1e>
 80097bc:	0758      	lsls	r0, r3, #29
 80097be:	d512      	bpl.n	80097e6 <__swsetup_r+0x7a>
 80097c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097c2:	b141      	cbz	r1, 80097d6 <__swsetup_r+0x6a>
 80097c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097c8:	4299      	cmp	r1, r3
 80097ca:	d002      	beq.n	80097d2 <__swsetup_r+0x66>
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7fe fd4f 	bl	8008270 <_free_r>
 80097d2:	2300      	movs	r3, #0
 80097d4:	6363      	str	r3, [r4, #52]	; 0x34
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097dc:	81a3      	strh	r3, [r4, #12]
 80097de:	2300      	movs	r3, #0
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	6923      	ldr	r3, [r4, #16]
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f043 0308 	orr.w	r3, r3, #8
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	b94b      	cbnz	r3, 8009806 <__swsetup_r+0x9a>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fc:	d003      	beq.n	8009806 <__swsetup_r+0x9a>
 80097fe:	4621      	mov	r1, r4
 8009800:	4630      	mov	r0, r6
 8009802:	f000 f84d 	bl	80098a0 <__smakebuf_r>
 8009806:	89a0      	ldrh	r0, [r4, #12]
 8009808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800980c:	f010 0301 	ands.w	r3, r0, #1
 8009810:	d00a      	beq.n	8009828 <__swsetup_r+0xbc>
 8009812:	2300      	movs	r3, #0
 8009814:	60a3      	str	r3, [r4, #8]
 8009816:	6963      	ldr	r3, [r4, #20]
 8009818:	425b      	negs	r3, r3
 800981a:	61a3      	str	r3, [r4, #24]
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	b943      	cbnz	r3, 8009832 <__swsetup_r+0xc6>
 8009820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009824:	d1ba      	bne.n	800979c <__swsetup_r+0x30>
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	0781      	lsls	r1, r0, #30
 800982a:	bf58      	it	pl
 800982c:	6963      	ldrpl	r3, [r4, #20]
 800982e:	60a3      	str	r3, [r4, #8]
 8009830:	e7f4      	b.n	800981c <__swsetup_r+0xb0>
 8009832:	2000      	movs	r0, #0
 8009834:	e7f7      	b.n	8009826 <__swsetup_r+0xba>
 8009836:	bf00      	nop
 8009838:	20000000 	.word	0x20000000
 800983c:	0800a1ec 	.word	0x0800a1ec
 8009840:	0800a20c 	.word	0x0800a20c
 8009844:	0800a1cc 	.word	0x0800a1cc

08009848 <abort>:
 8009848:	b508      	push	{r3, lr}
 800984a:	2006      	movs	r0, #6
 800984c:	f000 f898 	bl	8009980 <raise>
 8009850:	2001      	movs	r0, #1
 8009852:	f7f7 ffb9 	bl	80017c8 <_exit>

08009856 <__swhatbuf_r>:
 8009856:	b570      	push	{r4, r5, r6, lr}
 8009858:	460e      	mov	r6, r1
 800985a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985e:	2900      	cmp	r1, #0
 8009860:	b096      	sub	sp, #88	; 0x58
 8009862:	4614      	mov	r4, r2
 8009864:	461d      	mov	r5, r3
 8009866:	da08      	bge.n	800987a <__swhatbuf_r+0x24>
 8009868:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	602a      	str	r2, [r5, #0]
 8009870:	061a      	lsls	r2, r3, #24
 8009872:	d410      	bmi.n	8009896 <__swhatbuf_r+0x40>
 8009874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009878:	e00e      	b.n	8009898 <__swhatbuf_r+0x42>
 800987a:	466a      	mov	r2, sp
 800987c:	f000 f89c 	bl	80099b8 <_fstat_r>
 8009880:	2800      	cmp	r0, #0
 8009882:	dbf1      	blt.n	8009868 <__swhatbuf_r+0x12>
 8009884:	9a01      	ldr	r2, [sp, #4]
 8009886:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800988a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800988e:	425a      	negs	r2, r3
 8009890:	415a      	adcs	r2, r3
 8009892:	602a      	str	r2, [r5, #0]
 8009894:	e7ee      	b.n	8009874 <__swhatbuf_r+0x1e>
 8009896:	2340      	movs	r3, #64	; 0x40
 8009898:	2000      	movs	r0, #0
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	b016      	add	sp, #88	; 0x58
 800989e:	bd70      	pop	{r4, r5, r6, pc}

080098a0 <__smakebuf_r>:
 80098a0:	898b      	ldrh	r3, [r1, #12]
 80098a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098a4:	079d      	lsls	r5, r3, #30
 80098a6:	4606      	mov	r6, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	d507      	bpl.n	80098bc <__smakebuf_r+0x1c>
 80098ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	6123      	str	r3, [r4, #16]
 80098b4:	2301      	movs	r3, #1
 80098b6:	6163      	str	r3, [r4, #20]
 80098b8:	b002      	add	sp, #8
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	ab01      	add	r3, sp, #4
 80098be:	466a      	mov	r2, sp
 80098c0:	f7ff ffc9 	bl	8009856 <__swhatbuf_r>
 80098c4:	9900      	ldr	r1, [sp, #0]
 80098c6:	4605      	mov	r5, r0
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7fe fd3d 	bl	8008348 <_malloc_r>
 80098ce:	b948      	cbnz	r0, 80098e4 <__smakebuf_r+0x44>
 80098d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d4:	059a      	lsls	r2, r3, #22
 80098d6:	d4ef      	bmi.n	80098b8 <__smakebuf_r+0x18>
 80098d8:	f023 0303 	bic.w	r3, r3, #3
 80098dc:	f043 0302 	orr.w	r3, r3, #2
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	e7e3      	b.n	80098ac <__smakebuf_r+0xc>
 80098e4:	4b0d      	ldr	r3, [pc, #52]	; (800991c <__smakebuf_r+0x7c>)
 80098e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	6020      	str	r0, [r4, #0]
 80098ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	6163      	str	r3, [r4, #20]
 80098f6:	9b01      	ldr	r3, [sp, #4]
 80098f8:	6120      	str	r0, [r4, #16]
 80098fa:	b15b      	cbz	r3, 8009914 <__smakebuf_r+0x74>
 80098fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009900:	4630      	mov	r0, r6
 8009902:	f000 f86b 	bl	80099dc <_isatty_r>
 8009906:	b128      	cbz	r0, 8009914 <__smakebuf_r+0x74>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	89a0      	ldrh	r0, [r4, #12]
 8009916:	4305      	orrs	r5, r0
 8009918:	81a5      	strh	r5, [r4, #12]
 800991a:	e7cd      	b.n	80098b8 <__smakebuf_r+0x18>
 800991c:	080091a1 	.word	0x080091a1

08009920 <_malloc_usable_size_r>:
 8009920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009924:	1f18      	subs	r0, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfbc      	itt	lt
 800992a:	580b      	ldrlt	r3, [r1, r0]
 800992c:	18c0      	addlt	r0, r0, r3
 800992e:	4770      	bx	lr

08009930 <_raise_r>:
 8009930:	291f      	cmp	r1, #31
 8009932:	b538      	push	{r3, r4, r5, lr}
 8009934:	4604      	mov	r4, r0
 8009936:	460d      	mov	r5, r1
 8009938:	d904      	bls.n	8009944 <_raise_r+0x14>
 800993a:	2316      	movs	r3, #22
 800993c:	6003      	str	r3, [r0, #0]
 800993e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009946:	b112      	cbz	r2, 800994e <_raise_r+0x1e>
 8009948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800994c:	b94b      	cbnz	r3, 8009962 <_raise_r+0x32>
 800994e:	4620      	mov	r0, r4
 8009950:	f000 f830 	bl	80099b4 <_getpid_r>
 8009954:	462a      	mov	r2, r5
 8009956:	4601      	mov	r1, r0
 8009958:	4620      	mov	r0, r4
 800995a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800995e:	f000 b817 	b.w	8009990 <_kill_r>
 8009962:	2b01      	cmp	r3, #1
 8009964:	d00a      	beq.n	800997c <_raise_r+0x4c>
 8009966:	1c59      	adds	r1, r3, #1
 8009968:	d103      	bne.n	8009972 <_raise_r+0x42>
 800996a:	2316      	movs	r3, #22
 800996c:	6003      	str	r3, [r0, #0]
 800996e:	2001      	movs	r0, #1
 8009970:	e7e7      	b.n	8009942 <_raise_r+0x12>
 8009972:	2400      	movs	r4, #0
 8009974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009978:	4628      	mov	r0, r5
 800997a:	4798      	blx	r3
 800997c:	2000      	movs	r0, #0
 800997e:	e7e0      	b.n	8009942 <_raise_r+0x12>

08009980 <raise>:
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <raise+0xc>)
 8009982:	4601      	mov	r1, r0
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	f7ff bfd3 	b.w	8009930 <_raise_r>
 800998a:	bf00      	nop
 800998c:	20000000 	.word	0x20000000

08009990 <_kill_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_kill_r+0x20>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	f7f7 ff03 	bl	80017a8 <_kill>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	d102      	bne.n	80099ac <_kill_r+0x1c>
 80099a6:	682b      	ldr	r3, [r5, #0]
 80099a8:	b103      	cbz	r3, 80099ac <_kill_r+0x1c>
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	bd38      	pop	{r3, r4, r5, pc}
 80099ae:	bf00      	nop
 80099b0:	20000504 	.word	0x20000504

080099b4 <_getpid_r>:
 80099b4:	f7f7 bef0 	b.w	8001798 <_getpid>

080099b8 <_fstat_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	; (80099d8 <_fstat_r+0x20>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	4611      	mov	r1, r2
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	f7f7 ff4e 	bl	8001866 <_fstat>
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	d102      	bne.n	80099d4 <_fstat_r+0x1c>
 80099ce:	682b      	ldr	r3, [r5, #0]
 80099d0:	b103      	cbz	r3, 80099d4 <_fstat_r+0x1c>
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	bd38      	pop	{r3, r4, r5, pc}
 80099d6:	bf00      	nop
 80099d8:	20000504 	.word	0x20000504

080099dc <_isatty_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4d06      	ldr	r5, [pc, #24]	; (80099f8 <_isatty_r+0x1c>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	f7f7 ff4d 	bl	8001886 <_isatty>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_isatty_r+0x1a>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_isatty_r+0x1a>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	20000504 	.word	0x20000504

080099fc <_init>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	bf00      	nop
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr

08009a08 <_fini>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	bf00      	nop
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr
